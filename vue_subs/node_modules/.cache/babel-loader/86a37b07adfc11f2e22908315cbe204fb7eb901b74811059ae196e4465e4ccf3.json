{"ast":null,"code":"/**\r\n * Rectangular pattern module.\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\nimport { Pattern } from \"./Pattern\";\nimport { registry } from \"../../Registry\";\n;\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n/**\r\n * Rectangular pattern\r\n */\nvar RectPattern = /** @class */function (_super) {\n  __extends(RectPattern, _super);\n  /**\r\n   * Constructor\r\n   */\n  function RectPattern() {\n    var _this = _super.call(this) || this;\n    _this.rectHeight = 1;\n    _this.rectWidth = 1;\n    _this._rect = _this.paper.add(\"rect\");\n    _this.addElement(_this._rect);\n    return _this;\n  }\n  /**\r\n   * Draws the rectangular element.\r\n   */\n  RectPattern.prototype.draw = function () {\n    _super.prototype.draw.call(this);\n    this.properties[\"rotationX\"] = this.width / 2;\n    this.properties[\"rotationY\"] = this.height / 2;\n    if (this._rect) {\n      this._rect.attr({\n        \"width\": this.rectWidth,\n        \"height\": this.rectHeight,\n        \"x\": (this.width - this.rectWidth) / 2,\n        \"y\": (this.height - this.rectHeight) / 2\n      });\n    }\n  };\n  Object.defineProperty(RectPattern.prototype, \"rectWidth\", {\n    /**\r\n     * @return Width (px)\r\n     */\n    get: function () {\n      return this.properties[\"rectWidth\"];\n    },\n    /**\r\n     * Rectangle width in pixels.\r\n     *\r\n     * @param value Width (px)\r\n     */\n    set: function (value) {\n      this.properties[\"rectWidth\"] = value;\n      this.draw();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(RectPattern.prototype, \"rectHeight\", {\n    /**\r\n     * @return Height (px)\r\n     */\n    get: function () {\n      return this.properties[\"rectHeight\"];\n    },\n    /**\r\n     * Rectangle height in pixels.\r\n     *\r\n     * @param value Height (px)\r\n     */\n    set: function (value) {\n      this.properties[\"rectHeight\"] = value;\n      this.draw();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return RectPattern;\n}(Pattern);\nexport { RectPattern };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\nregistry.registeredClasses[\"RectPattern\"] = RectPattern;","map":{"version":3,"names":["Pattern","registry","RectPattern","_super","__extends","_this","call","rectHeight","rectWidth","_rect","paper","add","addElement","prototype","draw","properties","width","height","attr","Object","defineProperty","get","set","value","registeredClasses"],"sources":["../../../../../../src/.internal/core/rendering/fills/RectPattern.ts"],"sourcesContent":["/**\r\n * Rectangular pattern module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Pattern, PatternProperties } from \"./Pattern\";\r\nimport { AMElement } from \"../AMElement\";\r\nimport { registry } from \"../../Registry\";\r\nimport * as $type from \"../../utils/Type\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for rectangular pattern\r\n */\r\nexport interface RectPatternProperties extends PatternProperties {\r\n\trectWidth: number;\r\n\trectHeight: number;\r\n};\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Rectangular pattern\r\n */\r\nexport class RectPattern extends Pattern {\r\n\r\n\t/**\r\n\t * Reference to `<rect>` element used in pattern.\r\n\t */\r\n\tprotected _rect: $type.Optional<AMElement>;\r\n\r\n\t/**\r\n\t * Defines property types.\r\n\t */\r\n\tpublic _properties!: RectPatternProperties;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.rectHeight = 1;\r\n\t\tthis.rectWidth = 1;\r\n\t\tthis._rect = this.paper.add(\"rect\");\r\n\t\tthis.addElement(this._rect);\r\n\t}\r\n\r\n\t/**\r\n\t * Draws the rectangular element.\r\n\t */\r\n\tprotected draw(): void {\r\n\t\tsuper.draw();\r\n\t\tthis.properties[\"rotationX\"] = this.width / 2;\r\n\t\tthis.properties[\"rotationY\"] = this.height / 2;\t\t\r\n\t\tif (this._rect) {\r\n\t\t\tthis._rect.attr({ \"width\": this.rectWidth, \"height\": this.rectHeight, \"x\":(this.width - this.rectWidth) / 2, \"y\":(this.height - this.rectHeight) / 2 });\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Rectangle width in pixels.\r\n\t *\r\n\t * @param value Width (px)\r\n\t */\r\n\tpublic set rectWidth(value: number) {\r\n\t\tthis.properties[\"rectWidth\"] = value;\r\n\t\tthis.draw();\r\n\t}\r\n\r\n\t/**\r\n\t * @return Width (px)\r\n\t */\r\n\tpublic get rectWidth(): number {\r\n\t\treturn this.properties[\"rectWidth\"];\r\n\t}\r\n\r\n\t/**\r\n\t * Rectangle height in pixels.\r\n\t *\r\n\t * @param value Height (px)\r\n\t */\r\n\tpublic set rectHeight(value: number) {\r\n\t\tthis.properties[\"rectHeight\"] = value;\r\n\t\tthis.draw();\r\n\t}\r\n\r\n\t/**\r\n\t * @return Height (px)\r\n\t */\r\n\tpublic get rectHeight(): number {\r\n\t\treturn this.properties[\"rectHeight\"];\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"RectPattern\"] = RectPattern;\r\n"],"mappings":"AAAA;;;;AAIA;;;;;;AAMA,SAASA,OAAO,QAA2B,WAAW;AAEtD,SAASC,QAAQ,QAAQ,gBAAgB;AAiBxC;AAGD;;;;;;AAOA;;;AAGA,IAAAC,WAAA,0BAAAC,MAAA;EAAiCC,SAAA,CAAAF,WAAA,EAAAC,MAAA;EAYhC;;;EAGA,SAAAD,YAAA;IAAA,IAAAG,KAAA,GACCF,MAAA,CAAAG,IAAA,MAAO;IACPD,KAAI,CAACE,UAAU,GAAG,CAAC;IACnBF,KAAI,CAACG,SAAS,GAAG,CAAC;IAClBH,KAAI,CAACI,KAAK,GAAGJ,KAAI,CAACK,KAAK,CAACC,GAAG,CAAC,MAAM,CAAC;IACnCN,KAAI,CAACO,UAAU,CAACP,KAAI,CAACI,KAAK,CAAC;;EAC5B;EAEA;;;EAGUP,WAAA,CAAAW,SAAA,CAAAC,IAAI,GAAd;IACCX,MAAA,CAAAU,SAAA,CAAMC,IAAI,CAAAR,IAAA,MAAE;IACZ,IAAI,CAACS,UAAU,CAAC,WAAW,CAAC,GAAG,IAAI,CAACC,KAAK,GAAG,CAAC;IAC7C,IAAI,CAACD,UAAU,CAAC,WAAW,CAAC,GAAG,IAAI,CAACE,MAAM,GAAG,CAAC;IAC9C,IAAI,IAAI,CAACR,KAAK,EAAE;MACf,IAAI,CAACA,KAAK,CAACS,IAAI,CAAC;QAAE,OAAO,EAAE,IAAI,CAACV,SAAS;QAAE,QAAQ,EAAE,IAAI,CAACD,UAAU;QAAE,GAAG,EAAC,CAAC,IAAI,CAACS,KAAK,GAAG,IAAI,CAACR,SAAS,IAAI,CAAC;QAAE,GAAG,EAAC,CAAC,IAAI,CAACS,MAAM,GAAG,IAAI,CAACV,UAAU,IAAI;MAAC,CAAE,CAAC;;EAEzJ,CAAC;EAODY,MAAA,CAAAC,cAAA,CAAWlB,WAAA,CAAAW,SAAA,aAAS;IAKpB;;;SAGA,SAAAQ,CAAA;MACC,OAAO,IAAI,CAACN,UAAU,CAAC,WAAW,CAAC;IACpC,CAAC;IAfD;;;;;SAKA,SAAAO,CAAqBC,KAAa;MACjC,IAAI,CAACR,UAAU,CAAC,WAAW,CAAC,GAAGQ,KAAK;MACpC,IAAI,CAACT,IAAI,EAAE;IACZ,CAAC;;;;EAcDK,MAAA,CAAAC,cAAA,CAAWlB,WAAA,CAAAW,SAAA,cAAU;IAKrB;;;SAGA,SAAAQ,CAAA;MACC,OAAO,IAAI,CAACN,UAAU,CAAC,YAAY,CAAC;IACrC,CAAC;IAfD;;;;;SAKA,SAAAO,CAAsBC,KAAa;MAClC,IAAI,CAACR,UAAU,CAAC,YAAY,CAAC,GAAGQ,KAAK;MACrC,IAAI,CAACT,IAAI,EAAE;IACZ,CAAC;;;;EASF,OAAAZ,WAAC;AAAD,CAAC,CArEgCF,OAAO;;AAuExC;;;;;;AAMAC,QAAQ,CAACuB,iBAAiB,CAAC,aAAa,CAAC,GAAGtB,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}