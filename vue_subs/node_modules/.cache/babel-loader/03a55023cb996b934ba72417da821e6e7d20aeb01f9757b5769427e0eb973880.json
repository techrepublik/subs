{"ast":null,"code":"/**\r\n * Rounded rectangle module.\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\nimport { Sprite } from \"../Sprite\";\nimport { registry } from \"../Registry\";\nimport * as $math from \"../utils/Math\";\nimport * as $type from \"../utils/Type\";\nimport * as $utils from \"../utils/Utils\";\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n/**\r\n * Draws a rectangle with rounded corners.\r\n *\r\n * @see {@link IRoundedRectangleEvents} for a list of available events\r\n * @see {@link IRoundedRectangleAdapters} for a list of available Adapters\r\n */\nvar RoundedRectangle = /** @class */function (_super) {\n  __extends(RoundedRectangle, _super);\n  /**\r\n   * Constructor\r\n   */\n  function RoundedRectangle() {\n    var _this = _super.call(this) || this;\n    _this.className = \"RoundedRectangle\";\n    _this.element = _this.paper.add(\"path\");\n    _this.cornerRadius(3, 3, 3, 3);\n    _this.applyTheme();\n    return _this;\n  }\n  /**\r\n   * Draws the element.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  RoundedRectangle.prototype.draw = function () {\n    _super.prototype.draw.call(this);\n    var w = this.innerWidth;\n    var h = this.innerHeight;\n    if ($type.isNumber(w) && $type.isNumber(h)) {\n      var minSide = $math.min(w, h) / 2;\n      var cornerRadiusTopLeft = $utils.relativeToValue(this.cornerRadiusTopLeft, minSide);\n      var cornerRadiusTopRight = $utils.relativeToValue(this.cornerRadiusTopRight, minSide);\n      var cornerRadiusBottomRight = $utils.relativeToValue(this.cornerRadiusBottomRight, minSide);\n      var cornerRadiusBottomLeft = $utils.relativeToValue(this.cornerRadiusBottomLeft, minSide);\n      var maxcr = $math.min(Math.abs(w / 2), Math.abs(h / 2));\n      var crtl = $math.fitToRange(cornerRadiusTopLeft, 0, maxcr);\n      var crtr = $math.fitToRange(cornerRadiusTopRight, 0, maxcr);\n      var crbr = $math.fitToRange(cornerRadiusBottomRight, 0, maxcr);\n      var crbl = $math.fitToRange(cornerRadiusBottomLeft, 0, maxcr);\n      var lineT = \"M\" + crtl + \",0 L\" + (w - crtr) + \",0\";\n      var lineB = \" L\" + crbl + \",\" + h;\n      var lineL = \" L0,\" + crtl;\n      var lineR = \" L\" + w + \",\" + (h - crbr);\n      var arcTR = \" a\" + crtr + \",\" + crtr + \" 0 0 1 \" + crtr + \",\" + crtr;\n      var arcBR = \" a\" + crbr + \",\" + crbr + \" 0 0 1 -\" + crbr + \",\" + crbr;\n      var arcBL = \" a\" + crbl + \",\" + crbl + \" 0 0 1 -\" + crbl + \",-\" + crbl;\n      var arcTL = \" a\" + crtl + \",\" + crtl + \" 0 0 1 \" + crtl + \",-\" + crtl;\n      var path = lineT + arcTR + lineR + arcBR + lineB + arcBL + lineL + arcTL + \" Z\";\n      this.path = path;\n    }\n  };\n  /**\r\n   * Sets radius for all four corners at ones.\r\n   *\r\n   * All numbers are in pixels.\r\n   *\r\n   * @param tl  Top-left corner\r\n   * @param tr  Top-right corner\r\n   * @param bl  Bottom-left corner\r\n   * @param br  Bottom-right corner\r\n   */\n  RoundedRectangle.prototype.cornerRadius = function (tl, tr, bl, br) {\n    this.cornerRadiusTopLeft = tl;\n    this.cornerRadiusTopRight = tr;\n    this.cornerRadiusBottomLeft = bl;\n    this.cornerRadiusBottomRight = br;\n  };\n  Object.defineProperty(RoundedRectangle.prototype, \"cornerRadiusTopLeft\", {\n    /**\r\n     * @return Radius (px or Percent)\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"cornerRadiusTopLeft\");\n    },\n    /**\r\n     * Radius of the top-left corner in pixels.\r\n     *\r\n     * @default 3\r\n     * @param value  Radius (px or Percent)\r\n     */\n    set: function (value) {\n      this.setPercentProperty(\"cornerRadiusTopLeft\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(RoundedRectangle.prototype, \"cornerRadiusTopRight\", {\n    /**\r\n     * @return Radius (px or Percent)\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"cornerRadiusTopRight\");\n    },\n    /**\r\n     * Radius of the top-right corner in pixels.\r\n     *\r\n     * @default 3\r\n     * @param value  Radius (px or Percent)\r\n     */\n    set: function (value) {\n      this.setPercentProperty(\"cornerRadiusTopRight\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(RoundedRectangle.prototype, \"cornerRadiusBottomRight\", {\n    /**\r\n     * @return Radius (px or Percent)\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"cornerRadiusBottomRight\");\n    },\n    /**\r\n     * Radius of the bottom-right corner in pixels.\r\n     *\r\n     * @default 3\r\n     * @param value  Radius (px or Percent)\r\n     */\n    set: function (value) {\n      this.setPercentProperty(\"cornerRadiusBottomRight\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(RoundedRectangle.prototype, \"cornerRadiusBottomLeft\", {\n    /**\r\n     * @return Radius (px or Percent)\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"cornerRadiusBottomLeft\");\n    },\n    /**\r\n     * Radius of the bottom-left corner in pixels.\r\n     *\r\n     * @default 3\r\n     * @param value  Radius (px or Percent)\r\n     */\n    set: function (value) {\n      this.setPercentProperty(\"cornerRadiusBottomLeft\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Measures the element.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  RoundedRectangle.prototype.measureElement = function () {};\n  Object.defineProperty(RoundedRectangle.prototype, \"bbox\", {\n    /**\r\n     * Returns bounding box (square) for this element.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\n    get: function () {\n      if (this.definedBBox) {\n        return this.definedBBox;\n      }\n      if (this.isMeasured) {\n        return {\n          x: 0,\n          y: 0,\n          width: this.innerWidth,\n          height: this.innerHeight\n        };\n      } else {\n        return {\n          x: 0,\n          y: 0,\n          width: 0,\n          height: 0\n        };\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return RoundedRectangle;\n}(Sprite);\nexport { RoundedRectangle };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\nregistry.registeredClasses[\"RoundedRectangle\"] = RoundedRectangle;","map":{"version":3,"names":["Sprite","registry","$math","$type","$utils","RoundedRectangle","_super","__extends","_this","call","className","element","paper","add","cornerRadius","applyTheme","prototype","draw","w","innerWidth","h","innerHeight","isNumber","minSide","min","cornerRadiusTopLeft","relativeToValue","cornerRadiusTopRight","cornerRadiusBottomRight","cornerRadiusBottomLeft","maxcr","Math","abs","crtl","fitToRange","crtr","crbr","crbl","lineT","lineB","lineL","lineR","arcTR","arcBR","arcBL","arcTL","path","tl","tr","bl","br","Object","defineProperty","get","getPropertyValue","set","value","setPercentProperty","measureElement","definedBBox","isMeasured","x","y","width","height","registeredClasses"],"sources":["../../../../../src/.internal/core/elements/RoundedRectangle.ts"],"sourcesContent":["/**\r\n * Rounded rectangle module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Sprite, ISpriteProperties, ISpriteAdapters, ISpriteEvents } from \"../Sprite\";\r\nimport { registry } from \"../Registry\";\r\nimport * as $math from \"../utils/Math\";\r\nimport * as $type from \"../utils/Type\";\r\nimport * as $utils from \"../utils/Utils\";\r\nimport { Percent } from \"../utils/Percent\";\r\nimport { IRectangle } from \"../defs/IRectangle\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[RoundedRectangle]].\r\n */\r\nexport interface IRoundedRectangleProperties extends ISpriteProperties {\r\n\r\n\t/**\r\n\t * Radius of the top-left corner in pixels.\r\n\t *\r\n\t * @default 3\r\n\t */\r\n\tcornerRadiusTopLeft?: number;\r\n\r\n\t/**\r\n\t * Radius of the top-right corner in pixels.\r\n\t *\r\n\t * @default 3\r\n\t */\r\n\tcornerRadiusTopRight?: number;\r\n\r\n\t/**\r\n\t * Radius of the bottom-right corner in pixels.\r\n\t *\r\n\t * @default 3\r\n\t */\r\n\tcornerRadiusBottomRight?: number;\r\n\r\n\t/**\r\n\t * Radius of the bottom-left corner in pixels.\r\n\t *\r\n\t * @default 3\r\n\t */\r\n\tcornerRadiusBottomLeft?: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[RoundedRectangle]].\r\n */\r\nexport interface IRoundedRectangleEvents extends ISpriteEvents { }\r\n\r\n/**\r\n * Defines adapters for [[RoundedRectangle]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IRoundedRectangleAdapters extends ISpriteAdapters, IRoundedRectangleProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Draws a rectangle with rounded corners.\r\n *\r\n * @see {@link IRoundedRectangleEvents} for a list of available events\r\n * @see {@link IRoundedRectangleAdapters} for a list of available Adapters\r\n */\r\nexport class RoundedRectangle extends Sprite {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IRoundedRectangleProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IRoundedRectangleAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IRoundedRectangleEvents;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"RoundedRectangle\";\r\n\r\n\t\tthis.element = this.paper.add(\"path\");\r\n\r\n\t\tthis.cornerRadius(3, 3, 3, 3);\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Draws the element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic draw(): void {\r\n\t\tsuper.draw();\r\n\r\n\t\tlet w: number = this.innerWidth;\r\n\t\tlet h: number = this.innerHeight;\r\n\r\n\t\tif ($type.isNumber(w) && $type.isNumber(h)) {\r\n\r\n\t\t\tlet minSide = $math.min(w, h) / 2;\r\n\r\n\t\t\tlet cornerRadiusTopLeft = $utils.relativeToValue(this.cornerRadiusTopLeft, minSide);\r\n\t\t\tlet cornerRadiusTopRight = $utils.relativeToValue(this.cornerRadiusTopRight, minSide);\r\n\t\t\tlet cornerRadiusBottomRight = $utils.relativeToValue(this.cornerRadiusBottomRight, minSide);\r\n\t\t\tlet cornerRadiusBottomLeft = $utils.relativeToValue(this.cornerRadiusBottomLeft, minSide);\r\n\r\n\t\t\tlet maxcr: number = $math.min(Math.abs(w / 2), Math.abs(h / 2));\r\n\t\t\tlet crtl: number = $math.fitToRange(cornerRadiusTopLeft, 0, maxcr);\r\n\t\t\tlet crtr: number = $math.fitToRange(cornerRadiusTopRight, 0, maxcr);\r\n\t\t\tlet crbr: number = $math.fitToRange(cornerRadiusBottomRight, 0, maxcr);\r\n\t\t\tlet crbl: number = $math.fitToRange(cornerRadiusBottomLeft, 0, maxcr);\r\n\r\n\t\t\tlet lineT: string = \"M\" + crtl + \",0 L\" + (w - crtr) + \",0\";\r\n\t\t\tlet lineB: string = \" L\" + crbl + \",\" + h;\r\n\t\t\tlet lineL: string = \" L0,\" + crtl;\r\n\t\t\tlet lineR: string = \" L\" + w + \",\" + (h - crbr);\r\n\r\n\t\t\tlet arcTR: string = \" a\" + crtr + \",\" + crtr + \" 0 0 1 \" + crtr + \",\" + crtr;\r\n\t\t\tlet arcBR: string = \" a\" + crbr + \",\" + crbr + \" 0 0 1 -\" + crbr + \",\" + crbr;\r\n\t\t\tlet arcBL: string = \" a\" + crbl + \",\" + crbl + \" 0 0 1 -\" + crbl + \",-\" + crbl;\r\n\t\t\tlet arcTL: string = \" a\" + crtl + \",\" + crtl + \" 0 0 1 \" + crtl + \",-\" + crtl;\r\n\r\n\r\n\t\t\tlet path: string = lineT + arcTR + lineR + arcBR + lineB + arcBL + lineL + arcTL + \" Z\";\r\n\r\n\t\t\tthis.path = path;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Sets radius for all four corners at ones.\r\n\t *\r\n\t * All numbers are in pixels.\r\n\t *\r\n\t * @param tl  Top-left corner\r\n\t * @param tr  Top-right corner\r\n\t * @param bl  Bottom-left corner\r\n\t * @param br  Bottom-right corner\r\n\t */\r\n\tpublic cornerRadius(tl: number | Percent, tr: number | Percent, bl: number | Percent, br: number | Percent) {\r\n\t\tthis.cornerRadiusTopLeft = tl;\r\n\t\tthis.cornerRadiusTopRight = tr;\r\n\t\tthis.cornerRadiusBottomLeft = bl;\r\n\t\tthis.cornerRadiusBottomRight = br;\r\n\t}\r\n\r\n\t/**\r\n\t * Radius of the top-left corner in pixels.\r\n\t *\r\n\t * @default 3\r\n\t * @param value  Radius (px or Percent)\r\n\t */\r\n\tpublic set cornerRadiusTopLeft(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"cornerRadiusTopLeft\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Radius (px or Percent)\r\n\t */\r\n\tpublic get cornerRadiusTopLeft(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"cornerRadiusTopLeft\");\r\n\t}\r\n\r\n\t/**\r\n\t * Radius of the top-right corner in pixels.\r\n\t *\r\n\t * @default 3\r\n\t * @param value  Radius (px or Percent)\r\n\t */\r\n\tpublic set cornerRadiusTopRight(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"cornerRadiusTopRight\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Radius (px or Percent)\r\n\t */\r\n\tpublic get cornerRadiusTopRight(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"cornerRadiusTopRight\");\r\n\t}\r\n\r\n\t/**\r\n\t * Radius of the bottom-right corner in pixels.\r\n\t *\r\n\t * @default 3\r\n\t * @param value  Radius (px or Percent)\r\n\t */\r\n\tpublic set cornerRadiusBottomRight(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"cornerRadiusBottomRight\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Radius (px or Percent)\r\n\t */\r\n\tpublic get cornerRadiusBottomRight(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"cornerRadiusBottomRight\");\r\n\t}\r\n\r\n\t/**\r\n\t * Radius of the bottom-left corner in pixels.\r\n\t *\r\n\t * @default 3\r\n\t * @param value  Radius (px or Percent)\r\n\t */\r\n\tpublic set cornerRadiusBottomLeft(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"cornerRadiusBottomLeft\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Radius (px or Percent)\r\n\t */\r\n\tpublic get cornerRadiusBottomLeft(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"cornerRadiusBottomLeft\");\r\n\t}\r\n\r\n\t/**\r\n\t * Measures the element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic measureElement(): void {\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns bounding box (square) for this element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic get bbox(): IRectangle {\r\n\t\tif (this.definedBBox) {\r\n\t\t\treturn this.definedBBox;\r\n\t\t}\r\n\r\n\t\tif (this.isMeasured) {\r\n\t\t\treturn {\r\n\t\t\t\tx: 0,\r\n\t\t\t\ty: 0,\r\n\t\t\t\twidth: this.innerWidth,\r\n\t\t\t\theight: this.innerHeight\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn { x: 0, y: 0, width: 0, height: 0 };\r\n\t\t}\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"RoundedRectangle\"] = RoundedRectangle;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}