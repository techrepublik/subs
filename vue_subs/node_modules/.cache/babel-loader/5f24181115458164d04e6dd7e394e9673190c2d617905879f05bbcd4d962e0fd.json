{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n/**\r\n * Interaction Object module\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\nimport { InteractionObjectEventDispatcher } from \"./InteractionObjectEvents\";\nimport { BaseObjectEvents } from \"../Base\";\nimport { List } from \"../utils/List\";\nimport { Dictionary, DictionaryDisposer } from \"../utils/Dictionary\";\nimport { getInteraction } from \"./Interaction\";\nimport * as $type from \"../utils/Type\";\n/**\r\n * Re-exports\r\n */\nexport { InteractionObjectEventDispatcher };\n/**\r\n * Interaction object represents an object that is subject for any kind of\r\n * interaction with it with any input devices: mouse, touch or keyboard.\r\n *\r\n * Any DOM element can be wrapped into an Internaction object which in turn\r\n * enables attaching various interaction events to it, such as: hit, drag,\r\n * swipe, etc.\r\n *\r\n * To create an [[InteractionObject]] out of a [[Sprite]], use:\r\n * `interaction.getInteractionFromSprite(sprite: Sprite)`\r\n *\r\n * To create an [[InteractionObject]] out of a a regular element:\r\n * `interaction.getInteraction(element: HTMLElement)`\r\n */\nvar InteractionObject = /** @class */function (_super) {\n  __extends(InteractionObject, _super);\n  /**\r\n   * Constructor\r\n   */\n  function InteractionObject(element) {\n    var _this = _super.call(this) || this;\n    /**\r\n     * @ignore\r\n     * An [[EventDispatcher]] instance which holds events for this object\r\n     */\n    _this._eventDispatcher = new InteractionObjectEventDispatcher(_this);\n    /**\r\n     * Collection of Disposers for various events. (so that those get disposed\r\n     * when the whole InteractionObject is disposed)\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\n    _this.eventDisposers = new Dictionary();\n    /**\r\n     * A [[Dictionary]] that holds temporarily replaced original style values for\r\n     * HTML element, so that they can be restored when the functionality that\r\n     * replaced them is done.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\n    _this.replacedStyles = new Dictionary();\n    _this._clickable = false;\n    _this._contextMenuDisabled = false;\n    _this._hoverable = false;\n    _this._trackable = false;\n    _this._draggable = false;\n    _this._swipeable = false;\n    _this._resizable = false;\n    _this._wheelable = false;\n    _this._inert = false;\n    /**\r\n     * Is element currently hovered?\r\n     */\n    _this._isHover = false;\n    /**\r\n     * Was this element hovered via pointer or is it just \"pretenting\" to be\r\n     * hovered.\r\n     *\r\n     * @ignore\r\n     */\n    _this.isRealHover = false;\n    /**\r\n     * Is the element hovered by touch pointer?\r\n     */\n    _this._isHoverByTouch = false;\n    /**\r\n     * Has element got any pointers currently pressing down on it?\r\n     */\n    _this._isDown = false;\n    /**\r\n     * Does element have focus?\r\n     */\n    _this._isFocused = false;\n    /**\r\n     * Is element currently protected from touch interactions?\r\n     */\n    _this._isTouchProtected = false;\n    /**\r\n     * Options used for inertia functionality.\r\n     */\n    _this._inertiaOptions = new Dictionary();\n    /**\r\n     * A collection of different inertia types, currently playing out.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\n    _this.inertias = new Dictionary();\n    /**\r\n     * Click/tap options.\r\n     */\n    _this._hitOptions = {};\n    /**\r\n     * Hover options.\r\n     */\n    _this._hoverOptions = {};\n    /**\r\n     * Swipe gesture options.\r\n     */\n    _this._swipeOptions = {};\n    /**\r\n     * Keyboard options.\r\n     */\n    _this._keyboardOptions = {};\n    /**\r\n     * Mouse options.\r\n     */\n    _this._mouseOptions = {};\n    /**\r\n     * Cursor options.\r\n     */\n    _this._cursorOptions = {\n      \"defaultStyle\": [{\n        \"property\": \"cursor\",\n        \"value\": \"default\"\n      }]\n    };\n    _this._disposers.push(_this._eventDispatcher);\n    _this._element = element;\n    _this.className = \"InteractionObject\";\n    _this._disposers.push(new DictionaryDisposer(_this.inertias));\n    _this._disposers.push(new DictionaryDisposer(_this.eventDisposers));\n    _this.applyTheme();\n    return _this;\n  }\n  ;\n  Object.defineProperty(InteractionObject.prototype, \"events\", {\n    /**\r\n     * An [[EventDispatcher]] instance which holds events for this object\r\n     */\n    get: function () {\n      return this._eventDispatcher;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(InteractionObject.prototype, \"isHover\", {\n    /**\r\n     * @return Hovered?\r\n     */\n    get: function () {\n      return this._isHover;\n    },\n    /**\r\n     * Indicates if this element is currently hovered.\r\n     *\r\n     * @param value Hovered?\r\n     */\n    set: function (value) {\n      if (this.isHover != value) {\n        this._isHover = value;\n        if (value) {\n          getInteraction().overObjects.moveValue(this);\n        } else {\n          this.isRealHover = false;\n          getInteraction().overObjects.removeValue(this);\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(InteractionObject.prototype, \"isHoverByTouch\", {\n    /**\r\n     * @return Hovered?\r\n     */\n    get: function () {\n      return this._isHoverByTouch;\n    },\n    /**\r\n     * Indicates if this element is currently hovered.\r\n     *\r\n     * @param value Hovered?\r\n     */\n    set: function (value) {\n      if (this.isHoverByTouch != value) {\n        this._isHoverByTouch = value;\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(InteractionObject.prototype, \"overPointers\", {\n    /**\r\n     * A list of pointers currently over the element.\r\n     *\r\n     * @see {@link Pointer}\r\n     * @return List if pointers currently hovering the element\r\n     */\n    get: function () {\n      if (!this._overPointers) {\n        this._overPointers = new List();\n      }\n      return this._overPointers;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(InteractionObject.prototype, \"isDown\", {\n    /**\r\n     * @return Has down pointers?\r\n     */\n    get: function () {\n      return this._isDown;\n    },\n    /**\r\n     * Indicates if this element has currently any pointers pressing on it.\r\n     *\r\n     * @param value Has down pointers?\r\n     */\n    set: function (value) {\n      if (this.isDown != value) {\n        this._isDown = value;\n        if (value) {\n          getInteraction().downObjects.moveValue(this);\n        } else {\n          getInteraction().downObjects.removeValue(this);\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(InteractionObject.prototype, \"downPointers\", {\n    /**\r\n     * A list of pointers currently pressing down on this element.\r\n     *\r\n     * @see {@link Pointer}\r\n     * @return List of down pointers\r\n     */\n    get: function () {\n      if (!this._downPointers) {\n        this._downPointers = new List();\n      }\n      return this._downPointers;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(InteractionObject.prototype, \"isFocused\", {\n    /**\r\n     * @return Focused?\r\n     */\n    get: function () {\n      return this._isFocused;\n    },\n    /**\r\n     * Indicates if this element is currently focused.\r\n     *\r\n     * @param value Focused?\r\n     */\n    set: function (value) {\n      if (this.isFocused != value) {\n        this._isFocused = value;\n        if (value) {\n          getInteraction().focusedObject = this;\n        } else {\n          getInteraction().focusedObject = undefined;\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(InteractionObject.prototype, \"isTouchProtected\", {\n    /**\r\n     * @ignore\r\n     * @return Touch protected?\r\n     */\n    get: function () {\n      return this._isTouchProtected;\n    },\n    /**\r\n     * Indicates if this element is currently being protected from touch actions.\r\n     *\r\n     * @ignore\r\n     * @param value Touch protected?\r\n     */\n    set: function (value) {\n      if (this._isTouchProtected != value) {\n        this._isTouchProtected = value;\n        if (value) {\n          getInteraction().unprepElement(this);\n        } else if (this.draggable || this.swipeable || this.trackable || this.resizable) {\n          getInteraction().prepElement(this);\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(InteractionObject.prototype, \"clickable\", {\n    /**\r\n     * @return Clickable?\r\n     */\n    get: function () {\n      return this._clickable;\n    },\n    /**\r\n     * Is element clickable? Clickable elements will generate \"hit\" events when\r\n     * clicked or tapped.\r\n     *\r\n     * @param value Clickable?\r\n     */\n    set: function (value) {\n      if (this._clickable !== value) {\n        this._clickable = value;\n        getInteraction().processClickable(this);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(InteractionObject.prototype, \"contextMenuDisabled\", {\n    /**\r\n     * @return Context menu disabled?\r\n     */\n    get: function () {\n      return this._contextMenuDisabled;\n    },\n    /**\r\n     * Should element prevent context menu to be displayed, e.g. when\r\n     * right-clicked?\r\n     *\r\n     * @default false\r\n     * @param value Context menu disabled?\r\n     */\n    set: function (value) {\n      if (this._contextMenuDisabled !== value) {\n        this._contextMenuDisabled = value;\n        getInteraction().processContextMenu(this);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(InteractionObject.prototype, \"hoverable\", {\n    /**\r\n     * @return Hoverable?\r\n     */\n    get: function () {\n      return this._hoverable;\n    },\n    /**\r\n     * Indicates if element should generate hover events.\r\n     *\r\n     * @param value Hoverable?\r\n     */\n    set: function (value) {\n      if (this._hoverable !== value) {\n        this._hoverable = value;\n        getInteraction().processHoverable(this);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(InteractionObject.prototype, \"trackable\", {\n    /**\r\n     * @return Track pointer?\r\n     */\n    get: function () {\n      return this._trackable;\n    },\n    /**\r\n     * Indicates if pointer movement over element should be tracked.\r\n     *\r\n     * @param value Track pointer?\r\n     */\n    set: function (value) {\n      if (this._trackable !== value) {\n        this._trackable = value;\n        getInteraction().processTrackable(this);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(InteractionObject.prototype, \"draggable\", {\n    /**\r\n     * @return Draggable?\r\n     */\n    get: function () {\n      return this._draggable;\n    },\n    /**\r\n     * Indicates if element can be dragged. (moved)\r\n     *\r\n     * @param value Draggable?\r\n     */\n    set: function (value) {\n      if (this._draggable !== value) {\n        this._draggable = value;\n        getInteraction().processDraggable(this);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(InteractionObject.prototype, \"swipeable\", {\n    /**\r\n     * @return Track swipe?\r\n     */\n    get: function () {\n      return this._swipeable;\n    },\n    /**\r\n     * Indicates whether element should react to swipe gesture.\r\n     *\r\n     * @param value Track swipe?\r\n     */\n    set: function (value) {\n      if (this._swipeable !== value) {\n        this._swipeable = value;\n        getInteraction().processSwipeable(this);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(InteractionObject.prototype, \"resizable\", {\n    /**\r\n     * @return Resizeble?\r\n     */\n    get: function () {\n      return this._resizable;\n    },\n    /**\r\n     * Indicates if element can be resized.\r\n     *\r\n     * @param value Resizeable?\r\n     */\n    set: function (value) {\n      if (this._resizable !== value) {\n        this._resizable = value;\n        getInteraction().processResizable(this);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(InteractionObject.prototype, \"wheelable\", {\n    /**\r\n     * @return Track wheel?\r\n     */\n    get: function () {\n      return this._wheelable;\n    },\n    /**\r\n     * Indicates whether track moouse wheel rotation over element.\r\n     *\r\n     * @param value Track wheel?\r\n     */\n    set: function (value) {\n      if (this._wheelable !== value) {\n        this._wheelable = value;\n        getInteraction().processWheelable(this);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(InteractionObject.prototype, \"inert\", {\n    /**\r\n     * @return Inert?\r\n     */\n    get: function () {\n      return this._inert;\n    },\n    /**\r\n     * Indicates if element is inert, i.e. if it should carry movement momentum\r\n     * after it is dragged and released.\r\n     *\r\n     * @param value Inert?\r\n     */\n    set: function (value) {\n      if (this._inert !== value) {\n        this._inert = value;\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(InteractionObject.prototype, \"focusable\", {\n    /**\r\n     * @return Focusable?\r\n     */\n    get: function () {\n      return this._focusable;\n    },\n    /**\r\n     * Indicates if element can gain focus.\r\n     *\r\n     * @param value Focusable?\r\n     */\n    set: function (value) {\n      if (this._focusable !== value) {\n        this._focusable = value;\n        if (this._focusable && this.tabindex == -1) {\n          this._tabindex = 1;\n        }\n        getInteraction().processFocusable(this);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(InteractionObject.prototype, \"tabindex\", {\n    /**\r\n     * @return Tab index\r\n     */\n    get: function () {\n      return $type.getValueDefault(this._tabindex, -1);\n    },\n    /**\r\n     * Element's tab index.\r\n     *\r\n     * @param value Tab index\r\n     */\n    set: function (value) {\n      if (this._tabindex !== value) {\n        this._tabindex = value;\n        if (value > -1) {\n          this.focusable = true;\n        }\n        getInteraction().processFocusable(this);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(InteractionObject.prototype, \"element\", {\n    /**\r\n     * @return Element\r\n     */\n    get: function () {\n      return this._element;\n    },\n    /**\r\n     * A DOM element associated with this element.\r\n     *\r\n     * @param element Element\r\n     */\n    set: function (element) {\n      this._element = element;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(InteractionObject.prototype, \"originalPosition\", {\n    /**\r\n     * @ignore Exclude from docs\r\n     * @return Position.\r\n     */\n    get: function () {\n      return this._originalPosition || {\n        x: 0,\n        y: 0\n      };\n    },\n    /**\r\n     * Element's original position.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param value Position\r\n     */\n    set: function (value) {\n      this._originalPosition = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(InteractionObject.prototype, \"originalScale\", {\n    /**\r\n     * @return Scale\r\n     */\n    get: function () {\n      return $type.getValueDefault(this._originalScale, 1);\n    },\n    /**\r\n     * Element's original scale.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param value Scale\r\n     */\n    set: function (value) {\n      if (this._originalScale !== value) {\n        this._originalScale = value;\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(InteractionObject.prototype, \"originalAngle\", {\n    /**\r\n     * @return Angle\r\n     */\n    get: function () {\n      return $type.getValueDefault(this._originalAngle, 0);\n    },\n    /**\r\n     * Element's original angle.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param value Angle\r\n     */\n    set: function (value) {\n      if (this._originalAngle !== value) {\n        this._originalAngle = value;\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(InteractionObject.prototype, \"inertiaOptions\", {\n    /**\r\n     * @return Options\r\n     */\n    get: function () {\n      if (this.sprite && this.sprite._adapterO) {\n        return this.sprite._adapterO.apply(\"inertiaOptions\", this._inertiaOptions);\n      } else {\n        return this._inertiaOptions;\n      }\n    },\n    /**\r\n     * Inertia options.\r\n     *\r\n     * @param value  Options\r\n     */\n    set: function (value) {\n      this._inertiaOptions = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(InteractionObject.prototype, \"hitOptions\", {\n    /**\r\n     * @return Options\r\n     */\n    get: function () {\n      if (this.sprite && this.sprite._adapterO) {\n        return this.sprite._adapterO.apply(\"hitOptions\", this._hitOptions);\n      } else {\n        return this._hitOptions;\n      }\n    },\n    /**\r\n     * Hit options.\r\n     *\r\n     * @param value  Options\r\n     */\n    set: function (value) {\n      this._hitOptions = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(InteractionObject.prototype, \"hoverOptions\", {\n    /**\r\n     * @return Options\r\n     */\n    get: function () {\n      if (this.sprite && this.sprite._adapterO) {\n        return this.sprite._adapterO.apply(\"hoverOptions\", this._hoverOptions);\n      } else {\n        return this._hoverOptions;\n      }\n    },\n    /**\r\n     * Hover options.\r\n     *\r\n     * @param value  Options\r\n     */\n    set: function (value) {\n      this._hoverOptions = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(InteractionObject.prototype, \"swipeOptions\", {\n    /**\r\n     * @return Options\r\n     */\n    get: function () {\n      if (this.sprite && this.sprite._adapterO) {\n        return this.sprite._adapterO.apply(\"swipeOptions\", this._swipeOptions);\n      } else {\n        return this._swipeOptions;\n      }\n    },\n    /**\r\n     * Swipe options.\r\n     *\r\n     * @param value  Options\r\n     */\n    set: function (value) {\n      this._swipeOptions = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(InteractionObject.prototype, \"keyboardOptions\", {\n    /**\r\n     * @return Options\r\n     */\n    get: function () {\n      if (this.sprite && this.sprite._adapterO) {\n        return this.sprite._adapterO.apply(\"keyboardOptions\", this._keyboardOptions);\n      } else {\n        return this._keyboardOptions;\n      }\n    },\n    /**\r\n     * Keyboard options.\r\n     *\r\n     * @param value  Options\r\n     */\n    set: function (value) {\n      this._keyboardOptions = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(InteractionObject.prototype, \"mouseOptions\", {\n    /**\r\n     * @return Options\r\n     */\n    get: function () {\n      if (this.sprite && this.sprite._adapterO) {\n        return this.sprite._adapterO.apply(\"mouseOptions\", this._mouseOptions);\n      } else {\n        return this._mouseOptions;\n      }\n    },\n    /**\r\n     * Mouse options.\r\n     *\r\n     * Enables controlling options related to the mouse, for example sensitivity\r\n     * of its mouse wheel.\r\n     *\r\n     * E.g. the below will reduce chart's wheel-zoom speed to half its default\r\n     * speed:\r\n     *\r\n     * ```TypeScript\r\n     * chart.plotContainer.mouseOptions.sensitivity = 0.5;\r\n     * ```\r\n     * ```JavaScript\r\n     * chart.plotContainer.mouseOptions.sensitivity = 0.5;\r\n     * ```\r\n     * ```JSON\r\n     * {\r\n     *   // ...\r\n     *   \"plotContainer\": {\r\n     *     \"mouseOptions\": {\r\n     *       \"sensitivity\": 0.5\r\n     *     }\r\n     *   }\r\n     * }\r\n     * ```\r\n     *\r\n     * @since 4.5.14\r\n     * @param value  Options\r\n     */\n    set: function (value) {\n      this._mouseOptions = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(InteractionObject.prototype, \"cursorOptions\", {\n    /**\r\n     * @return Options\r\n     */\n    get: function () {\n      if (this.sprite && this.sprite._adapterO) {\n        return this.sprite._adapterO.apply(\"cursorOptions\", this._cursorOptions);\n      } else {\n        return this._cursorOptions;\n      }\n    },\n    /**\r\n     * Cursor options.\r\n     *\r\n     * @param value  Options\r\n     */\n    set: function (value) {\n      this._cursorOptions = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Copies all properties and related assets from another object of the same\r\n   * type.\r\n   *\r\n   * @param source Source object\r\n   */\n  InteractionObject.prototype.copyFrom = function (source) {\n    _super.prototype.copyFrom.call(this, source);\n    this.inertiaOptions = source.inertiaOptions;\n    this.hitOptions = source.hitOptions;\n    this.hoverOptions = source.hoverOptions;\n    this.swipeOptions = source.swipeOptions;\n    this.keyboardOptions = source.keyboardOptions;\n    this.cursorOptions = source.cursorOptions;\n    this.contextMenuDisabled = source.contextMenuDisabled;\n    getInteraction().applyCursorOverStyle(this);\n  };\n  /**\r\n   * @ignore Exclude from docs\r\n   */\n  InteractionObject.prototype.setEventDisposer = function (key, value, f) {\n    var disposer = this.eventDisposers.getKey(key);\n    if (value) {\n      if (disposer == null) {\n        this.eventDisposers.setKey(key, f());\n      }\n    } else {\n      if (disposer != null) {\n        disposer.dispose();\n        this.eventDisposers.removeKey(key);\n      }\n    }\n  };\n  /**\r\n   * Disposes object.\r\n   */\n  InteractionObject.prototype.dispose = function () {\n    _super.prototype.dispose.call(this);\n    // Remove from all interaction registries\n    var interaction = getInteraction();\n    interaction.overObjects.removeValue(this);\n    interaction.downObjects.removeValue(this);\n    interaction.trackedObjects.removeValue(this);\n    interaction.transformedObjects.removeValue(this);\n    // Unlock document wheel\n    if (this.isHover && this.wheelable) {\n      interaction.unlockWheel();\n    }\n    if (interaction.focusedObject === this) {\n      interaction.focusedObject = undefined;\n    }\n  };\n  return InteractionObject;\n}(BaseObjectEvents);\nexport { InteractionObject };","map":{"version":3,"names":["InteractionObjectEventDispatcher","BaseObjectEvents","List","Dictionary","DictionaryDisposer","getInteraction","$type","InteractionObject","_super","__extends","element","_this","call","_eventDispatcher","eventDisposers","replacedStyles","_clickable","_contextMenuDisabled","_hoverable","_trackable","_draggable","_swipeable","_resizable","_wheelable","_inert","_isHover","isRealHover","_isHoverByTouch","_isDown","_isFocused","_isTouchProtected","_inertiaOptions","inertias","_hitOptions","_hoverOptions","_swipeOptions","_keyboardOptions","_mouseOptions","_cursorOptions","_disposers","push","_element","className","applyTheme","Object","defineProperty","prototype","get","set","value","isHover","overObjects","moveValue","removeValue","isHoverByTouch","_overPointers","isDown","downObjects","_downPointers","isFocused","focusedObject","undefined","unprepElement","draggable","swipeable","trackable","resizable","prepElement","processClickable","processContextMenu","processHoverable","processTrackable","processDraggable","processSwipeable","processResizable","processWheelable","_focusable","tabindex","_tabindex","processFocusable","getValueDefault","focusable","_originalPosition","x","y","_originalScale","_originalAngle","sprite","_adapterO","apply","copyFrom","source","inertiaOptions","hitOptions","hoverOptions","swipeOptions","keyboardOptions","cursorOptions","contextMenuDisabled","applyCursorOverStyle","setEventDisposer","key","f","disposer","getKey","setKey","dispose","removeKey","interaction","trackedObjects","transformedObjects","wheelable","unlockWheel"],"sources":["../../../../../src/.internal/core/interaction/InteractionObject.ts"],"sourcesContent":["/**\r\n * Interaction Object module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { IInteractionObjectEvents, InteractionObjectEventDispatcher } from \"./InteractionObjectEvents\";\r\nimport { BaseObjectEvents } from \"../Base\";\r\nimport { Sprite } from \"../Sprite\";\r\nimport { List } from \"../utils/List\";\r\nimport { Dictionary, DictionaryDisposer } from \"../utils/Dictionary\";\r\nimport { AMEvent } from \"../utils/EventDispatcher\";\r\nimport { IPoint } from \"../defs/IPoint\";\r\nimport { IPointer } from \"./Pointer\";\r\nimport { IInertiaOptions, ISwipeOptions, IHitOptions, IHoverOptions, ICursorOptions, IKeyboardOptions, IMouseOptions } from \"./InteractionOptions\";\r\nimport { getInteraction } from \"./Interaction\";\r\nimport { Inertia, InertiaTypes } from \"./Inertia\";\r\nimport { IDisposer } from \"../utils/Disposer\";\r\nimport { Optional } from \"../utils/Type\";\r\nimport * as $type from \"../utils/Type\";\r\n\r\n\r\n/**\r\n * Re-exports\r\n */\r\nexport { IInteractionObjectEvents, InteractionObjectEventDispatcher };\r\n\r\n/**\r\n * Interaction object represents an object that is subject for any kind of\r\n * interaction with it with any input devices: mouse, touch or keyboard.\r\n *\r\n * Any DOM element can be wrapped into an Internaction object which in turn\r\n * enables attaching various interaction events to it, such as: hit, drag,\r\n * swipe, etc.\r\n *\r\n * To create an [[InteractionObject]] out of a [[Sprite]], use:\r\n * `interaction.getInteractionFromSprite(sprite: Sprite)`\r\n *\r\n * To create an [[InteractionObject]] out of a a regular element:\r\n * `interaction.getInteraction(element: HTMLElement)`\r\n */\r\nexport class InteractionObject extends BaseObjectEvents {\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IInteractionObjectEvents;\r\n\r\n\t/**\r\n\t * @ignore\r\n\t * An [[EventDispatcher]] instance which holds events for this object\r\n\t */\r\n\tpublic _eventDispatcher: InteractionObjectEventDispatcher<AMEvent<this, this[\"_events\"]>> = new InteractionObjectEventDispatcher(this);;\r\n\r\n\t/**\r\n\t * An [[EventDispatcher]] instance which holds events for this object\r\n\t */\r\n\tpublic get events(): InteractionObjectEventDispatcher<AMEvent<this, this[\"_events\"]>> {\r\n\t\treturn this._eventDispatcher;\r\n\t}\r\n\r\n\t/**\r\n\t * A related [[Sprite]] if any.\r\n\t */\r\n\tpublic sprite!: Sprite;\r\n\r\n\t/**\r\n\t * Collection of Disposers for various events. (so that those get disposed\r\n\t * when the whole InteractionObject is disposed)\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic eventDisposers: Dictionary<string, IDisposer> = new Dictionary<string, IDisposer>();\r\n\r\n\t/**\r\n\t * A [[Dictionary]] that holds temporarily replaced original style values for\r\n\t * HTML element, so that they can be restored when the functionality that\r\n\t * replaced them is done.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic replacedStyles: Dictionary<string, string> = new Dictionary<string, string>();\r\n\r\n\tprotected _clickable: boolean = false;\r\n\tprotected _contextMenuDisabled: boolean = false;\r\n\tprotected _hoverable: boolean = false;\r\n\tprotected _trackable: boolean = false;\r\n\tprotected _draggable: boolean = false;\r\n\tprotected _swipeable: boolean = false;\r\n\tprotected _resizable: boolean = false;\r\n\tprotected _wheelable: boolean = false;\r\n\tprotected _inert: boolean = false;\r\n\tprotected _focusable: $type.Optional<boolean>;\r\n\tprotected _tabindex: Optional<number>;\r\n\r\n\t/**\r\n\t * Element to attach events to.\r\n\t */\r\n\tprivate _element: HTMLElement | SVGSVGElement;\r\n\r\n\t/**\r\n\t * Original coordinates for the [[InteractionObject]]. (before application\r\n\t * of the drag)\r\n\t */\r\n\tpublic _originalPosition: Optional<IPoint>;\r\n\r\n\t/**\r\n\t * Original angle for the [[InteractionObject]]. (before rotation started)\r\n\t */\r\n\tpublic _originalAngle: $type.Optional<number>;\r\n\r\n\t/**\r\n\t * Original scale of the [[InteractionObject]]. (before resizing started)\r\n\t */\r\n\tpublic _originalScale: $type.Optional<number>;\r\n\r\n\t/**\r\n\t * List of pointers current over element.\r\n\t */\r\n\tprotected _overPointers: $type.Optional<List<IPointer>>;\r\n\r\n\t/**\r\n\t * List of pointer currently pressing down on element.\r\n\t */\r\n\tprotected _downPointers: $type.Optional<List<IPointer>>;\r\n\r\n\t/**\r\n\t * Is element currently hovered?\r\n\t */\r\n\tprotected _isHover: boolean = false;\r\n\r\n\t/**\r\n\t * Was this element hovered via pointer or is it just \"pretenting\" to be\r\n\t * hovered.\r\n\t * \r\n\t * @ignore\r\n\t */\r\n\tpublic isRealHover: boolean = false;\r\n\r\n\t/**\r\n\t * Is the element hovered by touch pointer?\r\n\t */\r\n\tprotected _isHoverByTouch: boolean = false;\r\n\r\n\t/**\r\n\t * Has element got any pointers currently pressing down on it?\r\n\t */\r\n\tprotected _isDown: boolean = false;\r\n\r\n\t/**\r\n\t * Does element have focus?\r\n\t */\r\n\tprotected _isFocused: boolean = false;\r\n\r\n\t/**\r\n\t * Is element currently protected from touch interactions?\r\n\t */\r\n\tprotected _isTouchProtected: boolean = false;\r\n\r\n\t/**\r\n\t * A timestamp of the last hit.\r\n\t *\r\n\t * Used to calculate double-hit.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic lastHit: $type.Optional<number>;\r\n\r\n\t/**\r\n\t * A pointer element that was used for the last hit.\r\n\t *\r\n\t * We need to keep this since only the same pointer can generate doublehit.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo still needed?\r\n\t */\r\n\tpublic lastHitPointer: $type.Optional<IPointer>;\r\n\r\n\t/**\r\n\t * Indicates whether object has delayed events initiated by touch.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic hasDelayedOut?: boolean;\r\n\r\n\t/**\r\n\t * Options used for inertia functionality.\r\n\t */\r\n\tprivate _inertiaOptions: Dictionary<InertiaTypes, IInertiaOptions> = new Dictionary<InertiaTypes, IInertiaOptions>();\r\n\r\n\t/**\r\n\t * A collection of different inertia types, currently playing out.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic inertias: Dictionary<InertiaTypes, Inertia> = new Dictionary<InertiaTypes, Inertia>();\r\n\r\n\t/**\r\n\t * Click/tap options.\r\n\t */\r\n\tprivate _hitOptions: IHitOptions = {};\r\n\r\n\t/**\r\n\t * Hover options.\r\n\t */\r\n\tprivate _hoverOptions: IHoverOptions = {};\r\n\r\n\t/**\r\n\t * Swipe gesture options.\r\n\t */\r\n\tprivate _swipeOptions: ISwipeOptions = {};\r\n\r\n\t/**\r\n\t * Keyboard options.\r\n\t */\r\n\tprivate _keyboardOptions: IKeyboardOptions = {};\r\n\r\n\t/**\r\n\t * Mouse options.\r\n\t */\r\n\tprivate _mouseOptions: IMouseOptions = {};\r\n\r\n\t/**\r\n\t * Cursor options.\r\n\t */\r\n\tprivate _cursorOptions: ICursorOptions = {\r\n\t\t\"defaultStyle\": [{\r\n\t\t\t\"property\": \"cursor\",\r\n\t\t\t\"value\": \"default\"\r\n\t\t}]\r\n\t};\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor(element: HTMLElement | SVGSVGElement) {\r\n\t\tsuper();\r\n\t\t\r\n\t\tthis._disposers.push(this._eventDispatcher);\r\n\r\n\t\tthis._element = element;\r\n\t\tthis.className = \"InteractionObject\";\r\n\t\tthis._disposers.push(new DictionaryDisposer(this.inertias));\r\n\t\tthis._disposers.push(new DictionaryDisposer(this.eventDisposers));\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Indicates if this element is currently hovered.\r\n\t *\r\n\t * @param value Hovered?\r\n\t */\r\n\tpublic set isHover(value: boolean) {\r\n\t\tif (this.isHover != value) {\r\n\t\t\tthis._isHover = value;\r\n\t\t\tif (value) {\r\n\t\t\t\tgetInteraction().overObjects.moveValue(this);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.isRealHover = false;\r\n\t\t\t\tgetInteraction().overObjects.removeValue(this);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Hovered?\r\n\t */\r\n\tpublic get isHover(): boolean {\r\n\t\treturn this._isHover;\r\n\t}\r\n\r\n\t/**\r\n\t * Indicates if this element is currently hovered.\r\n\t *\r\n\t * @param value Hovered?\r\n\t */\r\n\tpublic set isHoverByTouch(value: boolean) {\r\n\t\tif (this.isHoverByTouch != value) {\r\n\t\t\tthis._isHoverByTouch = value;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Hovered?\r\n\t */\r\n\tpublic get isHoverByTouch(): boolean {\r\n\t\treturn this._isHoverByTouch;\r\n\t}\r\n\r\n\t/**\r\n\t * A list of pointers currently over the element.\r\n\t *\r\n\t * @see {@link Pointer}\r\n\t * @return List if pointers currently hovering the element\r\n\t */\r\n\tpublic get overPointers(): List<IPointer> {\r\n\t\tif (!this._overPointers) {\r\n\t\t\tthis._overPointers = new List<IPointer>();\r\n\t\t}\r\n\t\treturn this._overPointers;\r\n\t}\r\n\r\n\t/**\r\n\t * Indicates if this element has currently any pointers pressing on it.\r\n\t *\r\n\t * @param value Has down pointers?\r\n\t */\r\n\tpublic set isDown(value: boolean) {\r\n\t\tif (this.isDown != value) {\r\n\t\t\tthis._isDown = value;\r\n\t\t\tif (value) {\r\n\t\t\t\tgetInteraction().downObjects.moveValue(this);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tgetInteraction().downObjects.removeValue(this);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Has down pointers?\r\n\t */\r\n\tpublic get isDown(): boolean {\r\n\t\treturn this._isDown;\r\n\t}\r\n\r\n\t/**\r\n\t * A list of pointers currently pressing down on this element.\r\n\t *\r\n\t * @see {@link Pointer}\r\n\t * @return List of down pointers\r\n\t */\r\n\tpublic get downPointers(): List<IPointer> {\r\n\t\tif (!this._downPointers) {\r\n\t\t\tthis._downPointers = new List<IPointer>();\r\n\t\t}\r\n\t\treturn this._downPointers;\r\n\t}\r\n\r\n\t/**\r\n\t * Indicates if this element is currently focused.\r\n\t *\r\n\t * @param value Focused?\r\n\t */\r\n\tpublic set isFocused(value: boolean) {\r\n\t\tif (this.isFocused != value) {\r\n\t\t\tthis._isFocused = value;\r\n\t\t\tif (value) {\r\n\t\t\t\tgetInteraction().focusedObject = this;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tgetInteraction().focusedObject = undefined;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Focused?\r\n\t */\r\n\tpublic get isFocused(): boolean {\r\n\t\treturn this._isFocused;\r\n\t}\r\n\r\n\t/**\r\n\t * Indicates if this element is currently being protected from touch actions.\r\n\t *\r\n\t * @ignore\r\n\t * @param value Touch protected?\r\n\t */\r\n\tpublic set isTouchProtected(value: boolean) {\r\n\t\tif (this._isTouchProtected != value) {\r\n\t\t\tthis._isTouchProtected = value;\r\n\t\t\tif (value) {\r\n\t\t\t\tgetInteraction().unprepElement(this);\r\n\t\t\t}\r\n\t\t\telse if (this.draggable || this.swipeable || this.trackable || this.resizable) {\r\n\t\t\t\tgetInteraction().prepElement(this);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t * @return Touch protected?\r\n\t */\r\n\tpublic get isTouchProtected(): boolean {\r\n\t\treturn this._isTouchProtected;\r\n\t}\r\n\r\n\t/**\r\n\t * Is element clickable? Clickable elements will generate \"hit\" events when\r\n\t * clicked or tapped.\r\n\t *\r\n\t * @param value Clickable?\r\n\t */\r\n\tpublic set clickable(value: boolean) {\r\n\t\tif (this._clickable !== value) {\r\n\t\t\tthis._clickable = value;\r\n\t\t\tgetInteraction().processClickable(this);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Clickable?\r\n\t */\r\n\tpublic get clickable(): boolean {\r\n\t\treturn this._clickable;\r\n\t}\r\n\r\n\t/**\r\n\t * Should element prevent context menu to be displayed, e.g. when\r\n\t * right-clicked?\r\n\t *\r\n\t * @default false\r\n\t * @param value Context menu disabled?\r\n\t */\r\n\tpublic set contextMenuDisabled(value: boolean) {\r\n\t\tif (this._contextMenuDisabled !== value) {\r\n\t\t\tthis._contextMenuDisabled = value;\r\n\t\t\tgetInteraction().processContextMenu(this);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Context menu disabled?\r\n\t */\r\n\tpublic get contextMenuDisabled(): boolean {\r\n\t\treturn this._contextMenuDisabled;\r\n\t}\r\n\r\n\t/**\r\n\t * Indicates if element should generate hover events.\r\n\t *\r\n\t * @param value Hoverable?\r\n\t */\r\n\tpublic set hoverable(value: boolean) {\r\n\t\tif (this._hoverable !== value) {\r\n\t\t\tthis._hoverable = value;\r\n\t\t\tgetInteraction().processHoverable(this);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Hoverable?\r\n\t */\r\n\tpublic get hoverable(): boolean {\r\n\t\treturn this._hoverable;\r\n\t}\r\n\r\n\t/**\r\n\t * Indicates if pointer movement over element should be tracked.\r\n\t *\r\n\t * @param value Track pointer?\r\n\t */\r\n\tpublic set trackable(value: boolean) {\r\n\t\tif (this._trackable !== value) {\r\n\t\t\tthis._trackable = value;\r\n\t\t\tgetInteraction().processTrackable(this);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Track pointer?\r\n\t */\r\n\tpublic get trackable(): boolean {\r\n\t\treturn this._trackable;\r\n\t}\r\n\r\n\t/**\r\n\t * Indicates if element can be dragged. (moved)\r\n\t *\r\n\t * @param value Draggable?\r\n\t */\r\n\tpublic set draggable(value: boolean) {\r\n\t\tif (this._draggable !== value) {\r\n\t\t\tthis._draggable = value;\r\n\t\t\tgetInteraction().processDraggable(this);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Draggable?\r\n\t */\r\n\tpublic get draggable(): boolean {\r\n\t\treturn this._draggable;\r\n\t}\r\n\r\n\t/**\r\n\t * Indicates whether element should react to swipe gesture.\r\n\t *\r\n\t * @param value Track swipe?\r\n\t */\r\n\tpublic set swipeable(value: boolean) {\r\n\t\tif (this._swipeable !== value) {\r\n\t\t\tthis._swipeable = value;\r\n\t\t\tgetInteraction().processSwipeable(this);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Track swipe?\r\n\t */\r\n\tpublic get swipeable(): boolean {\r\n\t\treturn this._swipeable;\r\n\t}\r\n\r\n\t/**\r\n\t * Indicates if element can be resized.\r\n\t *\r\n\t * @param value Resizeable?\r\n\t */\r\n\tpublic set resizable(value: boolean) {\r\n\t\tif (this._resizable !== value) {\r\n\t\t\tthis._resizable = value;\r\n\t\t\tgetInteraction().processResizable(this);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Resizeble?\r\n\t */\r\n\tpublic get resizable(): boolean {\r\n\t\treturn this._resizable;\r\n\t}\r\n\r\n\t/**\r\n\t * Indicates whether track moouse wheel rotation over element.\r\n\t *\r\n\t * @param value Track wheel?\r\n\t */\r\n\tpublic set wheelable(value: boolean) {\r\n\t\tif (this._wheelable !== value) {\r\n\t\t\tthis._wheelable = value;\r\n\t\t\tgetInteraction().processWheelable(this);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Track wheel?\r\n\t */\r\n\tpublic get wheelable(): boolean {\r\n\t\treturn this._wheelable;\r\n\t}\r\n\r\n\t/**\r\n\t * Indicates if element is inert, i.e. if it should carry movement momentum\r\n\t * after it is dragged and released.\r\n\t *\r\n\t * @param value Inert?\r\n\t */\r\n\tpublic set inert(value: boolean) {\r\n\t\tif (this._inert !== value) {\r\n\t\t\tthis._inert = value;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Inert?\r\n\t */\r\n\tpublic get inert(): boolean {\r\n\t\treturn this._inert;\r\n\t}\r\n\r\n\t/**\r\n\t * Indicates if element can gain focus.\r\n\t *\r\n\t * @param value Focusable?\r\n\t */\r\n\tpublic set focusable(value: $type.Optional<boolean>) {\r\n\t\tif (this._focusable !== value) {\r\n\t\t\tthis._focusable = value;\r\n\t\t\tif (this._focusable && this.tabindex == -1) {\r\n\t\t\t\tthis._tabindex = 1;\r\n\t\t\t}\r\n\t\t\tgetInteraction().processFocusable(this);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Focusable?\r\n\t */\r\n\tpublic get focusable(): $type.Optional<boolean> {\r\n\t\treturn this._focusable;\r\n\t}\r\n\r\n\t/**\r\n\t * Element's tab index.\r\n\t *\r\n\t * @param value Tab index\r\n\t */\r\n\tpublic set tabindex(value: number) {\r\n\t\tif (this._tabindex !== value) {\r\n\t\t\tthis._tabindex = value;\r\n\t\t\tif (value > -1) {\r\n\t\t\t\tthis.focusable = true;\r\n\t\t\t}\r\n\t\t\tgetInteraction().processFocusable(this);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Tab index\r\n\t */\r\n\tpublic get tabindex(): number {\r\n\t\treturn $type.getValueDefault(this._tabindex, -1 as number);\r\n\t}\r\n\r\n\t/**\r\n\t * A DOM element associated with this element.\r\n\t *\r\n\t * @param element Element\r\n\t */\r\n\tpublic set element(element: HTMLElement | SVGSVGElement) {\r\n\t\tthis._element = element;\r\n\t}\r\n\r\n\t/**\r\n\t * @return Element\r\n\t */\r\n\tpublic get element(): HTMLElement | SVGSVGElement {\r\n\t\treturn this._element;\r\n\t}\r\n\r\n\t/**\r\n\t * Element's original position.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param value Position\r\n\t */\r\n\tpublic set originalPosition(value: Optional<IPoint>) {\r\n\t\tthis._originalPosition = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @return Position.\r\n\t */\r\n\tpublic get originalPosition(): Optional<IPoint> {\r\n\t\treturn this._originalPosition || { x: 0, y: 0 };\r\n\t}\r\n\r\n\t/**\r\n\t * Element's original scale.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param value Scale\r\n\t */\r\n\tpublic set originalScale(value: number) {\r\n\t\tif (this._originalScale !== value) {\r\n\t\t\tthis._originalScale = value;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Scale\r\n\t */\r\n\tpublic get originalScale(): number {\r\n\t\treturn $type.getValueDefault(this._originalScale, 1 as number);\r\n\t}\r\n\r\n\t/**\r\n\t * Element's original angle.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param value Angle\r\n\t */\r\n\tpublic set originalAngle(value: number) {\r\n\t\tif (this._originalAngle !== value) {\r\n\t\t\tthis._originalAngle = value;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Angle\r\n\t */\r\n\tpublic get originalAngle(): number {\r\n\t\treturn $type.getValueDefault(this._originalAngle, 0 as number);\r\n\t}\r\n\r\n\t/**\r\n\t * Inertia options.\r\n\t *\r\n\t * @param value  Options\r\n\t */\r\n\tpublic set inertiaOptions(value: Dictionary<InertiaTypes, IInertiaOptions>) {\r\n\t\tthis._inertiaOptions = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @return Options\r\n\t */\r\n\tpublic get inertiaOptions(): Dictionary<InertiaTypes, IInertiaOptions> {\r\n\t\tif (this.sprite && this.sprite._adapterO) {\r\n\t\t\treturn this.sprite._adapterO.apply(\"inertiaOptions\", this._inertiaOptions);\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this._inertiaOptions;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Hit options.\r\n\t *\r\n\t * @param value  Options\r\n\t */\r\n\tpublic set hitOptions(value: IHitOptions) {\r\n\t\tthis._hitOptions = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @return Options\r\n\t */\r\n\tpublic get hitOptions(): IHitOptions {\r\n\t\tif (this.sprite && this.sprite._adapterO) {\r\n\t\t\treturn this.sprite._adapterO.apply(\"hitOptions\", this._hitOptions);\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this._hitOptions;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Hover options.\r\n\t *\r\n\t * @param value  Options\r\n\t */\r\n\tpublic set hoverOptions(value: IHoverOptions) {\r\n\t\tthis._hoverOptions = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @return Options\r\n\t */\r\n\tpublic get hoverOptions(): IHoverOptions {\r\n\t\tif (this.sprite && this.sprite._adapterO) {\r\n\t\t\treturn this.sprite._adapterO.apply(\"hoverOptions\", this._hoverOptions);\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this._hoverOptions;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Swipe options.\r\n\t *\r\n\t * @param value  Options\r\n\t */\r\n\tpublic set swipeOptions(value: ISwipeOptions) {\r\n\t\tthis._swipeOptions = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @return Options\r\n\t */\r\n\tpublic get swipeOptions(): ISwipeOptions {\r\n\t\tif (this.sprite && this.sprite._adapterO) {\r\n\t\t\treturn this.sprite._adapterO.apply(\"swipeOptions\", this._swipeOptions);\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this._swipeOptions;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Keyboard options.\r\n\t *\r\n\t * @param value  Options\r\n\t */\r\n\tpublic set keyboardOptions(value: IKeyboardOptions) {\r\n\t\tthis._keyboardOptions = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @return Options\r\n\t */\r\n\tpublic get keyboardOptions(): IKeyboardOptions {\r\n\t\tif (this.sprite && this.sprite._adapterO) {\r\n\t\t\treturn this.sprite._adapterO.apply(\"keyboardOptions\", this._keyboardOptions);\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this._keyboardOptions;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Mouse options.\r\n\t *\r\n\t * Enables controlling options related to the mouse, for example sensitivity\r\n\t * of its mouse wheel.\r\n\t *\r\n\t * E.g. the below will reduce chart's wheel-zoom speed to half its default\r\n\t * speed:\r\n\t *\r\n\t * ```TypeScript\r\n\t * chart.plotContainer.mouseOptions.sensitivity = 0.5;\r\n\t * ```\r\n\t * ```JavaScript\r\n\t * chart.plotContainer.mouseOptions.sensitivity = 0.5;\r\n\t * ```\r\n\t * ```JSON\r\n\t * {\r\n\t *   // ...\r\n\t *   \"plotContainer\": {\r\n\t *     \"mouseOptions\": {\r\n\t *       \"sensitivity\": 0.5\r\n\t *     }\r\n\t *   }\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * @since 4.5.14\r\n\t * @param value  Options\r\n\t */\r\n\tpublic set mouseOptions(value: IMouseOptions) {\r\n\t\tthis._mouseOptions = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @return Options\r\n\t */\r\n\tpublic get mouseOptions(): IMouseOptions {\r\n\t\tif (this.sprite && this.sprite._adapterO) {\r\n\t\t\treturn this.sprite._adapterO.apply(\"mouseOptions\", this._mouseOptions);\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this._mouseOptions;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Cursor options.\r\n\t *\r\n\t * @param value  Options\r\n\t */\r\n\tpublic set cursorOptions(value: ICursorOptions) {\r\n\t\tthis._cursorOptions = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @return Options\r\n\t */\r\n\tpublic get cursorOptions(): ICursorOptions {\r\n\t\tif (this.sprite && this.sprite._adapterO) {\r\n\t\t\treturn this.sprite._adapterO.apply(\"cursorOptions\", this._cursorOptions);\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this._cursorOptions;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all properties and related assets from another object of the same\r\n\t * type.\r\n\t *\r\n\t * @param source Source object\r\n\t */\r\n\tpublic copyFrom(source: this): void {\r\n\t\tsuper.copyFrom(source);\r\n\t\tthis.inertiaOptions = source.inertiaOptions;\r\n\t\tthis.hitOptions = source.hitOptions;\r\n\t\tthis.hoverOptions = source.hoverOptions;\r\n\t\tthis.swipeOptions = source.swipeOptions;\r\n\t\tthis.keyboardOptions = source.keyboardOptions;\r\n\t\tthis.cursorOptions = source.cursorOptions;\r\n\t\tthis.contextMenuDisabled = source.contextMenuDisabled;\r\n\t\tgetInteraction().applyCursorOverStyle(this);\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic setEventDisposer(key: string, value: boolean, f: () => IDisposer): void {\r\n\t\tconst disposer = this.eventDisposers.getKey(key);\r\n\r\n\t\tif (value) {\r\n\t\t\tif (disposer == null) {\r\n\t\t\t\tthis.eventDisposers.setKey(key, f());\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\t\t\tif (disposer != null) {\r\n\t\t\t\tdisposer.dispose();\r\n\t\t\t\tthis.eventDisposers.removeKey(key);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Disposes object.\r\n\t */\r\n\tpublic dispose(): void {\r\n\t\tsuper.dispose();\r\n\r\n\t\t// Remove from all interaction registries\r\n\t\tconst interaction = getInteraction();\r\n\t\tinteraction.overObjects.removeValue(this);\r\n\t\tinteraction.downObjects.removeValue(this);\r\n\t\tinteraction.trackedObjects.removeValue(this);\r\n\t\tinteraction.transformedObjects.removeValue(this);\r\n\r\n\t\t// Unlock document wheel\r\n\t\tif (this.isHover && this.wheelable) {\r\n\t\t\tinteraction.unlockWheel();\r\n\t\t}\r\n\r\n\t\tif (interaction.focusedObject === this) {\r\n\t\t\tinteraction.focusedObject = undefined;\r\n\t\t}\r\n\t}\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}