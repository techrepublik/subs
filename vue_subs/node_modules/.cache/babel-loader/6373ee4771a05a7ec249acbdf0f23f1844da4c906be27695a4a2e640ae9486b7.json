{"ast":null,"code":"import { geoProjection as projection } from \"d3-geo\";\nimport { abs, asin, cos, epsilon, halfPi, pi, sin, sqrt } from \"./math.js\";\nexport function mtFlatPolarSinusoidalRaw(lambda, phi) {\n  var A = sqrt(6 / (4 + pi)),\n    k = (1 + pi / 4) * sin(phi),\n    theta = phi / 2;\n  for (var i = 0, delta; i < 25; i++) {\n    theta -= delta = (theta / 2 + sin(theta) - k) / (0.5 + cos(theta));\n    if (abs(delta) < epsilon) break;\n  }\n  return [A * (0.5 + cos(theta)) * lambda / 1.5, A * theta];\n}\nmtFlatPolarSinusoidalRaw.invert = function (x, y) {\n  var A = sqrt(6 / (4 + pi)),\n    theta = y / A;\n  if (abs(abs(theta) - halfPi) < epsilon) theta = theta < 0 ? -halfPi : halfPi;\n  return [1.5 * x / (A * (0.5 + cos(theta))), asin((theta / 2 + sin(theta)) / (1 + pi / 4))];\n};\nexport default function () {\n  return projection(mtFlatPolarSinusoidalRaw).scale(166.518);\n}","map":{"version":3,"names":["geoProjection","projection","abs","asin","cos","epsilon","halfPi","pi","sin","sqrt","mtFlatPolarSinusoidalRaw","lambda","phi","A","k","theta","i","delta","invert","x","y","scale"],"sources":["/home/josh/Documents/projects/subs/vue_subs/node_modules/d3-geo-projection/src/mtFlatPolarSinusoidal.js"],"sourcesContent":["import {geoProjection as projection} from \"d3-geo\";\nimport {abs, asin, cos, epsilon, halfPi, pi, sin, sqrt} from \"./math.js\";\n\nexport function mtFlatPolarSinusoidalRaw(lambda, phi) {\n  var A = sqrt(6 / (4 + pi)),\n      k = (1 + pi / 4) * sin(phi),\n      theta = phi / 2;\n  for (var i = 0, delta; i < 25; i++) {\n    theta -= delta = (theta / 2 + sin(theta) - k) / (0.5 + cos(theta));\n    if (abs(delta) < epsilon) break;\n  }\n  return [\n    A * (0.5 + cos(theta)) * lambda / 1.5,\n    A * theta\n  ];\n}\n\nmtFlatPolarSinusoidalRaw.invert = function(x, y) {\n  var A = sqrt(6 / (4 + pi)),\n      theta = y / A;\n  if (abs(abs(theta) - halfPi) < epsilon) theta = theta < 0 ? -halfPi : halfPi;\n  return [\n    1.5 * x / (A * (0.5 + cos(theta))),\n    asin((theta / 2 + sin(theta)) / (1 + pi / 4))\n  ];\n};\n\nexport default function() {\n  return projection(mtFlatPolarSinusoidalRaw)\n      .scale(166.518);\n}\n"],"mappings":"AAAA,SAAQA,aAAa,IAAIC,UAAU,QAAO,QAAQ;AAClD,SAAQC,GAAG,EAAEC,IAAI,EAAEC,GAAG,EAAEC,OAAO,EAAEC,MAAM,EAAEC,EAAE,EAAEC,GAAG,EAAEC,IAAI,QAAO,WAAW;AAExE,OAAO,SAASC,wBAAwBA,CAACC,MAAM,EAAEC,GAAG,EAAE;EACpD,IAAIC,CAAC,GAAGJ,IAAI,CAAC,CAAC,IAAI,CAAC,GAAGF,EAAE,CAAC,CAAC;IACtBO,CAAC,GAAG,CAAC,CAAC,GAAGP,EAAE,GAAG,CAAC,IAAIC,GAAG,CAACI,GAAG,CAAC;IAC3BG,KAAK,GAAGH,GAAG,GAAG,CAAC;EACnB,KAAK,IAAII,CAAC,GAAG,CAAC,EAAEC,KAAK,EAAED,CAAC,GAAG,EAAE,EAAEA,CAAC,EAAE,EAAE;IAClCD,KAAK,IAAIE,KAAK,GAAG,CAACF,KAAK,GAAG,CAAC,GAAGP,GAAG,CAACO,KAAK,CAAC,GAAGD,CAAC,KAAK,GAAG,GAAGV,GAAG,CAACW,KAAK,CAAC,CAAC;IAClE,IAAIb,GAAG,CAACe,KAAK,CAAC,GAAGZ,OAAO,EAAE;EAC5B;EACA,OAAO,CACLQ,CAAC,IAAI,GAAG,GAAGT,GAAG,CAACW,KAAK,CAAC,CAAC,GAAGJ,MAAM,GAAG,GAAG,EACrCE,CAAC,GAAGE,KAAK,CACV;AACH;AAEAL,wBAAwB,CAACQ,MAAM,GAAG,UAASC,CAAC,EAAEC,CAAC,EAAE;EAC/C,IAAIP,CAAC,GAAGJ,IAAI,CAAC,CAAC,IAAI,CAAC,GAAGF,EAAE,CAAC,CAAC;IACtBQ,KAAK,GAAGK,CAAC,GAAGP,CAAC;EACjB,IAAIX,GAAG,CAACA,GAAG,CAACa,KAAK,CAAC,GAAGT,MAAM,CAAC,GAAGD,OAAO,EAAEU,KAAK,GAAGA,KAAK,GAAG,CAAC,GAAG,CAACT,MAAM,GAAGA,MAAM;EAC5E,OAAO,CACL,GAAG,GAAGa,CAAC,IAAIN,CAAC,IAAI,GAAG,GAAGT,GAAG,CAACW,KAAK,CAAC,CAAC,CAAC,EAClCZ,IAAI,CAAC,CAACY,KAAK,GAAG,CAAC,GAAGP,GAAG,CAACO,KAAK,CAAC,KAAK,CAAC,GAAGR,EAAE,GAAG,CAAC,CAAC,CAAC,CAC9C;AACH,CAAC;AAED,eAAe,YAAW;EACxB,OAAON,UAAU,CAACS,wBAAwB,CAAC,CACtCW,KAAK,CAAC,OAAO,CAAC;AACrB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}