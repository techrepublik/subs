{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n/**\r\n * Map line module\r\n */\nimport { __extends, __values } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\nimport { MapObject } from \"./MapObject\";\nimport { MapLineObject } from \"./MapLineObject\";\nimport { MapImage } from \"./MapImage\";\nimport { MapImageSeries } from \"./MapImageSeries\";\nimport { Triangle } from \"../../core/elements/Triangle\";\nimport { ListTemplate, ListDisposer } from \"../../core/utils/List\";\nimport { Polyline } from \"../../core/elements/Polyline\";\nimport { registry } from \"../../core/Registry\";\nimport { color } from \"../../core/utils/Color\";\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\nimport { percent, Percent } from \"../../core/utils/Percent\";\nimport * as $type from \"../../core/utils/Type\";\nimport * as $iter from \"../../core/utils/Iterator\";\nimport * as $geo from \"./Geo\";\nimport * as $mapUtils from \"./MapUtils\";\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n/**\r\n * Used to draw a line on the map.\r\n *\r\n * @see {@link IMapLineEvents} for a list of available events\r\n * @see {@link IMapLineAdapters} for a list of available Adapters\r\n */\nvar MapLine = /** @class */function (_super) {\n  __extends(MapLine, _super);\n  /**\r\n   * Constructor\r\n   */\n  function MapLine() {\n    var _this =\n    // Init\n    _super.call(this) || this;\n    /**\r\n     * A list of event disposers for images.\r\n     */\n    _this._imageListeners = {};\n    _this.className = \"MapLine\";\n    _this.createLine();\n    _this.line.stroke = color();\n    _this.line.parent = _this;\n    _this.strokeOpacity = 1;\n    _this.setPropertyValue(\"precision\", 0.1);\n    var interfaceColors = new InterfaceColorSet();\n    _this.stroke = interfaceColors.getFor(\"grid\");\n    _this.shortestDistance = true;\n    // Apply theme\n    _this.applyTheme();\n    return _this;\n  }\n  /**\r\n   * @ignore\r\n   */\n  MapLine.prototype.createLine = function () {\n    this.line = new Polyline();\n  };\n  /**\r\n   * Converts a position within the line (0-1) to a physical point\r\n   * coordinates.\r\n   *\r\n   * 0 indicates start of the line, 0.5 - middle, while 1 indicates the end.\r\n   *\r\n   * @param position  Position (0-1)\r\n   * @return Coordinates\r\n   */\n  MapLine.prototype.positionToPoint = function (position) {\n    if (this.shortestDistance) {\n      return this.series.chart.projection.positionToPoint(this.multiGeoLine, position);\n    } else {\n      if (this.line) {\n        return this.line.positionToPoint(position);\n      }\n    }\n    return {\n      x: 0,\n      y: 0,\n      angle: 0\n    };\n  };\n  Object.defineProperty(MapLine.prototype, \"multiGeoLine\", {\n    /**\r\n     * @return Coordinates\r\n     */\n    get: function () {\n      var multiGeoLine = this.getPropertyValue(\"multiGeoLine\");\n      if (!multiGeoLine && this.dataItem && this.dataItem.multiGeoLine) {\n        multiGeoLine = this.dataItem.multiGeoLine;\n      }\n      return multiGeoLine;\n    },\n    /**\r\n     * A collection of X/Y coordinates for a multi-segment line. E.g.:\r\n     *\r\n     * ```JSON\r\n     * [\r\n     *   // Segment 1\r\n     *   [\r\n     *     { longitude: 3.121, latitude: 0.58 },\r\n     *     { longitude: -5.199, latitude: 21.223 }\r\n     *   ],\r\n     *\r\n     *   // Segment 2\r\n     *   [\r\n     *     { longitude: -5.199, latitude: 21.223 },\r\n     *     { longitude: -12.9, latitude: 25.85 }\r\n     *   ]\r\n     * ]\r\n     * ```\r\n     *\r\n     * @see {@link https://tools.ietf.org/html/rfc7946#section-3.1.5} GeoJSON MultiLineString reference\r\n     * @param multiGeoLine  Coordinates\r\n     */\n    set: function (multiGeoLine) {\n      if (multiGeoLine && multiGeoLine.length > 0) {\n        this.setPropertyValue(\"multiGeoLine\", $geo.normalizeMultiline(multiGeoLine), true);\n        var multiLine = $mapUtils.multiGeoLineToMultiLine(multiGeoLine);\n        this.setPropertyValue(\"multiLine\", multiLine);\n        this.updateExtremes();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MapLine.prototype, \"multiLine\", {\n    /**\r\n     * @return Coordinates\r\n     */\n    get: function () {\n      var multiLine = this.getPropertyValue(\"multiLine\");\n      if (!multiLine && this.dataItem && this.dataItem.multiLine) {\n        multiLine = this.dataItem.multiLine;\n      }\n      return multiLine;\n    },\n    /**\r\n     * A collection of X/Y coordinates for a multi-segment line. E.g.:\r\n     *\r\n     * ```JSON\r\n     * [\r\n     *   // Segment 1\r\n     *   [\r\n     *     [ 100, 150 ],\r\n     *     [ 120, 200 ]\r\n     *   ],\r\n     *\r\n     *   // Segment 2\r\n     *   [\r\n     *     [ 120, 200 ],\r\n     *     [ 150, 100 ]\r\n     *   ]\r\n     * ]\r\n     * ```\r\n     *\r\n     * @param multiLine  Coordinates\r\n     */\n    set: function (multiLine) {\n      this.setPropertyValue(\"multiLine\", multiLine);\n      this.multiGeoLine = $mapUtils.multiLineToGeo(multiLine);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MapLine.prototype, \"imagesToConnect\", {\n    /**\r\n     * @return {MapImages[]}\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"imagesToConnect\");\n    },\n    /**\r\n     * Instead of setting longitudes/latitudes you can set an array of images\r\n     * which will be connected by the line.\r\n     *\r\n     * Parameter is an array that can hold string `id`'s to of the images, or\r\n     * references to actual [[MapImage]] objects.\r\n     *\r\n     * @param images  Images\r\n     */\n    set: function (images) {\n      var _this = this;\n      this.setPropertyValue(\"imagesToConnect\", images, true);\n      this.handleImagesToConnect();\n      if (this.series) {\n        var chart = this.series.chart;\n        if (chart) {\n          chart.series.each(function (series) {\n            if (series instanceof MapImageSeries) {\n              if (!series.isReady()) {\n                _this._disposers.push(series.events.on(\"ready\", _this.handleImagesToConnect, _this, false));\n              }\n            }\n          });\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  MapLine.prototype.handleImagesToConnect = function () {\n    var e_1, _a;\n    var _this = this;\n    if (this.imagesToConnect) {\n      var segment = [];\n      var multiGeoLine = [segment];\n      var _loop_1 = function (image) {\n        if ($type.isString(image)) {\n          var chart = this_1.series.chart;\n          if (chart) {\n            chart.series.each(function (series) {\n              if (series instanceof MapImageSeries) {\n                var img = series.getImageById(image);\n                if (img) {\n                  image = img;\n                }\n              }\n            });\n          }\n        }\n        if (image instanceof MapImage) {\n          segment.push({\n            longitude: image.longitude,\n            latitude: image.latitude\n          });\n          if (!this_1._imageListeners[image.uid]) {\n            var disposer = image.events.on(\"propertychanged\", function (event) {\n              if (event.property == \"longitude\" || event.property == \"latitude\") {\n                _this.handleImagesToConnect();\n                _this.invalidate();\n              }\n            }, this_1, false);\n            this_1._imageListeners[image.uid] = disposer;\n            this_1._disposers.push(disposer);\n          }\n        }\n      };\n      var this_1 = this;\n      try {\n        for (var _b = __values(this.imagesToConnect), _c = _b.next(); !_c.done; _c = _b.next()) {\n          var image = _c.value;\n          _loop_1(image);\n        }\n      } catch (e_1_1) {\n        e_1 = {\n          error: e_1_1\n        };\n      } finally {\n        try {\n          if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n        } finally {\n          if (e_1) throw e_1.error;\n        }\n      }\n      this.multiGeoLine = multiGeoLine;\n    }\n  };\n  /**\r\n   * (Re)validates the line, effectively forcing it to redraw.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  MapLine.prototype.validate = function () {\n    var chart = this.series.chart;\n    if (this.multiLine) {\n      if (!this.shortestDistance) {\n        var convertedPoints = [];\n        for (var i = 0, len = this.multiLine.length; i < len; i++) {\n          var segment = this.multiLine[i];\n          var convertedSegmentPoints = [];\n          for (var s = 0, slen = segment.length; s < slen; s++) {\n            var geoPoint = segment[s];\n            var point = this.series.chart.projection.convert({\n              longitude: geoPoint[0],\n              latitude: geoPoint[1]\n            });\n            convertedSegmentPoints.push(point);\n          }\n          convertedPoints.push(convertedSegmentPoints);\n        }\n        this.line.segments = convertedPoints;\n      } else {\n        chart.projection.d3Projection.precision(this.precision);\n        this.line.path = chart.projection.d3Path(this.getFeature());\n      }\n      if (this._arrow) {\n        this._arrow.validatePosition();\n      }\n      $iter.each(this.lineObjects.iterator(), function (x) {\n        x.validatePosition();\n      });\n      this.handleGlobalScale();\n    } else if (this.imagesToConnect) {\n      this.handleImagesToConnect();\n    }\n    _super.prototype.validate.call(this);\n  };\n  /**\r\n   * @ignore\r\n   */\n  MapLine.prototype.getFeature = function () {\n    if (this.multiLine && this.multiLine.length > 0 && this.multiLine[0] && this.multiLine[0].length > 0) {\n      return {\n        \"type\": \"Feature\",\n        geometry: {\n          type: \"MultiLineString\",\n          coordinates: this.multiLine\n        }\n      };\n    }\n  };\n  /**\r\n   * @ignore Exclude from docs\r\n   */\n  MapLine.prototype.measureElement = function () {\n    // Overriding, just to avoid extra measure\n  };\n  Object.defineProperty(MapLine.prototype, \"shortestDistance\", {\n    /**\r\n     * @return Real path?\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"shortestDistance\");\n    },\n    /**\r\n     * The line should take the shortest path over the globe.\r\n     *\r\n     * Enabling this will make the line look differently in different\r\n     * projections. Only `MapLine` supports this setting, `MapArc` and\r\n     * `MapSplice` don't.\r\n     *\r\n     * @default true\r\n     * @param value  Real path?\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"shortestDistance\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MapLine.prototype, \"lineObjects\", {\n    /**\r\n     * List of separate line objects the line consists of.\r\n     *\r\n     * @readonly\r\n     * @return List of line objects\r\n     */\n    get: function () {\n      if (!this._lineObjects) {\n        this._lineObjects = new ListTemplate(new MapLineObject());\n        this._lineObjects.events.on(\"inserted\", this.handleLineObjectAdded, this, false);\n        this._disposers.push(new ListDisposer(this._lineObjects));\n        this._disposers.push(this._lineObjects.template);\n      }\n      return this._lineObjects;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Decorate a [[LineObject]] when it is added to the line.\r\n   *\r\n   * @param event  Event\r\n   */\n  MapLine.prototype.handleLineObjectAdded = function (event) {\n    var mapLineObject = event.newValue;\n    mapLineObject.mapLine = this;\n    mapLineObject.shouldClone = false;\n    mapLineObject.parent = this;\n  };\n  Object.defineProperty(MapLine.prototype, \"arrow\", {\n    /**\r\n     * @return Arrow element\r\n     */\n    get: function () {\n      if (!this._arrow) {\n        var arrow = this.createChild(MapLineObject);\n        arrow.shouldClone = false;\n        arrow.width = 8;\n        arrow.height = 10;\n        arrow.mapLine = this;\n        arrow.position = 0.5;\n        var triangle = arrow.createChild(Triangle);\n        //triangle.shouldClone = false;\n        triangle.fillOpacity = 1;\n        triangle.width = percent(100);\n        triangle.height = percent(100);\n        triangle.rotation = 90;\n        triangle.horizontalCenter = \"middle\";\n        triangle.verticalCenter = \"middle\";\n        this._arrow = arrow;\n      }\n      return this._arrow;\n    },\n    /**\r\n     * A [[MapLineObject]] to use as an option arrowhead on the line.\r\n     *\r\n     * Just accessing this property will create a default arrowhead on the line\r\n     * automatically.\r\n     *\r\n     * @param arrow  Arrow element\r\n     */\n    set: function (arrow) {\n      this._arrow = arrow;\n      arrow.mapLine = this;\n      arrow.parent = this;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Copies line properties and other attributes, like arrow, from another\r\n   * instance of [[MapLine]].\r\n   *\r\n   * @param source  Source map line\r\n   */\n  MapLine.prototype.copyFrom = function (source) {\n    _super.prototype.copyFrom.call(this, source);\n    this.line.copyFrom(source.line);\n    this.lineObjects.copyFrom(source.lineObjects);\n    if (source._arrow) {\n      this.arrow = source.arrow.clone();\n    }\n  };\n  Object.defineProperty(MapLine.prototype, \"latitude\", {\n    /**\r\n     * Latitude of the line center.\r\n     *\r\n     * @readonly\r\n     * @return Latitude\r\n     */\n    get: function () {\n      return this.north + (this.south - this.north) / 2;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MapLine.prototype, \"longitude\", {\n    /**\r\n     * Longitude of the line center.\r\n     *\r\n     * @readonly\r\n     * @return Latitude\r\n     */\n    get: function () {\n      return this.east + (this.west - this.east) / 2;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * X coordinate for the slice tooltip.\r\n   *\r\n   * @ignore\r\n   * @return X\r\n   */\n  MapLine.prototype.getTooltipX = function () {\n    var x = this.getPropertyValue(\"tooltipX\");\n    if (!(x instanceof Percent)) {\n      x = percent(50);\n    }\n    if (x instanceof Percent) {\n      return this.positionToPoint(x.value).x;\n    } else {\n      return 0;\n    }\n  };\n  /**\r\n   * Y coordinate for the slice tooltip.\r\n   *\r\n   * @ignore\r\n   * @return Y\r\n   */\n  MapLine.prototype.getTooltipY = function () {\n    var y = this.getPropertyValue(\"tooltipY\");\n    if (!(y instanceof Percent)) {\n      y = percent(50);\n    }\n    if (y instanceof Percent) {\n      return this.positionToPoint(y.value).y;\n    } else {\n      return 0;\n    }\n  };\n  Object.defineProperty(MapLine.prototype, \"precision\", {\n    /**\r\n     * @return Precision\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"precision\");\n    },\n    /**\r\n     * When line is plotted, if its `shortestDistance` is set to `true` it is\r\n     * bent according to the used projection, to depict the shortest distance how\r\n     * it would go on the actual land.\r\n     *\r\n     * `precision` introduces a setting which can control when such bending\r\n     * occurs.\r\n     *\r\n     * If the distance (in degrees) between line start and end points\r\n     * is less than `precision`, no bending will take place and the line will be\r\n     * straight.\r\n     *\r\n     * Set to large number (e.g. 10000) for perfectly straight line.\r\n     *\r\n     * @since 4.9.1\r\n     * @default 0.1\r\n     * @param  value  Precision\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"precision\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return MapLine;\n}(MapObject);\nexport { MapLine };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\nregistry.registeredClasses[\"MapLine\"] = MapLine;","map":{"version":3,"names":["MapObject","MapLineObject","MapImage","MapImageSeries","Triangle","ListTemplate","ListDisposer","Polyline","registry","color","InterfaceColorSet","percent","Percent","$type","$iter","$geo","$mapUtils","MapLine","_super","__extends","_this","call","_imageListeners","className","createLine","line","stroke","parent","strokeOpacity","setPropertyValue","interfaceColors","getFor","shortestDistance","applyTheme","prototype","positionToPoint","position","series","chart","projection","multiGeoLine","x","y","angle","Object","defineProperty","get","getPropertyValue","dataItem","set","length","normalizeMultiline","multiLine","multiGeoLineToMultiLine","updateExtremes","multiLineToGeo","images","handleImagesToConnect","each","isReady","_disposers","push","events","on","imagesToConnect","segment","image","isString","this_1","img","getImageById","longitude","latitude","uid","disposer","event","property","invalidate","_b","__values","_c","next","done","value","validate","convertedPoints","i","len","convertedSegmentPoints","s","slen","geoPoint","point","convert","segments","d3Projection","precision","path","d3Path","getFeature","_arrow","validatePosition","lineObjects","iterator","handleGlobalScale","geometry","type","coordinates","measureElement","_lineObjects","handleLineObjectAdded","template","mapLineObject","newValue","mapLine","shouldClone","arrow","createChild","width","height","triangle","fillOpacity","rotation","horizontalCenter","verticalCenter","copyFrom","source","clone","north","south","east","west","getTooltipX","getTooltipY","registeredClasses"],"sources":["../../../../../src/.internal/charts/map/MapLine.ts"],"sourcesContent":["/**\r\n * Map line module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { MapObject, IMapObjectProperties, IMapObjectAdapters, IMapObjectEvents } from \"./MapObject\";\r\nimport { MapLineObject } from \"./MapLineObject\";\r\nimport { MapLineSeriesDataItem, MapLineSeries } from \"./MapLineSeries\";\r\nimport { MapChart } from \"../types/MapChart\";\r\nimport { MapImage } from \"./MapImage\";\r\nimport { MapImageSeries } from \"./MapImageSeries\";\r\nimport { IOrientationPoint } from \"../../core/defs/IPoint\";\r\nimport { IGeoPoint } from \"../../core/defs/IGeoPoint\";\r\nimport { Triangle } from \"../../core/elements/Triangle\";\r\nimport { ListTemplate, IListEvents, ListDisposer } from \"../../core/utils/List\";\r\nimport { Polyline } from \"../../core/elements/Polyline\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { color } from \"../../core/utils/Color\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport { percent, Percent } from \"../../core/utils/Percent\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport { IDisposer } from \"../../core/utils/Disposer\";\r\nimport * as $geo from \"./Geo\";\r\nimport * as $mapUtils from \"./MapUtils\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\n\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[MapLine]].\r\n */\r\nexport interface IMapLineProperties extends IMapObjectProperties {\r\n\r\n\t/**\r\n\t * Lat/long coordinates of all line ends and intermediate elbows.\r\n\t */\r\n\tmultiGeoLine?: Array<Array<IGeoPoint>>;\r\n\r\n\t/**\r\n\t * Lat/long coordinates of all line ends and intermediate elbows.\r\n\t */\r\n\tmultiLine?: Array<Array<[number, number]>>;\r\n\r\n\t/**\r\n\t * If `true` it line will be arched in the way to simulate shortest path\r\n\t * over curvature of Earth's surface, based on currently used on projection.\r\n\t */\r\n\tshortestDistance?: boolean;\r\n\r\n\t/**\r\n\t * Instead of setting longitudes/latitudes you can set an array of images which will be connected by the line\r\n\t */\r\n\timagesToConnect?: MapImage[];\r\n\r\n\t/**\r\n\t * When line is plotted, if its `shortestDistance` is set to `true` it is\r\n\t * bent according to the used projection, to depict the shortest distance how\r\n\t * it would go on the actual land.\r\n\t *\r\n\t * `precision` introduces a setting which can control when such bending\r\n\t * occurs.\r\n\t *\r\n\t * If the distance (in degrees) between line start and end points\r\n\t * is less than `precision`, no bending will take place and the line will be\r\n\t * straight.\r\n\t *\r\n\t * Set to large number (e.g. 10000) for perfectly straight line.\r\n\t *\r\n\t * @since 4.9.1\r\n\t * @default 0.1\r\n\t */\r\n\tprecision?: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[MapLine]].\r\n */\r\nexport interface IMapLineEvents extends IMapObjectEvents { }\r\n\r\n/**\r\n * Defines adapters for [[MapLine]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IMapLineAdapters extends IMapObjectAdapters, IMapLineProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Used to draw a line on the map.\r\n *\r\n * @see {@link IMapLineEvents} for a list of available events\r\n * @see {@link IMapLineAdapters} for a list of available Adapters\r\n */\r\nexport class MapLine extends MapObject {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IMapLineProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IMapLineAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IMapLineEvents;\r\n\r\n\t/**\r\n\t * A line visual element.\r\n\t */\r\n\tpublic line: Polyline;\r\n\r\n\t/**\r\n\t * A list of actual line objects.\r\n\t */\r\n\tprotected _lineObjects: ListTemplate<MapLineObject>;\r\n\r\n\t/**\r\n\t * A reference to arrow object.\r\n\t */\r\n\tprotected _arrow: MapLineObject;\r\n\r\n\t/**\r\n\t * Related data item.\r\n\t */\r\n\tpublic _dataItem: MapLineSeriesDataItem;\r\n\r\n\t/**\r\n\t * A map series this object belongs to.\r\n\t */\r\n\tpublic series: MapLineSeries;\r\n\r\n\t/**\r\n\t * Instead of setting longitudes/latitudes you can set an array of images\r\n\t * which will be connected by the line.\r\n\t */\r\n\tprotected _imagesToConnect: MapImage[];\r\n\r\n\t/**\r\n\t * A list of event disposers for images.\r\n\t */\r\n\tprotected _imageListeners: { [index: string]: IDisposer } = {};\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"MapLine\";\r\n\r\n\t\tthis.createLine();\r\n\t\tthis.line.stroke = color();\r\n\t\tthis.line.parent = this;\r\n\t\tthis.strokeOpacity = 1;\r\n\t\tthis.setPropertyValue(\"precision\", 0.1);\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\r\n\t\tthis.stroke = interfaceColors.getFor(\"grid\");\r\n\t\tthis.shortestDistance = true;\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected createLine() {\r\n\t\tthis.line = new Polyline();\r\n\t}\r\n\r\n\t/**\r\n\t * Converts a position within the line (0-1) to a physical point\r\n\t * coordinates.\r\n\t *\r\n\t * 0 indicates start of the line, 0.5 - middle, while 1 indicates the end.\r\n\t *\r\n\t * @param position  Position (0-1)\r\n\t * @return Coordinates\r\n\t */\r\n\tpublic positionToPoint(position: number): IOrientationPoint {\r\n\t\tif (this.shortestDistance) {\r\n\t\t\treturn this.series.chart.projection.positionToPoint(this.multiGeoLine, position);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tif (this.line) {\r\n\t\t\t\treturn this.line.positionToPoint(position);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn { x: 0, y: 0, angle: 0 };\r\n\t}\r\n\r\n\t/**\r\n\t * A collection of X/Y coordinates for a multi-segment line. E.g.:\r\n\t *\r\n\t * ```JSON\r\n\t * [\r\n\t *   // Segment 1\r\n\t *   [\r\n\t *     { longitude: 3.121, latitude: 0.58 },\r\n\t *     { longitude: -5.199, latitude: 21.223 }\r\n\t *   ],\r\n\t *\r\n\t *   // Segment 2\r\n\t *   [\r\n\t *     { longitude: -5.199, latitude: 21.223 },\r\n\t *     { longitude: -12.9, latitude: 25.85 }\r\n\t *   ]\r\n\t * ]\r\n\t * ```\r\n\t *\r\n\t * @see {@link https://tools.ietf.org/html/rfc7946#section-3.1.5} GeoJSON MultiLineString reference\r\n\t * @param multiGeoLine  Coordinates\r\n\t */\r\n\tpublic set multiGeoLine(multiGeoLine: Array<Array<IGeoPoint>>) {\r\n\t\tif (multiGeoLine && multiGeoLine.length > 0) {\r\n\t\t\tthis.setPropertyValue(\"multiGeoLine\", $geo.normalizeMultiline(multiGeoLine), true);\r\n\r\n\t\t\tlet multiLine: Array<Array<[number, number]>> = $mapUtils.multiGeoLineToMultiLine(multiGeoLine);\r\n\r\n\t\t\tthis.setPropertyValue(\"multiLine\", multiLine);\r\n\r\n\t\t\tthis.updateExtremes();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Coordinates\r\n\t */\r\n\tpublic get multiGeoLine(): Array<Array<IGeoPoint>> {\r\n\t\tlet multiGeoLine = this.getPropertyValue(\"multiGeoLine\");\r\n\t\tif (!multiGeoLine && this.dataItem && this.dataItem.multiGeoLine) {\r\n\t\t\tmultiGeoLine = this.dataItem.multiGeoLine;\r\n\t\t}\r\n\r\n\t\treturn multiGeoLine;\r\n\t}\r\n\r\n\t/**\r\n\t * A collection of X/Y coordinates for a multi-segment line. E.g.:\r\n\t *\r\n\t * ```JSON\r\n\t * [\r\n\t *   // Segment 1\r\n\t *   [\r\n\t *     [ 100, 150 ],\r\n\t *     [ 120, 200 ]\r\n\t *   ],\r\n\t *\r\n\t *   // Segment 2\r\n\t *   [\r\n\t *     [ 120, 200 ],\r\n\t *     [ 150, 100 ]\r\n\t *   ]\r\n\t * ]\r\n\t * ```\r\n\t *\r\n\t * @param multiLine  Coordinates\r\n\t */\r\n\tpublic set multiLine(multiLine: Array<Array<[number, number]>>) {\r\n\t\tthis.setPropertyValue(\"multiLine\", multiLine);\r\n\t\tthis.multiGeoLine = $mapUtils.multiLineToGeo(multiLine);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Coordinates\r\n\t */\r\n\tpublic get multiLine(): Array<Array<[number, number]>> {\r\n\r\n\t\tlet multiLine = this.getPropertyValue(\"multiLine\");\r\n\t\tif (!multiLine && this.dataItem && this.dataItem.multiLine) {\r\n\t\t\tmultiLine = this.dataItem.multiLine;\r\n\t\t}\r\n\r\n\t\treturn multiLine;\r\n\t}\r\n\r\n\t/**\r\n\t * Instead of setting longitudes/latitudes you can set an array of images\r\n\t * which will be connected by the line.\r\n\t *\r\n\t * Parameter is an array that can hold string `id`'s to of the images, or\r\n\t * references to actual [[MapImage]] objects.\r\n\t *\r\n\t * @param images  Images\r\n\t */\r\n\tpublic set imagesToConnect(images: MapImage[] | string[]) {\r\n\t\tthis.setPropertyValue(\"imagesToConnect\", images, true);\r\n\t\tthis.handleImagesToConnect();\r\n\r\n\t\tif (this.series) {\r\n\t\t\tlet chart = this.series.chart;\r\n\t\t\tif (chart) {\r\n\t\t\t\tchart.series.each((series) => {\r\n\t\t\t\t\tif (series instanceof MapImageSeries) {\r\n\t\t\t\t\t\tif (!series.isReady()) {\r\n\t\t\t\t\t\t\tthis._disposers.push(series.events.on(\"ready\", this.handleImagesToConnect, this, false));\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t})\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {MapImages[]}\r\n\t */\r\n\tpublic get imagesToConnect(): MapImage[] | string[] {\r\n\t\treturn this.getPropertyValue(\"imagesToConnect\");\r\n\t}\r\n\r\n\tprotected handleImagesToConnect() {\r\n\t\tif (this.imagesToConnect) {\r\n\t\t\tlet segment: Array<IGeoPoint> = [];\r\n\t\t\tlet multiGeoLine = [segment];\r\n\r\n\t\t\tfor (let image of this.imagesToConnect) {\r\n\t\t\t\tif ($type.isString(image)) {\r\n\t\t\t\t\tlet chart = this.series.chart;\r\n\t\t\t\t\tif (chart) {\r\n\t\t\t\t\t\tchart.series.each((series) => {\r\n\t\t\t\t\t\t\tif (series instanceof MapImageSeries) {\r\n\t\t\t\t\t\t\t\tlet img = series.getImageById(<string>image)\r\n\t\t\t\t\t\t\t\tif (img) {\r\n\t\t\t\t\t\t\t\t\timage = img;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (image instanceof MapImage) {\r\n\r\n\t\t\t\t\tsegment.push({ longitude: (<MapImage>image).longitude, latitude: (<MapImage>image).latitude });\r\n\r\n\t\t\t\t\tif (!this._imageListeners[image.uid]) {\r\n\t\t\t\t\t\tlet disposer = image.events.on(\"propertychanged\", (event) => {\r\n\t\t\t\t\t\t\tif (event.property == \"longitude\" || event.property == \"latitude\") {\r\n\t\t\t\t\t\t\t\tthis.handleImagesToConnect();\r\n\t\t\t\t\t\t\t\tthis.invalidate();\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}, this, false);\r\n\t\t\t\t\t\tthis._imageListeners[image.uid] = disposer;\r\n\t\t\t\t\t\tthis._disposers.push(disposer);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tthis.multiGeoLine = multiGeoLine;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the line, effectively forcing it to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\t\tlet chart: MapChart = this.series.chart;\r\n\r\n\t\tif (this.multiLine) {\r\n\r\n\t\t\tif (!this.shortestDistance) {\r\n\r\n\t\t\t\tlet convertedPoints: Array<Array<IPoint>> = [];\r\n\r\n\t\t\t\tfor (let i = 0, len = this.multiLine.length; i < len; i++) {\r\n\r\n\t\t\t\t\tlet segment: Array<[number, number]> = this.multiLine[i];\r\n\r\n\t\t\t\t\tlet convertedSegmentPoints: Array<IPoint> = [];\r\n\r\n\t\t\t\t\tfor (let s = 0, slen = segment.length; s < slen; s++) {\r\n\t\t\t\t\t\tlet geoPoint: [number, number] = segment[s];\r\n\t\t\t\t\t\tlet point: IPoint = this.series.chart.projection.convert({ longitude: geoPoint[0], latitude: geoPoint[1] });\r\n\t\t\t\t\t\tconvertedSegmentPoints.push(point);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tconvertedPoints.push(convertedSegmentPoints);\r\n\t\t\t\t}\r\n\t\t\t\tthis.line.segments = convertedPoints;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tchart.projection.d3Projection.precision(this.precision);\r\n\t\t\t\tthis.line.path = chart.projection.d3Path(<any>this.getFeature());\r\n\t\t\t}\r\n\r\n\t\t\tif (this._arrow) {\r\n\t\t\t\tthis._arrow.validatePosition();\r\n\t\t\t}\r\n\r\n\t\t\t$iter.each(this.lineObjects.iterator(), (x) => {\r\n\t\t\t\tx.validatePosition();\r\n\t\t\t});\r\n\r\n\t\t\tthis.handleGlobalScale();\r\n\t\t}\r\n\t\telse if (this.imagesToConnect) {\r\n\t\t\tthis.handleImagesToConnect();\r\n\t\t}\r\n\r\n\r\n\t\tsuper.validate();\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic getFeature(): { \"type\": \"Feature\", geometry: { type: \"MultiLineString\", coordinates: Array<Array<[number, number]>> } } {\r\n\t\tif (this.multiLine && this.multiLine.length > 0 && this.multiLine[0] && this.multiLine[0].length > 0) {\r\n\t\t\treturn { \"type\": \"Feature\", geometry: { type: \"MultiLineString\", coordinates: this.multiLine } };\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic measureElement(): void {\r\n\t\t// Overriding, just to avoid extra measure\r\n\t}\r\n\r\n\t/**\r\n\t * The line should take the shortest path over the globe.\r\n\t *\r\n\t * Enabling this will make the line look differently in different\r\n\t * projections. Only `MapLine` supports this setting, `MapArc` and\r\n\t * `MapSplice` don't.\r\n\t *\r\n\t * @default true\r\n\t * @param value  Real path?\r\n\t */\r\n\tpublic set shortestDistance(value: boolean) {\r\n\t\tthis.setPropertyValue(\"shortestDistance\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Real path?\r\n\t */\r\n\tpublic get shortestDistance(): boolean {\r\n\t\treturn this.getPropertyValue(\"shortestDistance\");\r\n\t}\r\n\r\n\t/**\r\n\t * List of separate line objects the line consists of.\r\n\t *\r\n\t * @readonly\r\n\t * @return List of line objects\r\n\t */\r\n\tpublic get lineObjects(): ListTemplate<MapLineObject> {\r\n\t\tif (!this._lineObjects) {\r\n\t\t\tthis._lineObjects = new ListTemplate<MapLineObject>(new MapLineObject());\r\n\t\t\tthis._lineObjects.events.on(\"inserted\", this.handleLineObjectAdded, this, false);\r\n\t\t\tthis._disposers.push(new ListDisposer(this._lineObjects));\r\n\t\t\tthis._disposers.push(this._lineObjects.template);\r\n\t\t}\r\n\r\n\t\treturn this._lineObjects;\r\n\t}\r\n\r\n\t/**\r\n\t * Decorate a [[LineObject]] when it is added to the line.\r\n\t *\r\n\t * @param event  Event\r\n\t */\r\n\tprotected handleLineObjectAdded(event: IListEvents<MapLineObject>[\"inserted\"]) {\r\n\t\tlet mapLineObject: MapLineObject = event.newValue;\r\n\t\tmapLineObject.mapLine = this;\r\n\t\tmapLineObject.shouldClone = false;\r\n\t\tmapLineObject.parent = this;\r\n\t}\r\n\r\n\t/**\r\n\t * A [[MapLineObject]] to use as an option arrowhead on the line.\r\n\t *\r\n\t * Just accessing this property will create a default arrowhead on the line\r\n\t * automatically.\r\n\t *\r\n\t * @param arrow  Arrow element\r\n\t */\r\n\tpublic set arrow(arrow: MapLineObject) {\r\n\t\tthis._arrow = arrow;\r\n\t\tarrow.mapLine = this;\r\n\t\tarrow.parent = this;\r\n\t}\r\n\r\n\t/**\r\n\t * @return Arrow element\r\n\t */\r\n\tpublic get arrow(): MapLineObject {\r\n\t\tif (!this._arrow) {\r\n\t\t\tlet arrow: MapLineObject = this.createChild(MapLineObject);\r\n\t\t\tarrow.shouldClone = false;\r\n\t\t\tarrow.width = 8;\r\n\t\t\tarrow.height = 10;\r\n\t\t\tarrow.mapLine = this;\r\n\t\t\tarrow.position = 0.5;\r\n\r\n\t\t\tlet triangle = arrow.createChild(Triangle);\r\n\t\t\t//triangle.shouldClone = false;\r\n\t\t\ttriangle.fillOpacity = 1;\r\n\t\t\ttriangle.width = percent(100);\r\n\t\t\ttriangle.height = percent(100);\r\n\t\t\ttriangle.rotation = 90;\r\n\t\t\ttriangle.horizontalCenter = \"middle\";\r\n\t\t\ttriangle.verticalCenter = \"middle\";\r\n\t\t\tthis._arrow = arrow;\r\n\t\t}\r\n\t\treturn this._arrow;\r\n\t}\r\n\r\n\t/**\r\n\t * Copies line properties and other attributes, like arrow, from another\r\n\t * instance of [[MapLine]].\r\n\t *\r\n\t * @param source  Source map line\r\n\t */\r\n\tpublic copyFrom(source: this): void {\r\n\t\tsuper.copyFrom(source);\r\n\t\tthis.line.copyFrom(source.line);\r\n\t\tthis.lineObjects.copyFrom(source.lineObjects);\r\n\t\tif (source._arrow) {\r\n\t\t\tthis.arrow = <MapLineObject>source.arrow.clone();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Latitude of the line center.\r\n\t *\r\n\t * @readonly\r\n\t * @return Latitude\r\n\t */\r\n\tpublic get latitude(): number {\r\n\t\treturn this.north + (this.south - this.north) / 2;\r\n\t}\r\n\r\n\t/**\r\n\t * Longitude of the line center.\r\n\t *\r\n\t * @readonly\r\n\t * @return Latitude\r\n\t */\r\n\tpublic get longitude(): number {\r\n\t\treturn this.east + (this.west - this.east) / 2;\r\n\t}\r\n\r\n\t/**\r\n\t * X coordinate for the slice tooltip.\r\n\t *\r\n\t * @ignore\r\n\t * @return X\r\n\t */\r\n\tpublic getTooltipX(): number {\r\n\t\tlet x = this.getPropertyValue(\"tooltipX\");\r\n\t\tif (!(x instanceof Percent)) {\r\n\t\t\tx = percent(50);\r\n\t\t}\r\n\t\tif (x instanceof Percent) {\r\n\t\t\treturn this.positionToPoint(x.value).x;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Y coordinate for the slice tooltip.\r\n\t *\r\n\t * @ignore\r\n\t * @return Y\r\n\t */\r\n\tpublic getTooltipY(): number {\r\n\t\tlet y = this.getPropertyValue(\"tooltipY\");\r\n\t\tif (!(y instanceof Percent)) {\r\n\t\t\ty = percent(50);\r\n\t\t}\r\n\t\tif (y instanceof Percent) {\r\n\t\t\treturn this.positionToPoint(y.value).y;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * When line is plotted, if its `shortestDistance` is set to `true` it is\r\n\t * bent according to the used projection, to depict the shortest distance how\r\n\t * it would go on the actual land.\r\n\t *\r\n\t * `precision` introduces a setting which can control when such bending\r\n\t * occurs.\r\n\t *\r\n\t * If the distance (in degrees) between line start and end points\r\n\t * is less than `precision`, no bending will take place and the line will be\r\n\t * straight.\r\n\t *\r\n\t * Set to large number (e.g. 10000) for perfectly straight line.\r\n\t *\r\n\t * @since 4.9.1\r\n\t * @default 0.1\r\n\t * @param  value  Precision\r\n\t */\r\n\tpublic set precision(value: number) {\r\n\t\tthis.setPropertyValue(\"precision\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Precision\r\n\t */\r\n\tpublic get precision(): number {\r\n\t\treturn this.getPropertyValue(\"precision\");\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"MapLine\"] = MapLine;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}