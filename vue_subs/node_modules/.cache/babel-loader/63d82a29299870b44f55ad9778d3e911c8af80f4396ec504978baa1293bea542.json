{"ast":null,"code":"/**\r\n * Paper class just like the white sheet of pressed fiber it draws its name\r\n * inspiration from is used as a starting point to start a drawing.\r\n *\r\n * Before we can start adding elements (drawing) we need to take out a new sheet\r\n * of paper, or in this instance create a blank SVG element.\r\n *\r\n * This class creates such element, as well as implements methods needed to\r\n * start adding elements to it.\r\n */\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\nimport { AMElement } from \"./AMElement\";\nimport { Group } from \"./Group\";\nimport { SVGContainer } from \"./SVGContainer\";\nimport * as $dom from \"../utils/DOM\";\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n/**\r\n * Paper class which when instantiated will create an SVG element as well as\r\n * some of the sub-elements like `<desc>`, `<defs>`.\r\n *\r\n * Use its methods like `addGroup` and `append` to add elements to the paper.\r\n */\nvar Paper = /** @class */function () {\n  /**\r\n   * Creates main `<svg>` container and related elements.\r\n   *\r\n   * @param container A reference to HTML element to create `<svg>` in\r\n   */\n  function Paper(container, id) {\n    // Store container reference\n    this.container = container;\n    this.id = id;\n    // Create SVG element\n    var svg = document.createElementNS($dom.SVGNS, \"svg\");\n    svg.setAttribute(\"version\", \"1.1\");\n    svg.setAttributeNS($dom.XMLNS, \"xmlns\", $dom.SVGNS);\n    svg.setAttributeNS($dom.XMLNS, \"xmlns:xlink\", $dom.XLINK);\n    svg.setAttribute(\"role\", \"group\");\n    this.container.appendChild(svg);\n    // Add description\n    //let desc: SVGElement = <SVGElement>document.createElementNS($dom.SVGNS, \"desc\");\n    //desc.appendChild(document.createTextNode(\"JavaScript chart by amCharts\"));\n    //svg.appendChild(desc);\n    // Add defs\n    this.defs = document.createElementNS($dom.SVGNS, \"defs\");\n    svg.appendChild(this.defs);\n    // Set width and height to fit container\n    svg.style.width = \"100%\";\n    svg.style.height = \"100%\";\n    svg.style.overflow = \"visible\";\n    // Store variable\n    this.svg = svg;\n  }\n  /**\r\n   * Creates and returns a new element. Does not attach it to Paper yet.\r\n   *\r\n   * @param elementName  Element name\r\n   * @return New element\r\n   */\n  Paper.prototype.add = function (elementName) {\n    return new AMElement(elementName);\n  };\n  /**\r\n   * Creates and returns a new Group element. Does not attach it to Paper.\r\n   *\r\n   * @param groupName  Element name\r\n   * @return New Group\r\n   */\n  Paper.prototype.addGroup = function (groupName) {\n    return new Group(groupName);\n  };\n  /**\r\n   * Appends an element to Paper.\r\n   *\r\n   * @param element Element to append\r\n   */\n  Paper.prototype.append = function (element) {\n    if (element) {\n      this.svg.appendChild(element.node);\n    }\n  };\n  /**\r\n   * Appends an element to `<defs>` block of the Paper.\r\n   *\r\n   * @param element  Element\r\n   */\n  Paper.prototype.appendDef = function (element) {\n    if (element) {\n      this.defs.appendChild(element.node);\n    }\n  };\n  /**\r\n   * Creates and returns new `<foreignObject>` element. Does not append it to\r\n   * Paper.\r\n   *\r\n   * @return A foreignObject element\r\n   */\n  Paper.prototype.foreignObject = function () {\n    var element = new AMElement(\"foreignObject\");\n    //this.append(element);\n    return element;\n  };\n  /**\r\n   * Checks if browser supports `<foreignObject>` elements.\r\n   *\r\n   * @return Supports `foreignObject`?\r\n   */\n  Paper.prototype.supportsForeignObject = function () {\n    return document.implementation.hasFeature(\"http://www.w3.org/TR/SVG11/feature#Extensibility\", \"1.1\");\n  };\n  return Paper;\n}();\nexport { Paper };\nvar ghostPaper = null;\n/**\r\n * A [[Paper]] instance to create elements, that are not yet ready to be\r\n * placed in visible DOM.\r\n *\r\n * @ignore Exclude from docs\r\n */\nexport function getGhostPaper() {\n  if (ghostPaper === null) {\n    // ghost is used to draw elements while real paper is not yet created or Sprite doesn't know parent yet\n    var ghostDiv = document.createElement(\"div\");\n    ghostDiv.hidden = true;\n    ghostDiv.style.width = \"1px\";\n    ghostDiv.style.height = \"1px\";\n    ghostDiv.style.position = \"absolute\";\n    ghostDiv.style.zIndex = \"-1000000\";\n    document.body.appendChild(ghostDiv);\n    var ghostSvgContainer = new SVGContainer(ghostDiv, true);\n    ghostPaper = new Paper(ghostSvgContainer.SVGContainer, \"ghost\");\n  }\n  return ghostPaper;\n}","map":{"version":3,"names":["AMElement","Group","SVGContainer","$dom","Paper","container","id","svg","document","createElementNS","SVGNS","setAttribute","setAttributeNS","XMLNS","XLINK","appendChild","defs","style","width","height","overflow","prototype","add","elementName","addGroup","groupName","append","element","node","appendDef","foreignObject","supportsForeignObject","implementation","hasFeature","ghostPaper","getGhostPaper","ghostDiv","createElement","hidden","position","zIndex","body","ghostSvgContainer"],"sources":["../../../../../src/.internal/core/rendering/Paper.ts"],"sourcesContent":["/**\r\n * Paper class just like the white sheet of pressed fiber it draws its name\r\n * inspiration from is used as a starting point to start a drawing.\r\n *\r\n * Before we can start adding elements (drawing) we need to take out a new sheet\r\n * of paper, or in this instance create a blank SVG element.\r\n *\r\n * This class creates such element, as well as implements methods needed to\r\n * start adding elements to it.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { AMElement } from \"./AMElement\";\r\nimport { Group } from \"./Group\";\r\nimport { SVGContainer } from \"./SVGContainer\";\r\nimport * as $dom from \"../utils/DOM\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Represents available SVG elements that can be added to paper.\r\n *\r\n * @todo Review if we can remove commented out methods\r\n */\r\nexport type SVGElementNames = \"a\" | \"altGlyph\" | \"altGlyphDef\" | \"altGlyphItem\" | \"animate\" | \"animateColor\" | \"animateMotion\" | \"animateTransform\" | \"circle\" | \"clipPath\" | \"color-profile\" | \"cursor\" | \"defs\" | \"desc\" | \"ellipse\" | \"feBlend\" | \"feColorMatrix\" | \"feComponentTransfer\" | \"feComposite\" | \"feConvolveMatrix\" | \"feDiffuseLighting\" | \"feDisplacementMap\" | \"feDistantLight\" | \"feFlood\" | \"feFuncA\" | \"feFuncB\" | \"feFuncG\" | \"feFuncR\" | \"feGaussianBlur\" | \"feImage\" | \"feMerge\" | \"feMergeNode\" | \"feMorphology\" | \"feOffset\" | \"fePointLight\" | \"feSpecularLighting\" | \"feSpotLight\" | \"feTile\" | \"feTurbulence\" | \"feConvolveMatrix\" | \"filter\" | \"font\" | \"font-face\" | \"font-face-format\" | \"font-face-name\" | \"font-face-src\" | \"font-face-uri\" | \"foreignObject\" | \"g\" | \"glyph\" | \"glyphRef\" | \"hkern\" | \"image\" | \"line\" | \"linearGradient\" | \"marker\" | \"mask\" | \"metadata\" | \"missing-glyph\" | \"mpath\" | \"path\" | \"pattern\" | \"polygon\" | \"polyline\" | \"radialGradient\" | \"rect\" | \"script\" | \"set\" | \"stop\" | \"style\" | \"svg\" | \"switch\" | \"symbol\" | \"text\" | \"textPath\" | \"title\" | \"tref\" | \"tspan\" | \"use\" | \"view\" | \"vkern\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Paper class which when instantiated will create an SVG element as well as\r\n * some of the sub-elements like `<desc>`, `<defs>`.\r\n *\r\n * Use its methods like `addGroup` and `append` to add elements to the paper.\r\n */\r\nexport class Paper {\r\n\r\n\t/**\r\n\t * A reference `<svg>` element.\r\n\t */\r\n\tpublic svg: SVGSVGElement;\r\n\r\n\t/**\r\n\t * A reference to the HTML container the `<svg>` element is placed in.\r\n\t */\r\n\tpublic container: HTMLElement;\r\n\r\n\t/**\r\n\t * A reference to the `<defs>` element.\r\n\t */\r\n\tpublic defs: SVGDefsElement;\r\n\r\n\t/**\r\n\t * An id of the element.\r\n\t */\r\n\tpublic id: string;\r\n\r\n\t/**\r\n\t * Creates main `<svg>` container and related elements.\r\n\t *\r\n\t * @param container A reference to HTML element to create `<svg>` in\r\n\t */\r\n\tconstructor(container: HTMLElement, id: string) {\r\n\r\n\t\t// Store container reference\r\n\t\tthis.container = container;\r\n\t\tthis.id = id;\r\n\r\n\t\t// Create SVG element\r\n\t\tlet svg = <SVGSVGElement>document.createElementNS($dom.SVGNS, \"svg\");\r\n\t\tsvg.setAttribute(\"version\", \"1.1\");\r\n\t\tsvg.setAttributeNS($dom.XMLNS, \"xmlns\", $dom.SVGNS);\r\n\t\tsvg.setAttributeNS($dom.XMLNS, \"xmlns:xlink\", $dom.XLINK);\r\n\t\tsvg.setAttribute(\"role\", \"group\");\r\n\t\tthis.container.appendChild(svg);\r\n\r\n\t\t// Add description\r\n\t\t//let desc: SVGElement = <SVGElement>document.createElementNS($dom.SVGNS, \"desc\");\r\n\t\t//desc.appendChild(document.createTextNode(\"JavaScript chart by amCharts\"));\r\n\t\t//svg.appendChild(desc);\r\n\r\n\t\t// Add defs\r\n\t\tthis.defs = <SVGDefsElement>document.createElementNS($dom.SVGNS, \"defs\");\r\n\t\tsvg.appendChild(this.defs);\r\n\r\n\t\t// Set width and height to fit container\r\n\t\tsvg.style.width = \"100%\";\r\n\t\tsvg.style.height = \"100%\";\r\n\t\tsvg.style.overflow = \"visible\";\r\n\r\n\t\t// Store variable\r\n\t\tthis.svg = svg;\r\n\t}\r\n\r\n\t/**\r\n\t * Creates and returns a new element. Does not attach it to Paper yet.\r\n\t *\r\n\t * @param elementName  Element name\r\n\t * @return New element\r\n\t */\r\n\tpublic add(elementName: SVGElementNames): AMElement {\r\n\t\treturn new AMElement(elementName);\r\n\t}\r\n\r\n\t/**\r\n\t * Creates and returns a new Group element. Does not attach it to Paper.\r\n\t *\r\n\t * @param groupName  Element name\r\n\t * @return New Group\r\n\t */\r\n\tpublic addGroup(groupName: SVGElementNames): Group {\r\n\t\treturn new Group(groupName);\r\n\t}\r\n\r\n\t/**\r\n\t * Appends an element to Paper.\r\n\t *\r\n\t * @param element Element to append\r\n\t */\r\n\tpublic append(element: AMElement): void {\r\n\t\tif (element) {\r\n\t\t\tthis.svg.appendChild(element.node);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Appends an element to `<defs>` block of the Paper.\r\n\t *\r\n\t * @param element  Element\r\n\t */\r\n\tpublic appendDef(element: AMElement): void {\r\n\t\tif (element) {\r\n\t\t\tthis.defs.appendChild(element.node);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Creates and returns new `<foreignObject>` element. Does not append it to\r\n\t * Paper.\r\n\t *\r\n\t * @return A foreignObject element\r\n\t */\r\n\tpublic foreignObject(): AMElement {\r\n\t\tlet element = new AMElement(\"foreignObject\");\r\n\t\t//this.append(element);\r\n\t\treturn element;\r\n\t}\r\n\r\n\t/**\r\n\t * Checks if browser supports `<foreignObject>` elements.\r\n\t *\r\n\t * @return Supports `foreignObject`?\r\n\t */\r\n\tpublic supportsForeignObject(): boolean {\r\n\t\treturn document.implementation.hasFeature(\"http://www.w3.org/TR/SVG11/feature#Extensibility\", \"1.1\");\r\n\t}\r\n\r\n}\r\n\r\n\r\nlet ghostPaper: Paper | null = null;\r\n\r\n/**\r\n * A [[Paper]] instance to create elements, that are not yet ready to be\r\n * placed in visible DOM.\r\n *\r\n * @ignore Exclude from docs\r\n */\r\nexport function getGhostPaper(): Paper {\r\n\tif (ghostPaper === null) {\r\n\t\t// ghost is used to draw elements while real paper is not yet created or Sprite doesn't know parent yet\r\n\t\tlet ghostDiv: HTMLDivElement = document.createElement(\"div\");\r\n\t\tghostDiv.hidden = true;\r\n\t\tghostDiv.style.width = \"1px\";\r\n\t\tghostDiv.style.height = \"1px\";\r\n\t\tghostDiv.style.position = \"absolute\";\r\n\t\tghostDiv.style.zIndex = \"-1000000\";\r\n\t\tdocument.body.appendChild(ghostDiv);\r\n\t\tlet ghostSvgContainer = new SVGContainer(ghostDiv, true);\r\n\t\tghostPaper = new Paper(ghostSvgContainer.SVGContainer, \"ghost\");\r\n\r\n\t}\r\n\r\n\treturn ghostPaper;\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}