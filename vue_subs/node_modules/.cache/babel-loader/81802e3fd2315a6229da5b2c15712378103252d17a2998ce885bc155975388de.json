{"ast":null,"code":"import { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\nimport * as $array from \"./Array\";\nimport * as $type from \"./Type\";\n/**\r\n * A base class for disposable objects.\r\n *\r\n * @ignore Exclude from docs\r\n */\nvar Disposer = /** @class */function () {\n  /**\r\n   * Constructor.\r\n   *\r\n   * @param dispose  Function that disposes object\r\n   */\n  function Disposer(dispose) {\n    this._disposed = false;\n    this._dispose = dispose;\n  }\n  /**\r\n   * Checks if object is disposed.\r\n   *\r\n   * @return Disposed?\r\n   */\n  Disposer.prototype.isDisposed = function () {\n    return this._disposed;\n  };\n  /**\r\n   * Disposes the object.\r\n   */\n  Disposer.prototype.dispose = function () {\n    if (!this._disposed) {\n      this._disposed = true;\n      this._dispose();\n    }\n  };\n  return Disposer;\n}();\nexport { Disposer };\n/**\r\n * A collection of related disposers that can be disposed in one go.\r\n *\r\n * @ignore Exclude from docs\r\n */\nvar MultiDisposer = /** @class */function (_super) {\n  __extends(MultiDisposer, _super);\n  function MultiDisposer(disposers) {\n    return _super.call(this, function () {\n      $array.each(disposers, function (x) {\n        x.dispose();\n      });\n    }) || this;\n  }\n  return MultiDisposer;\n}(Disposer);\nexport { MultiDisposer };\n/**\r\n * A special kind of Disposer that has attached value set.\r\n *\r\n * If a new value is set using `set()` method, the old disposer value is\r\n * disposed.\r\n *\r\n * @ignore Exclude from docs\r\n * @todo Description\r\n */\nvar MutableValueDisposer = /** @class */function (_super) {\n  __extends(MutableValueDisposer, _super);\n  /**\r\n   * Constructor.\r\n   */\n  function MutableValueDisposer() {\n    var _this = _super.call(this, function () {\n      if ($type.hasValue(_this._disposer)) {\n        _this._disposer.dispose();\n        _this._disposer = undefined;\n      }\n    }) || this;\n    return _this;\n  }\n  /**\r\n   * Returns current value.\r\n   *\r\n   * @return Value\r\n   */\n  MutableValueDisposer.prototype.get = function () {\n    return this._value;\n  };\n  /**\r\n   * Sets value and disposes previous disposer if it was set.\r\n   *\r\n   * @param value     New value\r\n   * @param disposer  Disposer\r\n   */\n  MutableValueDisposer.prototype.set = function (value, disposer) {\n    if ($type.hasValue(this._disposer)) {\n      this._disposer.dispose();\n    }\n    this._disposer = disposer;\n    this._value = value;\n  };\n  /**\r\n   * Resets the disposer value.\r\n   */\n  MutableValueDisposer.prototype.reset = function () {\n    this.set(undefined, undefined);\n  };\n  return MutableValueDisposer;\n}(Disposer);\nexport { MutableValueDisposer };\n/**\r\n * @ignore Exclude from docs\r\n * @todo Description\r\n */\nvar CounterDisposer = /** @class */function (_super) {\n  __extends(CounterDisposer, _super);\n  function CounterDisposer() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    /**\r\n     * [_counter description]\r\n     *\r\n     * @todo Description\r\n     */\n    _this._counter = 0;\n    return _this;\n  }\n  /**\r\n   * [increment description]\r\n   *\r\n   * @todo Description\r\n   */\n  CounterDisposer.prototype.increment = function () {\n    var _this = this;\n    // TODO throw an error if it is disposed\n    ++this._counter;\n    // TODO make this more efficient\n    return new Disposer(function () {\n      --_this._counter;\n      if (_this._counter === 0) {\n        _this.dispose();\n      }\n    });\n  };\n  return CounterDisposer;\n}(Disposer);\nexport { CounterDisposer };","map":{"version":3,"names":["$array","$type","Disposer","dispose","_disposed","_dispose","prototype","isDisposed","MultiDisposer","_super","__extends","disposers","call","each","x","MutableValueDisposer","_this","hasValue","_disposer","undefined","get","_value","set","value","disposer","reset","CounterDisposer","apply","arguments","_counter","increment"],"sources":["../../../../../src/.internal/core/utils/Disposer.ts"],"sourcesContent":["/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport * as $array from \"./Array\";\r\nimport * as $type from \"./Type\";\r\nimport { Optional } from \"./Type\";\r\n\r\n/**\r\n * Defines interface for disposable objects.\r\n *\r\n * @ignore Exclude from docs\r\n */\r\nexport interface IDisposer {\r\n\tisDisposed(): boolean;\r\n\tdispose(): void;\r\n}\r\n\r\n/**\r\n * A base class for disposable objects.\r\n *\r\n * @ignore Exclude from docs\r\n */\r\nexport class Disposer implements IDisposer {\r\n\r\n\t/**\r\n\t * Is object disposed?\r\n\t */\r\n\tprivate _disposed: boolean;\r\n\r\n\t/**\r\n\t * Method that disposes the object.\r\n\t */\r\n\tprivate _dispose: () => void;\r\n\r\n\t/**\r\n\t * Constructor.\r\n\t *\r\n\t * @param dispose  Function that disposes object\r\n\t */\r\n\tconstructor(dispose: () => void) {\r\n\t\tthis._disposed = false;\r\n\t\tthis._dispose = dispose;\r\n\t}\r\n\r\n\t/**\r\n\t * Checks if object is disposed.\r\n\t *\r\n\t * @return Disposed?\r\n\t */\r\n\tpublic isDisposed(): boolean {\r\n\t\treturn this._disposed;\r\n\t}\r\n\r\n\t/**\r\n\t * Disposes the object.\r\n\t */\r\n\tpublic dispose(): void {\r\n\t\tif (!this._disposed) {\r\n\t\t\tthis._disposed = true;\r\n\t\t\tthis._dispose();\r\n\t\t}\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * A collection of related disposers that can be disposed in one go.\r\n *\r\n * @ignore Exclude from docs\r\n */\r\nexport class MultiDisposer extends Disposer {\r\n\tconstructor(disposers: Array<IDisposer>) {\r\n\t\tsuper(() => {\r\n\t\t\t$array.each(disposers, (x) => {\r\n\t\t\t\tx.dispose();\r\n\t\t\t});\r\n\t\t});\r\n\t}\r\n}\r\n\r\n/**\r\n * A special kind of Disposer that has attached value set.\r\n *\r\n * If a new value is set using `set()` method, the old disposer value is\r\n * disposed.\r\n *\r\n * @ignore Exclude from docs\r\n * @todo Description\r\n */\r\nexport class MutableValueDisposer<T extends IDisposer> extends Disposer {\r\n\r\n\t/**\r\n\t * Current disposer.\r\n\t */\r\n\tprivate _disposer: Optional<IDisposer>;\r\n\r\n\t/**\r\n\t * Current value.\r\n\t */\r\n\tprivate _value: Optional<T>;\r\n\r\n\t/**\r\n\t * Constructor.\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper(() => {\r\n\t\t\tif ($type.hasValue(this._disposer)) {\r\n\t\t\t\tthis._disposer.dispose();\r\n\t\t\t\tthis._disposer = undefined;\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Returns current value.\r\n\t *\r\n\t * @return Value\r\n\t */\r\n\tpublic get(): Optional<T> {\r\n\t\treturn this._value;\r\n\t}\r\n\r\n\t/**\r\n\t * Sets value and disposes previous disposer if it was set.\r\n\t *\r\n\t * @param value     New value\r\n\t * @param disposer  Disposer\r\n\t */\r\n\tpublic set(value: Optional<T>, disposer: Optional<IDisposer>): void {\r\n\t\tif ($type.hasValue(this._disposer)) {\r\n\t\t\tthis._disposer.dispose();\r\n\t\t}\r\n\r\n\t\tthis._disposer = disposer;\r\n\t\tthis._value = value;\r\n\t}\r\n\r\n\t/**\r\n\t * Resets the disposer value.\r\n\t */\r\n\tpublic reset(): void {\r\n\t\tthis.set(undefined, undefined);\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * @ignore Exclude from docs\r\n * @todo Description\r\n */\r\nexport class CounterDisposer extends Disposer {\r\n\r\n\t/**\r\n\t * [_counter description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprivate _counter: number = 0;\r\n\r\n\t/**\r\n\t * [increment description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tpublic increment() {\r\n\t\t// TODO throw an error if it is disposed\r\n\t\t++this._counter;\r\n\r\n\t\t// TODO make this more efficient\r\n\t\treturn new Disposer(() => {\r\n\t\t\t--this._counter;\r\n\r\n\t\t\tif (this._counter === 0) {\r\n\t\t\t\tthis.dispose();\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n}\r\n"],"mappings":";AAAA;;;;;;AAMA,OAAO,KAAKA,MAAM,MAAM,SAAS;AACjC,OAAO,KAAKC,KAAK,MAAM,QAAQ;AAa/B;;;;;AAKA,IAAAC,QAAA;EAYC;;;;;EAKA,SAAAA,SAAYC,OAAmB;IAC9B,IAAI,CAACC,SAAS,GAAG,KAAK;IACtB,IAAI,CAACC,QAAQ,GAAGF,OAAO;EACxB;EAEA;;;;;EAKOD,QAAA,CAAAI,SAAA,CAAAC,UAAU,GAAjB;IACC,OAAO,IAAI,CAACH,SAAS;EACtB,CAAC;EAED;;;EAGOF,QAAA,CAAAI,SAAA,CAAAH,OAAO,GAAd;IACC,IAAI,CAAC,IAAI,CAACC,SAAS,EAAE;MACpB,IAAI,CAACA,SAAS,GAAG,IAAI;MACrB,IAAI,CAACC,QAAQ,EAAE;;EAEjB,CAAC;EAEF,OAAAH,QAAC;AAAD,CAAC,CAzCD;;AA2CA;;;;;AAKA,IAAAM,aAAA,0BAAAC,MAAA;EAAmCC,SAAA,CAAAF,aAAA,EAAAC,MAAA;EAClC,SAAAD,cAAYG,SAA2B;WACtCF,MAAA,CAAAG,IAAA,OAAM;MACLZ,MAAM,CAACa,IAAI,CAACF,SAAS,EAAE,UAACG,CAAC;QACxBA,CAAC,CAACX,OAAO,EAAE;MACZ,CAAC,CAAC;IACH,CAAC,CAAC;EACH;EACD,OAAAK,aAAC;AAAD,CAAC,CARkCN,QAAQ;;AAU3C;;;;;;;;;AASA,IAAAa,oBAAA,0BAAAN,MAAA;EAA+DC,SAAA,CAAAK,oBAAA,EAAAN,MAAA;EAY9D;;;EAGA,SAAAM,qBAAA;IAAA,IAAAC,KAAA,GACCP,MAAA,CAAAG,IAAA,OAAM;MACL,IAAIX,KAAK,CAACgB,QAAQ,CAACD,KAAI,CAACE,SAAS,CAAC,EAAE;QACnCF,KAAI,CAACE,SAAS,CAACf,OAAO,EAAE;QACxBa,KAAI,CAACE,SAAS,GAAGC,SAAS;;IAE5B,CAAC,CAAC;;EACH;EAEA;;;;;EAKOJ,oBAAA,CAAAT,SAAA,CAAAc,GAAG,GAAV;IACC,OAAO,IAAI,CAACC,MAAM;EACnB,CAAC;EAED;;;;;;EAMON,oBAAA,CAAAT,SAAA,CAAAgB,GAAG,GAAV,UAAWC,KAAkB,EAAEC,QAA6B;IAC3D,IAAIvB,KAAK,CAACgB,QAAQ,CAAC,IAAI,CAACC,SAAS,CAAC,EAAE;MACnC,IAAI,CAACA,SAAS,CAACf,OAAO,EAAE;;IAGzB,IAAI,CAACe,SAAS,GAAGM,QAAQ;IACzB,IAAI,CAACH,MAAM,GAAGE,KAAK;EACpB,CAAC;EAED;;;EAGOR,oBAAA,CAAAT,SAAA,CAAAmB,KAAK,GAAZ;IACC,IAAI,CAACH,GAAG,CAACH,SAAS,EAAEA,SAAS,CAAC;EAC/B,CAAC;EAEF,OAAAJ,oBAAC;AAAD,CAAC,CAvD8Db,QAAQ;;AAyDvE;;;;AAIA,IAAAwB,eAAA,0BAAAjB,MAAA;EAAqCC,SAAA,CAAAgB,eAAA,EAAAjB,MAAA;EAArC,SAAAiB,gBAAA;IAAA,IAAAV,KAAA,GAAAP,MAAA,aAAAA,MAAA,CAAAkB,KAAA,OAAAC,SAAA;IAEC;;;;;IAKQZ,KAAA,CAAAa,QAAQ,GAAW,CAAC;;EAqB7B;EAnBC;;;;;EAKOH,eAAA,CAAApB,SAAA,CAAAwB,SAAS,GAAhB;IAAA,IAAAd,KAAA;IACC;IACA,EAAE,IAAI,CAACa,QAAQ;IAEf;IACA,OAAO,IAAI3B,QAAQ,CAAC;MACnB,EAAEc,KAAI,CAACa,QAAQ;MAEf,IAAIb,KAAI,CAACa,QAAQ,KAAK,CAAC,EAAE;QACxBb,KAAI,CAACb,OAAO,EAAE;;IAEhB,CAAC,CAAC;EACH,CAAC;EAEF,OAAAuB,eAAC;AAAD,CAAC,CA5BoCxB,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}