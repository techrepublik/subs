{"ast":null,"code":"import { geoProjection as projection } from \"d3-geo\";\nimport { augustRaw } from \"./august.js\";\nimport { abs, atan, cos, epsilon, halfPi, log, max, min, sin, sqrt, sqrt1_2, sqrt2 } from \"./math.js\";\nvar eisenlohrK = 3 + 2 * sqrt2;\nexport function eisenlohrRaw(lambda, phi) {\n  var s0 = sin(lambda /= 2),\n    c0 = cos(lambda),\n    k = sqrt(cos(phi)),\n    c1 = cos(phi /= 2),\n    t = sin(phi) / (c1 + sqrt2 * c0 * k),\n    c = sqrt(2 / (1 + t * t)),\n    v = sqrt((sqrt2 * c1 + (c0 + s0) * k) / (sqrt2 * c1 + (c0 - s0) * k));\n  return [eisenlohrK * (c * (v - 1 / v) - 2 * log(v)), eisenlohrK * (c * t * (v + 1 / v) - 2 * atan(t))];\n}\neisenlohrRaw.invert = function (x, y) {\n  if (!(p = augustRaw.invert(x / 1.2, y * 1.065))) return null;\n  var lambda = p[0],\n    phi = p[1],\n    i = 20,\n    p;\n  x /= eisenlohrK, y /= eisenlohrK;\n  do {\n    var _0 = lambda / 2,\n      _1 = phi / 2,\n      s0 = sin(_0),\n      c0 = cos(_0),\n      s1 = sin(_1),\n      c1 = cos(_1),\n      cos1 = cos(phi),\n      k = sqrt(cos1),\n      t = s1 / (c1 + sqrt2 * c0 * k),\n      t2 = t * t,\n      c = sqrt(2 / (1 + t2)),\n      v0 = sqrt2 * c1 + (c0 + s0) * k,\n      v1 = sqrt2 * c1 + (c0 - s0) * k,\n      v2 = v0 / v1,\n      v = sqrt(v2),\n      vm1v = v - 1 / v,\n      vp1v = v + 1 / v,\n      fx = c * vm1v - 2 * log(v) - x,\n      fy = c * t * vp1v - 2 * atan(t) - y,\n      deltatDeltaLambda = s1 && sqrt1_2 * k * s0 * t2 / s1,\n      deltatDeltaPhi = (sqrt2 * c0 * c1 + k) / (2 * (c1 + sqrt2 * c0 * k) * (c1 + sqrt2 * c0 * k) * k),\n      deltacDeltat = -0.5 * t * c * c * c,\n      deltacDeltaLambda = deltacDeltat * deltatDeltaLambda,\n      deltacDeltaPhi = deltacDeltat * deltatDeltaPhi,\n      A = (A = 2 * c1 + sqrt2 * k * (c0 - s0)) * A * v,\n      deltavDeltaLambda = (sqrt2 * c0 * c1 * k + cos1) / A,\n      deltavDeltaPhi = -(sqrt2 * s0 * s1) / (k * A),\n      deltaxDeltaLambda = vm1v * deltacDeltaLambda - 2 * deltavDeltaLambda / v + c * (deltavDeltaLambda + deltavDeltaLambda / v2),\n      deltaxDeltaPhi = vm1v * deltacDeltaPhi - 2 * deltavDeltaPhi / v + c * (deltavDeltaPhi + deltavDeltaPhi / v2),\n      deltayDeltaLambda = t * vp1v * deltacDeltaLambda - 2 * deltatDeltaLambda / (1 + t2) + c * vp1v * deltatDeltaLambda + c * t * (deltavDeltaLambda - deltavDeltaLambda / v2),\n      deltayDeltaPhi = t * vp1v * deltacDeltaPhi - 2 * deltatDeltaPhi / (1 + t2) + c * vp1v * deltatDeltaPhi + c * t * (deltavDeltaPhi - deltavDeltaPhi / v2),\n      denominator = deltaxDeltaPhi * deltayDeltaLambda - deltayDeltaPhi * deltaxDeltaLambda;\n    if (!denominator) break;\n    var deltaLambda = (fy * deltaxDeltaPhi - fx * deltayDeltaPhi) / denominator,\n      deltaPhi = (fx * deltayDeltaLambda - fy * deltaxDeltaLambda) / denominator;\n    lambda -= deltaLambda;\n    phi = max(-halfPi, min(halfPi, phi - deltaPhi));\n  } while ((abs(deltaLambda) > epsilon || abs(deltaPhi) > epsilon) && --i > 0);\n  return abs(abs(phi) - halfPi) < epsilon ? [0, phi] : i && [lambda, phi];\n};\nexport default function () {\n  return projection(eisenlohrRaw).scale(62.5271);\n}","map":{"version":3,"names":["geoProjection","projection","augustRaw","abs","atan","cos","epsilon","halfPi","log","max","min","sin","sqrt","sqrt1_2","sqrt2","eisenlohrK","eisenlohrRaw","lambda","phi","s0","c0","k","c1","t","c","v","invert","x","y","p","i","_0","_1","s1","cos1","t2","v0","v1","v2","vm1v","vp1v","fx","fy","deltatDeltaLambda","deltatDeltaPhi","deltacDeltat","deltacDeltaLambda","deltacDeltaPhi","A","deltavDeltaLambda","deltavDeltaPhi","deltaxDeltaLambda","deltaxDeltaPhi","deltayDeltaLambda","deltayDeltaPhi","denominator","deltaLambda","deltaPhi","scale"],"sources":["/home/josh/Documents/projects/subs/vue_subs/node_modules/d3-geo-projection/src/eisenlohr.js"],"sourcesContent":["import {geoProjection as projection} from \"d3-geo\";\nimport {augustRaw} from \"./august.js\";\nimport {abs, atan, cos, epsilon, halfPi, log, max, min, sin, sqrt, sqrt1_2, sqrt2} from \"./math.js\";\n\nvar eisenlohrK = 3 + 2 * sqrt2;\n\nexport function eisenlohrRaw(lambda, phi) {\n  var s0 = sin(lambda /= 2),\n      c0 = cos(lambda),\n      k = sqrt(cos(phi)),\n      c1 = cos(phi /= 2),\n      t = sin(phi) / (c1 + sqrt2 * c0 * k),\n      c = sqrt(2 / (1 + t * t)),\n      v = sqrt((sqrt2 * c1 + (c0 + s0) * k) / (sqrt2 * c1 + (c0 - s0) * k));\n  return [\n    eisenlohrK * (c * (v - 1 / v) - 2 * log(v)),\n    eisenlohrK * (c * t * (v + 1 / v) - 2 * atan(t))\n  ];\n}\n\neisenlohrRaw.invert = function(x, y) {\n  if (!(p = augustRaw.invert(x / 1.2, y * 1.065))) return null;\n  var lambda = p[0], phi = p[1], i = 20, p;\n  x /= eisenlohrK, y /= eisenlohrK;\n  do {\n    var _0 = lambda / 2,\n        _1 = phi / 2,\n        s0 = sin(_0),\n        c0 = cos(_0),\n        s1 = sin(_1),\n        c1 = cos(_1),\n        cos1 = cos(phi),\n        k = sqrt(cos1),\n        t = s1 / (c1 + sqrt2 * c0 * k),\n        t2 = t * t,\n        c = sqrt(2 / (1 + t2)),\n        v0 = (sqrt2 * c1 + (c0 + s0) * k),\n        v1 = (sqrt2 * c1 + (c0 - s0) * k),\n        v2 = v0 / v1,\n        v = sqrt(v2),\n        vm1v = v - 1 / v,\n        vp1v = v + 1 / v,\n        fx = c * vm1v - 2 * log(v) - x,\n        fy = c * t * vp1v - 2 * atan(t) - y,\n        deltatDeltaLambda = s1 && sqrt1_2 * k * s0 * t2 / s1,\n        deltatDeltaPhi = (sqrt2 * c0 * c1 + k) / (2 * (c1 + sqrt2 * c0 * k) * (c1 + sqrt2 * c0 * k) * k),\n        deltacDeltat = -0.5 * t * c * c * c,\n        deltacDeltaLambda = deltacDeltat * deltatDeltaLambda,\n        deltacDeltaPhi = deltacDeltat * deltatDeltaPhi,\n        A = (A = 2 * c1 + sqrt2 * k * (c0 - s0)) * A * v,\n        deltavDeltaLambda = (sqrt2 * c0 * c1 * k + cos1) / A,\n        deltavDeltaPhi = -(sqrt2 * s0 * s1) / (k * A),\n        deltaxDeltaLambda = vm1v * deltacDeltaLambda - 2 * deltavDeltaLambda / v + c * (deltavDeltaLambda + deltavDeltaLambda / v2),\n        deltaxDeltaPhi = vm1v * deltacDeltaPhi - 2 * deltavDeltaPhi / v + c * (deltavDeltaPhi + deltavDeltaPhi / v2),\n        deltayDeltaLambda = t * vp1v * deltacDeltaLambda - 2 * deltatDeltaLambda / (1 + t2) + c * vp1v * deltatDeltaLambda + c * t * (deltavDeltaLambda - deltavDeltaLambda / v2),\n        deltayDeltaPhi = t * vp1v * deltacDeltaPhi - 2 * deltatDeltaPhi / (1 + t2) + c * vp1v * deltatDeltaPhi + c * t * (deltavDeltaPhi - deltavDeltaPhi / v2),\n        denominator = deltaxDeltaPhi * deltayDeltaLambda - deltayDeltaPhi * deltaxDeltaLambda;\n    if (!denominator) break;\n    var deltaLambda = (fy * deltaxDeltaPhi - fx * deltayDeltaPhi) / denominator,\n        deltaPhi = (fx * deltayDeltaLambda - fy * deltaxDeltaLambda) / denominator;\n    lambda -= deltaLambda;\n    phi = max(-halfPi, min(halfPi, phi - deltaPhi));\n  } while ((abs(deltaLambda) > epsilon || abs(deltaPhi) > epsilon) && --i > 0);\n  return abs(abs(phi) - halfPi) < epsilon ? [0, phi] : i && [lambda, phi];\n};\n\nexport default function() {\n  return projection(eisenlohrRaw)\n      .scale(62.5271);\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}