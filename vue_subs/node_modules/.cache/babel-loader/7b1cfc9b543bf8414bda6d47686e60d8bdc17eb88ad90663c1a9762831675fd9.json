{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n/**\r\n * Map image series module\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\nimport { MapSeries, MapSeriesDataItem } from \"./MapSeries\";\nimport { MapImage } from \"./MapImage\";\nimport { ListTemplate, ListDisposer } from \"../../core/utils/List\";\nimport { registry } from \"../../core/Registry\";\nimport * as $array from \"../../core/utils/Array\";\nimport * as $mapUtils from \"./MapUtils\";\nimport * as $utils from \"../../core/utils/Utils\";\nimport * as $iter from \"../../core/utils/Iterator\";\nimport * as $type from \"../../core/utils/Type\";\nimport { Disposer } from \"../../core/utils/Disposer\";\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\n/**\r\n * Defines a [[DataItem]] for [[MapImageSeries]]\r\n * @see {@link DataItem}\r\n */\nvar MapImageSeriesDataItem = /** @class */function (_super) {\n  __extends(MapImageSeriesDataItem, _super);\n  /**\r\n   * Constructor\r\n   */\n  function MapImageSeriesDataItem() {\n    var _this = _super.call(this) || this;\n    _this.className = \"MapImageSeriesDataItem\";\n    _this.applyTheme();\n    return _this;\n  }\n  /**\r\n   * @ignore\r\n   */\n  MapImageSeriesDataItem.prototype.getFeature = function () {\n    return {\n      \"type\": \"Feature\",\n      geometry: {\n        type: \"Point\",\n        coordinates: this.point\n      }\n    };\n  };\n  Object.defineProperty(MapImageSeriesDataItem.prototype, \"mapImage\", {\n    /**\r\n     * A [[MapImage]] element related to this data item.\r\n     *\r\n     * @return Element\r\n     */\n    get: function () {\n      var _this = this;\n      if (!this._mapImage) {\n        var mapImage_1 = this.component.mapImages.create();\n        this.addSprite(mapImage_1);\n        this._mapImage = mapImage_1;\n        this._disposers.push(mapImage_1);\n        this._disposers.push(new Disposer(function () {\n          if (_this.component) {\n            _this.component.mapImages.removeValue(mapImage_1);\n          }\n        }));\n        this.mapObject = mapImage_1;\n      }\n      return this._mapImage;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MapImageSeriesDataItem.prototype, \"point\", {\n    /**\r\n     * @return [description]\r\n     */\n    get: function () {\n      return this._point;\n    },\n    /**\r\n     * [point description]\r\n     *\r\n     * @todo Description\r\n     * @param point [description]\r\n     */\n    set: function (point) {\n      this._point = point;\n      this._geoPoint = $mapUtils.pointToGeo(point);\n      this.updateExtremes();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MapImageSeriesDataItem.prototype, \"multiPoint\", {\n    /**\r\n     * @return [description]\r\n     */\n    get: function () {\n      return [this._point];\n    },\n    /**\r\n     * [point description]\r\n     *\r\n     * @todo Description\r\n     * @param point [description]\r\n     */\n    set: function (multiPoint) {\n      this._point = multiPoint[0];\n      this._geoPoint = $mapUtils.pointToGeo(this._point);\n      this.updateExtremes();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MapImageSeriesDataItem.prototype, \"geoPoint\", {\n    /**\r\n     * @return Image coordinates\r\n     */\n    get: function () {\n      return this._geoPoint;\n    },\n    /**\r\n     * Geographical coordinates (lat/long) image is placed at.\r\n     *\r\n     * @param geoPoint Image coordinates\r\n     */\n    set: function (geoPoint) {\n      this._geoPoint = geoPoint;\n      this.point = [geoPoint.longitude, geoPoint.latitude];\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return MapImageSeriesDataItem;\n}(MapSeriesDataItem);\nexport { MapImageSeriesDataItem };\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n/**\r\n * A series of map image (marker) elements.\r\n *\r\n * @see {@link IMapImageSeriesEvents} for a list of available Events\r\n * @see {@link IMapImageSeriesAdapters} for a list of available Adapters\r\n * @important\r\n */\nvar MapImageSeries = /** @class */function (_super) {\n  __extends(MapImageSeries, _super);\n  /**\r\n   * Constructor\r\n   */\n  function MapImageSeries() {\n    var _this =\n    // Init\n    _super.call(this) || this;\n    _this.className = \"MapImageSeries\";\n    // Set data fields\n    _this.dataFields.multiPoint = \"multiPoint\";\n    _this.dataFields.point = \"point\";\n    _this.dataFields.geoPoint = \"geoPoint\";\n    _this.dataFields.multiGeoPoint = \"multiGeoPoint\";\n    _this.ignoreBounds = true;\n    // Apply theme\n    _this.applyTheme();\n    return _this;\n  }\n  /**\r\n   * Returns a new/empty DataItem of the type appropriate for this object.\r\n   *\r\n   * @see {@link DataItem}\r\n   * @return Data Item\r\n   */\n  MapImageSeries.prototype.createDataItem = function () {\n    return new MapImageSeriesDataItem();\n  };\n  /**\r\n   * (Re)validates the data of the sries, effectively forcing it to redraw\r\n   * all of its elements.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  MapImageSeries.prototype.validateData = function () {\n    var _this = this;\n    if (this.data.length > 0 && this._parseDataFrom == 0) {\n      this.mapImages.clear();\n    }\n    // process geoJSON and created map objects\n    if (this.useGeodata) {\n      if (this.useGeodata || this.geodata) {\n        var geoJSON = this.chart.geodata;\n        var features = void 0;\n        if (geoJSON.type == \"FeatureCollection\") {\n          features = geoJSON.features;\n        } else if (geoJSON.type == \"Feature\") {\n          features = [geoJSON];\n        } else if ([\"Point\", \"LineString\", \"Polygon\", \"MultiPoint\", \"MultiLineString\", \"MultiPolygon\"].indexOf(geoJSON.type) != -1) {\n          features = [{\n            geometry: geoJSON\n          }];\n        } else {\n          console.log(\"nothing found in geoJSON\");\n        }\n        if (features) {\n          var _loop_1 = function (i, len) {\n            var feature = features[i];\n            var geometry = feature.geometry;\n            if (geometry) {\n              var type = geometry.type;\n              var id_1 = feature.id;\n              if (type == \"Point\" || type == \"MultiPoint\") {\n                // todo: we don't support multipoints at the moment actually\n                if (!this_1.checkInclude(this_1.include, this_1.exclude, id_1)) {\n                  return \"continue\";\n                }\n                var coordinates = geometry.coordinates;\n                // make the same as MultiPoint\n                if (type == \"Point\") {\n                  coordinates = [coordinates];\n                }\n                var dataObject = $array.find(this_1.data, function (value, i) {\n                  return value.id == id_1;\n                });\n                if (!dataObject) {\n                  dataObject = {\n                    multiPoint: coordinates,\n                    id: id_1,\n                    madeFromGeoData: true\n                  };\n                  this_1.data.push(dataObject);\n                } else {\n                  if (!dataObject.multiPoint) {\n                    dataObject.multiPoint = coordinates;\n                  }\n                }\n                // copy properties data to datacontext\n                $utils.softCopyProperties(feature.properties, dataObject);\n              }\n            }\n          };\n          var this_1 = this;\n          for (var i = 0, len = features.length; i < len; i++) {\n            _loop_1(i, len);\n          }\n        }\n      }\n    }\n    _super.prototype.validateData.call(this);\n    // important! this should go after super.validateData\n    // if data is parsed in chunks, images list is corrupted, fix it here\n    $iter.each(this.dataItems.iterator(), function (dataItem) {\n      var mapImage = dataItem.mapImage;\n      if (!mapImage.isDisposed()) {\n        _this.mapImages.moveValue(mapImage);\n        if ($type.isNumber(mapImage.latitude) && $type.isNumber(mapImage.latitude)) {\n          dataItem.geoPoint = {\n            latitude: mapImage.latitude,\n            longitude: mapImage.longitude\n          };\n        }\n      }\n    });\n  };\n  Object.defineProperty(MapImageSeries.prototype, \"mapImages\", {\n    /**\r\n     * A list of map images in the series.\r\n     *\r\n     * @return Map images\r\n     */\n    get: function () {\n      if (!this._mapImages) {\n        var template = new MapImage();\n        var mapImages = new ListTemplate(template);\n        this._disposers.push(new ListDisposer(mapImages));\n        this._disposers.push(mapImages.template);\n        mapImages.template.focusable = true;\n        mapImages.events.on(\"inserted\", this.handleObjectAdded, this, false);\n        this._mapImages = mapImages;\n        this._mapObjects = mapImages;\n      }\n      return this._mapImages;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * (Re)validates data element, effectively triggering its redrawal.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param dataItem  Data item\r\n   */\n  MapImageSeries.prototype.validateDataElement = function (dataItem) {\n    _super.prototype.validateDataElement.call(this, dataItem);\n    dataItem.mapImage.invalidate();\n  };\n  /**\r\n   * (Re)validates the series\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  MapImageSeries.prototype.validate = function () {\n    _super.prototype.validate.call(this);\n    $iter.each(this.mapImages.iterator(), function (mapImage) {\n      mapImage.validatePosition();\n    });\n  };\n  /**\r\n   * Copies all properties from another instance of [[Series]].\r\n   *\r\n   * @param source  Source series\r\n   */\n  MapImageSeries.prototype.copyFrom = function (source) {\n    this.mapImages.template.copyFrom(source.mapImages.template);\n    _super.prototype.copyFrom.call(this, source);\n  };\n  /**\r\n   * @ignore\r\n   */\n  MapImageSeries.prototype.getFeatures = function () {\n    var _this = this;\n    var features = [];\n    this.dataItems.each(function (dataItem) {\n      var feature = dataItem.getFeature();\n      if (feature) {\n        features.push(feature);\n      }\n    });\n    this.mapImages.each(function (mapImage) {\n      if (_this.dataItems.indexOf(mapImage._dataItem) == -1) {\n        var feature = mapImage.getFeature();\n        if (feature) {\n          features.push(feature);\n        }\n      }\n    });\n    return features;\n  };\n  /**\r\n   * returns MapImage by id\r\n   * @param image id\r\n   * @return {MapImage}\r\n   */\n  MapImageSeries.prototype.getImageById = function (id) {\n    return $iter.find(this.mapImages.iterator(), function (mapImage) {\n      var dataContext = mapImage.dataItem.dataContext;\n      if (mapImage.id == id || dataContext && dataContext.id == id) {\n        return true;\n      }\n    });\n  };\n  return MapImageSeries;\n}(MapSeries);\nexport { MapImageSeries };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\nregistry.registeredClasses[\"MapImageSeries\"] = MapImageSeries;\nregistry.registeredClasses[\"MapImageSeriesDataItem\"] = MapImageSeriesDataItem;","map":{"version":3,"names":["MapSeries","MapSeriesDataItem","MapImage","ListTemplate","ListDisposer","registry","$array","$mapUtils","$utils","$iter","$type","Disposer","MapImageSeriesDataItem","_super","__extends","_this","call","className","applyTheme","prototype","getFeature","geometry","type","coordinates","point","Object","defineProperty","get","_mapImage","mapImage_1","component","mapImages","create","addSprite","_disposers","push","removeValue","mapObject","_point","set","_geoPoint","pointToGeo","updateExtremes","multiPoint","geoPoint","longitude","latitude","MapImageSeries","dataFields","multiGeoPoint","ignoreBounds","createDataItem","validateData","data","length","_parseDataFrom","clear","useGeodata","geodata","geoJSON","chart","features","indexOf","console","log","i","len","feature","id_1","id","this_1","checkInclude","include","exclude","dataObject","find","value","madeFromGeoData","softCopyProperties","properties","each","dataItems","iterator","dataItem","mapImage","isDisposed","moveValue","isNumber","_mapImages","template","focusable","events","on","handleObjectAdded","_mapObjects","validateDataElement","invalidate","validate","validatePosition","copyFrom","source","getFeatures","_dataItem","getImageById","dataContext","registeredClasses"],"sources":["../../../../../src/.internal/charts/map/MapImageSeries.ts"],"sourcesContent":["/**\r\n * Map image series module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { MapSeries, MapSeriesDataItem, GEOJSONGeometry, IMapSeriesProperties, IMapSeriesDataFields, IMapSeriesAdapters, IMapSeriesEvents } from \"./MapSeries\";\r\nimport { MapChart } from \"../types/MapChart\";\r\nimport { MapImage } from \"./MapImage\";\r\nimport { ListTemplate, ListDisposer } from \"../../core/utils/List\";\r\nimport { IMapImageDataObject } from \"../types/MapChart\";\r\nimport { IGeoPoint } from \"../../core/defs/IGeoPoint\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $array from \"../../core/utils/Array\";\r\nimport * as $mapUtils from \"./MapUtils\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport { Disposer } from \"../../core/utils/Disposer\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[MapImageSeries]]\r\n * @see {@link DataItem}\r\n */\r\nexport class MapImageSeriesDataItem extends MapSeriesDataItem {\r\n\r\n\t/**\r\n\t * A [[MapImage]] element related to this data item.\r\n\t */\r\n\tprotected _mapImage: MapImage;\r\n\r\n\t/**\r\n\t * [_point description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _point: [number, number];\r\n\r\n\t/**\r\n\t * Geographical coordinates image is placed at.\r\n\t */\r\n\tprotected _geoPoint: IGeoPoint;\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for\r\n\t */\r\n\tpublic _component!: MapImageSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"MapImageSeriesDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic getFeature(): { \"type\": \"Feature\", geometry: { type: \"Point\", coordinates: [number, number] } } {\r\n\t\treturn { \"type\": \"Feature\", geometry: { type: \"Point\", coordinates: this.point } };\r\n\t}\r\n\r\n\t/**\r\n\t * A [[MapImage]] element related to this data item.\r\n\t *\r\n\t * @return Element\r\n\t */\r\n\tpublic get mapImage(): MapImage {\r\n\t\tif (!this._mapImage) {\r\n\t\t\tlet mapImage = this.component.mapImages.create();\r\n\t\t\tthis.addSprite(mapImage);\r\n\t\t\tthis._mapImage = mapImage;\r\n\t\t\tthis._disposers.push(mapImage);\r\n\t\t\tthis._disposers.push(new Disposer(() => {\r\n\t\t\t\tif (this.component) {\r\n\t\t\t\t\tthis.component.mapImages.removeValue(mapImage);\r\n\t\t\t\t}\r\n\t\t\t}));\r\n\t\t\tthis.mapObject = mapImage;\r\n\t\t}\r\n\t\treturn this._mapImage;\r\n\t}\r\n\r\n\t/**\r\n\t * [point description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param point [description]\r\n\t */\r\n\tpublic set point(point: [number, number]) {\r\n\t\tthis._point = point;\r\n\t\tthis._geoPoint = $mapUtils.pointToGeo(point);\r\n\t\tthis.updateExtremes();\r\n\t}\r\n\r\n\t/**\r\n\t * @return [description]\r\n\t */\r\n\tpublic get point(): [number, number] {\r\n\t\treturn this._point;\r\n\t}\r\n\r\n\t/**\r\n\t * [point description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param point [description]\r\n\t */\r\n\tpublic set multiPoint(multiPoint: [[number, number]]) {\r\n\t\tthis._point = multiPoint[0];\r\n\t\tthis._geoPoint = $mapUtils.pointToGeo(this._point);\r\n\t\tthis.updateExtremes();\r\n\t}\r\n\r\n\t/**\r\n\t * @return [description]\r\n\t */\r\n\tpublic get multiPoint(): [[number, number]] {\r\n\t\treturn [this._point];\r\n\t}\t\r\n\r\n\t/**\r\n\t * Geographical coordinates (lat/long) image is placed at.\r\n\t *\r\n\t * @param geoPoint Image coordinates\r\n\t */\r\n\tpublic set geoPoint(geoPoint: IGeoPoint) {\r\n\t\tthis._geoPoint = geoPoint;\r\n\t\tthis.point = [geoPoint.longitude, geoPoint.latitude];\r\n\t}\r\n\r\n\t/**\r\n\t * @return Image coordinates\r\n\t */\r\n\tpublic get geoPoint(): IGeoPoint {\r\n\t\treturn this._geoPoint;\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[MapImageSeries]].\r\n */\r\nexport interface IMapImageSeriesDataFields extends IMapSeriesDataFields {\r\n\r\n\t/**\r\n\t * Field name that holds image point data in pixels.\r\n\t */\r\n\tpoint?: string;\r\n\r\n\t/**\r\n\t * Field name that holds multi-image point data in pixels.\r\n\t */\r\n\tmultiPoint?: string;\r\n\r\n\t/**\r\n\t * Field name that holds image point data in Geo coordinates.\r\n\t */\r\n\tgeoPoint?: string;\r\n\r\n\t/**\r\n\t * Field name that holds multi-image point data in Geo coordinates.\r\n\t */\r\n\tmultiGeoPoint?: string;\r\n\r\n}\r\n\r\n/**\r\n * Defines properties for [[MapImageSeries]].\r\n */\r\nexport interface IMapImageSeriesProperties extends IMapSeriesProperties { }\r\n\r\n/**\r\n * Defines events for [[MapImageSeries]].\r\n */\r\nexport interface IMapImageSeriesEvents extends IMapSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[MapImageSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IMapImageSeriesAdapters extends IMapSeriesAdapters, IMapImageSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * A series of map image (marker) elements.\r\n *\r\n * @see {@link IMapImageSeriesEvents} for a list of available Events\r\n * @see {@link IMapImageSeriesAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class MapImageSeries extends MapSeries {\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t */\r\n\tpublic _dataFields: IMapImageSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IMapImageSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IMapImageSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IMapImageSeriesEvents;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t */\r\n\tpublic _dataItem: MapImageSeriesDataItem;\r\n\r\n\t/**\r\n\t * A related chart/map object, this image is drawn on.\r\n\t */\r\n\tpublic chart: MapChart;\r\n\r\n\t/**\r\n\t * A list of map images in the series.\r\n\t */\r\n\tprotected _mapImages: ListTemplate<MapImage>;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"MapImageSeries\";\r\n\r\n\t\t// Set data fields\r\n\t\tthis.dataFields.multiPoint = \"multiPoint\";\r\n\t\tthis.dataFields.point = \"point\";\r\n\r\n\t\tthis.dataFields.geoPoint = \"geoPoint\";\r\n\t\tthis.dataFields.multiGeoPoint = \"multiGeoPoint\";\r\n\r\n\t\tthis.ignoreBounds = true;\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new MapImageSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the data of the sries, effectively forcing it to redraw\r\n\t * all of its elements.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateData(): void {\r\n\t\tif (this.data.length > 0 && this._parseDataFrom == 0) {\r\n\t\t\tthis.mapImages.clear();\r\n\t\t}\r\n\r\n\t\t// process geoJSON and created map objects\r\n\t\tif (this.useGeodata) {\r\n\t\t\tif (this.useGeodata || this.geodata) {\r\n\t\t\t\tlet geoJSON: any = this.chart.geodata;\r\n\r\n\t\t\t\tlet features: any[];\r\n\r\n\t\t\t\tif (geoJSON.type == \"FeatureCollection\") {\r\n\t\t\t\t\tfeatures = geoJSON.features;\r\n\t\t\t\t}\r\n\t\t\t\telse if (geoJSON.type == \"Feature\") {\r\n\t\t\t\t\tfeatures = [geoJSON];\r\n\t\t\t\t}\r\n\t\t\t\telse if ([\"Point\", \"LineString\", \"Polygon\", \"MultiPoint\", \"MultiLineString\", \"MultiPolygon\"].indexOf(geoJSON.type) != -1) {\r\n\t\t\t\t\tfeatures = [{ geometry: geoJSON }];\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tconsole.log(\"nothing found in geoJSON\");\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (features) {\r\n\t\t\t\t\tfor (let i = 0, len = features.length; i < len; i++) {\r\n\r\n\t\t\t\t\t\tlet feature: any = features[i];\r\n\t\t\t\t\t\tlet geometry: any = feature.geometry;\r\n\t\t\t\t\t\tif (geometry) {\r\n\t\t\t\t\t\t\tlet type: GEOJSONGeometry = <GEOJSONGeometry>geometry.type;\r\n\t\t\t\t\t\t\tlet id: string = feature.id;\r\n\t\t\t\t\t\t\tif (type == \"Point\" || type == \"MultiPoint\") {  // todo: we don't support multipoints at the moment actually\r\n\r\n\t\t\t\t\t\t\t\tif (!this.checkInclude(this.include, this.exclude, id)) {\r\n\t\t\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\tlet coordinates: any[] = geometry.coordinates;\r\n\r\n\t\t\t\t\t\t\t\t// make the same as MultiPoint\r\n\t\t\t\t\t\t\t\tif (type == \"Point\") {\r\n\t\t\t\t\t\t\t\t\tcoordinates = [coordinates];\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\tlet dataObject: IMapImageDataObject = $array.find(this.data, (value, i) => {\r\n\t\t\t\t\t\t\t\t\treturn value.id == id;\r\n\t\t\t\t\t\t\t\t});\r\n\r\n\t\t\t\t\t\t\t\tif (!dataObject) {\r\n\t\t\t\t\t\t\t\t\tdataObject = { multiPoint: coordinates, id: id, madeFromGeoData:true };\r\n\t\t\t\t\t\t\t\t\tthis.data.push(dataObject);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\t\tif (!dataObject.multiPoint) {\r\n\t\t\t\t\t\t\t\t\t\tdataObject.multiPoint = coordinates;\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\t// copy properties data to datacontext\r\n\t\t\t\t\t\t\t\t$utils.softCopyProperties(feature.properties, dataObject);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tsuper.validateData();\r\n\r\n\t\t// important! this should go after super.validateData\r\n\t\t// if data is parsed in chunks, images list is corrupted, fix it here\r\n\r\n\t\t$iter.each(this.dataItems.iterator(), (dataItem) => {\r\n\t\t\tlet mapImage = dataItem.mapImage;\r\n\t\t\tif (!mapImage.isDisposed()) {\r\n\t\t\t\tthis.mapImages.moveValue(mapImage);\r\n\t\t\t\tif ($type.isNumber(mapImage.latitude) && $type.isNumber(mapImage.latitude)) {\r\n\t\t\t\t\tdataItem.geoPoint = { latitude: mapImage.latitude, longitude: mapImage.longitude }\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * A list of map images in the series.\r\n\t *\r\n\t * @return Map images\r\n\t */\r\n\tpublic get mapImages(): ListTemplate<MapImage> {\r\n\r\n\t\tif (!this._mapImages) {\r\n\t\t\tlet template: MapImage = new MapImage();\r\n\t\t\tlet mapImages = new ListTemplate<MapImage>(template);\r\n\t\t\tthis._disposers.push(new ListDisposer(mapImages));\r\n\t\t\tthis._disposers.push(mapImages.template);\r\n\t\t\tmapImages.template.focusable = true;\r\n\t\t\tmapImages.events.on(\"inserted\", this.handleObjectAdded, this, false);\r\n\t\t\tthis._mapImages = mapImages;\r\n\t\t\tthis._mapObjects = mapImages;\r\n\t\t}\r\n\r\n\t\treturn this._mapImages;\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates data element, effectively triggering its redrawal.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param dataItem  Data item\r\n\t */\r\n\tpublic validateDataElement(dataItem: this[\"_dataItem\"]) {\r\n\t\tsuper.validateDataElement(dataItem);\r\n\t\tdataItem.mapImage.invalidate();\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the series\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate() {\r\n\t\tsuper.validate();\r\n\t\t$iter.each(this.mapImages.iterator(), (mapImage) => {\r\n\t\t\tmapImage.validatePosition();\r\n\t\t})\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all properties from another instance of [[Series]].\r\n\t *\r\n\t * @param source  Source series\r\n\t */\r\n\tpublic copyFrom(source: this) {\r\n\t\tthis.mapImages.template.copyFrom(source.mapImages.template);\r\n\t\tsuper.copyFrom(source);\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic getFeatures(): Array<{ \"type\": \"Feature\", geometry: { type: \"Point\", coordinates: [number, number] } }> {\r\n\t\tlet features: Array<{ \"type\": \"Feature\", geometry: { type: \"Point\", coordinates: [number, number] } }> = [];\r\n\r\n\t\tthis.dataItems.each((dataItem) => {\r\n\t\t\tlet feature = dataItem.getFeature();\r\n\t\t\tif (feature) {\r\n\t\t\t\tfeatures.push(feature);\r\n\t\t\t}\r\n\t\t})\r\n\r\n\t\tthis.mapImages.each((mapImage)=>{\r\n\t\t\tif (this.dataItems.indexOf(mapImage._dataItem) == -1) {\r\n\t\t\t\tlet feature = mapImage.getFeature();\r\n\t\t\t\tif (feature) {\r\n\t\t\t\t\tfeatures.push(feature);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t})\r\n\t\treturn features;\r\n\t}\r\n\r\n\t/**\r\n\t * returns MapImage by id\r\n\t * @param image id\r\n\t * @return {MapImage}\r\n\t */\r\n\tpublic getImageById(id: string): MapImage {\r\n\t\treturn $iter.find(this.mapImages.iterator(), (mapImage) => {\r\n\t\t\tlet dataContext: any = mapImage.dataItem.dataContext;\r\n\t\t\tif(mapImage.id == id || (dataContext && dataContext.id == id)){\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"MapImageSeries\"] = MapImageSeries;\r\nregistry.registeredClasses[\"MapImageSeriesDataItem\"] = MapImageSeriesDataItem;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}