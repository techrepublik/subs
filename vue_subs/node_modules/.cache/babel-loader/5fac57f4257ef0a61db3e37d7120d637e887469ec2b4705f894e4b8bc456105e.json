{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport * as $math from \"./Math\";\nimport * as $type from \"./Type\";\n/**\r\n * ============================================================================\r\n * UTILITY FUNCTIONS\r\n * ============================================================================\r\n * @hidden\r\n */\n/**\r\n * Searches `array` for `value`.\r\n *\r\n * Returns -1 if not found.\r\n *\r\n * @param array  Source array\r\n * @param value  Value to search\r\n * @returns Index\r\n */\nexport function indexOf(array, value) {\n  var length = array.length;\n  for (var i = 0; i < length; ++i) {\n    // TODO handle NaN\n    if (array[i] === value) {\n      return i;\n    }\n  }\n  return -1;\n}\n/**\r\n * Calls `test` for each element in `array`.\r\n *\r\n * If `test` returns `true` then it immediately returns `true`.\r\n *\r\n * If `test` returns `false` for all of the elements in `array` then it returns `false`.\r\n *\r\n * @param array  Source array\r\n * @param test   Function which is called on each element\r\n * @returns Whether `test` returned true or not\r\n */\nexport function any(array, test) {\n  var length = array.length;\n  for (var i = 0; i < length; ++i) {\n    if (test(array[i])) {\n      return true;\n    }\n  }\n  return false;\n}\n/**\r\n * Calls `fn` function for every member of array and returns a new array out\r\n * of all outputs.\r\n *\r\n * @param array  Source array\r\n * @param fn     Callback function\r\n * @returns New array\r\n */\nexport function map(array, fn) {\n  var length = array.length;\n  var output = new Array(length);\n  for (var i = 0; i < length; ++i) {\n    output[i] = fn(array[i], i);\n  }\n  return output;\n}\n/**\r\n * Iterates through all items in array and calls `fn` function for each of\r\n * them.\r\n *\r\n * @param array  Source array\r\n * @param fn     Callback function\r\n */\nexport function each(array, fn) {\n  var length = array.length;\n  for (var i = 0; i < length; ++i) {\n    fn(array[i], i);\n  }\n}\n/**\r\n * Iterates through all items in array in reverse order and calls `fn` function for each of\r\n * them.\r\n *\r\n * @param array  Source array\r\n * @param fn     Callback function\r\n */\nexport function eachReverse(array, fn) {\n  var i = array.length;\n  while (i--) {\n    fn(array[i], i);\n  }\n}\n/**\r\n * Iterates through all items in array and calls `fn` function for each of\r\n * them.\r\n *\r\n * If `fn` call evaluates to `false`, further iteration is cancelled.\r\n *\r\n * @param array  Source array\r\n * @param fn     Callback function\r\n */\nexport function eachContinue(array, fn) {\n  var length = array.length;\n  for (var i = 0; i < length; ++i) {\n    if (!fn(array[i], i)) {\n      break;\n    }\n  }\n}\n/**\r\n * Shifts an item at `index` towards beginning of the array.\r\n *\r\n * @param array  Source array\r\n * @param index  Target element index\r\n */\nexport function shiftLeft(array, index) {\n  var length = array.length;\n  for (var i = index; i < length; ++i) {\n    array[i - index] = array[i];\n  }\n  array.length = length - index;\n}\n/**\r\n * Returns the last item of the array.\r\n *\r\n * @param array  Source array\r\n * @returns Last item\r\n */\nexport function last(array) {\n  var length = array.length;\n  return length ? array[length - 1] : undefined;\n}\n/**\r\n * Returns the first item of the array.\r\n *\r\n * @param array  Source array\r\n * @returns Last item\r\n */\nexport function first(array) {\n  return array[0];\n}\n/**\r\n * Inserts `element` into `array` at `index`.\r\n *\r\n * Caps `index` to be between `0` and `array.length`\r\n *\r\n * @param array    Source array\r\n * @param element  Item to insert\r\n * @param array    Index to insert item at\r\n */\nexport function insert(array, element, index) {\n  //if (array) {\n  index = $math.fitToRange(index, 0, array.length);\n  array.splice(index, 0, element);\n  //}\n}\n/**\r\n * Removes all copies of `element` from `array` (if they exist) and then\r\n * inserts `element` at `index`.\r\n *\r\n * @param array    Source array\r\n * @param element  Item\r\n * @param array    Index to move item to\r\n */\nexport function setIndex(array, element, index) {\n  remove(array, element);\n  insert(array, element, index);\n}\n/**\r\n * Pushes all of the elements from `input` into `array`.\r\n *\r\n * @param array  Output array\r\n * @param input  Input array\r\n */\nexport function pushAll(array, input) {\n  var length = input.length;\n  for (var i = 0; i < length; ++i) {\n    array.push(input[i]);\n  }\n}\n/**\r\n * Removes `element` from `array`.\r\n *\r\n * If there are multiple copies of `element`, they are all removed.\r\n *\r\n * @param array    Source array\r\n * @param element  Item to remove\r\n */\nexport function remove(array, element) {\n  var found = false;\n  var index = array.indexOf(element);\n  if (index !== -1) {\n    found = true;\n    array.splice(index, 1);\n    var length_1 = array.length;\n    while (index < length_1) {\n      // TODO handle NaN\n      if (array[index] === element) {\n        array.splice(index, 1);\n        --length_1;\n      } else {\n        ++index;\n      }\n    }\n  }\n  return found;\n}\n/**\r\n * Adds an `element` to `array`.\r\n *\r\n * If array already contains and item like this, it is removed before adding\r\n * it again.\r\n *\r\n * Optionally `toIndex` can be specified to add element at specific index.\r\n *\r\n * @param array    Source array\r\n * @param element  Item to add\r\n * @param array    Index to move item to\r\n */\nexport function move(array, element, toIndex) {\n  // @todo this implementation must be the same as the List.moveValue method\n  // @todo don't do anything if the desired index is the same as the current index\n  var index = indexOf(array, element);\n  // @todo remove all old values rather than only the first ?\n  if (index !== -1) {\n    removeIndex(array, index);\n  }\n  if (toIndex == null) {\n    array.push(element);\n  } else {\n    insertIndex(array, toIndex, element);\n  }\n}\n/**\r\n * Inserts `element` into `array` at `index`.\r\n *\r\n * If `index` is not provided, it will insert `element` at the end of `array`.\r\n *\r\n * @param array    Source array\r\n * @param element  Item to add\r\n * @param array    Index to add item at\r\n */\nexport function add(array, element, index) {\n  // Append to the end if index is not set\n  if (!$type.isNumber(index)) {\n    array.push(element);\n  }\n  // Add to the beginning of array if index is 0\n  else if (index === 0) {\n    array.unshift(element);\n  }\n  // Add to indicated place if index is set\n  else {\n    array.splice(index, 0, element);\n  }\n}\n/**\r\n * Removes `element` from `array` (if it exists) and then inserts `element` at\r\n * `index`.\r\n *\r\n * If `index` is not provided, it will insert `element` at the end of `array`.\r\n *\r\n * @param array    Source array\r\n * @param element  Item to remove\r\n * @param array    Index to move item to\r\n */\nexport function replace(array, element, index) {\n  // check if exists\n  var ind = array.indexOf(element);\n  // remove if exists\n  if (ind !== -1) {\n    array.splice(ind, 1);\n  }\n  // add to end if index is not set\n  if (!$type.isNumber(index)) {\n    array.push(element);\n  }\n  // add to indicated place if index is set\n  else {\n    array.splice(index, 0, element);\n  }\n}\n/**\r\n * Wraps `input` in an array, if it isn't already an array.\r\n *\r\n * @param input  Source value\r\n * @return An array\r\n */\nexport function toArray(input) {\n  if (Array.isArray(input)) {\n    return input;\n  } else {\n    return [input];\n  }\n}\n/**\r\n * Returns `true` if `element` exists in `array`.\r\n *\r\n * @param array    Source array\r\n * @param element  Item to search for\r\n * @returns Item in array?\r\n */\nexport function has(array, element) {\n  return indexOf(array, element) !== -1;\n}\n/**\r\n * Returns a shallow copy of `array`.\r\n *\r\n * @param array  Source array\r\n * @returns Copy of the array\r\n */\nexport function copy(array) {\n  var length = array.length;\n  // It's faster to create the array with a pre-defined length\n  var output = new Array(length);\n  for (var i = 0; i < length; ++i) {\n    // Because the array has a pre-defined length, we have to assign rather than push\n    // This is also faster than pushing\n    output[i] = array[i];\n  }\n  return output;\n}\n/**\r\n * Returns a copy of `array` which contains all the elements between `start`\r\n * and `end`. (including `start` and excluding `end`)\r\n *\r\n * If `end` is not provided, it defaults to `array.length`.\r\n *\r\n * @param array  Source array\r\n * @param start  Start index\r\n * @param end    End index\r\n * @returns Part of the array\r\n */\nexport function slice(array, start, end) {\n  if (end === void 0) {\n    end = array.length;\n  }\n  var output = new Array(end - start);\n  for (var i = start; i < end; ++i) {\n    output[i - start] = array[i];\n  }\n  return output;\n}\n/**\r\n * Inserts a value into array at specific index.\r\n *\r\n * @param array  Source array\r\n * @param index  Index\r\n * @param value  Value to insert\r\n */\nexport function insertIndex(array, index, value) {\n  array.splice(index, 0, value);\n}\n/**\r\n * Removes a value from array at specific index.\r\n *\r\n * @param array  Source array\r\n * @param index  Index\r\n */\nexport function removeIndex(array, index) {\n  array.splice(index, 1);\n}\n/**\r\n * Orders an array using specific `ordering` function and returns index of\r\n * the `value`.\r\n *\r\n * @ignore Exclude from docs\r\n * @param array     Source array\r\n * @param ordering  An ordering function\r\n * @param value     Value to search for\r\n * @returns Result of the search\r\n */\nexport function getSortedIndex(array, ordering, value) {\n  var start = 0;\n  var end = array.length;\n  var found = false;\n  while (start < end) {\n    // TODO is this faster/slower than using Math.floor ?\n    var pivot = start + end >> 1;\n    var order = ordering(value, array[pivot]);\n    // less\n    if (order < 0) {\n      end = pivot;\n      // equal\n    } else if (order === 0) {\n      found = true;\n      start = pivot + 1;\n      // more\n    } else {\n      start = pivot + 1;\n    }\n  }\n  return {\n    found: found,\n    index: found ? start - 1 : start\n  };\n}\n/**\r\n * Searches the array using custom function and returns index of the item if\r\n * found.\r\n *\r\n * Will call `matches` function on all items of the array. If return value\r\n * evaluates to `true`, index is returned.\r\n *\r\n * Otherwise returns -1.\r\n *\r\n * @param array    Source array\r\n * @param matches  Search function\r\n * @returns Index of the item if found\r\n */\nexport function findIndex(array, matches) {\n  var length = array.length;\n  for (var i = 0; i < length; ++i) {\n    if (matches(array[i], i)) {\n      return i;\n    }\n  }\n  return -1;\n}\n/**\r\n * Searches the array using custom function and returns item if found.\r\n *\r\n * Will call `matches` function on all items of the array. If return value\r\n * evaluates to `true`, index is returned.\r\n *\r\n * Otherwise returns `undefined`.\r\n *\r\n * @param array    Source array\r\n * @param matches  Search function\r\n * @returns Item if found\r\n */\nexport function find(array, matches) {\n  var index = findIndex(array, matches);\n  if (index !== -1) {\n    return array[index];\n  }\n}\n/**\r\n * Iterates through all items in array and calls `fn` function for each of\r\n * them.\r\n *\r\n * @param array  Source array\r\n * @param fn     Callback function\r\n */\nexport function shuffle(array) {\n  // https://stackoverflow.com/a/2450976/449477\n  var currentIndex = array.length,\n    temporaryValue,\n    randomIndex;\n  // While there remain elements to shuffle...\n  while (0 !== currentIndex) {\n    // Pick a remaining element...\n    randomIndex = Math.floor(Math.random() * currentIndex);\n    currentIndex -= 1;\n    // And swap it with the current element.\n    temporaryValue = array[currentIndex];\n    array[currentIndex] = array[randomIndex];\n    array[randomIndex] = temporaryValue;\n  }\n}\nexport function keepIf(array, keep) {\n  var length = array.length;\n  var i = 0;\n  while (i < length) {\n    if (keep(array[i])) {\n      ++i;\n    } else {\n      array.splice(i, 1);\n      --length;\n    }\n  }\n}","map":{"version":3,"names":["$math","$type","indexOf","array","value","length","i","any","test","map","fn","output","Array","each","eachReverse","eachContinue","shiftLeft","index","last","undefined","first","insert","element","fitToRange","splice","setIndex","remove","pushAll","input","push","found","length_1","move","toIndex","removeIndex","insertIndex","add","isNumber","unshift","replace","ind","toArray","isArray","has","copy","slice","start","end","getSortedIndex","ordering","pivot","order","findIndex","matches","find","shuffle","currentIndex","temporaryValue","randomIndex","Math","floor","random","keepIf","keep"],"sources":["../../../../../src/.internal/core/utils/Array.ts"],"sourcesContent":["/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Ordering } from \"./Order\";\r\nimport { Optional } from \"./Type\";\r\nimport * as $math from \"./Math\";\r\nimport * as $type from \"./Type\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * UTILITY FUNCTIONS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Searches `array` for `value`.\r\n *\r\n * Returns -1 if not found.\r\n *\r\n * @param array  Source array\r\n * @param value  Value to search\r\n * @returns Index\r\n */\r\nexport function indexOf<A>(array: ArrayLike<A>, value: A): number {\r\n\tconst length = array.length;\r\n\r\n\tfor (let i = 0; i < length; ++i) {\r\n\t\t// TODO handle NaN\r\n\t\tif (array[i] === value) {\r\n\t\t\treturn i;\r\n\t\t}\r\n\t}\r\n\r\n\treturn -1;\r\n}\r\n\r\n/**\r\n * Calls `test` for each element in `array`.\r\n *\r\n * If `test` returns `true` then it immediately returns `true`.\r\n *\r\n * If `test` returns `false` for all of the elements in `array` then it returns `false`.\r\n *\r\n * @param array  Source array\r\n * @param test   Function which is called on each element\r\n * @returns Whether `test` returned true or not\r\n */\r\nexport function any<A>(array: ArrayLike<A>, test: (value: A) => boolean): boolean {\r\n\tconst length = array.length;\r\n\r\n\tfor (let i = 0; i < length; ++i) {\r\n\t\tif (test(array[i])) {\r\n\t\t\treturn true;\r\n\t\t}\r\n\t}\r\n\r\n\treturn false;\r\n}\r\n\r\n/**\r\n * Calls `fn` function for every member of array and returns a new array out\r\n * of all outputs.\r\n *\r\n * @param array  Source array\r\n * @param fn     Callback function\r\n * @returns New array\r\n */\r\nexport function map<A, B>(array: ArrayLike<A>, fn: (value: A, index: number) => B): Array<B> {\r\n\tconst length = array.length;\r\n\tconst output = new Array(length);\r\n\r\n\tfor (let i = 0; i < length; ++i) {\r\n\t\toutput[i] = fn(array[i], i);\r\n\t}\r\n\r\n\treturn output;\r\n}\r\n\r\n/**\r\n * Iterates through all items in array and calls `fn` function for each of\r\n * them.\r\n *\r\n * @param array  Source array\r\n * @param fn     Callback function\r\n */\r\nexport function each<A>(array: ArrayLike<A>, fn: (value: A, index: number) => void): void {\r\n\tconst length = array.length;\r\n\r\n\tfor (let i = 0; i < length; ++i) {\r\n\t\tfn(array[i], i);\r\n\t}\r\n}\r\n\r\n/**\r\n * Iterates through all items in array in reverse order and calls `fn` function for each of\r\n * them.\r\n *\r\n * @param array  Source array\r\n * @param fn     Callback function\r\n */\r\nexport function eachReverse<A>(array: ArrayLike<A>, fn: (value: A, index: number) => void): void {\r\n\tlet i = array.length;\r\n\r\n\twhile (i--) {\r\n\t\tfn(array[i], i);\r\n\t}\r\n}\r\n\r\n/**\r\n * Iterates through all items in array and calls `fn` function for each of\r\n * them.\r\n *\r\n * If `fn` call evaluates to `false`, further iteration is cancelled.\r\n *\r\n * @param array  Source array\r\n * @param fn     Callback function\r\n */\r\nexport function eachContinue<A>(array: ArrayLike<A>, fn: (value: A, index: number) => boolean): void {\r\n\tconst length = array.length;\r\n\r\n\tfor (let i = 0; i < length; ++i) {\r\n\t\tif (!fn(array[i], i)) {\r\n\t\t\tbreak;\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * Shifts an item at `index` towards beginning of the array.\r\n *\r\n * @param array  Source array\r\n * @param index  Target element index\r\n */\r\nexport function shiftLeft<A>(array: Array<A>, index: number): void {\r\n\tconst length = array.length;\r\n\r\n\tfor (let i = index; i < length; ++i) {\r\n\t\tarray[i - index] = array[i];\r\n\t}\r\n\r\n\tarray.length = length - index;\r\n}\r\n\r\n/**\r\n * Returns the last item of the array.\r\n *\r\n * @param array  Source array\r\n * @returns Last item\r\n */\r\nexport function last<A>(array: Array<A>): Optional<A> {\r\n\tconst length = array.length;\r\n\treturn length ? array[length - 1] : undefined;\r\n}\r\n\r\n/**\r\n * Returns the first item of the array.\r\n *\r\n * @param array  Source array\r\n * @returns Last item\r\n */\r\nexport function first<A>(array: Array<A>): Optional<A> {\r\n\treturn array[0];\r\n}\r\n\r\n/**\r\n * Inserts `element` into `array` at `index`.\r\n *\r\n * Caps `index` to be between `0` and `array.length`\r\n *\r\n * @param array    Source array\r\n * @param element  Item to insert\r\n * @param array    Index to insert item at\r\n */\r\nexport function insert<A>(array: Array<A>, element: A, index: number): void {\r\n\t//if (array) {\r\n\tindex = $math.fitToRange(index, 0, array.length);\r\n\tarray.splice(index, 0, element);\r\n\t//}\r\n}\r\n\r\n/**\r\n * Removes all copies of `element` from `array` (if they exist) and then\r\n * inserts `element` at `index`.\r\n *\r\n * @param array    Source array\r\n * @param element  Item\r\n * @param array    Index to move item to\r\n */\r\nexport function setIndex<A>(array: Array<A>, element: A, index: number): void {\r\n\tremove(array, element);\r\n\tinsert(array, element, index);\r\n}\r\n\r\n\r\n/**\r\n * Pushes all of the elements from `input` into `array`.\r\n *\r\n * @param array  Output array\r\n * @param input  Input array\r\n */\r\nexport function pushAll<A>(array: Array<A>, input: Array<A>) {\r\n\tconst length = input.length;\r\n\r\n\tfor (let i = 0; i < length; ++i) {\r\n\t\tarray.push(input[i]);\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * Removes `element` from `array`.\r\n *\r\n * If there are multiple copies of `element`, they are all removed.\r\n *\r\n * @param array    Source array\r\n * @param element  Item to remove\r\n */\r\nexport function remove<A>(array: Array<A>, element: A): boolean {\r\n\tlet found: boolean = false;\r\n\tlet index: number = array.indexOf(element);\r\n\r\n\tif (index !== -1) {\r\n\t\tfound = true;\r\n\t\tarray.splice(index, 1);\r\n\r\n\t\tlet length: number = array.length;\r\n\r\n\t\twhile (index < length) {\r\n\t\t\t// TODO handle NaN\r\n\t\t\tif (array[index] === element) {\r\n\t\t\t\tarray.splice(index, 1);\r\n\t\t\t\t--length;\r\n\r\n\t\t\t} else {\r\n\t\t\t\t++index;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\treturn found;\r\n}\r\n\r\n/**\r\n * Adds an `element` to `array`.\r\n *\r\n * If array already contains and item like this, it is removed before adding\r\n * it again.\r\n *\r\n * Optionally `toIndex` can be specified to add element at specific index.\r\n *\r\n * @param array    Source array\r\n * @param element  Item to add\r\n * @param array    Index to move item to\r\n */\r\nexport function move<A>(array: Array<A>, element: A, toIndex?: number): void {\r\n\t// @todo this implementation must be the same as the List.moveValue method\r\n\t// @todo don't do anything if the desired index is the same as the current index\r\n\tlet index = indexOf(array, element);\r\n\r\n\t// @todo remove all old values rather than only the first ?\r\n\tif (index !== -1) {\r\n\t\tremoveIndex(array, index);\r\n\t}\r\n\r\n\tif (toIndex == null) {\r\n\t\tarray.push(element);\r\n\t} else {\r\n\t\tinsertIndex(array, toIndex, element);\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * Inserts `element` into `array` at `index`.\r\n *\r\n * If `index` is not provided, it will insert `element` at the end of `array`.\r\n *\r\n * @param array    Source array\r\n * @param element  Item to add\r\n * @param array    Index to add item at\r\n */\r\nexport function add<A>(array: Array<A>, element: A, index?: number): void {\r\n\t// Append to the end if index is not set\r\n\tif (!$type.isNumber(index)) {\r\n\t\tarray.push(element);\r\n\t}\r\n\r\n\t// Add to the beginning of array if index is 0\r\n\telse if (index === 0) {\r\n\t\tarray.unshift(element);\r\n\t}\r\n\t// Add to indicated place if index is set\r\n\telse {\r\n\t\tarray.splice(index, 0, element);\r\n\t}\r\n}\r\n\r\n/**\r\n * Removes `element` from `array` (if it exists) and then inserts `element` at\r\n * `index`.\r\n *\r\n * If `index` is not provided, it will insert `element` at the end of `array`.\r\n *\r\n * @param array    Source array\r\n * @param element  Item to remove\r\n * @param array    Index to move item to\r\n */\r\nexport function replace<A>(array: Array<A>, element: A, index?: number): void {\r\n\t// check if exists\r\n\tlet ind: number = array.indexOf(element);\r\n\r\n\t// remove if exists\r\n\tif (ind !== -1) {\r\n\t\tarray.splice(ind, 1);\r\n\t}\r\n\r\n\t// add to end if index is not set\r\n\tif (!$type.isNumber(index)) {\r\n\t\tarray.push(element);\r\n\t}\r\n\t// add to indicated place if index is set\r\n\telse {\r\n\t\tarray.splice(index, 0, element);\r\n\t}\r\n}\r\n\r\n/**\r\n * Wraps `input` in an array, if it isn't already an array.\r\n *\r\n * @param input  Source value\r\n * @return An array\r\n */\r\nexport function toArray<A>(input: Array<A> | A): Array<A> {\r\n\tif (Array.isArray(input)) {\r\n\t\treturn input;\r\n\t}\r\n\telse {\r\n\t\treturn [input];\r\n\t}\r\n}\r\n\r\n/**\r\n * Returns `true` if `element` exists in `array`.\r\n *\r\n * @param array    Source array\r\n * @param element  Item to search for\r\n * @returns Item in array?\r\n */\r\nexport function has<A>(array: ArrayLike<A>, element: A): boolean {\r\n\treturn indexOf(array, element) !== -1;\r\n}\r\n\r\n/**\r\n * Returns a shallow copy of `array`.\r\n *\r\n * @param array  Source array\r\n * @returns Copy of the array\r\n */\r\nexport function copy<A>(array: ArrayLike<A>): Array<A> {\r\n\tconst length = array.length;\r\n\r\n\t// It's faster to create the array with a pre-defined length\r\n\tconst output = new Array(length);\r\n\r\n\tfor (let i = 0; i < length; ++i) {\r\n\t\t// Because the array has a pre-defined length, we have to assign rather than push\r\n\t\t// This is also faster than pushing\r\n\t\toutput[i] = array[i];\r\n\t}\r\n\r\n\treturn output;\r\n}\r\n\r\n\r\n/**\r\n * Returns a copy of `array` which contains all the elements between `start`\r\n * and `end`. (including `start` and excluding `end`)\r\n *\r\n * If `end` is not provided, it defaults to `array.length`.\r\n *\r\n * @param array  Source array\r\n * @param start  Start index\r\n * @param end    End index\r\n * @returns Part of the array\r\n */\r\nexport function slice<A>(array: ArrayLike<A>, start: number, end: number = array.length): Array<A> {\r\n\tconst output = new Array(end - start);\r\n\r\n\tfor (let i = start; i < end; ++i) {\r\n\t\toutput[i - start] = array[i];\r\n\t}\r\n\r\n\treturn output;\r\n}\r\n\r\n/**\r\n * Inserts a value into array at specific index.\r\n *\r\n * @param array  Source array\r\n * @param index  Index\r\n * @param value  Value to insert\r\n */\r\nexport function insertIndex<A>(array: Array<A>, index: number, value: A): void {\r\n\tarray.splice(index, 0, value);\r\n}\r\n\r\n/**\r\n * Removes a value from array at specific index.\r\n *\r\n * @param array  Source array\r\n * @param index  Index\r\n */\r\nexport function removeIndex<A>(array: Array<A>, index: number): void {\r\n\tarray.splice(index, 1);\r\n}\r\n\r\n/**\r\n * @ignore Exclude from docs\r\n * @todo Description\r\n */\r\nexport interface SortResult {\r\n\tfound: boolean;\r\n\tindex: number\r\n}\r\n\r\n/**\r\n * Orders an array using specific `ordering` function and returns index of\r\n * the `value`.\r\n *\r\n * @ignore Exclude from docs\r\n * @param array     Source array\r\n * @param ordering  An ordering function\r\n * @param value     Value to search for\r\n * @returns Result of the search\r\n */\r\nexport function getSortedIndex<A>(array: ArrayLike<A>, ordering: (left: A, right: A) => Ordering, value: A): SortResult {\r\n\tlet start = 0;\r\n\tlet end   = array.length;\r\n\tlet found = false;\r\n\r\n\twhile (start < end) {\r\n\t\t// TODO is this faster/slower than using Math.floor ?\r\n\t\tconst pivot = (start + end) >> 1;\r\n\r\n\t\tconst order = ordering(value, array[pivot]);\r\n\r\n\t\t// less\r\n\t\tif (order < 0) {\r\n\t\t\tend = pivot;\r\n\r\n\t\t// equal\r\n\t\t} else if (order === 0) {\r\n\t\t\tfound = true;\r\n\t\t\tstart = pivot + 1;\r\n\r\n\t\t// more\r\n\t\t} else {\r\n\t\t\tstart = pivot + 1;\r\n\t\t}\r\n\t}\r\n\r\n\treturn {\r\n\t\tfound: found,\r\n\t\tindex: (found ? start - 1 : start)\r\n\t};\r\n}\r\n\r\n/**\r\n * Searches the array using custom function and returns index of the item if\r\n * found.\r\n *\r\n * Will call `matches` function on all items of the array. If return value\r\n * evaluates to `true`, index is returned.\r\n *\r\n * Otherwise returns -1.\r\n *\r\n * @param array    Source array\r\n * @param matches  Search function\r\n * @returns Index of the item if found\r\n */\r\nexport function findIndex<A>(array: ArrayLike<A>, matches: (value: A, index: number) => boolean): number {\r\n\tconst length = array.length;\r\n\r\n\tfor (let i = 0; i < length; ++i) {\r\n\t\tif (matches(array[i], i)) {\r\n\t\t\treturn i;\r\n\t\t}\r\n\t}\r\n\r\n\treturn -1;\r\n}\r\n\r\n/**\r\n * Searches the array using custom function and returns item if found.\r\n *\r\n * Will call `matches` function on all items of the array. If return value\r\n * evaluates to `true`, index is returned.\r\n *\r\n * Otherwise returns `undefined`.\r\n *\r\n * @param array    Source array\r\n * @param matches  Search function\r\n * @returns Item if found\r\n */\r\nexport function find<A>(array: ArrayLike<A>, matches: (value: A, index: number) => boolean): A | undefined {\r\n\tconst index = findIndex(array, matches);\r\n\r\n\tif (index !== -1) {\r\n\t\treturn array[index];\r\n\t}\r\n}\r\n\r\n/**\r\n * Iterates through all items in array and calls `fn` function for each of\r\n * them.\r\n *\r\n * @param array  Source array\r\n * @param fn     Callback function\r\n */\r\nexport function shuffle<A>(array: Array<A>) {\r\n\t// https://stackoverflow.com/a/2450976/449477\r\n\tlet currentIndex = array.length,\r\n\t\ttemporaryValue,\r\n\t\trandomIndex;\r\n\r\n\t// While there remain elements to shuffle...\r\n\twhile (0 !== currentIndex) {\r\n\t\t// Pick a remaining element...\r\n\t\trandomIndex = Math.floor(Math.random() * currentIndex);\r\n\t\tcurrentIndex -= 1;\r\n\r\n\t\t// And swap it with the current element.\r\n\t\ttemporaryValue = array[currentIndex];\r\n\t\tarray[currentIndex] = array[randomIndex];\r\n\t\tarray[randomIndex] = temporaryValue;\r\n\t}\r\n}\r\n\r\n\r\nexport function keepIf<A>(array: Array<A>, keep: (value: A) => boolean): void {\r\n\tlet length = array.length;\r\n\tlet i = 0;\r\n\r\n\twhile (i < length) {\r\n\t\tif (keep(array[i])) {\r\n\t\t\t++i;\r\n\r\n\t\t} else {\r\n\t\t\tarray.splice(i, 1);\r\n\t\t\t--length;\r\n\t\t}\r\n\t}\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}