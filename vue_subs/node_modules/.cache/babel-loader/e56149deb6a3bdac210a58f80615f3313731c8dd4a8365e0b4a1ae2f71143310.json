{"ast":null,"code":"import { geoProjectionMutator as projectionMutator } from \"d3-geo\";\nimport { acos, asin, atan2, cos, degrees, epsilon, halfPi, max, min, pi, radians, sin, sqrt, tan } from \"./math.js\";\nfunction wagnerFormula(cx, cy, m1, m2, n) {\n  function forward(lambda, phi) {\n    var s = m1 * sin(m2 * phi),\n      c0 = sqrt(1 - s * s),\n      c1 = sqrt(2 / (1 + c0 * cos(lambda *= n)));\n    return [cx * c0 * c1 * sin(lambda), cy * s * c1];\n  }\n  forward.invert = function (x, y) {\n    var t1 = x / cx,\n      t2 = y / cy,\n      p = sqrt(t1 * t1 + t2 * t2),\n      c = 2 * asin(p / 2);\n    return [atan2(x * tan(c), cx * p) / n, p && asin(y * sin(c) / (cy * m1 * p)) / m2];\n  };\n  return forward;\n}\nexport function wagnerRaw(poleline, parallels, inflation, ratio) {\n  // 60 is always used as reference parallel\n  var phi1 = pi / 3;\n\n  // sanitizing the input values\n  // poleline and parallels may approximate but never equal 0\n  poleline = max(poleline, epsilon);\n  parallels = max(parallels, epsilon);\n  // poleline must be <= 90; parallels may approximate but never equal 180\n  poleline = min(poleline, halfPi);\n  parallels = min(parallels, pi - epsilon);\n  // 0 <= inflation <= 99.999\n  inflation = max(inflation, 0);\n  inflation = min(inflation, 100 - epsilon);\n  // ratio > 0.\n  // sensible values, i.e. something that renders a map which still can be\n  // recognized as world map, are e.g. 20 <= ratio <= 1000.\n  ratio = max(ratio, epsilon);\n\n  // convert values from boehm notation\n  // areal inflation e.g. from 0 to 1 or 20 to 1.2:\n  var vinflation = inflation / 100 + 1;\n  // axial ratio e.g. from 200 to 2:\n  var vratio = ratio / 100;\n  // the other ones are a bit more complicated...\n  var m2 = acos(vinflation * cos(phi1)) / phi1,\n    m1 = sin(poleline) / sin(m2 * halfPi),\n    n = parallels / pi,\n    k = sqrt(vratio * sin(poleline / 2) / sin(parallels / 2)),\n    cx = k / sqrt(n * m1 * m2),\n    cy = 1 / (k * sqrt(n * m1 * m2));\n  return wagnerFormula(cx, cy, m1, m2, n);\n}\nexport default function wagner() {\n  // default values generate wagner8\n  var poleline = 65 * radians,\n    parallels = 60 * radians,\n    inflation = 20,\n    ratio = 200,\n    mutate = projectionMutator(wagnerRaw),\n    projection = mutate(poleline, parallels, inflation, ratio);\n  projection.poleline = function (_) {\n    return arguments.length ? mutate(poleline = +_ * radians, parallels, inflation, ratio) : poleline * degrees;\n  };\n  projection.parallels = function (_) {\n    return arguments.length ? mutate(poleline, parallels = +_ * radians, inflation, ratio) : parallels * degrees;\n  };\n  projection.inflation = function (_) {\n    return arguments.length ? mutate(poleline, parallels, inflation = +_, ratio) : inflation;\n  };\n  projection.ratio = function (_) {\n    return arguments.length ? mutate(poleline, parallels, inflation, ratio = +_) : ratio;\n  };\n  return projection.scale(163.775);\n}\nexport function wagner7() {\n  return wagner().poleline(65).parallels(60).inflation(0).ratio(200).scale(172.633);\n}","map":{"version":3,"names":["geoProjectionMutator","projectionMutator","acos","asin","atan2","cos","degrees","epsilon","halfPi","max","min","pi","radians","sin","sqrt","tan","wagnerFormula","cx","cy","m1","m2","n","forward","lambda","phi","s","c0","c1","invert","x","y","t1","t2","p","c","wagnerRaw","poleline","parallels","inflation","ratio","phi1","vinflation","vratio","k","wagner","mutate","projection","_","arguments","length","scale","wagner7"],"sources":["/home/josh/Documents/projects/subs/vue_subs/node_modules/d3-geo-projection/src/wagner.js"],"sourcesContent":["import {geoProjectionMutator as projectionMutator} from \"d3-geo\";\nimport {acos, asin, atan2, cos, degrees, epsilon, halfPi, max, min, pi, radians, sin, sqrt, tan} from \"./math.js\";\n\nfunction wagnerFormula(cx, cy, m1, m2, n) {\n  function forward(lambda, phi) {\n    var s = m1 * sin(m2 * phi),\n        c0 = sqrt(1 - s * s),\n        c1 = sqrt(2 / (1 + c0 * cos(lambda *= n)));\n    return [\n      cx * c0 * c1 * sin(lambda),\n      cy * s * c1\n    ];\n  }\n\n  forward.invert = function(x, y) {\n    var t1 = x / cx,\n        t2 = y / cy,\n        p = sqrt(t1 * t1 + t2 * t2),\n        c = 2 * asin(p / 2);\n    return [\n      atan2(x * tan(c), cx * p) / n,\n      p && asin(y * sin(c) / (cy * m1 * p)) / m2\n    ];\n  };\n\n  return forward;\n}\n\nexport function wagnerRaw(poleline, parallels, inflation, ratio) {\n  // 60 is always used as reference parallel\n  var phi1 = pi / 3;\n\n  // sanitizing the input values\n  // poleline and parallels may approximate but never equal 0\n  poleline = max(poleline, epsilon);\n  parallels = max(parallels, epsilon);\n  // poleline must be <= 90; parallels may approximate but never equal 180\n  poleline = min(poleline, halfPi);\n  parallels = min(parallels, pi - epsilon);\n  // 0 <= inflation <= 99.999\n  inflation = max(inflation, 0);\n  inflation = min(inflation, 100 - epsilon);\n  // ratio > 0.\n  // sensible values, i.e. something that renders a map which still can be\n  // recognized as world map, are e.g. 20 <= ratio <= 1000.\n  ratio = max(ratio, epsilon);\n\n  // convert values from boehm notation\n  // areal inflation e.g. from 0 to 1 or 20 to 1.2:\n  var vinflation = inflation/100 + 1;\n  // axial ratio e.g. from 200 to 2:\n  var vratio  = ratio / 100;\n  // the other ones are a bit more complicated...\n  var m2 = acos(vinflation * cos(phi1)) / phi1,\n      m1 = sin(poleline) / sin(m2 * halfPi),\n      n = parallels / pi,\n      k = sqrt(vratio * sin(poleline / 2) / sin(parallels / 2)),\n      cx = k / sqrt(n * m1 * m2),\n      cy = 1 / (k * sqrt(n * m1 * m2));\n\n  return wagnerFormula(cx, cy, m1, m2, n);\n}\n\nexport default function wagner() {\n  // default values generate wagner8\n  var poleline = 65 * radians,\n      parallels = 60 * radians,\n      inflation = 20,\n      ratio = 200,\n      mutate = projectionMutator(wagnerRaw),\n      projection = mutate(poleline, parallels, inflation, ratio);\n\n  projection.poleline = function(_) {\n    return arguments.length ? mutate(poleline = +_ * radians, parallels, inflation, ratio) : poleline * degrees;\n  };\n\n  projection.parallels = function(_) {\n    return arguments.length ? mutate(poleline, parallels = +_ * radians, inflation, ratio) : parallels * degrees;\n  };\n  projection.inflation = function(_) {\n    return arguments.length ? mutate(poleline, parallels, inflation = +_, ratio) : inflation;\n  };\n  projection.ratio = function(_) {\n    return arguments.length ? mutate(poleline, parallels, inflation, ratio = +_) : ratio;\n  };\n\n  return projection\n    .scale(163.775);\n}\n\nexport function wagner7() {\n  return wagner()\n      .poleline(65)\n      .parallels(60)\n      .inflation(0)\n      .ratio(200)\n      .scale(172.633);\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}