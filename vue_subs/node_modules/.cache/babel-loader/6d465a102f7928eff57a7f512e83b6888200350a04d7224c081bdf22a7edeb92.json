{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { __extends, __generator } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\nimport { EventDispatcher } from \"./EventDispatcher\";\nimport * as $array from \"./Array\";\nimport * as $iter from \"./Iterator\";\nimport * as $type from \"./Type\";\n/**\r\n * Ordered list contains values of any type in an indexed array.\r\n */\nvar OrderedList = /** @class */function () {\n  /**\r\n   * Constructor\r\n   *\r\n   * @param initial  Inital list of values to add to list\r\n   */\n  function OrderedList(initial) {\n    /**\r\n     * Holds list values.\r\n     */\n    this._values = [];\n    /**\r\n     * Event dispatcher.\r\n     */\n    this.events = new EventDispatcher();\n    if (initial != null) {\n      this.setAll(initial);\n    }\n  }\n  Object.defineProperty(OrderedList.prototype, \"values\", {\n    /**\r\n     * All items of the list.\r\n     *\r\n     * Do not modify the list directly. Rather use `insert()` and `remove()`\r\n     * methods.\r\n     *\r\n     * @return List values\r\n     */\n    get: function () {\n      return this._values;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Inserts a value into list item array.\r\n   *\r\n   * @param value  Value\r\n   */\n  OrderedList.prototype._insert = function (value) {\n    this._values.push(value);\n    return this._values.length - 1;\n  };\n  Object.defineProperty(OrderedList.prototype, \"length\", {\n    /**\r\n     * Number of items in the list.\r\n     *\r\n     * @readonly\r\n     * @return Length\r\n     */\n    get: function () {\n      return this._values.length;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Returns the index of the specific `value`.\r\n   *\r\n   * -1 if not found.\r\n   *\r\n   * @param value  Value\r\n   * @return Index\r\n   */\n  OrderedList.prototype.indexOf = function (value) {\n    return $array.indexOf(this._values, value);\n  };\n  /**\r\n   * Checks if list contains the `value`.\r\n   *\r\n   * @param value  Value\r\n   * @return In the list?\r\n   */\n  OrderedList.prototype.contains = function (value) {\n    return this.indexOf(value) !== -1;\n  };\n  /**\r\n   * Returns an item at specific `index`.\r\n   *\r\n   * @param index  Index\r\n   * @return Item\r\n   */\n  OrderedList.prototype.getIndex = function (index) {\n    return this._values[index];\n  };\n  Object.defineProperty(OrderedList.prototype, \"first\", {\n    /**\r\n     * First item in the list.\r\n     *\r\n     * @return Item\r\n     */\n    get: function () {\n      return this._values[0];\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(OrderedList.prototype, \"last\", {\n    /**\r\n     * Last item in the list.\r\n     *\r\n     * @return Item\r\n     */\n    get: function () {\n      return this._values[this._values.length - 1];\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Inserts a value into list.\r\n   *\r\n   * @param value  Value\r\n   */\n  OrderedList.prototype.insert = function (value) {\n    var index = this._insert(value);\n    if (this.events.isEnabled(\"inserted\")) {\n      this.events.dispatchImmediately(\"inserted\", {\n        type: \"inserted\",\n        target: this,\n        index: index,\n        newValue: value\n      });\n    }\n  };\n  /**\r\n   * Removes an item with the `value` from the list.\r\n   *\r\n   * @param value  Value\r\n   */\n  OrderedList.prototype.remove = function (value) {\n    var index = this.indexOf(value);\n    if (index !== -1) {\n      var oldValue = this._values[index];\n      $array.removeIndex(this._values, index);\n      if (this.events.isEnabled(\"removed\")) {\n        this.events.dispatchImmediately(\"removed\", {\n          type: \"removed\",\n          target: this,\n          index: index,\n          oldValue: oldValue\n        });\n      }\n    }\n  };\n  /**\r\n   * Sets multiple items to the list.\r\n   *\r\n   * All current items are removed.\r\n   *\r\n   * @param newArray  New items\r\n   */\n  OrderedList.prototype.setAll = function (newArray) {\n    var _this = this;\n    $array.eachReverse(this._values, function (x, i) {\n      _this._values.pop();\n      if (_this.events.isEnabled(\"removed\")) {\n        _this.events.dispatchImmediately(\"removed\", {\n          type: \"removed\",\n          target: _this,\n          index: i,\n          oldValue: x\n        });\n      }\n    });\n    $array.each(newArray, function (value) {\n      _this.insert(value);\n    });\n  };\n  /**\r\n   * Removes all items from the list.\r\n   */\n  OrderedList.prototype.clear = function () {\n    this.setAll([]);\n  };\n  /**\r\n   * Returns part of the list between `start` and `end` indexes, as a new\r\n   * [[OrderedList]].\r\n   *\r\n   * @param start  Start index\r\n   * @param end    End index\r\n   * @return Items in range\r\n   */\n  OrderedList.prototype.slice = function (start, end) {\n    var out = new OrderedList();\n    out._values = this._values.slice(start, end);\n    return out;\n  };\n  /**\r\n   * Finds a closest available index to the `value` in specified direction.\r\n   *\r\n   * @ignore exclude from docs\r\n   * @param value      value to search for\r\n   * @param fn         A callback function that returns value of the item\r\n   * @param direction  Direciton\r\n   * @return Index\r\n   */\n  OrderedList.prototype.findClosestIndex = function (value, fn, direction) {\n    if (direction === void 0) {\n      direction = \"any\";\n    }\n    // Init temporary values\n    var closestIndex = -1;\n    var closestValue;\n    var closestDifference;\n    var i = 0;\n    $iter.eachContinue(this.iterator(), function (element) {\n      var item = fn(element);\n      // Calc difference\n      if (direction === \"any\") {\n        // Exact match?\n        if (item === value) {\n          // Found exact value - don't bother searching further\n          closestIndex = i;\n          return false;\n        }\n        var difference = Math.abs(value - item);\n        if (!$type.hasValue(closestDifference) || closestDifference > difference) {\n          closestIndex = i;\n          closestValue = item;\n          closestDifference = difference;\n        }\n      } else if (direction === \"left\" && item < value) {\n        if (!$type.hasValue(closestValue) || closestValue < item) {\n          closestIndex = i;\n          closestValue = item;\n        }\n      } else if (direction === \"right\" && item >= value) {\n        if (!$type.hasValue(closestValue) || closestValue >= item) {\n          closestIndex = i;\n          closestValue = item;\n        }\n      }\n      ++i;\n      return true;\n    });\n    // Found nothing?\n    if (closestIndex === -1) {\n      if (direction === \"left\") {\n        // Use First one\n        closestIndex = 0;\n      } else if (direction === \"right\") {\n        // Use last item\n        closestIndex = this.length - 1;\n      }\n    }\n    return closestIndex;\n  };\n  /**\r\n   * Returns a list iterator.\r\n   *\r\n   * @return Iterator\r\n   */\n  OrderedList.prototype.iterator = function () {\n    return $iter.fromArray(this._values);\n  };\n  /**\r\n   * Returns an ES6 iterator for the list.\r\n   */\n  OrderedList.prototype[Symbol.iterator] = function () {\n    var length, i;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          length = this._values.length;\n          i = 0;\n          _a.label = 1;\n        case 1:\n          if (!(i < length)) return [3 /*break*/, 4];\n          return [4 /*yield*/, this._values[i]];\n        case 2:\n          _a.sent();\n          _a.label = 3;\n        case 3:\n          ++i;\n          return [3 /*break*/, 1];\n        case 4:\n          return [2 /*return*/];\n      }\n    });\n  };\n  /**\r\n   * Calls `f` for each element in the list.\r\n   */\n  OrderedList.prototype.each = function (f) {\n    $array.each(this._values, f);\n  };\n  return OrderedList;\n}();\nexport { OrderedList };\n/**\r\n * A list where all items are ordered according to specific ordering function,\r\n * which is passed in via constructor parameter, when creating an instance of\r\n * [[SortedList]].\r\n */\nvar SortedList = /** @class */function (_super) {\n  __extends(SortedList, _super);\n  /**\r\n   * Constructor.\r\n   *\r\n   * @param sort  Ordering function\r\n   */\n  function SortedList(sort) {\n    var _this = _super.call(this) || this;\n    _this._ordering = sort;\n    return _this;\n  }\n  /**\r\n   * Inserts item into the list.\r\n   *\r\n   * @param value  Item\r\n   */\n  SortedList.prototype._insert = function (value) {\n    var index = $array.getSortedIndex(this._values, this._ordering, value).index;\n    $array.insertIndex(this._values, index, value);\n    return index;\n  };\n  /**\r\n   * Returns index of the item in list if found.\r\n   *\r\n   * -1 if item is not in the list.\r\n   *\r\n   * @param value  Item to search for\r\n   * @return Index\r\n   */\n  SortedList.prototype.indexOf = function (value) {\n    var _a = $array.getSortedIndex(this._values, this._ordering, value),\n      found = _a.found,\n      index = _a.index;\n    if (found) {\n      return index;\n    } else {\n      return -1;\n    }\n  };\n  /**\r\n   * [udpate description]\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @todo Description\r\n   * @param value [description]\r\n   */\n  SortedList.prototype.update = function (value) {\n    // @todo test this\n    var index = $array.indexOf(this._values, value);\n    // @todo throw an error if it doesn't exist ?\n    if (index !== -1) {\n      var last = this._values.length - 1;\n      // Check if the current ordering is correct\n      if (!((index === 0 || this._ordering(this._values[index - 1], value) < 0) && (index === last || this._ordering(value, this._values[index + 1]) < 0))) {\n        // TODO send remove/insert/move events\n        $array.removeIndex(this._values, index);\n        this._insert(value);\n      }\n    }\n  };\n  return SortedList;\n}(OrderedList);\nexport { SortedList };\n/**\r\n * A version of a [[OrderedList]] that has a \"template\".\r\n *\r\n * A template is an instance of an object, that can be used to create new\r\n * elements in the list without actually needing to create instances for those.\r\n *\r\n * When new element is created in the list, e.g. by calling its `create()`\r\n * method, an exact copy of the element is created (including properties and\r\n * other attributes), inserted into the list and returned.\r\n */\nvar OrderedListTemplate = /** @class */function (_super) {\n  __extends(OrderedListTemplate, _super);\n  /**\r\n   * Constructor\r\n   *\r\n   * @param t Template object\r\n   */\n  function OrderedListTemplate(t) {\n    var _this = _super.call(this) || this;\n    _this.template = t;\n    return _this;\n  }\n  Object.defineProperty(OrderedListTemplate.prototype, \"template\", {\n    /**\r\n     * @return Template object\r\n     */\n    get: function () {\n      return this._template;\n    },\n    /**\r\n     * A \"template\" object to copy all properties from when creating new list\r\n     * items.\r\n     *\r\n     * @param v  Template object\r\n     */\n    set: function (v) {\n      v.isTemplate = true;\n      this._template = v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Copies all elements from other list.\r\n   *\r\n   * @param source  Source list\r\n   */\n  OrderedListTemplate.prototype.copyFrom = function (source) {\n    var _this = this;\n    $iter.each(source.iterator(), function (value) {\n      _this.insert(value.clone());\n    });\n  };\n  /**\r\n   * Returns part of the list, starting at `start` and ending at `end` indexes,\r\n   * as a new [[OrderedListTemplate]].\r\n   *\r\n   * @param start  Start index\r\n   * @param end    End index\r\n   * @return New list\r\n   */\n  OrderedListTemplate.prototype.slice = function (start, end) {\n    var out = new OrderedListTemplate(this.template);\n    out._values = this._values.slice(start, end);\n    return out;\n  };\n  OrderedListTemplate.prototype.create = function (make) {\n    var clone = make != null ? new make() : this.template.clone();\n    this.insert(clone);\n    return clone;\n  };\n  return OrderedListTemplate;\n}(OrderedList);\nexport { OrderedListTemplate };\n/**\r\n * A version of a [[SortedList]] that has a \"template\".\r\n *\r\n * A template is an instance of an object, that can be used to create new\r\n * elements in the list without actually needing to create instances for those.\r\n *\r\n * When new element is created in the list, e.g. by calling its `create()`\r\n * method, an exact copy of the element is created (including properties and\r\n * other attributes), inserted into the list and returned.\r\n */\nvar SortedListTemplate = /** @class */function (_super) {\n  __extends(SortedListTemplate, _super);\n  /**\r\n   * Constructor\r\n   *\r\n   * @param t     Template object\r\n   * @param sort  Ordering function\r\n   */\n  function SortedListTemplate(t, sort) {\n    var _this = _super.call(this, sort) || this;\n    _this.template = t;\n    return _this;\n  }\n  Object.defineProperty(SortedListTemplate.prototype, \"template\", {\n    /**\r\n     * @return Template object\r\n     */\n    get: function () {\n      return this._template;\n    },\n    /**\r\n     * A \"template\" object to copy all properties from when creating new list\r\n     * items.\r\n     *\r\n     * @param v  Template object\r\n     */\n    set: function (v) {\n      v.isTemplate = true;\n      this._template = v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Copies all elements from other list.\r\n   *\r\n   * @param source  Source list\r\n   */\n  SortedListTemplate.prototype.copyFrom = function (source) {\n    var _this = this;\n    $iter.each(source.iterator(), function (value) {\n      _this.insert(value.clone());\n    });\n  };\n  SortedListTemplate.prototype.create = function (make) {\n    var clone = make != null ? new make() : this.template.clone();\n    this.insert(clone);\n    return clone;\n  };\n  return SortedListTemplate;\n}(SortedList);\nexport { SortedListTemplate };","map":{"version":3,"names":["EventDispatcher","$array","$iter","$type","OrderedList","initial","_values","events","setAll","Object","defineProperty","prototype","get","_insert","value","push","length","indexOf","contains","getIndex","index","insert","isEnabled","dispatchImmediately","type","target","newValue","remove","oldValue","removeIndex","newArray","_this","eachReverse","x","i","pop","each","clear","slice","start","end","out","findClosestIndex","fn","direction","closestIndex","closestValue","closestDifference","eachContinue","iterator","element","item","difference","Math","abs","hasValue","fromArray","Symbol","_a","sent","f","SortedList","_super","__extends","sort","call","_ordering","getSortedIndex","insertIndex","found","update","last","OrderedListTemplate","t","template","_template","set","v","isTemplate","copyFrom","source","clone","create","make","SortedListTemplate"],"sources":["../../../../../src/.internal/core/utils/SortedList.ts"],"sourcesContent":["/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { EventDispatcher, AMEvent } from \"./EventDispatcher\";\r\nimport { Ordering } from \"./Order\";\r\nimport { IClone } from \"./Clone\";\r\nimport * as $array from \"./Array\";\r\nimport * as $iter from \"./Iterator\";\r\nimport * as $type from \"./Type\";\r\n\r\n/**\r\n * Defines evends for [[SortedList]].\r\n */\r\nexport interface ISortedListEvents<A> {\r\n\r\n\t/**\r\n\t * Invoked when new value is inserted into the list.\r\n\t */\r\n\tinserted: {\r\n\t\t/**\r\n\t\t * Index where the element was inserted.\r\n\t\t */\r\n\t\tindex: number;\r\n\r\n\t\t/**\r\n\t\t * Inserted value.\r\n\t\t */\r\n\t\tnewValue: A;\r\n\t};\r\n\r\n\t/**\r\n\t * Invoked when a value is removed from the list.\r\n\t */\r\n\tremoved: {\r\n\t\t/**\r\n\t\t * Index of the element which was removed.\r\n\t\t */\r\n\t\tindex: number;\r\n\r\n\t\t/**\r\n\t\t * Removed value.\r\n\t\t */\r\n\t\toldValue: A;\r\n\t};\r\n\r\n}\r\n\r\n/**\r\n * Ordered list contains values of any type in an indexed array.\r\n */\r\nexport class OrderedList<T> {\r\n\r\n\t/**\r\n\t * Holds list values.\r\n\t */\r\n\tprotected _values: Array<T> = [];\r\n\r\n\t/**\r\n\t * Event dispatcher.\r\n\t */\r\n\tpublic events: EventDispatcher<AMEvent<OrderedList<T>, ISortedListEvents<T>>> = new EventDispatcher();\r\n\r\n\t/**\r\n\t * Constructor\r\n\t *\r\n\t * @param initial  Inital list of values to add to list\r\n\t */\r\n\tconstructor(initial?: Array<T>) {\r\n\t\tif (initial != null) {\r\n\t\t\tthis.setAll(initial);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * All items of the list.\r\n\t *\r\n\t * Do not modify the list directly. Rather use `insert()` and `remove()`\r\n\t * methods.\r\n\t *\r\n\t * @return List values\r\n\t */\r\n\tpublic get values(): Array<T> {\r\n\t\treturn this._values;\r\n\t}\r\n\r\n\t/**\r\n\t * Inserts a value into list item array.\r\n\t *\r\n\t * @param value  Value\r\n\t */\r\n\tprotected _insert(value: T): number {\r\n\t\tthis._values.push(value);\r\n\t\treturn this._values.length - 1;\r\n\t}\r\n\r\n\t/**\r\n\t * Number of items in the list.\r\n\t *\r\n\t * @readonly\r\n\t * @return Length\r\n\t */\r\n\tpublic get length(): number {\r\n\t\treturn this._values.length;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the index of the specific `value`.\r\n\t *\r\n\t * -1 if not found.\r\n\t *\r\n\t * @param value  Value\r\n\t * @return Index\r\n\t */\r\n\tpublic indexOf(value: T): number {\r\n\t\treturn $array.indexOf(this._values, value);\r\n\t}\r\n\r\n\t/**\r\n\t * Checks if list contains the `value`.\r\n\t *\r\n\t * @param value  Value\r\n\t * @return In the list?\r\n\t */\r\n\tpublic contains(value: T): boolean {\r\n\t\treturn this.indexOf(value) !== -1;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an item at specific `index`.\r\n\t *\r\n\t * @param index  Index\r\n\t * @return Item\r\n\t */\r\n\tpublic getIndex(index: number): T | undefined {\r\n\t\treturn this._values[index];\r\n\t}\r\n\r\n\t/**\r\n\t * First item in the list.\r\n\t *\r\n\t * @return Item\r\n\t */\r\n\tpublic get first(): T | undefined {\r\n\t\treturn this._values[0];\r\n\t}\r\n\r\n\t/**\r\n\t * Last item in the list.\r\n\t *\r\n\t * @return Item\r\n\t */\r\n\tpublic get last(): T | undefined {\r\n\t\treturn this._values[this._values.length - 1];\r\n\t}\r\n\r\n\t/**\r\n\t * Inserts a value into list.\r\n\t *\r\n\t * @param value  Value\r\n\t */\r\n\tpublic insert(value: T): void {\r\n\t\tconst index = this._insert(value);\r\n\r\n\t\tif (this.events.isEnabled(\"inserted\")) {\r\n\t\t\tthis.events.dispatchImmediately(\"inserted\", {\r\n\t\t\t\ttype: \"inserted\",\r\n\t\t\t\ttarget: this,\r\n\t\t\t\tindex: index,\r\n\t\t\t\tnewValue: value\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Removes an item with the `value` from the list.\r\n\t *\r\n\t * @param value  Value\r\n\t */\r\n\tpublic remove(value: T): void {\r\n\t\tconst index = this.indexOf(value);\r\n\r\n\t\tif (index !== -1) {\r\n\t\t\tconst oldValue = this._values[index];\r\n\r\n\t\t\t$array.removeIndex(this._values, index);\r\n\r\n\t\t\tif (this.events.isEnabled(\"removed\")) {\r\n\t\t\t\tthis.events.dispatchImmediately(\"removed\", {\r\n\t\t\t\t\ttype: \"removed\",\r\n\t\t\t\t\ttarget: this,\r\n\t\t\t\t\tindex: index,\r\n\t\t\t\t\toldValue: oldValue,\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Sets multiple items to the list.\r\n\t *\r\n\t * All current items are removed.\r\n\t *\r\n\t * @param newArray  New items\r\n\t */\r\n\tpublic setAll(newArray: Array<T>): void {\r\n\t\t$array.eachReverse(this._values, (x, i) => {\r\n\t\t\tthis._values.pop();\r\n\r\n\t\t\tif (this.events.isEnabled(\"removed\")) {\r\n\t\t\t\tthis.events.dispatchImmediately(\"removed\", {\r\n\t\t\t\t\ttype: \"removed\",\r\n\t\t\t\t\ttarget: this,\r\n\t\t\t\t\tindex: i,\r\n\t\t\t\t\toldValue: x\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\t$array.each(newArray, (value) => {\r\n\t\t\tthis.insert(value);\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Removes all items from the list.\r\n\t */\r\n\tpublic clear(): void {\r\n\t\tthis.setAll([]);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns part of the list between `start` and `end` indexes, as a new\r\n\t * [[OrderedList]].\r\n\t *\r\n\t * @param start  Start index\r\n\t * @param end    End index\r\n\t * @return Items in range\r\n\t */\r\n\tpublic slice(start: number, end: number): OrderedList<T> {\r\n\t\tconst out = new OrderedList<T>();\r\n\r\n\t\tout._values = this._values.slice(start, end);\r\n\r\n\t\treturn out;\r\n\t}\r\n\r\n\t/**\r\n\t * Finds a closest available index to the `value` in specified direction.\r\n\t *\r\n\t * @ignore exclude from docs\r\n\t * @param value      value to search for\r\n\t * @param fn         A callback function that returns value of the item\r\n\t * @param direction  Direciton\r\n\t * @return Index\r\n\t */\r\n\tpublic findClosestIndex(value: number, fn: (value: T) => number, direction: \"left\" | \"right\" | \"any\" = \"any\"): number {\r\n\t\t// Init temporary values\r\n\t\tlet closestIndex: number = -1;\r\n\t\tlet closestValue: number;\r\n\t\tlet closestDifference: number;\r\n\r\n\t\tlet i = 0;\r\n\r\n\t\t$iter.eachContinue(this.iterator(), (element) => {\r\n\t\t\tconst item: number = fn(element);\r\n\r\n\t\t\t// Calc difference\r\n\t\t\tif (direction === \"any\") {\r\n\r\n\t\t\t\t// Exact match?\r\n\t\t\t\tif (item === value) {\r\n\t\t\t\t\t// Found exact value - don't bother searching further\r\n\t\t\t\t\tclosestIndex = i;\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet difference = Math.abs(value - item);\r\n\t\t\t\tif (!$type.hasValue(closestDifference) || (closestDifference > difference)) {\r\n\t\t\t\t\tclosestIndex = i;\r\n\t\t\t\t\tclosestValue = item;\r\n\t\t\t\t\tclosestDifference = difference;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse if (direction === \"left\" && (item < value)) {\r\n\t\t\t\tif (!$type.hasValue(closestValue) || (closestValue < item)) {\r\n\t\t\t\t\tclosestIndex = i;\r\n\t\t\t\t\tclosestValue = item;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse if (direction === \"right\" && (item >= value)) {\r\n\t\t\t\tif (!$type.hasValue(closestValue) || (closestValue >= item)) {\r\n\t\t\t\t\tclosestIndex = i;\r\n\t\t\t\t\tclosestValue = item;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t++i;\r\n\t\t\treturn true;\r\n\t\t});\r\n\r\n\t\t// Found nothing?\r\n\t\tif (closestIndex === -1) {\r\n\t\t\tif (direction === \"left\") {\r\n\t\t\t\t// Use First one\r\n\t\t\t\tclosestIndex = 0;\r\n\t\t\t}\r\n\t\t\telse if (direction === \"right\") {\r\n\t\t\t\t// Use last item\r\n\t\t\t\tclosestIndex = this.length - 1;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn closestIndex;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a list iterator.\r\n\t *\r\n\t * @return Iterator\r\n\t */\r\n\tpublic iterator(): $iter.Iterator<T> {\r\n\t\treturn $iter.fromArray(this._values);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an ES6 iterator for the list.\r\n\t */\r\n\tpublic *[Symbol.iterator](): Iterator<T> {\r\n\t\tconst length = this._values.length;\r\n\r\n\t\tfor (let i = 0; i < length; ++i) {\r\n\t\t\tyield this._values[i];\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Calls `f` for each element in the list.\r\n\t */\r\n\tpublic each(f: (value: T, index: number) => void): void {\r\n\t\t$array.each(this._values, f);\r\n\t}\r\n}\r\n\r\n/**\r\n * A list where all items are ordered according to specific ordering function,\r\n * which is passed in via constructor parameter, when creating an instance of\r\n * [[SortedList]].\r\n */\r\nexport class SortedList<T> extends OrderedList<T> {\r\n\r\n\t/**\r\n\t * A reference to the ordering function.\r\n\t */\r\n\tprivate _ordering: any;\r\n\r\n\t/**\r\n\t * Constructor.\r\n\t *\r\n\t * @param sort  Ordering function\r\n\t */\r\n\tconstructor(sort: (left: T, right: T) => Ordering) {\r\n\t\tsuper();\r\n\t\tthis._ordering = sort;\r\n\t}\r\n\r\n\t/**\r\n\t * Inserts item into the list.\r\n\t *\r\n\t * @param value  Item\r\n\t */\r\n\tprotected _insert(value: T): number {\r\n\t\tconst { index } = $array.getSortedIndex(this._values, this._ordering, value);\r\n\r\n\t\t$array.insertIndex(this._values, index, value);\r\n\r\n\t\treturn index;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns index of the item in list if found.\r\n\t *\r\n\t * -1 if item is not in the list.\r\n\t *\r\n\t * @param value  Item to search for\r\n\t * @return Index\r\n\t */\r\n\tpublic indexOf(value: T): number {\r\n\t\tconst { found, index } = $array.getSortedIndex(this._values, this._ordering, value);\r\n\r\n\t\tif (found) {\r\n\t\t\treturn index;\r\n\r\n\t\t} else {\r\n\t\t\treturn -1;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * [udpate description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param value [description]\r\n\t */\r\n\tpublic update(value: T): void {\r\n\t\t// @todo test this\r\n\t\tconst index = $array.indexOf(this._values, value);\r\n\r\n\t\t// @todo throw an error if it doesn't exist ?\r\n\t\tif (index !== -1) {\r\n\t\t\tconst last = this._values.length - 1;\r\n\r\n\t\t\t// Check if the current ordering is correct\r\n\t\t\tif (!((index === 0 || this._ordering(this._values[index - 1], value) < 0) &&\r\n\t\t\t\t(index === last || this._ordering(value, this._values[index + 1]) < 0))) {\r\n\t\t\t\t// TODO send remove/insert/move events\r\n\t\t\t\t$array.removeIndex(this._values, index);\r\n\t\t\t\tthis._insert(value);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * A version of a [[OrderedList]] that has a \"template\".\r\n *\r\n * A template is an instance of an object, that can be used to create new\r\n * elements in the list without actually needing to create instances for those.\r\n *\r\n * When new element is created in the list, e.g. by calling its `create()`\r\n * method, an exact copy of the element is created (including properties and\r\n * other attributes), inserted into the list and returned.\r\n */\r\nexport class OrderedListTemplate<T extends IClone<T> & { isTemplate: boolean }> extends OrderedList<T> {\r\n\r\n\t/**\r\n\t * A template object.\r\n\t *\r\n\t * @todo Make this private\r\n\t */\r\n\tpublic _template!: T;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t *\r\n\t * @param t Template object\r\n\t */\r\n\tpublic constructor(t: T) {\r\n\t\tsuper();\r\n\t\tthis.template = t;\r\n\t}\r\n\r\n\t/**\r\n\t * A \"template\" object to copy all properties from when creating new list\r\n\t * items.\r\n\t *\r\n\t * @param v  Template object\r\n\t */\r\n\tpublic set template(v: T) {\r\n\t\tv.isTemplate = true;\r\n\t\tthis._template = v;\r\n\t}\r\n\r\n\t/**\r\n\t * @return Template object\r\n\t */\r\n\tpublic get template(): T {\r\n\t\treturn this._template;\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all elements from other list.\r\n\t *\r\n\t * @param source  Source list\r\n\t */\r\n\tpublic copyFrom(source: this): void {\r\n\t\t$iter.each(source.iterator(), (value) => {\r\n\t\t\tthis.insert(value.clone());\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Returns part of the list, starting at `start` and ending at `end` indexes,\r\n\t * as a new [[OrderedListTemplate]].\r\n\t *\r\n\t * @param start  Start index\r\n\t * @param end    End index\r\n\t * @return New list\r\n\t */\r\n\tpublic slice(start: number, end: number): OrderedListTemplate<T> {\r\n\t\tconst out = new OrderedListTemplate<T>(this.template);\r\n\r\n\t\tout._values = this._values.slice(start, end);\r\n\r\n\t\treturn out;\r\n\t}\r\n\r\n\t/**\r\n\t * Instantiates a new object of the specified type, adds it to the end of\r\n\t * the list, and returns it.\r\n\t *\r\n\t * @param make  Item type to use. Will use the default type for the list if not specified.\r\n\t * @return      Newly created item\r\n\t */\r\n\tpublic create<T>(make: { new(): T; }): T;\r\n\tpublic create(): T;\r\n\tpublic create(make?: { new(): T; }): T {\r\n\t\tconst clone =\r\n\t\t\t(make != null\r\n\t\t\t\t? new make()\r\n\t\t\t\t: this.template.clone());\r\n\r\n\t\tthis.insert(clone);\r\n\r\n\t\treturn clone;\r\n\t}\r\n}\r\n\r\n/**\r\n * A version of a [[SortedList]] that has a \"template\".\r\n *\r\n * A template is an instance of an object, that can be used to create new\r\n * elements in the list without actually needing to create instances for those.\r\n *\r\n * When new element is created in the list, e.g. by calling its `create()`\r\n * method, an exact copy of the element is created (including properties and\r\n * other attributes), inserted into the list and returned.\r\n */\r\nexport class SortedListTemplate<T extends IClone<T> & { isTemplate: boolean }> extends SortedList<T> {\r\n\r\n\t// @todo code duplication\r\n\r\n\t/**\r\n\t * A template object.\r\n\t *\r\n\t * @todo Make this private\r\n\t */\r\n\tpublic _template!: T;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t *\r\n\t * @param t     Template object\r\n\t * @param sort  Ordering function\r\n\t */\r\n\tpublic constructor(t: T, sort: (left: T, right: T) => Ordering) {\r\n\t\tsuper(sort);\r\n\t\tthis.template = t;\r\n\t}\r\n\r\n\t/**\r\n\t * A \"template\" object to copy all properties from when creating new list\r\n\t * items.\r\n\t *\r\n\t * @param v  Template object\r\n\t */\r\n\tpublic set template(v: T) {\r\n\t\tv.isTemplate = true;\r\n\t\tthis._template = v;\r\n\t}\r\n\r\n\t/**\r\n\t * @return Template object\r\n\t */\r\n\tpublic get template(): T {\r\n\t\treturn this._template;\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all elements from other list.\r\n\t *\r\n\t * @param source  Source list\r\n\t */\r\n\tpublic copyFrom(source: this): void {\r\n\t\t$iter.each(source.iterator(), (value) => {\r\n\t\t\tthis.insert(value.clone());\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Instantiates a new object of the specified type, adds it to the end of\r\n\t * the list, and returns it.\r\n\t *\r\n\t * @param make  Item type to use. Will use the default type for the list if not specified.\r\n\t * @return      Newly created item\r\n\t */\r\n\tpublic create<T>(make: { new(): T; }): T;\r\n\tpublic create(): T;\r\n\tpublic create(make?: { new(): T; }): T {\r\n\t\tconst clone =\r\n\t\t\t(make != null\r\n\t\t\t\t? new make()\r\n\t\t\t\t: this.template.clone());\r\n\r\n\t\tthis.insert(clone);\r\n\r\n\t\treturn clone;\r\n\t}\r\n\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}