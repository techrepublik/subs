{"ast":null,"code":"import * as $type from \"../utils/Type\";\n/**\r\n * Maps time period names to their numeric representations in milliseconds.\r\n *\r\n * @ignore Exclude from docs\r\n */\nexport var timeUnitDurations = {\n  millisecond: 1,\n  second: 1000,\n  minute: 60000,\n  hour: 3600000,\n  day: 86400000,\n  week: 604800000,\n  month: 2592000000,\n  year: 31536000000\n};\n/**\r\n * Returns the next time unit that goes after source `unit`.\r\n *\r\n * E.g. \"hour\" is the next unit after \"minute\", etc.\r\n *\r\n * @ignore Exclude from docs\r\n * @param unit  Source time unit\r\n * @return Next time unit\r\n */\nexport function getNextUnit(unit) {\n  switch (unit) {\n    case \"year\":\n      return;\n    case \"month\":\n      return \"year\";\n    case \"week\":\n      return \"month\";\n    case \"day\":\n      return \"month\";\n    // not a mistake\n    case \"hour\":\n      return \"day\";\n    case \"minute\":\n      return \"hour\";\n    case \"second\":\n      return \"minute\";\n    case \"millisecond\":\n      return \"second\";\n  }\n}\n/**\r\n * Returns number of milliseconds in the `count` of time `unit`.\r\n *\r\n * Available units: \"millisecond\", \"second\", \"minute\", \"hour\", \"day\", \"week\",\r\n * \"month\", and \"year\".\r\n *\r\n * @ignore Exclude from docs\r\n * @param unit   Time unit\r\n * @param count  Number of units\r\n * @return Milliseconds\r\n */\nexport function getDuration(unit, count) {\n  if (!$type.hasValue(count)) {\n    count = 1;\n  }\n  return timeUnitDurations[unit] * count;\n}\n/**\r\n * Returns current `Date` object.\r\n *\r\n * @return Current date\r\n */\nexport function now() {\n  return new Date();\n}\n/**\r\n * Returns current timestamp.\r\n *\r\n * @return Current timestamp\r\n */\nexport function getTime() {\n  return now().getTime();\n}\n/**\r\n * Returns a copy of the `Date` object.\r\n *\r\n * @ignore Exclude from docs\r\n * @param date  Source date\r\n * @return Copy\r\n */\nexport function copy(date) {\n  return new Date(date.getTime()); // todo: check if this is ok. new Date(date) used to strip milliseconds on FF in v3\n}\n/**\r\n * Checks if the `unit` part of two `Date` objects do not match. Two dates\r\n * represent a \"range\" of time, rather the same time date.\r\n *\r\n * @ignore Exclude from docs\r\n * @param dateOne  Date 1\r\n * @param dateTwo  Date 2\r\n * @param unit     Time unit to check\r\n * @return Range?\r\n */\nexport function checkChange(dateOne, dateTwo, unit, utc) {\n  dateOne = new Date(dateOne.getTime());\n  dateTwo = new Date(dateTwo.getTime());\n  var timeZoneOffset1 = 0;\n  var timeZoneOffset2 = 0;\n  if (!utc && unit != \"millisecond\") {\n    timeZoneOffset1 = dateOne.getTimezoneOffset();\n    dateOne.setUTCMinutes(dateOne.getUTCMinutes() - timeZoneOffset1);\n    timeZoneOffset2 = dateTwo.getTimezoneOffset();\n    dateTwo.setUTCMinutes(dateTwo.getUTCMinutes() - timeZoneOffset2);\n  }\n  var changed = false;\n  switch (unit) {\n    case \"year\":\n      if (dateOne.getUTCFullYear() != dateTwo.getUTCFullYear()) {\n        changed = true;\n      }\n      break;\n    case \"month\":\n      if (dateOne.getUTCFullYear() != dateTwo.getUTCFullYear()) {\n        changed = true;\n      } else if (dateOne.getUTCMonth() != dateTwo.getUTCMonth()) {\n        changed = true;\n      }\n      break;\n    case \"day\":\n      if (dateOne.getUTCMonth() != dateTwo.getUTCMonth()) {\n        changed = true;\n      } else if (dateOne.getUTCDate() != dateTwo.getUTCDate()) {\n        changed = true;\n      }\n      break;\n    case \"hour\":\n      if (dateOne.getUTCHours() != dateTwo.getUTCHours()) {\n        changed = true;\n      }\n      break;\n    case \"minute\":\n      if (dateOne.getUTCMinutes() != dateTwo.getUTCMinutes()) {\n        changed = true;\n      }\n      break;\n    case \"second\":\n      if (dateOne.getUTCSeconds() != dateTwo.getUTCSeconds()) {\n        changed = true;\n      }\n      break;\n    case \"millisecond\":\n      if (dateOne.getTime() != dateTwo.getTime()) {\n        changed = true;\n      }\n      break;\n  }\n  if (changed) {\n    return true;\n  }\n  var nextUnit = getNextUnit(unit);\n  if (nextUnit) {\n    dateOne.setUTCMinutes(dateOne.getUTCMinutes() + timeZoneOffset1);\n    dateTwo.setUTCMinutes(dateTwo.getUTCMinutes() + timeZoneOffset2);\n    return checkChange(dateOne, dateTwo, nextUnit, utc);\n  } else {\n    return false;\n  }\n}\n/**\r\n * Adds `count` of time `unit` to the source date. Returns a modified `Date` object.\r\n *\r\n * @ignore Exclude from docs\r\n * @param date   Source date\r\n * @param unit   Time unit\r\n * @param count  Number of units to add\r\n * @return Modified date\r\n */\nexport function add(date, unit, count, utc) {\n  var timeZoneOffset = 0;\n  if (!utc && unit != \"millisecond\") {\n    timeZoneOffset = date.getTimezoneOffset();\n    date.setUTCMinutes(date.getUTCMinutes() - timeZoneOffset);\n  }\n  switch (unit) {\n    case \"day\":\n      var day = date.getUTCDate();\n      date.setUTCDate(day + count);\n      break;\n    case \"second\":\n      var seconds = date.getUTCSeconds();\n      date.setUTCSeconds(seconds + count);\n      break;\n    case \"millisecond\":\n      var milliseconds = date.getUTCMilliseconds();\n      date.setUTCMilliseconds(milliseconds + count);\n      break;\n    case \"hour\":\n      var hours = date.getUTCHours();\n      date.setUTCHours(hours + count);\n      break;\n    case \"minute\":\n      var minutes = date.getUTCMinutes();\n      date.setUTCMinutes(minutes + count);\n      break;\n    case \"year\":\n      var year = date.getUTCFullYear();\n      date.setUTCFullYear(year + count);\n      break;\n    case \"month\":\n      var month = date.getUTCMonth();\n      date.setUTCMonth(month + count);\n      break;\n    case \"week\":\n      var wday = date.getUTCDate();\n      date.setUTCDate(wday + count * 7);\n      break;\n  }\n  if (!utc && unit != \"millisecond\") {\n    date.setUTCMinutes(date.getUTCMinutes() + timeZoneOffset);\n    if (unit == \"day\" || unit == \"week\" || unit == \"month\" || unit == \"year\") {\n      var newTimeZoneOffset = date.getTimezoneOffset();\n      if (newTimeZoneOffset != timeZoneOffset) {\n        var diff = newTimeZoneOffset - timeZoneOffset;\n        date.setUTCMinutes(date.getUTCMinutes() + diff);\n        // solves issues if newe time falls back to old time zone\n        if (date.getTimezoneOffset() != newTimeZoneOffset) {\n          date.setUTCMinutes(date.getUTCMinutes() - diff);\n        }\n      }\n    }\n  }\n  return date;\n}\n/**\r\n * \"Rounds\" the date to specific time unit.\r\n *\r\n * @ignore Exclude from docs\r\n * @param date             Source date\r\n * @param unit             Time unit\r\n * @param count            Number of units to round to\r\n * @param firstDateOfWeek  First day of week\r\n * @param roundMinutes     Minutes to round to (some timezones use non-whole hour)\r\n * @param timezone         Use specific named timezone when rounding\r\n * @return New date\r\n */\nexport function round(date, unit, count, firstDateOfWeek, utc, firstDate, roundMinutes, timezone) {\n  if (roundMinutes === void 0) {\n    roundMinutes = 0;\n  }\n  if (!$type.isNumber(count)) {\n    count = 1;\n  }\n  var timeZoneOffset = 0;\n  if (timezone && [\"day\", \"month\", \"week\", \"year\"].indexOf(unit) != -1) {\n    date = setTimezone(date, timezone);\n  }\n  if (!utc && unit != \"millisecond\") {\n    timeZoneOffset = date.getTimezoneOffset();\n    date.setUTCMinutes(date.getUTCMinutes() - timeZoneOffset);\n  }\n  switch (unit) {\n    case \"day\":\n      var day = date.getUTCDate();\n      if (count > 1) {\n        //\tday = Math.floor(day / count) * count;\n        if (firstDate) {\n          firstDate = round(firstDate, \"day\", 1);\n          var difference = date.getTime() - firstDate.getTime();\n          var unitCount = Math.floor(difference / getDuration(\"day\") / count);\n          var duration = getDuration(\"day\", unitCount * count);\n          date.setTime(firstDate.getTime() + duration - timeZoneOffset * getDuration(\"minute\"));\n        }\n      } else {\n        date.setUTCDate(day);\n      }\n      date.setUTCHours(0, 0, 0, 0);\n      break;\n    case \"second\":\n      var seconds = date.getUTCSeconds();\n      if (count > 1) {\n        seconds = Math.floor(seconds / count) * count;\n      }\n      date.setUTCSeconds(seconds, 0);\n      break;\n    case \"millisecond\":\n      if (count == 1) {\n        return date; // much better for perf!\n      }\n      var milliseconds = date.getUTCMilliseconds();\n      milliseconds = Math.floor(milliseconds / count) * count;\n      date.setUTCMilliseconds(milliseconds);\n      break;\n    case \"hour\":\n      var hours = date.getUTCHours();\n      if (count > 1) {\n        hours = Math.floor(hours / count) * count;\n      }\n      date.setUTCHours(hours, roundMinutes, 0, 0);\n      break;\n    case \"minute\":\n      var minutes = date.getUTCMinutes();\n      milliseconds = date.getUTCMilliseconds();\n      if (count > 1) {\n        minutes = Math.floor(minutes / count) * count;\n      }\n      date.setUTCMinutes(minutes, 0, 0);\n      break;\n    case \"month\":\n      var month = date.getUTCMonth();\n      if (count > 1) {\n        month = Math.floor(month / count) * count;\n      }\n      date.setUTCMonth(month, 1);\n      date.setUTCHours(0, roundMinutes, 0, 0);\n      break;\n    case \"year\":\n      var year = date.getUTCFullYear();\n      if (count > 1) {\n        year = Math.floor(year / count) * count;\n      }\n      date.setUTCFullYear(year, 0, 1);\n      date.setUTCHours(0, roundMinutes, 0, 0);\n      //let nonUTCDateY = new Date(date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(), date.getMinutes(), date.getSeconds(), date.getMilliseconds());\n      //timeZoneOffset = nonUTCDateY.getTimezoneOffset();\n      break;\n    case \"week\":\n      var wday = date.getUTCDate();\n      var weekDay = date.getUTCDay();\n      if (!$type.isNumber(firstDateOfWeek)) {\n        firstDateOfWeek = 1;\n      }\n      // todo: rounding when count is not 1\n      if (weekDay >= firstDateOfWeek) {\n        wday = wday - weekDay + firstDateOfWeek;\n      } else {\n        wday = wday - (7 + weekDay) + firstDateOfWeek;\n      }\n      date.setUTCDate(wday);\n      date.setUTCHours(0, roundMinutes, 0, 0);\n      break;\n  }\n  if (!utc && unit != \"millisecond\") {\n    date.setUTCMinutes(date.getUTCMinutes() + timeZoneOffset);\n    if (unit == \"day\" || unit == \"week\" || unit == \"month\" || unit == \"year\") {\n      var newTimeZoneOffset = date.getTimezoneOffset();\n      if (newTimeZoneOffset != timeZoneOffset) {\n        var diff = newTimeZoneOffset - timeZoneOffset;\n        date.setUTCMinutes(date.getUTCMinutes() + diff);\n      }\n    }\n  }\n  return date;\n}\n/**\r\n * Returns a new `Date` object which corresponds to the source date in a\r\n * specific timezone.\r\n *\r\n * @since 4.10.1\r\n * @param   date      Source date\r\n * @param   timezone  Timezone identifier\r\n * @return            Recalculated new Date\r\n */\nexport function setTimezone(date, timezone) {\n  var d = new Date(date.toLocaleString(\"en-US\", {\n    timeZone: timezone\n  }));\n  return d;\n}\n/**\r\n * Returns minute fraction of the set timezone.\r\n *\r\n * @since 4.10.12\r\n * @param  timezone  Timezone identifier\r\n * @return           Minutes\r\n */\nexport function getTimezoneMinutes(timezone) {\n  var d = new Date();\n  d.setHours(0, 0, 0, 0);\n  var d2 = setTimezone(d, timezone);\n  return d2.getMinutes();\n}","map":{"version":3,"names":["$type","timeUnitDurations","millisecond","second","minute","hour","day","week","month","year","getNextUnit","unit","getDuration","count","hasValue","now","Date","getTime","copy","date","checkChange","dateOne","dateTwo","utc","timeZoneOffset1","timeZoneOffset2","getTimezoneOffset","setUTCMinutes","getUTCMinutes","changed","getUTCFullYear","getUTCMonth","getUTCDate","getUTCHours","getUTCSeconds","nextUnit","add","timeZoneOffset","setUTCDate","seconds","setUTCSeconds","milliseconds","getUTCMilliseconds","setUTCMilliseconds","hours","setUTCHours","minutes","setUTCFullYear","setUTCMonth","wday","newTimeZoneOffset","diff","round","firstDateOfWeek","firstDate","roundMinutes","timezone","isNumber","indexOf","setTimezone","difference","unitCount","Math","floor","duration","setTime","weekDay","getUTCDay","d","toLocaleString","timeZone","getTimezoneMinutes","setHours","d2","getMinutes"],"sources":["../../../../../src/.internal/core/utils/Time.ts"],"sourcesContent":["/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { TimeUnit } from \"../defs/TimeUnit\";\r\nimport * as $type from \"../utils/Type\";\r\n\r\n/**\r\n * Maps time period names to their numeric representations in milliseconds.\r\n *\r\n * @ignore Exclude from docs\r\n */\r\nexport let timeUnitDurations: { [Key in TimeUnit]: number } = {\r\n\tmillisecond: 1,\r\n\tsecond: 1000,\r\n\tminute: 60000,\r\n\thour: 3600000,\r\n\tday: 86400000,\r\n\tweek: 604800000,\r\n\tmonth: 2592000000,\r\n\tyear: 31536000000\r\n};\r\n\r\n/**\r\n * Returns the next time unit that goes after source `unit`.\r\n *\r\n * E.g. \"hour\" is the next unit after \"minute\", etc.\r\n *\r\n * @ignore Exclude from docs\r\n * @param unit  Source time unit\r\n * @return Next time unit\r\n */\r\nexport function getNextUnit(unit: TimeUnit): $type.Optional<TimeUnit> {\r\n\tswitch (unit) {\r\n\t\tcase \"year\":\r\n\t\t\treturn\r\n\r\n\t\tcase \"month\":\r\n\t\t\treturn \"year\";\r\n\r\n\t\tcase \"week\":\r\n\t\t\treturn \"month\";\r\n\r\n\t\tcase \"day\":\r\n\t\t\treturn \"month\"; // not a mistake\r\n\r\n\t\tcase \"hour\":\r\n\t\t\treturn \"day\";\r\n\r\n\t\tcase \"minute\":\r\n\t\t\treturn \"hour\";\r\n\r\n\t\tcase \"second\":\r\n\t\t\treturn \"minute\"\r\n\r\n\t\tcase \"millisecond\":\r\n\t\t\treturn \"second\";\r\n\t}\r\n}\r\n\r\n/**\r\n * Returns number of milliseconds in the `count` of time `unit`.\r\n *\r\n * Available units: \"millisecond\", \"second\", \"minute\", \"hour\", \"day\", \"week\",\r\n * \"month\", and \"year\".\r\n *\r\n * @ignore Exclude from docs\r\n * @param unit   Time unit\r\n * @param count  Number of units\r\n * @return Milliseconds\r\n */\r\nexport function getDuration(unit: TimeUnit, count?: number): number {\r\n\tif (!$type.hasValue(count)) {\r\n\t\tcount = 1;\r\n\t}\r\n\treturn timeUnitDurations[unit] * count;\r\n}\r\n\r\n/**\r\n * Returns current `Date` object.\r\n *\r\n * @return Current date\r\n */\r\nexport function now(): Date {\r\n\treturn new Date();\r\n}\r\n\r\n/**\r\n * Returns current timestamp.\r\n *\r\n * @return Current timestamp\r\n */\r\nexport function getTime(): number {\r\n\treturn now().getTime();\r\n}\r\n\r\n/**\r\n * Returns a copy of the `Date` object.\r\n *\r\n * @ignore Exclude from docs\r\n * @param date  Source date\r\n * @return Copy\r\n */\r\nexport function copy(date: Date): Date {\r\n\treturn new Date(date.getTime()); // todo: check if this is ok. new Date(date) used to strip milliseconds on FF in v3\r\n}\r\n\r\n/**\r\n * Checks if the `unit` part of two `Date` objects do not match. Two dates\r\n * represent a \"range\" of time, rather the same time date.\r\n *\r\n * @ignore Exclude from docs\r\n * @param dateOne  Date 1\r\n * @param dateTwo  Date 2\r\n * @param unit     Time unit to check\r\n * @return Range?\r\n */\r\nexport function checkChange(dateOne: Date, dateTwo: Date, unit: TimeUnit, utc?: boolean): boolean {\r\n\r\n\tdateOne = new Date(dateOne.getTime());\r\n\tdateTwo = new Date(dateTwo.getTime());\r\n\r\n\tlet timeZoneOffset1 = 0;\r\n\tlet timeZoneOffset2 = 0;\r\n\r\n\tif (!utc && unit != \"millisecond\") {\r\n\t\ttimeZoneOffset1 = dateOne.getTimezoneOffset();\r\n\t\tdateOne.setUTCMinutes(dateOne.getUTCMinutes() - timeZoneOffset1);\r\n\r\n\t\ttimeZoneOffset2 = dateTwo.getTimezoneOffset();\r\n\t\tdateTwo.setUTCMinutes(dateTwo.getUTCMinutes() - timeZoneOffset2);\r\n\t}\r\n\r\n\tlet changed = false;\r\n\tswitch (unit) {\r\n\t\tcase \"year\":\r\n\t\t\tif (dateOne.getUTCFullYear() != dateTwo.getUTCFullYear()) {\r\n\t\t\t\tchanged = true;\r\n\t\t\t}\r\n\t\t\tbreak;\r\n\t\tcase \"month\":\r\n\t\t\tif (dateOne.getUTCFullYear() != dateTwo.getUTCFullYear()) {\r\n\t\t\t\tchanged = true;\r\n\t\t\t}\r\n\t\t\telse if (dateOne.getUTCMonth() != dateTwo.getUTCMonth()) {\r\n\t\t\t\tchanged = true;\r\n\t\t\t}\r\n\t\t\tbreak;\r\n\r\n\t\tcase \"day\":\r\n\t\t\tif (dateOne.getUTCMonth() != dateTwo.getUTCMonth()) {\r\n\t\t\t\tchanged = true;\r\n\t\t\t}\r\n\t\t\telse if (dateOne.getUTCDate() != dateTwo.getUTCDate()) {\r\n\t\t\t\tchanged = true;\r\n\t\t\t}\r\n\r\n\t\t\tbreak;\r\n\r\n\t\tcase \"hour\":\r\n\t\t\tif (dateOne.getUTCHours() != dateTwo.getUTCHours()) {\r\n\t\t\t\tchanged = true;\r\n\t\t\t}\r\n\t\t\tbreak;\r\n\r\n\t\tcase \"minute\":\r\n\t\t\tif (dateOne.getUTCMinutes() != dateTwo.getUTCMinutes()) {\r\n\t\t\t\tchanged = true;\r\n\t\t\t}\r\n\r\n\t\t\tbreak;\r\n\r\n\t\tcase \"second\":\r\n\t\t\tif (dateOne.getUTCSeconds() != dateTwo.getUTCSeconds()) {\r\n\t\t\t\tchanged = true;\r\n\t\t\t}\r\n\t\t\tbreak;\r\n\r\n\t\tcase \"millisecond\":\r\n\t\t\tif (dateOne.getTime() != dateTwo.getTime()) {\r\n\t\t\t\tchanged = true;\r\n\t\t\t}\r\n\t\t\tbreak;\r\n\t}\r\n\r\n\tif (changed) {\r\n\t\treturn true;\r\n\t}\r\n\r\n\tlet nextUnit: $type.Optional<TimeUnit> = getNextUnit(unit);\r\n\tif (nextUnit) {\r\n\t\tdateOne.setUTCMinutes(dateOne.getUTCMinutes() + timeZoneOffset1);\r\n\t\tdateTwo.setUTCMinutes(dateTwo.getUTCMinutes() + timeZoneOffset2);\r\n\t\treturn checkChange(dateOne, dateTwo, nextUnit, utc);\r\n\t}\r\n\telse {\r\n\t\treturn false;\r\n\t}\r\n}\r\n\r\n/**\r\n * Adds `count` of time `unit` to the source date. Returns a modified `Date` object.\r\n *\r\n * @ignore Exclude from docs\r\n * @param date   Source date\r\n * @param unit   Time unit\r\n * @param count  Number of units to add\r\n * @return Modified date\r\n */\r\nexport function add(date: Date, unit: TimeUnit, count: number, utc?: boolean): Date {\r\n\tlet timeZoneOffset = 0;\r\n\r\n\tif (!utc && unit != \"millisecond\") {\r\n\t\ttimeZoneOffset = date.getTimezoneOffset();\r\n\t\tdate.setUTCMinutes(date.getUTCMinutes() - timeZoneOffset);\r\n\t}\r\n\r\n\tswitch (unit) {\r\n\t\tcase \"day\":\r\n\t\t\tlet day: number = date.getUTCDate();\r\n\t\t\tdate.setUTCDate(day + count);\r\n\t\t\tbreak;\r\n\r\n\t\tcase \"second\":\r\n\t\t\tlet seconds: number = date.getUTCSeconds();\r\n\t\t\tdate.setUTCSeconds(seconds + count);\r\n\t\t\tbreak;\r\n\r\n\t\tcase \"millisecond\":\r\n\t\t\tlet milliseconds: number = date.getUTCMilliseconds();\r\n\t\t\tdate.setUTCMilliseconds(milliseconds + count);\r\n\t\t\tbreak;\r\n\r\n\t\tcase \"hour\":\r\n\t\t\tlet hours: number = date.getUTCHours();\r\n\t\t\tdate.setUTCHours(hours + count);\r\n\t\t\tbreak;\r\n\r\n\t\tcase \"minute\":\r\n\t\t\tlet minutes: number = date.getUTCMinutes();\r\n\t\t\tdate.setUTCMinutes(minutes + count);\r\n\t\t\tbreak;\r\n\r\n\t\tcase \"year\":\r\n\t\t\tlet year: number = date.getUTCFullYear();\r\n\t\t\tdate.setUTCFullYear(year + count);\r\n\t\t\tbreak;\r\n\r\n\t\tcase \"month\":\r\n\t\t\tlet month: number = date.getUTCMonth();\r\n\t\t\tdate.setUTCMonth(month + count);\r\n\t\t\tbreak;\r\n\r\n\t\tcase \"week\":\r\n\t\t\tlet wday: number = date.getUTCDate();\r\n\t\t\tdate.setUTCDate(wday + count * 7);\r\n\t\t\tbreak;\r\n\t}\r\n\tif (!utc && unit != \"millisecond\") {\r\n\t\tdate.setUTCMinutes(date.getUTCMinutes() + timeZoneOffset);\r\n\r\n\t\tif (unit == \"day\" || unit == \"week\" || unit == \"month\" || unit == \"year\") {\r\n\t\t\tlet newTimeZoneOffset = date.getTimezoneOffset();\r\n\t\t\tif (newTimeZoneOffset != timeZoneOffset) {\r\n\t\t\t\tlet diff = newTimeZoneOffset - timeZoneOffset;\r\n\r\n\t\t\t\tdate.setUTCMinutes(date.getUTCMinutes() + diff);\r\n\t\t\t\t// solves issues if newe time falls back to old time zone\r\n\t\t\t\tif (date.getTimezoneOffset() != newTimeZoneOffset) {\r\n\t\t\t\t\tdate.setUTCMinutes(date.getUTCMinutes() - diff);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\treturn date;\r\n}\r\n\r\n/**\r\n * \"Rounds\" the date to specific time unit.\r\n *\r\n * @ignore Exclude from docs\r\n * @param date             Source date\r\n * @param unit             Time unit\r\n * @param count            Number of units to round to\r\n * @param firstDateOfWeek  First day of week\r\n * @param roundMinutes     Minutes to round to (some timezones use non-whole hour)\r\n * @param timezone         Use specific named timezone when rounding\r\n * @return New date\r\n */\r\nexport function round(date: Date, unit: TimeUnit, count: number, firstDateOfWeek?: number, utc?: boolean, firstDate?: Date, roundMinutes: number = 0, timezone?: string): Date {\r\n\r\n\tif (!$type.isNumber(count)) {\r\n\t\tcount = 1;\r\n\t}\r\n\r\n\tlet timeZoneOffset = 0;\r\n\r\n\tif (timezone && [\"day\", \"month\", \"week\", \"year\"].indexOf(unit) != -1) {\r\n\t\tdate = setTimezone(date, timezone);\r\n\t}\r\n\r\n\tif (!utc && unit != \"millisecond\") {\r\n\t\ttimeZoneOffset = date.getTimezoneOffset();\r\n\t\tdate.setUTCMinutes(date.getUTCMinutes() - timeZoneOffset);\r\n\t}\r\n\r\n\tswitch (unit) {\r\n\r\n\t\tcase \"day\":\r\n\t\t\tlet day = date.getUTCDate();\r\n\r\n\t\t\tif (count > 1) {\r\n\t\t\t\t//\tday = Math.floor(day / count) * count;\r\n\t\t\t\tif (firstDate) {\r\n\t\t\t\t\tfirstDate = round(firstDate, \"day\", 1);\r\n\r\n\t\t\t\t\tlet difference = date.getTime() - firstDate.getTime();\r\n\t\t\t\t\tlet unitCount = Math.floor(difference / getDuration(\"day\") / count);\r\n\t\t\t\t\tlet duration = getDuration(\"day\", unitCount * count);\r\n\t\t\t\t\tdate.setTime(firstDate.getTime() + duration - timeZoneOffset * getDuration(\"minute\"));\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tdate.setUTCDate(day);\r\n\t\t\t}\r\n\t\t\tdate.setUTCHours(0, 0, 0, 0);\r\n\r\n\t\t\tbreak;\r\n\r\n\t\tcase \"second\":\r\n\t\t\tlet seconds = date.getUTCSeconds();\r\n\t\t\tif (count > 1) {\r\n\t\t\t\tseconds = Math.floor(seconds / count) * count;\r\n\t\t\t}\r\n\t\t\tdate.setUTCSeconds(seconds, 0);\r\n\t\t\tbreak;\r\n\r\n\t\tcase \"millisecond\":\r\n\t\t\tif (count == 1) {\r\n\t\t\t\treturn date; // much better for perf!\r\n\t\t\t}\r\n\r\n\t\t\tlet milliseconds = date.getUTCMilliseconds();\r\n\t\t\tmilliseconds = Math.floor(milliseconds / count) * count;\r\n\t\t\tdate.setUTCMilliseconds(milliseconds);\r\n\t\t\tbreak;\r\n\r\n\t\tcase \"hour\":\r\n\r\n\t\t\tlet hours = date.getUTCHours();\r\n\t\t\tif (count > 1) {\r\n\t\t\t\thours = Math.floor(hours / count) * count;\r\n\t\t\t}\r\n\t\t\tdate.setUTCHours(hours, roundMinutes, 0, 0);\r\n\r\n\t\t\tbreak;\r\n\r\n\t\tcase \"minute\":\r\n\r\n\t\t\tlet minutes = date.getUTCMinutes();\r\n\t\t\tmilliseconds = date.getUTCMilliseconds();\r\n\t\t\tif (count > 1) {\r\n\t\t\t\tminutes = Math.floor(minutes / count) * count;\r\n\t\t\t}\r\n\r\n\t\t\tdate.setUTCMinutes(minutes, 0, 0);\r\n\r\n\t\t\tbreak;\r\n\r\n\t\tcase \"month\":\r\n\r\n\t\t\tlet month = date.getUTCMonth();\r\n\t\t\tif (count > 1) {\r\n\t\t\t\tmonth = Math.floor(month / count) * count;\r\n\t\t\t}\r\n\r\n\t\t\tdate.setUTCMonth(month, 1);\r\n\t\t\tdate.setUTCHours(0, roundMinutes, 0, 0);\r\n\r\n\t\t\tbreak;\r\n\r\n\t\tcase \"year\":\r\n\r\n\t\t\tlet year = date.getUTCFullYear();\r\n\t\t\tif (count > 1) {\r\n\t\t\t\tyear = Math.floor(year / count) * count;\r\n\t\t\t}\r\n\t\t\tdate.setUTCFullYear(year, 0, 1);\r\n\t\t\tdate.setUTCHours(0, roundMinutes, 0, 0);\r\n\r\n\t\t\t//let nonUTCDateY = new Date(date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(), date.getMinutes(), date.getSeconds(), date.getMilliseconds());\r\n\t\t\t//timeZoneOffset = nonUTCDateY.getTimezoneOffset();\r\n\r\n\t\t\tbreak;\r\n\r\n\r\n\t\tcase \"week\":\r\n\r\n\t\t\tlet wday = date.getUTCDate();\r\n\t\t\tlet weekDay = date.getUTCDay();\r\n\r\n\t\t\tif (!$type.isNumber(firstDateOfWeek)) {\r\n\t\t\t\tfirstDateOfWeek = 1;\r\n\t\t\t}\r\n\r\n\t\t\t// todo: rounding when count is not 1\r\n\t\t\tif (weekDay >= firstDateOfWeek) {\r\n\t\t\t\twday = wday - weekDay + firstDateOfWeek;\r\n\t\t\t} else {\r\n\t\t\t\twday = wday - (7 + weekDay) + firstDateOfWeek;\r\n\t\t\t}\r\n\r\n\t\t\tdate.setUTCDate(wday);\r\n\t\t\tdate.setUTCHours(0, roundMinutes, 0, 0);\r\n\r\n\t\t\tbreak;\r\n\t}\r\n\r\n\tif (!utc && unit != \"millisecond\") {\r\n\t\tdate.setUTCMinutes(date.getUTCMinutes() + timeZoneOffset);\r\n\r\n\t\tif (unit == \"day\" || unit == \"week\" || unit == \"month\" || unit == \"year\") {\r\n\t\t\tlet newTimeZoneOffset = date.getTimezoneOffset();\r\n\t\t\tif (newTimeZoneOffset != timeZoneOffset) {\r\n\t\t\t\tlet diff = newTimeZoneOffset - timeZoneOffset;\r\n\r\n\t\t\t\tdate.setUTCMinutes(date.getUTCMinutes() + diff);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\treturn date;\r\n}\r\n\r\n/**\r\n * Returns a new `Date` object which corresponds to the source date in a\r\n * specific timezone.\r\n *\r\n * @since 4.10.1\r\n * @param   date      Source date\r\n * @param   timezone  Timezone identifier\r\n * @return            Recalculated new Date\r\n */\r\nexport function setTimezone(date: Date, timezone: string): Date {\r\n\tconst d = new Date(date.toLocaleString(\"en-US\", { timeZone: timezone }));\r\n\treturn d;\r\n}\r\n\r\n/**\r\n * Returns minute fraction of the set timezone.\r\n *\r\n * @since 4.10.12\r\n * @param  timezone  Timezone identifier\r\n * @return           Minutes\r\n */\r\nexport function getTimezoneMinutes(timezone: string): number {\r\n\tlet d = new Date();\r\n\td.setHours(0, 0, 0, 0);\r\n\tlet d2 = setTimezone(d, timezone);\r\n\treturn d2.getMinutes();\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}