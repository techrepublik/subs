{"ast":null,"code":"import \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.for-each.js\";\nimport \"core-js/modules/esnext.iterator.map.js\";\nimport flatpickr from 'flatpickr';\nimport { defineComponent, h, nextTick } from 'vue';\nimport { excludedEvents, includedEvents } from './events';\nimport { camelToKebab, nullify, arrayify } from './util';\n// Keep a copy of all events for later use\nconst allEvents = [...includedEvents, ...excludedEvents];\n// Passing these properties in `fp.set()` method will cause flatpickr to trigger some callbacks\nconst configCallbacks = ['locale', 'showMonths'];\nexport default defineComponent({\n  name: 'FlatPickr',\n  compatConfig: {\n    MODE: 3\n  },\n  render() {\n    return h('input', {\n      type: 'text',\n      'data-input': true,\n      disabled: this.disabled,\n      onInput: this.onInput\n    });\n  },\n  emits: ['blur', 'update:modelValue', ...allEvents.map(camelToKebab)],\n  props: {\n    modelValue: {\n      type: [String, Number, Date, Array, null],\n      required: true\n    },\n    // https://flatpickr.js.org/options/\n    config: {\n      type: Object,\n      default: () => ({\n        defaultDate: null,\n        wrap: false\n      })\n    },\n    events: {\n      type: Array,\n      default: () => includedEvents\n    },\n    disabled: {\n      type: Boolean,\n      default: false\n    }\n  },\n  data() {\n    return {\n      fp: null //todo make it non-reactive\n    };\n  },\n  mounted() {\n    // Return early if flatpickr is already loaded\n    /* istanbul ignore if */\n    if (this.fp) return;\n    // Init flatpickr\n    this.fp = flatpickr(this.getElem(), this.prepareConfig());\n    // Attach blur event\n    this.fpInput().addEventListener('blur', this.onBlur);\n    // Immediate watch will fail before fp is set,\n    // so we need to start watching after mount\n    this.$watch('disabled', this.watchDisabled, {\n      immediate: true\n    });\n  },\n  methods: {\n    prepareConfig() {\n      // Don't mutate original object on parent component\n      let safeConfig = Object.assign({}, this.config);\n      this.events.forEach(hook => {\n        // Respect global callbacks registered via setDefault() method\n        let globalCallbacks = flatpickr.defaultConfig[hook] || [];\n        // Inject our own method along with user's callbacks\n        let localCallback = (...args) => {\n          this.$emit(camelToKebab(hook), ...args);\n        };\n        // Overwrite with merged array\n        safeConfig[hook] = arrayify(safeConfig[hook] || []).concat(globalCallbacks, localCallback);\n      });\n      const onCloseCb = this.onClose.bind(this);\n      safeConfig['onClose'] = arrayify(safeConfig['onClose'] || []).concat(onCloseCb);\n      // Set initial date without emitting any event\n      safeConfig.defaultDate = this.modelValue || safeConfig.defaultDate;\n      return safeConfig;\n    },\n    /**\n     * Get the HTML node where flatpickr to be attached\n     * Bind on parent element if wrap is true\n     */\n    getElem() {\n      return this.config.wrap ? this.$el.parentNode : this.$el;\n    },\n    /**\n     * Watch for value changed by date-picker itself and notify parent component\n     */\n    onInput(event) {\n      const input = event.target;\n      // Let's wait for DOM to be updated\n      nextTick().then(() => {\n        this.$emit('update:modelValue', nullify(input.value));\n      });\n    },\n    fpInput() {\n      return this.fp.altInput || this.fp.input;\n    },\n    /**\n     * Blur event is required by many validation libraries\n     */\n    onBlur(event) {\n      this.$emit('blur', nullify(event.target.value));\n    },\n    /**\n     * Flatpickr does not emit input event in some cases\n     */\n    onClose(selectedDates, dateStr) {\n      this.$emit('update:modelValue', dateStr);\n    },\n    /**\n     * Watch for the disabled property and sets the value to the real input.\n     */\n    watchDisabled(newState) {\n      if (newState) {\n        this.fpInput().setAttribute('disabled', '');\n      } else {\n        this.fpInput().removeAttribute('disabled');\n      }\n    }\n  },\n  watch: {\n    /**\n     * Watch for any config changes and redraw date-picker\n     */\n    config: {\n      deep: true,\n      handler(newConfig) {\n        if (!this.fp) return;\n        let safeConfig = Object.assign({}, newConfig);\n        // Workaround: Don't pass hooks to configs again otherwise\n        // previously registered hooks will stop working\n        // Notice: we are looping through all events\n        // This also means that new callbacks can not be passed once component has been initialized\n        allEvents.forEach(hook => {\n          delete safeConfig[hook];\n        });\n        this.fp.set(safeConfig);\n        // Workaround: Allow to change locale dynamically\n        configCallbacks.forEach(name => {\n          if (typeof safeConfig[name] !== 'undefined') {\n            this.fp.set(name, safeConfig[name]);\n          }\n        });\n      }\n    },\n    /**\n     * Watch for changes from parent component and update DOM\n     */\n    modelValue(newValue) {\n      var _a;\n      // Prevent updates if v-model value is same as input's current value\n      if (!this.$el || newValue === nullify(this.$el.value)) return;\n      // Notify flatpickr instance that there is a change in value\n      (_a = this.fp) === null || _a === void 0 ? void 0 : _a.setDate(newValue, true);\n    }\n  },\n  beforeUnmount() {\n    /* istanbul ignore else */\n    if (!this.fp) return;\n    this.fpInput().removeEventListener('blur', this.onBlur);\n    this.fp.destroy();\n    this.fp = null;\n  }\n});","map":{"version":3,"names":["flatpickr","defineComponent","h","nextTick","excludedEvents","includedEvents","camelToKebab","nullify","arrayify","allEvents","configCallbacks","name","compatConfig","MODE","render","type","disabled","onInput","emits","map","props","modelValue","String","Number","Date","Array","required","config","Object","default","defaultDate","wrap","events","Boolean","data","fp","mounted","getElem","prepareConfig","fpInput","addEventListener","onBlur","$watch","watchDisabled","immediate","methods","safeConfig","assign","forEach","hook","globalCallbacks","defaultConfig","localCallback","args","$emit","concat","onCloseCb","onClose","bind","$el","parentNode","event","input","target","then","value","altInput","selectedDates","dateStr","newState","setAttribute","removeAttribute","watch","deep","handler","newConfig","set","newValue","_a","setDate","beforeUnmount","removeEventListener","destroy"],"sources":["/home/josh/Documents/projects/subs/vue_subs/node_modules/vue-flatpickr-component/dist/esm/component.js"],"sourcesContent":["import flatpickr from 'flatpickr';\nimport { defineComponent, h, nextTick } from 'vue';\nimport { excludedEvents, includedEvents } from './events';\nimport { camelToKebab, nullify, arrayify } from './util';\n// Keep a copy of all events for later use\nconst allEvents = [...includedEvents, ...excludedEvents];\n// Passing these properties in `fp.set()` method will cause flatpickr to trigger some callbacks\nconst configCallbacks = ['locale', 'showMonths'];\nexport default defineComponent({\n    name: 'FlatPickr',\n    compatConfig: {\n        MODE: 3,\n    },\n    render() {\n        return h('input', {\n            type: 'text',\n            'data-input': true,\n            disabled: this.disabled,\n            onInput: this.onInput,\n        });\n    },\n    emits: [\n        'blur',\n        'update:modelValue',\n        ...allEvents.map(camelToKebab)\n    ],\n    props: {\n        modelValue: {\n            type: [String, Number, Date, Array, null],\n            required: true,\n        },\n        // https://flatpickr.js.org/options/\n        config: {\n            type: Object,\n            default: () => ({\n                defaultDate: null,\n                wrap: false,\n            })\n        },\n        events: {\n            type: Array,\n            default: () => includedEvents\n        },\n        disabled: {\n            type: Boolean,\n            default: false\n        },\n    },\n    data() {\n        return {\n            fp: null, //todo make it non-reactive\n        };\n    },\n    mounted() {\n        // Return early if flatpickr is already loaded\n        /* istanbul ignore if */\n        if (this.fp)\n            return;\n        // Init flatpickr\n        this.fp = flatpickr(this.getElem(), this.prepareConfig());\n        // Attach blur event\n        this.fpInput().addEventListener('blur', this.onBlur);\n        // Immediate watch will fail before fp is set,\n        // so we need to start watching after mount\n        this.$watch('disabled', this.watchDisabled, {\n            immediate: true\n        });\n    },\n    methods: {\n        prepareConfig() {\n            // Don't mutate original object on parent component\n            let safeConfig = Object.assign({}, this.config);\n            this.events.forEach((hook) => {\n                // Respect global callbacks registered via setDefault() method\n                let globalCallbacks = flatpickr.defaultConfig[hook] || [];\n                // Inject our own method along with user's callbacks\n                let localCallback = (...args) => {\n                    this.$emit(camelToKebab(hook), ...args);\n                };\n                // Overwrite with merged array\n                safeConfig[hook] = arrayify(safeConfig[hook] || []).concat(globalCallbacks, localCallback);\n            });\n            const onCloseCb = this.onClose.bind(this);\n            safeConfig['onClose'] = arrayify(safeConfig['onClose'] || []).concat(onCloseCb);\n            // Set initial date without emitting any event\n            safeConfig.defaultDate = this.modelValue || safeConfig.defaultDate;\n            return safeConfig;\n        },\n        /**\n         * Get the HTML node where flatpickr to be attached\n         * Bind on parent element if wrap is true\n         */\n        getElem() {\n            return this.config.wrap ? this.$el.parentNode : this.$el;\n        },\n        /**\n         * Watch for value changed by date-picker itself and notify parent component\n         */\n        onInput(event) {\n            const input = event.target;\n            // Let's wait for DOM to be updated\n            nextTick().then(() => {\n                this.$emit('update:modelValue', nullify(input.value));\n            });\n        },\n        fpInput() {\n            return this.fp.altInput || this.fp.input;\n        },\n        /**\n         * Blur event is required by many validation libraries\n         */\n        onBlur(event) {\n            this.$emit('blur', nullify(event.target.value));\n        },\n        /**\n         * Flatpickr does not emit input event in some cases\n         */\n        onClose(selectedDates, dateStr) {\n            this.$emit('update:modelValue', dateStr);\n        },\n        /**\n         * Watch for the disabled property and sets the value to the real input.\n         */\n        watchDisabled(newState) {\n            if (newState) {\n                this.fpInput().setAttribute('disabled', '');\n            }\n            else {\n                this.fpInput().removeAttribute('disabled');\n            }\n        }\n    },\n    watch: {\n        /**\n         * Watch for any config changes and redraw date-picker\n         */\n        config: {\n            deep: true,\n            handler(newConfig) {\n                if (!this.fp)\n                    return;\n                let safeConfig = Object.assign({}, newConfig);\n                // Workaround: Don't pass hooks to configs again otherwise\n                // previously registered hooks will stop working\n                // Notice: we are looping through all events\n                // This also means that new callbacks can not be passed once component has been initialized\n                allEvents.forEach((hook) => {\n                    delete safeConfig[hook];\n                });\n                this.fp.set(safeConfig);\n                // Workaround: Allow to change locale dynamically\n                configCallbacks.forEach((name) => {\n                    if (typeof safeConfig[name] !== 'undefined') {\n                        this.fp.set(name, safeConfig[name]);\n                    }\n                });\n            }\n        },\n        /**\n         * Watch for changes from parent component and update DOM\n         */\n        modelValue(newValue) {\n            var _a;\n            // Prevent updates if v-model value is same as input's current value\n            if (!this.$el || newValue === nullify(this.$el.value))\n                return;\n            // Notify flatpickr instance that there is a change in value\n            (_a = this.fp) === null || _a === void 0 ? void 0 : _a.setDate(newValue, true);\n        }\n    },\n    beforeUnmount() {\n        /* istanbul ignore else */\n        if (!this.fp)\n            return;\n        this.fpInput().removeEventListener('blur', this.onBlur);\n        this.fp.destroy();\n        this.fp = null;\n    }\n});\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}