{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n/**\r\n * ExportMenu provides functionality for building Export menu\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\nimport exportCSS from \"./ExportCSS\";\nimport { Adapter } from \"../utils/Adapter\";\nimport { List } from \"../utils/List\";\nimport { getInteraction } from \"../interaction/Interaction\";\nimport { MutableValueDisposer } from \"../utils/Disposer\";\nimport { Language } from \"../utils/Language\";\nimport { Validatable } from \"../utils/Validatable\";\nimport { keyboard } from \"../utils/Keyboard\";\nimport * as $utils from \"../utils/Utils\";\nimport * as $iter from \"../utils/Iterator\";\nimport * as $dom from \"../utils/DOM\";\nimport * as $type from \"../utils/Type\";\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n/**\r\n * Creates a menu for Export operations.\r\n *\r\n * To add an export menu to a chart, set this to a new instance of\r\n * [[ExportMenu]].\r\n *\r\n * ```TypeScript\r\n * chart.exporting.menu = new am4core.ExportMenu();\r\n * ```\r\n * ```JavaScript\r\n * chart.exporting.menu = new am4core.ExportMenu();\r\n * ```\r\n * ```JSON\r\n * {\r\n *   // ...\r\n *   \"exporting\": {\r\n *     \"menu\": {}\r\n *   }\r\n * }\r\n * ```\r\n * @important\r\n */\nvar ExportMenu = /** @class */function (_super) {\n  __extends(ExportMenu, _super);\n  /**\r\n   * Constructor\r\n   */\n  function ExportMenu() {\n    var _this = _super.call(this) || this;\n    /**\r\n     * An [[Adapter]].\r\n     */\n    _this.adapter = new Adapter(_this);\n    /**\r\n     * How many milliseconds to hold menu/sub-menu open after it loses focus or\r\n     * hover, before auto-closing it.\r\n     *\r\n     * @default 1000\r\n     */\n    _this.closeDelay = 1000;\n    /**\r\n     * Close the menu automatically when some export operation is triggered.\r\n     *\r\n     * @default true\r\n     * @since 4.2.2\r\n     */\n    _this.closeOnClick = true;\n    /**\r\n     * An instance of [[Language]].\r\n     */\n    _this._language = new MutableValueDisposer();\n    /**\r\n     * What HTML tags to use to build menu.\r\n     */\n    _this._menuTag = \"ul\";\n    /**\r\n     * Which tag to use to enclose individual menu items.\r\n     */\n    _this._itemTag = \"li\";\n    /**\r\n     * Tag to wrap menu item labels in.\r\n     */\n    _this._labelTag = \"a\";\n    /**\r\n     * Tag to use for icons\r\n     */\n    _this._iconTag = \"img\";\n    /**\r\n     * Prefix for class names applied to menu elements.\r\n     */\n    _this._classPrefix = \"amexport\";\n    /**\r\n     * If set to `true` [[ExportMenu]] will load it's own external CSS when\r\n     * instantiated.\r\n     */\n    _this._defaultStyles = true;\n    /**\r\n     * Horizontal positioning.\r\n     */\n    _this._align = \"right\";\n    /**\r\n     * Vertical positioning.\r\n     */\n    _this._verticalAlign = \"top\";\n    /**\r\n     * A tabindex to apply to Export Menu.\r\n     */\n    _this._tabindex = 0;\n    /**\r\n     * Whether next menu close event should be ignored.\r\n     */\n    _this._ignoreNextClose = false;\n    /**\r\n     * Default menu items.\r\n     */\n    _this._items = [{\n      \"label\": \"...\",\n      \"menu\": [{\n        \"label\": \"Image\",\n        \"menu\": [{\n          \"type\": \"png\",\n          \"label\": \"PNG\"\n        }, {\n          \"type\": \"jpg\",\n          \"label\": \"JPG\"\n        }, {\n          \"type\": \"svg\",\n          \"label\": \"SVG\"\n        }, {\n          \"type\": \"pdf\",\n          \"label\": \"PDF\"\n        }]\n      }, {\n        \"label\": \"Data\",\n        \"menu\": [{\n          \"type\": \"json\",\n          \"label\": \"JSON\"\n        }, {\n          \"type\": \"csv\",\n          \"label\": \"CSV\"\n        }, {\n          \"type\": \"xlsx\",\n          \"label\": \"XLSX\"\n        }, {\n          \"type\": \"html\",\n          \"label\": \"HTML\"\n        }, {\n          \"type\": \"pdfdata\",\n          \"label\": \"PDF\"\n        }]\n      }, {\n        \"label\": \"Print\",\n        \"type\": \"print\"\n      }]\n    }];\n    _this.className = \"ExportMenu\";\n    _this._disposers.push(_this._language);\n    _this.invalidate();\n    _this.applyTheme();\n    return _this;\n  }\n  /**\r\n   * (Re)draws the Export menu.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  ExportMenu.prototype.validate = function () {\n    this.draw();\n    _super.prototype.validate.call(this);\n  };\n  /**\r\n   * Draws the menu based on current items.\r\n   *\r\n   * Normally, there's no need to call this explicitly. The chart, if it has\r\n   * export menu enabled, will automatically draw the menu.\r\n   */\n  ExportMenu.prototype.draw = function () {\n    var _this = this;\n    // Create top-level menu item, or clear it\n    if (!this._element) {\n      this._element = this.createMenuElement(0);\n    } else {\n      this._element.innerHTML = \"\";\n      this._element.className = this.getMenuItemClass(0);\n    }\n    // See if we're loading external CSS\n    // Hide it until CSS is loaded\n    if (this.defaultStyles) {\n      this._element.style.display = \"none\";\n    }\n    // Append to container\n    $type.getValue(this._container).appendChild(this._element);\n    // Apply adapter to menu items before processing\n    var items = this.adapter.apply(\"items\", {\n      items: this._items\n    }).items;\n    for (var len = items.length, i = 0; i < len; i++) {\n      this.drawBranch(this._element, items[i], 0);\n    }\n    // Apply adapter to finalized menu element\n    this._element = this.adapter.apply(\"menuElement\", {\n      menuElement: this._element\n    }).menuElement;\n    // Set up global \"down\" event\n    this._disposers.push(getInteraction().body.events.on(\"down\", function (ev) {\n      if (!ev.pointer.touch) {\n        _this._ignoreNextClose = false;\n      }\n      _this.close();\n    }));\n    // Set up global event on ESC press to close the menu\n    this._disposers.push(getInteraction().body.events.on(\"keydown\", function (ev) {\n      var key = keyboard.getEventKey(ev.event);\n      switch (key) {\n        case \"esc\":\n          _this.close();\n          break;\n        case \"up\":\n        case \"down\":\n        case \"left\":\n        case \"right\":\n          if (_this._currentSelection) {\n            ev.event.preventDefault();\n          }\n          _this.moveSelection(key);\n          break;\n      }\n    }));\n    if (this.defaultStyles) {\n      this.loadDefaultCSS();\n    }\n  };\n  /**\r\n   * Creates a new branch in export menu. This function is recursive for\r\n   * building multi-level menus.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param container Container to put branch elements in\r\n   * @param branch    Menu item\r\n   * @param level     Current nesting level\r\n   */\n  ExportMenu.prototype.drawBranch = function (container, branch, level) {\n    var _this = this;\n    // Apply adapter\n    branch = this.adapter.apply(\"branch\", {\n      branch: branch,\n      level: level\n    }).branch;\n    // Unsupported?\n    // ExportMenu does not check or know for specific browser/system\n    // capabilities. It must happen in some other code and applied via Adapter.\n    // Export itself will check compatibility, but there might be other plugins\n    // that influence it or even add any specific export functionality.\n    if (branch.unsupported === true) {\n      return;\n    }\n    // Init ascendants\n    if (!branch.ascendants) {\n      branch.ascendants = new List();\n    }\n    // Get type\n    var type = branch.type;\n    // Create an item\n    var element = this.createItemElement(level, type);\n    // Create label\n    var label;\n    // Create icon\n    if (branch.icon) {\n      label = this.createIconElement(level, type);\n      label.src = branch.icon;\n      if (branch.label || branch.title) {\n        label.title = branch.title || branch.label;\n      }\n    } else if (branch.svg) {\n      label = this.createSvgElement(level, type, branch.svg);\n      if (branch.label || branch.title) {\n        label.title = branch.title || branch.label;\n      }\n    } else {\n      label = this.createLabelElement(level, type);\n      label.innerHTML = branch.label ? this.language.translate(branch.label) : \"\";\n      if (branch.title) {\n        label.title = branch.title;\n      }\n    }\n    // Apply reader text to label\n    var readerLabel = this.getReaderLabel(branch, label.innerHTML);\n    label.setAttribute(\"aria-label\", readerLabel);\n    // Add Label\n    element.appendChild(label);\n    // Create interaction object\n    // TODO clean this up when it's disposed\n    branch.interactions = getInteraction().getInteraction(element);\n    branch.element = element;\n    // Create interaction manager we can set event listeners to\n    if (this.typeClickable(type)) {\n      //branch.interactions.clickable = true;\n      // TODO clean this up when it's disposed\n      branch.interactions.events.on(\"hit\", function (ev) {\n        if (_this.events.isEnabled(\"hit\") && !_this.isDisposed()) {\n          var event_1 = {\n            \"type\": \"hit\",\n            \"event\": ev.event,\n            \"target\": _this,\n            \"branch\": branch\n          };\n          _this.events.dispatchImmediately(\"hit\", event_1);\n        }\n      });\n      // TODO clean this up when it's disposed\n      branch.interactions.events.on(\"keyup\", function (ev) {\n        if (keyboard.isKey(ev.event, \"enter\")) {\n          if (_this.events.isEnabled(\"enter\")) {\n            var event_2 = {\n              \"type\": \"enter\",\n              \"event\": ev.event,\n              \"target\": _this,\n              \"branch\": branch\n            };\n            _this.events.dispatchImmediately(\"enter\", event_2);\n          }\n        }\n      });\n    }\n    {\n      var submenu_1 = this.getSubMenu(branch);\n      // Add ENTER event to open sub-menus\n      if (submenu_1 != null) {\n        // TODO clean this up when it's disposed\n        branch.interactions.events.on(\"keyup\", function (ev) {\n          if (keyboard.isKey(ev.event, \"enter\")) {\n            // This is item has sub-menu, activate the first child on ENTER\n            _this.selectBranch(submenu_1[0]);\n            // Attempt to set focus\n            _this.setFocus(submenu_1[0]);\n          }\n        });\n        branch.interactions.events.on(\"hit\", function (ev) {\n          _this.selectBranch(branch);\n        });\n      }\n    }\n    // Add events\n    // TODO clean this up when it's disposed\n    branch.interactions.events.on(\"over\", function (ev) {\n      if (ev.pointer.touch) {\n        // Cancel pending menu closure\n        _this._ignoreNextClose = true;\n      }\n      _this.selectBranch(branch);\n      if (_this.events.isEnabled(\"over\")) {\n        var event_3 = {\n          \"type\": \"over\",\n          \"event\": ev.event,\n          \"target\": _this,\n          \"branch\": branch\n        };\n        _this.events.dispatchImmediately(\"over\", event_3);\n      }\n    });\n    // TODO clean this up when it's disposed\n    branch.interactions.events.on(\"out\", function (ev) {\n      if (_this.isDisposed()) {\n        return;\n      }\n      if (!ev.pointer.touch) {\n        _this.delayUnselectBranch(branch);\n      }\n      if (_this.events.isEnabled(\"out\")) {\n        var event_4 = {\n          \"type\": \"out\",\n          \"event\": ev.event,\n          \"target\": _this,\n          \"branch\": branch\n        };\n        _this.events.dispatchImmediately(\"out\", event_4);\n      }\n    });\n    // TODO clean this up when it's disposed\n    branch.interactions.events.on(\"focus\", function (ev) {\n      _this.selectBranch(branch);\n    });\n    // TODO clean this up when it's disposed\n    branch.interactions.events.on(\"blur\", function (ev) {\n      _this.delayUnselectBranch(branch);\n    });\n    // Increment level\n    var local_level = level + 1;\n    // Has sub-menu?\n    if (branch.menu) {\n      var submenu = this.createMenuElement(local_level);\n      branch.submenuElement = submenu;\n      for (var len = branch.menu.length, i = 0; i < len; i++) {\n        var ascendants = new List();\n        branch.menu[i].ascendants = ascendants;\n        if (branch.ascendants.length) {\n          ascendants.copyFrom(branch.ascendants);\n        }\n        ascendants.push(branch);\n        this.drawBranch(submenu, branch.menu[i], local_level);\n      }\n      // Sub-menu is empty (all items are not supported)\n      // Do not draw this menu item at all\n      if (submenu.innerHTML == \"\") {\n        return;\n      }\n      element.appendChild(submenu);\n    }\n    // Should this item be hidden?\n    if (branch.hidden) {\n      this.hideBranch(branch);\n    }\n    // Add id?\n    if (branch.id) {\n      element.setAttribute(\"id\", branch.id);\n    }\n    // Background color?\n    if (branch.color) {\n      element.style.backgroundColor = branch.color.hex;\n    }\n    // Append to container\n    container.appendChild(element);\n  };\n  /**\r\n   * Creates a menu element to hold its elements in. Usually it's an `<ul>`\r\n   * tag.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param level  Current nesting level\r\n   * @return HTML element reference\r\n   */\n  ExportMenu.prototype.createMenuElement = function (level) {\n    var element = document.createElement(this.menuTag);\n    element.className = this.getMenuItemClass(level);\n    // Accessibility\n    if (level === 0) {\n      element.setAttribute(\"role\", \"menubar\");\n    } else {\n      element.setAttribute(\"role\", \"menu\");\n    }\n    return element;\n  };\n  /**\r\n   * Generates a class name for the menu element based on its nesting level.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param level  Current nesting level\r\n   * @return Class name(s)\r\n   */\n  ExportMenu.prototype.getMenuItemClass = function (level) {\n    var className = this.classPrefix + \"-menu \" + this.classPrefix + \"-menu-level-\" + level;\n    if (level === 0) {\n      className += \" \" + this.classPrefix + \"-menu-root \" + this.classPrefix + \"-\" + this.align + \" \" + this.classPrefix + \"-\" + this.verticalAlign;\n    }\n    return this.adapter.apply(\"menuClass\", {\n      className: className,\n      level: level\n    }).className;\n  };\n  /**\r\n   * Creates menu item. Usually `<li>` tag. Its label and sub-elements will go\r\n   * into this element.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param level  Current nesting level\r\n   * @param type   Type of the menu item\r\n   * @return HTML element reference\r\n   */\n  ExportMenu.prototype.createItemElement = function (level, type) {\n    var element = document.createElement(this.itemTag);\n    var className = this.classPrefix + \"-item \" + this.classPrefix + \"-item-level-\" + level + \" \" + this.classPrefix + \"-item-\" + (type || \"blank\");\n    element.className = this.adapter.apply(\"itemClass\", {\n      className: className,\n      level: level,\n      type: type\n    }).className;\n    element.setAttribute(\"role\", \"menuitem\");\n    element.setAttribute(\"tabindex\", this.tabindex.toString());\n    return element;\n  };\n  /**\r\n   * Creates a \"label\" part of the menu item. It could be text or any HTML\r\n   * content.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param level  Current nesting level\r\n   * @param type   Type of the menu item\r\n   * @return An HTML Element\r\n   */\n  ExportMenu.prototype.createLabelElement = function (level, type) {\n    var element = document.createElement(this.labelTag);\n    var className = this.classPrefix + \"-label \" + this.classPrefix + \"-label-level-\" + level + \" \" + this.classPrefix + \"-item-\" + (type || \"blank\");\n    if (this.typeClickable(type)) {\n      className += \" \" + this.classPrefix + \"-clickable\";\n    }\n    element.className = this.adapter.apply(\"labelClass\", {\n      className: className,\n      level: level,\n      type: type\n    }).className;\n    // Accessible navigation\n    //element.setAttribute(\"tabindex\", this.tabindex.toString());\n    //element.setAttribute(\"role\", \"menuitem\");\n    return element;\n  };\n  /**\r\n   * Creates a \"icon\" part of the menu item.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param level  Current nesting level\r\n   * @param type   Type of the menu item\r\n   * @return An HTML Element\r\n   */\n  ExportMenu.prototype.createIconElement = function (level, type) {\n    var element = document.createElement(this.iconTag);\n    var className = this.classPrefix + \"-icon \" + this.classPrefix + \"-icon-level-\" + level + \" \" + this.classPrefix + \"-item-\" + (type || \"blank\");\n    if (this.typeClickable(type)) {\n      className += \" \" + this.classPrefix + \"-clickable\";\n    }\n    element.className = this.adapter.apply(\"labelClass\", {\n      className: className,\n      level: level,\n      type: type\n    }).className;\n    // Accessible navigation\n    element.setAttribute(\"tabindex\", this.tabindex.toString());\n    element.setAttribute(\"role\", \"menuitem\");\n    return element;\n  };\n  /**\r\n   * Creates a a custom element out of raw HTML.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param level  Current nesting level\r\n   * @param type   Type of the menu item\r\n   * @return An HTML Element\r\n   */\n  ExportMenu.prototype.createSvgElement = function (level, type, svg) {\n    var parser = new DOMParser();\n    var element = parser.parseFromString(svg, \"image/svg+xml\").documentElement;\n    var className = this.classPrefix + \"-icon \" + this.classPrefix + \"-icon-level-\" + level + \" \" + this.classPrefix + \"-item-\" + (type || \"blank\");\n    if (this.typeClickable(type)) {\n      className += \" \" + this.classPrefix + \"-clickable\";\n    }\n    element.setAttribute(\"class\", this.adapter.apply(\"labelClass\", {\n      className: className,\n      level: level,\n      type: type\n    }).className);\n    // Accessible navigation\n    element.setAttribute(\"tabindex\", this.tabindex.toString());\n    element.setAttribute(\"role\", \"menuitem\");\n    return element;\n  };\n  /**\r\n   * Destroys the menu and all its elements.\r\n   */\n  ExportMenu.prototype.dispose = function () {\n    if (!this._disposed) {\n      _super.prototype.dispose.call(this);\n      if (this._element && this._element.parentNode) {\n        this._element.parentNode.removeChild(this._element);\n      }\n    }\n  };\n  /**\r\n   * Checks whether menu item type is supposed to be clickable.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param type  Menu item type\r\n   * @return Is clickable?\r\n   */\n  ExportMenu.prototype.typeClickable = function (type) {\n    return $type.hasValue(type);\n  };\n  /**\r\n   * Checks whether menu item has any sub-items.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param branch  A menu item\r\n   * @return Has sub-items?\r\n   */\n  ExportMenu.prototype.hasSubMenu = function (branch) {\n    return branch.menu && branch.menu.length ? true : false;\n  };\n  /**\r\n   * Returns sub-items (if they exist).\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param branch  A menu item\r\n   * @return Submenus\r\n   */\n  ExportMenu.prototype.getSubMenu = function (branch) {\n    if (branch.menu && branch.menu.length) {\n      return branch.menu;\n    }\n  };\n  /**\r\n   * Generates and returns an applicable label to be used for screen readers.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param item   A menu item instance\r\n   * @param label  Current label\r\n   * @return Reader text\r\n   */\n  ExportMenu.prototype.getReaderLabel = function (branch, label) {\n    // Strip any HTML from the label\n    label = $utils.stripTags(label);\n    // Add textual note if the branch is clickable\n    if (branch.ascendants.length == 0) {\n      label = label == \"...\" ? this.language.translate(\"Export\") : label;\n      label += \" [\" + this.language.translate(\"Press ENTER or use arrow keys to navigate\") + \"]\";\n    } else if (this.hasSubMenu(branch)) {\n      label += \" [\" + this.language.translate(\"Click, tap or press ENTER to open\") + \"]\";\n    } else if (branch.type == \"print\") {\n      label = this.language.translate(\"Click, tap or press ENTER to print.\");\n    } else if (this.typeClickable(branch.type)) {\n      label = this.language.translate(\"Click, tap or press ENTER to export as %1.\", undefined, label);\n    }\n    return this.adapter.apply(\"rederLabel\", {\n      label: label,\n      branch: branch\n    }).label;\n  };\n  Object.defineProperty(ExportMenu.prototype, \"container\", {\n    /**\r\n     * @return Container\r\n     */\n    get: function () {\n      return this._container;\n    },\n    /**\r\n     * Getters and setters\r\n     */\n    /**\r\n     * An HTML container to place the Menu in.\r\n     *\r\n     * A container must be an HTML element, because menu itself is HTML, and\r\n     * cannot be placed into SVG.\r\n     *\r\n     * @param container Reference to container element\r\n     * @todo Check if menu is already build. If it is, just move it to a new container\r\n     */\n    set: function (container) {\n      this._container = container;\n      this.invalidate();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ExportMenu.prototype, \"items\", {\n    /**\r\n     * @return Menu items\r\n     */\n    get: function () {\n      return this._items;\n    },\n    /**\r\n     * A list of menu items. Can be nested.\r\n     *\r\n     * @param items  Menu items\r\n     */\n    set: function (items) {\n      this._items = items;\n      this.invalidate();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ExportMenu.prototype, \"tag\", {\n    /**\r\n     * Sets main menu tag to place menu in.\r\n     *\r\n     * This also sets up how menu items are built.\r\n     *\r\n     * If you set this to \"ul\", menu items will be wrapped into `<li>` tags.\r\n     *\r\n     * If set to \"div\", menu items will be wrapped in `<div>` tags.\r\n     *\r\n     * @default \"ul\"\r\n     * @param tag Tag to use for menu\r\n     */\n    set: function (tag) {\n      this._menuTag = tag;\n      this._itemTag = tag == \"ul\" ? \"li\" : \"div\";\n      this.invalidate();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ExportMenu.prototype, \"menuTag\", {\n    /**\r\n     * Returns current menu tag.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @return Menu tag (item that contains sub-items)\r\n     */\n    get: function () {\n      return this.adapter.apply(\"menuTag\", {\n        tag: this._menuTag\n      }).tag;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ExportMenu.prototype, \"itemTag\", {\n    /**\r\n     * Returns tag to wrap items into.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @return Item tag\r\n     */\n    get: function () {\n      return this.adapter.apply(\"itemTag\", {\n        tag: this._itemTag\n      }).tag;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ExportMenu.prototype, \"labelTag\", {\n    /**\r\n     * Returns menu label tag.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @return Label tag\r\n     */\n    get: function () {\n      return this.adapter.apply(\"labelTag\", {\n        tag: this._labelTag\n      }).tag;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ExportMenu.prototype, \"iconTag\", {\n    /**\r\n     * Returns icon tag.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @return Icon tag\r\n     */\n    get: function () {\n      return this.adapter.apply(\"iconTag\", {\n        tag: this._iconTag\n      }).tag;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ExportMenu.prototype, \"align\", {\n    /**\r\n     * @return Horizontal alignment\r\n     */\n    get: function () {\n      return this.adapter.apply(\"align\", {\n        align: this._align\n      }).align;\n    },\n    /**\r\n     * A horizontal alignment for the menu placement.\r\n     *\r\n     * @param value Horizontal alignment\r\n     */\n    set: function (value) {\n      this._align = value;\n      this.invalidate();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ExportMenu.prototype, \"verticalAlign\", {\n    /**\r\n     * @return Vertical alignment\r\n     */\n    get: function () {\n      return this.adapter.apply(\"verticalAlign\", {\n        verticalAlign: this._verticalAlign\n      }).verticalAlign;\n    },\n    /**\r\n     * A vertical alignment for the menu placement.\r\n     *\r\n     * @param value Vertical alignment\r\n     */\n    set: function (value) {\n      this._verticalAlign = value;\n      this.invalidate();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ExportMenu.prototype, \"classPrefix\", {\n    /**\r\n     * @return Class name prefix\r\n     */\n    get: function () {\n      return this.adapter.apply(\"classPrefix\", {\n        classPrefix: this._classPrefix\n      }).classPrefix;\n    },\n    /**\r\n     * Class name prefix.\r\n     *\r\n     * @default \"amexport\"\r\n     * @param value Class name prefix\r\n     */\n    set: function (value) {\n      this._classPrefix = value;\n      this.invalidate();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ExportMenu.prototype, \"defaultStyles\", {\n    /**\r\n     * @return Should ExportMenu load its own CSS?\r\n     */\n    get: function () {\n      return this.adapter.apply(\"defaultStyles\", {\n        defaultStyles: this._defaultStyles\n      }).defaultStyles;\n    },\n    /**\r\n     * Indicates whether [[ExportMenu]] should load external CSS to style itself.\r\n     *\r\n     * If set to `false`, the menu will not be styled, and will rely on some\r\n     * external CSS.\r\n     *\r\n     * @default true\r\n     * @param Should ExportMenu load its own CSS?\r\n     */\n    set: function (value) {\n      if (this._defaultStyles != value) {\n        this._defaultStyles = value;\n        if (value) {\n          this.loadDefaultCSS();\n        }\n      }\n      this.invalidate();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Loads the default CSS.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  ExportMenu.prototype.loadDefaultCSS = function () {\n    this._disposers.push(exportCSS($dom.getShadowRoot(this.container), this.classPrefix));\n    if (this._element) {\n      this._element.style.display = \"\";\n    }\n  };\n  Object.defineProperty(ExportMenu.prototype, \"tabindex\", {\n    /**\r\n     * @return Tab index\r\n     */\n    get: function () {\n      return this.adapter.apply(\"tabindex\", {\n        tabindex: this._tabindex\n      }).tabindex;\n    },\n    /**\r\n     * A tab index for the menu.\r\n     *\r\n     * Tab index will influence the order in which elements on the chart and\r\n     * the whole page are selected when pressing TAB key.\r\n     *\r\n     * @param value Tab index\r\n     */\n    set: function (value) {\n      this._tabindex = value;\n      this.invalidate();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ExportMenu.prototype, \"language\", {\n    /**\r\n     * @return A [[Language]] instance to be used\r\n     */\n    get: function () {\n      var _this = this;\n      var language = this._language.get();\n      if (language == null) {\n        language = new Language();\n        // TODO code duplication with `set language()`\n        this._language.set(language, language.events.on(\"localechanged\", function (ev) {\n          _this.invalidate();\n        }));\n      }\n      return language;\n    },\n    /**\r\n     * A [[Language]] instance.\r\n     *\r\n     * @param value An instance of [[Language]]\r\n     */\n    set: function (value) {\n      var _this = this;\n      this._language.set(value, value.events.on(\"localechanged\", function (ev) {\n        _this.invalidate();\n      }));\n      this.invalidate();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Controlling the menu\r\n   */\n  /**\r\n   * Removes all active classes from menu items. Useful on touch devices and\r\n   * keyboard navigation where open menu can be closed instantly by clicking or\r\n   * tapping outside it.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  ExportMenu.prototype.close = function () {\n    var _this = this;\n    if (this.isDisposed()) {\n      return;\n    }\n    if (this._ignoreNextClose) {\n      this._ignoreNextClose = false;\n      return;\n    }\n    if (this.closeOnClick) {\n      this._element.style.pointerEvents = \"none\";\n      setTimeout(function () {\n        _this._element.style.pointerEvents = \"auto\";\n      }, 100);\n    }\n    if (this._currentSelection) {\n      this.setBlur(this._currentSelection);\n      this._currentSelection = undefined;\n    }\n    if (this._element) {\n      var items = this._element.getElementsByClassName(\"active\");\n      for (var len = items.length, i = len - 1; i >= 0; i--) {\n        if (items[i]) {\n          $dom.removeClass(items[i], \"active\");\n        }\n      }\n    }\n    this.events.dispatchImmediately(\"closed\", {\n      type: \"closed\",\n      target: this\n    });\n  };\n  /**\r\n   * Selects a branch in the menu.\r\n   *\r\n   * Handles closing of currently open branch.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param branch Branch to select\r\n   */\n  ExportMenu.prototype.selectBranch = function (branch) {\n    var _this = this;\n    if (this.isDisposed()) {\n      return;\n    }\n    // Cancel previous closure\n    if (branch.closeTimeout) {\n      this.removeDispose(branch.closeTimeout);\n      branch.closeTimeout = undefined;\n    }\n    // Add active class\n    $dom.addClass(branch.element, \"active\");\n    // Set expanded\n    if (branch.submenuElement) {\n      branch.submenuElement.setAttribute(\"aria-expanded\", \"true\");\n    }\n    // Remove current selection\n    if (this._currentSelection && this._currentSelection !== branch && this._currentSelection.ascendants) {\n      $iter.each($iter.concat($iter.fromArray([this._currentSelection]), this._currentSelection.ascendants.iterator()), function (ascendant) {\n        if (!branch.ascendants.contains(ascendant) && branch !== ascendant) {\n          _this.unselectBranch(ascendant, true);\n        }\n      });\n    }\n    // Select and/or cancel timeout for current ascendants\n    $iter.each(branch.ascendants.iterator(), function (ascendant) {\n      if (ascendant.closeTimeout) {\n        _this.removeDispose(ascendant.closeTimeout);\n        ascendant.closeTimeout = undefined;\n      }\n      $dom.addClass(ascendant.element, \"active\");\n    });\n    // Log current selection\n    this._currentSelection = branch;\n    // Invoke event\n    if (this.events.isEnabled(\"branchselected\")) {\n      var event_5 = {\n        type: \"branchselected\",\n        target: this,\n        branch: branch\n      };\n      this.events.dispatchImmediately(\"branchselected\", event_5);\n    }\n  };\n  /**\r\n   * Unselects a branch. Also selects a branch one level up if necessary.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param branch Branch to unselect\r\n   * @param simple If `true`, only the branch will be unselected without selecting parent branch\r\n   */\n  ExportMenu.prototype.unselectBranch = function (branch, simple) {\n    if (this.isDisposed()) {\n      return;\n    }\n    // Remove active class\n    $dom.removeClass(branch.element, \"active\");\n    // Set expanded\n    if (branch.submenuElement) {\n      branch.submenuElement.removeAttribute(\"aria-expanded\");\n    }\n    // Remove current selection\n    if (this._currentSelection == branch) {\n      this._currentSelection = undefined;\n    }\n    // Invoke event\n    if (this.events.isEnabled(\"branchunselected\")) {\n      var event_6 = {\n        type: \"branchunselected\",\n        target: this,\n        branch: branch\n      };\n      this.events.dispatchImmediately(\"branchunselected\", event_6);\n    }\n  };\n  /**\r\n   * Delay unselection of a branch. This can still be cancelled in some other\r\n   * place if the branch or its children regain focus.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param branch Branch to unselect\r\n   * @param simple If `true`, only the branch will be unselected without selecting parent branch\r\n   */\n  ExportMenu.prototype.delayUnselectBranch = function (branch, simple) {\n    var _this = this;\n    if (this.isDisposed()) {\n      return;\n    }\n    // Schedule branch unselection\n    if (branch.closeTimeout) {\n      this.removeDispose(branch.closeTimeout);\n      branch.closeTimeout = undefined;\n    }\n    branch.closeTimeout = this.setTimeout(function () {\n      _this.unselectBranch(branch, simple);\n    }, this.closeDelay);\n    // Schedule unselection of all ascendants\n    // In case focus went away from the export menu altogether, this will ensure\n    // that all items will be closed.\n    // In case we're jumping to other menu item, those delayed unselections will\n    // be cancelled by `selectBranch`\n    if (simple !== true && branch.ascendants) {\n      $iter.each(branch.ascendants.iterator(), function (ascendant) {\n        _this.delayUnselectBranch(ascendant, true);\n      });\n    }\n  };\n  /**\r\n   * Navigates the menu based on which direction kayboard key was pressed.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param key A key that was pressed\r\n   */\n  ExportMenu.prototype.moveSelection = function (key) {\n    if (this.isDisposed()) {\n      return;\n    }\n    // Check if there's a current selection\n    if (!this._currentSelection) {\n      return;\n    }\n    var newSelection;\n    if (key == \"up\") {\n      // Try moving up in current menu list, or to the last item if already\n      // at the top\n      newSelection = this.getPrevSibling(this._currentSelection);\n    } else if (key == \"down\") {\n      // Try moving down in current menu list, or to the top item if already\n      // at the bottom\n      newSelection = this.getNextSibling(this._currentSelection);\n    } else if (key == \"left\" && this.align == \"right\" || key == \"right\" && this.align == \"left\") {\n      var menu = this.getSubMenu(this._currentSelection);\n      // Go one level-deeper\n      if (menu != null) {\n        newSelection = menu[0];\n      }\n    } else if (key == \"right\" && this.align == \"right\" || key == \"left\" && this.align == \"left\") {\n      // Go one level-deeper\n      newSelection = this.getParentItem(this._currentSelection);\n    }\n    if (newSelection && newSelection !== this._currentSelection) {\n      this.selectBranch(newSelection);\n      this.setFocus(newSelection);\n      this._currentSelection = newSelection;\n    }\n  };\n  /**\r\n   * Returns all siblings of a menu item, including this same menu item.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param branch  Menu item\r\n   * @return List of sibling menu items\r\n   */\n  ExportMenu.prototype.getSiblings = function (branch) {\n    var parent = this.getParentItem(branch);\n    if (parent && parent.menu) {\n      return parent.menu;\n    } else {\n      return [];\n    }\n  };\n  /**\r\n   * Returns menu items parent item.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param branch  Menu item\r\n   * @return Parent menu item\r\n   */\n  ExportMenu.prototype.getParentItem = function (branch) {\n    if (branch.ascendants && branch.ascendants.length) {\n      return branch.ascendants.getIndex(branch.ascendants.length - 1);\n    } else {\n      return undefined;\n    }\n  };\n  /**\r\n   * Returns next sibling in the same menu branch. If there is no next sibling,\r\n   * the first one is returned. If there is just one item, that item is\r\n   * returned. Unsupported menu items are skipped.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param branch  Menu item to search siblings for\r\n   * @return Menu item\r\n   */\n  ExportMenu.prototype.getNextSibling = function (branch) {\n    var siblings = this.getSiblings(branch);\n    if (siblings.length > 1) {\n      var next = siblings.indexOf(branch) + 1;\n      next = siblings.length == next ? 0 : next;\n      return siblings[next].unsupported ? this.getNextSibling(siblings[next]) : siblings[next];\n    } else {\n      return branch;\n    }\n  };\n  /**\r\n   * Returns previous sibling in the same menu branch. If there is no next\r\n   * sibling, the first one is returned. If there is just one item, that item is\r\n   * returned. Unsupported menu items are skipped.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param branch  Menu item to search siblings for\r\n   * @return Menu item\r\n   */\n  ExportMenu.prototype.getPrevSibling = function (branch) {\n    var siblings = this.getSiblings(branch);\n    if (siblings.length > 1) {\n      var prev = siblings.indexOf(branch) - 1;\n      prev = prev == -1 ? siblings.length - 1 : prev;\n      return siblings[prev].unsupported ? this.getPrevSibling(siblings[prev]) : siblings[prev];\n    } else {\n      return branch;\n    }\n  };\n  /**\r\n   * Attempts to set focus on particular menu element.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param branch Menu item\r\n   */\n  ExportMenu.prototype.setFocus = function (branch) {\n    if (branch.interactions) {\n      try {\n        branch.interactions.element.focus();\n      } catch (e) {\n        // nothing\n      }\n    }\n  };\n  /**\r\n   * Attempts to remove focus from the menu element.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param branch Menu item\r\n   */\n  ExportMenu.prototype.setBlur = function (branch) {\n    if (branch.interactions) {\n      try {\n        branch.interactions.element.blur();\n      } catch (e) {\n        // nothing\n      }\n    }\n  };\n  /**\r\n   * Hides the whole branch of menu.\r\n   *\r\n   * @param  branch  branch\r\n   */\n  ExportMenu.prototype.hideBranch = function (branch) {\n    branch.element.style.display = \"none\";\n  };\n  /**\r\n   * Show the branch of menu.\r\n   *\r\n   * @param  branch  branch\r\n   */\n  ExportMenu.prototype.showBranch = function (branch) {\n    branch.element.style.display = \"\";\n  };\n  Object.defineProperty(ExportMenu.prototype, \"element\", {\n    /**\r\n     * The main element o fthe menu - usually `<ul>`.\r\n     *\r\n     * @since 4.10.6\r\n     * @return Menu element\r\n     */\n    get: function () {\n      return this._element;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return ExportMenu;\n}(Validatable);\nexport { ExportMenu };","map":{"version":3,"names":["exportCSS","Adapter","List","getInteraction","MutableValueDisposer","Language","Validatable","keyboard","$utils","$iter","$dom","$type","ExportMenu","_super","__extends","_this","call","adapter","closeDelay","closeOnClick","_language","_menuTag","_itemTag","_labelTag","_iconTag","_classPrefix","_defaultStyles","_align","_verticalAlign","_tabindex","_ignoreNextClose","_items","className","_disposers","push","invalidate","applyTheme","prototype","validate","draw","_element","createMenuElement","innerHTML","getMenuItemClass","defaultStyles","style","display","getValue","_container","appendChild","items","apply","len","length","i","drawBranch","menuElement","body","events","on","ev","pointer","touch","close","key","getEventKey","event","_currentSelection","preventDefault","moveSelection","loadDefaultCSS","container","branch","level","unsupported","ascendants","type","element","createItemElement","label","icon","createIconElement","src","title","svg","createSvgElement","createLabelElement","language","translate","readerLabel","getReaderLabel","setAttribute","interactions","typeClickable","isEnabled","isDisposed","event_1","dispatchImmediately","isKey","event_2","submenu_1","getSubMenu","selectBranch","setFocus","event_3","delayUnselectBranch","event_4","local_level","menu","submenu","submenuElement","copyFrom","hidden","hideBranch","id","color","backgroundColor","hex","document","createElement","menuTag","classPrefix","align","verticalAlign","itemTag","tabindex","toString","labelTag","iconTag","parser","DOMParser","parseFromString","documentElement","dispose","_disposed","parentNode","removeChild","hasValue","hasSubMenu","stripTags","undefined","Object","defineProperty","get","set","tag","value","getShadowRoot","pointerEvents","setTimeout","setBlur","getElementsByClassName","removeClass","target","closeTimeout","removeDispose","addClass","each","concat","fromArray","iterator","ascendant","contains","unselectBranch","event_5","simple","removeAttribute","event_6","newSelection","getPrevSibling","getNextSibling","getParentItem","getSiblings","parent","getIndex","siblings","next","indexOf","prev","focus","e","blur","showBranch"],"sources":["../../../../../src/.internal/core/export/ExportMenu.ts"],"sourcesContent":["/**\r\n * ExportMenu provides functionality for building Export menu\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport exportCSS from \"./ExportCSS\";\r\nimport { IExportOptions } from \"./Export\";\r\nimport { Adapter } from \"../utils/Adapter\";\r\nimport { List } from \"../utils/List\";\r\nimport { Align } from \"../defs/Align\";\r\nimport { VerticalAlign } from \"../defs/VerticalAlign\";\r\nimport { getInteraction } from \"../interaction/Interaction\";\r\nimport { InteractionObject } from \"../interaction/InteractionObject\";\r\nimport { AMEvent } from \"../utils/EventDispatcher\";\r\nimport { IDisposer, MutableValueDisposer } from \"../utils/Disposer\";\r\nimport { Language, ILocaleProperties } from \"../utils/Language\";\r\nimport { Validatable } from \"../utils/Validatable\";\r\nimport { keyboard, KeyboardKeys } from \"../utils/Keyboard\";\r\nimport { Color } from \"../utils/Color\";\r\nimport * as $utils from \"../utils/Utils\";\r\nimport * as $iter from \"../utils/Iterator\";\r\nimport * as $dom from \"../utils/DOM\";\r\nimport * as $type from \"../utils/Type\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Export menu item interface.\r\n */\r\nexport interface IExportMenuItem {\r\n\r\n\t/**\r\n\t * Item type, usually an export format.\r\n\t */\r\n\ttype?: keyof IExportOptions;\r\n\r\n\t/**\r\n\t * Label to display in the menu.\r\n\t */\r\n\tlabel?: string;\r\n\r\n\t/**\r\n\t * Alternative title to be displayed on hover.\r\n\t *\r\n\t * @since 4.9.27\r\n\t */\r\n\ttitle?: string;\r\n\r\n\t/**\r\n\t * A `href` of the image to show instead of a label.\r\n\t */\r\n\ticon?: string;\r\n\r\n\t/**\r\n\t * Raw SVG content to add to instead of regular label.\r\n\t */\r\n\tsvg?: string;\r\n\r\n\t/**\r\n\t * Export format. (optional)\r\n\t */\r\n\tformat?: string;\r\n\r\n\t/**\r\n\t * Menu item options.\r\n\t *\r\n\t * @see {@link IExportOptions}\r\n\t */\r\n\toptions?: IExportOptions[keyof IExportOptions];\r\n\r\n\t/**\r\n\t * Priority.\r\n\t *\r\n\t * The items in Export menu will be sorted by their priority in ascending\r\n\t * order.\r\n\t *\r\n\t * @ignore Exclude from docs (this feature is not yet implemented)\r\n\t */\r\n\tpriority?: number;\r\n\r\n\t/**\r\n\t * An array of [[IExportMenuItem]] items, to construct a sub-menu out of.\r\n\t *\r\n\t * An Export menu can have any number of nesting levels.\r\n\t */\r\n\tmenu?: Array<IExportMenuItem>;\r\n\r\n\t/**\r\n\t * If this is set to true, it means that this specific menu item is not\r\n\t * supported by the current client system.\r\n\t *\r\n\t * This is usually populated by [[Export]]'s `supported` Adapter.\r\n\t *\r\n\t * @see {@link IExportAdapters}\r\n\t */\r\n\tunsupported?: boolean\r\n\r\n\t/**\r\n\t * An [[InteractionObject]] representation of the menu item label.\r\n\t */\r\n\tinteractions?: InteractionObject;\r\n\r\n\t/**\r\n\t * Actual HTML element of the menu item.\r\n\t */\r\n\telement?: HTMLElement;\r\n\r\n\t/**\r\n\t * An element that holds the sub-menu.\r\n\t *\r\n\t * @since 4.10.12\r\n\t */\r\n\tsubmenuElement?: HTMLElement;\r\n\r\n\t/**\r\n\t * Holds list of parent menu items to this item.\r\n\t */\r\n\tascendants?: List<IExportMenuItem>;\r\n\r\n\t/**\r\n\t * Holds timeout reference.\r\n\t *\r\n\t * Used to delay auto-closing of the menu when it is no longer hovered.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tcloseTimeout?: IDisposer;\r\n\r\n\t/**\r\n\t * Should this item be hidden?\r\n\t */\r\n\thidden?: boolean;\r\n\r\n\t/**\r\n\t * A unique id to attach to the menu item.\r\n\t */\r\n\tid?: string;\r\n\r\n\t/**\r\n\t * Color to use as a background.\r\n\t */\r\n\tcolor?: Color;\r\n\r\n}\r\n\r\n/**\r\n * Defines [[ExportMenu]] events.\r\n */\r\nexport interface IExportMenuEvents {\r\n\r\n\t/**\r\n\t * Invoked when menu item is clicked/tapped.\r\n\t */\r\n\thit: {\r\n\t\tbranch: IExportMenuItem;\r\n\t\tevent: MouseEvent | TouchEvent;\r\n\t};\r\n\r\n\t/**\r\n\t * Invoked when menu item is hovered.\r\n\t */\r\n\tover: {\r\n\t\tbranch: IExportMenuItem;\r\n\t\tevent: MouseEvent | TouchEvent;\r\n\t};\r\n\r\n\t/**\r\n\t * Invoked when menu item is no longer hovered.\r\n\t */\r\n\tout: {\r\n\t\tbranch: IExportMenuItem;\r\n\t\tevent: MouseEvent | TouchEvent;\r\n\t};\r\n\r\n\t/**\r\n\t * Invoked when ENTER key is pressed when certain menu item is in focus.\r\n\t */\r\n\tenter: {\r\n\t\tbranch: IExportMenuItem;\r\n\t\tevent: KeyboardEvent;\r\n\t}\r\n\r\n\t/**\r\n\t * Invoked when menu branch is selected. (either by hover or keyboard)\r\n\t */\r\n\tbranchselected: {\r\n\t\tbranch: IExportMenuItem;\r\n\t}\r\n\r\n\t/**\r\n\t * Invoked when menu branch is unselected.\r\n\t */\r\n\tbranchunselected: {\r\n\t\tbranch: IExportMenuItem;\r\n\t}\r\n\r\n\t/**\r\n\t * Invoked when menu is closed.\r\n\t */\r\n\tclosed: {};\r\n\r\n}\r\n\r\n/**\r\n * Represents a list of available adapters for Export\r\n */\r\nexport interface IExportMenuAdapters {\r\n\r\n\titems: {\r\n\t\titems: Array<IExportMenuItem>\r\n\t},\r\n\r\n\tmenuElement: {\r\n\t\tmenuElement: HTMLElement\r\n\t},\r\n\r\n\tbranch: {\r\n\t\tbranch: IExportMenuItem,\r\n\t\tlevel: number\r\n\t},\r\n\r\n\trederLabel: {\r\n\t\tlabel: string,\r\n\t\tbranch: IExportMenuItem\r\n\t},\r\n\r\n\tmenuClass: {\r\n\t\tclassName: string,\r\n\t\tlevel: number\r\n\t},\r\n\r\n\titemClass: {\r\n\t\tclassName: string,\r\n\t\tlevel: number,\r\n\t\ttype?: keyof IExportOptions\r\n\t},\r\n\r\n\tlabelClass: {\r\n\t\tclassName: string,\r\n\t\tlevel: number,\r\n\t\ttype?: keyof IExportOptions\r\n\t},\r\n\r\n\tmenuTag: {\r\n\t\ttag: string\r\n\t},\r\n\r\n\titemTag: {\r\n\t\ttag: string\r\n\t},\r\n\r\n\tlabelTag: {\r\n\t\ttag: string\r\n\t},\r\n\r\n\ticonTag: {\r\n\t\ttag: string\r\n\t},\r\n\r\n\talign: {\r\n\t\talign: Align\r\n\t},\r\n\r\n\tverticalAlign: {\r\n\t\tverticalAlign: VerticalAlign\r\n\t},\r\n\r\n\tclassPrefix: {\r\n\t\tclassPrefix: string\r\n\t},\r\n\r\n\tdefaultStyles: {\r\n\t\tdefaultStyles: boolean\r\n\t},\r\n\r\n\ttabindex: {\r\n\t\ttabindex: number\r\n\t},\r\n\r\n\tcloseOnClick: boolean\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a menu for Export operations.\r\n *\r\n * To add an export menu to a chart, set this to a new instance of\r\n * [[ExportMenu]].\r\n *\r\n * ```TypeScript\r\n * chart.exporting.menu = new am4core.ExportMenu();\r\n * ```\r\n * ```JavaScript\r\n * chart.exporting.menu = new am4core.ExportMenu();\r\n * ```\r\n * ```JSON\r\n * {\r\n *   // ...\r\n *   \"exporting\": {\r\n *     \"menu\": {}\r\n *   }\r\n * }\r\n * ```\r\n * @important\r\n */\r\nexport class ExportMenu extends Validatable {\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IExportMenuEvents;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IExportMenuAdapters;\r\n\r\n\t/**\r\n\t * An [[Adapter]].\r\n\t */\r\n\tpublic adapter: Adapter<ExportMenu, IExportMenuAdapters> = new Adapter<ExportMenu, IExportMenuAdapters>(this);\r\n\r\n\t/**\r\n\t * How many milliseconds to hold menu/sub-menu open after it loses focus or\r\n\t * hover, before auto-closing it.\r\n\t *\r\n\t * @default 1000\r\n\t */\r\n\tpublic closeDelay: number = 1000;\r\n\r\n\t/**\r\n\t * Close the menu automatically when some export operation is triggered.\r\n\t *\r\n\t * @default true\r\n\t * @since 4.2.2\r\n\t */\r\n\tpublic closeOnClick: boolean = true;\r\n\r\n\t/**\r\n\t * An instance of [[Language]].\r\n\t */\r\n\tprotected _language = new MutableValueDisposer<Language>();\r\n\r\n\t/**\r\n\t * Reference to DOM element that holds Export menu.\r\n\t */\r\n\tprotected _container: $type.Optional<HTMLElement>;\r\n\r\n\t/**\r\n\t * Menu element.\r\n\t */\r\n\tprotected _element: $type.Optional<HTMLElement>;\r\n\r\n\t/**\r\n\t * Currently selected menu item.\r\n\t */\r\n\tprotected _currentSelection: $type.Optional<IExportMenuItem>;\r\n\r\n\t/**\r\n\t * What HTML tags to use to build menu.\r\n\t */\r\n\tprotected _menuTag: \"ul\" | \"div\" = \"ul\";\r\n\r\n\t/**\r\n\t * Which tag to use to enclose individual menu items.\r\n\t */\r\n\tprotected _itemTag: \"li\" | \"div\" = \"li\";\r\n\r\n\t/**\r\n\t * Tag to wrap menu item labels in.\r\n\t */\r\n\tprotected _labelTag: \"a\" = \"a\";\r\n\r\n\t/**\r\n\t * Tag to use for icons\r\n\t */\r\n\tprotected _iconTag: \"img\" = \"img\";\r\n\r\n\t/**\r\n\t * Prefix for class names applied to menu elements.\r\n\t */\r\n\tprotected _classPrefix: string = \"amexport\";\r\n\r\n\t/**\r\n\t * If set to `true` [[ExportMenu]] will load it's own external CSS when\r\n\t * instantiated.\r\n\t */\r\n\tprotected _defaultStyles: boolean = true;\r\n\r\n\t/**\r\n\t * Horizontal positioning.\r\n\t */\r\n\tprotected _align: Align = \"right\";\r\n\r\n\t/**\r\n\t * Vertical positioning.\r\n\t */\r\n\tprotected _verticalAlign: VerticalAlign = \"top\";\r\n\r\n\t/**\r\n\t * A tabindex to apply to Export Menu.\r\n\t */\r\n\tprotected _tabindex: number = 0;\r\n\r\n\t/**\r\n\t * Whether next menu close event should be ignored.\r\n\t */\r\n\tprotected _ignoreNextClose: boolean = false;\r\n\r\n\t/**\r\n\t * Default menu items.\r\n\t */\r\n\tprotected _items: Array<IExportMenuItem> = [\r\n\t\t{\r\n\t\t\t\"label\": \"...\",\r\n\t\t\t\"menu\": [\r\n\t\t\t\t{\r\n\t\t\t\t\t\"label\": \"Image\",\r\n\t\t\t\t\t\"menu\": [\r\n\t\t\t\t\t\t{ \"type\": \"png\", \"label\": \"PNG\" },\r\n\t\t\t\t\t\t{ \"type\": \"jpg\", \"label\": \"JPG\" },\r\n\t\t\t\t\t\t{ \"type\": \"svg\", \"label\": \"SVG\" },\r\n\t\t\t\t\t\t{ \"type\": \"pdf\", \"label\": \"PDF\" }\r\n\t\t\t\t\t]\r\n\t\t\t\t}, {\r\n\t\t\t\t\t\"label\": \"Data\",\r\n\t\t\t\t\t\"menu\": [\r\n\t\t\t\t\t\t{ \"type\": \"json\", \"label\": \"JSON\" },\r\n\t\t\t\t\t\t{ \"type\": \"csv\", \"label\": \"CSV\" },\r\n\t\t\t\t\t\t{ \"type\": \"xlsx\", \"label\": \"XLSX\" },\r\n\t\t\t\t\t\t{ \"type\": \"html\", \"label\": \"HTML\" },\r\n\t\t\t\t\t\t{ \"type\": \"pdfdata\", \"label\": \"PDF\" }\r\n\t\t\t\t\t]\r\n\t\t\t\t}, {\r\n\t\t\t\t\t\"label\": \"Print\", \"type\": \"print\"\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t}\r\n\t];\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"ExportMenu\";\r\n\t\tthis._disposers.push(this._language);\r\n\t\tthis.invalidate();\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)draws the Export menu.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\t\tthis.draw();\r\n\t\tsuper.validate();\r\n\t}\r\n\r\n\t/**\r\n\t * Draws the menu based on current items.\r\n\t *\r\n\t * Normally, there's no need to call this explicitly. The chart, if it has\r\n\t * export menu enabled, will automatically draw the menu.\r\n\t */\r\n\tpublic draw(): void {\r\n\r\n\t\t// Create top-level menu item, or clear it\r\n\t\tif (!this._element) {\r\n\t\t\tthis._element = this.createMenuElement(0);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis._element.innerHTML = \"\";\r\n\t\t\tthis._element.className = this.getMenuItemClass(0);\r\n\t\t}\r\n\r\n\t\t// See if we're loading external CSS\r\n\t\t// Hide it until CSS is loaded\r\n\t\tif (this.defaultStyles) {\r\n\t\t\tthis._element.style.display = \"none\";\r\n\t\t}\r\n\r\n\t\t// Append to container\r\n\t\t$type.getValue(this._container).appendChild(this._element);\r\n\r\n\t\t// Apply adapter to menu items before processing\r\n\t\tlet items = this.adapter.apply(\"items\", {\r\n\t\t\titems: this._items\r\n\t\t}).items;\r\n\r\n\t\tfor (let len = items.length, i = 0; i < len; i++) {\r\n\t\t\tthis.drawBranch(this._element, items[i], 0);\r\n\t\t}\r\n\r\n\t\t// Apply adapter to finalized menu element\r\n\t\tthis._element = this.adapter.apply(\"menuElement\", {\r\n\t\t\tmenuElement: this._element\r\n\t\t}).menuElement;\r\n\r\n\t\t// Set up global \"down\" event\r\n\t\tthis._disposers.push(getInteraction().body.events.on(\"down\", (ev) => {\r\n\t\t\tif (!ev.pointer.touch) {\r\n\t\t\t\tthis._ignoreNextClose = false;\r\n\t\t\t}\r\n\t\t\tthis.close();\r\n\t\t}));\r\n\r\n\t\t// Set up global event on ESC press to close the menu\r\n\t\tthis._disposers.push(getInteraction().body.events.on(\"keydown\", (ev) => {\r\n\t\t\tlet key = keyboard.getEventKey(ev.event);\r\n\t\t\tswitch (key) {\r\n\t\t\t\tcase \"esc\":\r\n\t\t\t\t\tthis.close();\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"up\":\r\n\t\t\t\tcase \"down\":\r\n\t\t\t\tcase \"left\":\r\n\t\t\t\tcase \"right\":\r\n\t\t\t\t\tif (this._currentSelection) {\r\n\t\t\t\t\t\tev.event.preventDefault();\r\n\t\t\t\t\t}\r\n\t\t\t\t\tthis.moveSelection(key);\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}));\r\n\r\n\t\tif (this.defaultStyles) {\r\n\t\t\tthis.loadDefaultCSS();\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Creates a new branch in export menu. This function is recursive for\r\n\t * building multi-level menus.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param container Container to put branch elements in\r\n\t * @param branch    Menu item\r\n\t * @param level     Current nesting level\r\n\t */\r\n\tprotected drawBranch(container: HTMLElement, branch: IExportMenuItem, level: number): void {\r\n\r\n\t\t// Apply adapter\r\n\t\tbranch = this.adapter.apply(\"branch\", {\r\n\t\t\tbranch: branch,\r\n\t\t\tlevel: level\r\n\t\t}).branch;\r\n\r\n\t\t// Unsupported?\r\n\t\t// ExportMenu does not check or know for specific browser/system\r\n\t\t// capabilities. It must happen in some other code and applied via Adapter.\r\n\t\t// Export itself will check compatibility, but there might be other plugins\r\n\t\t// that influence it or even add any specific export functionality.\r\n\t\tif (branch.unsupported === true) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t// Init ascendants\r\n\t\tif (!branch.ascendants) {\r\n\t\t\tbranch.ascendants = new List<IExportMenuItem>();\r\n\t\t}\r\n\r\n\t\t// Get type\r\n\t\tlet type: keyof IExportOptions | undefined | null = branch.type;\r\n\r\n\t\t// Create an item\r\n\t\tlet element = this.createItemElement(level, type);\r\n\r\n\t\t// Create label\r\n\t\tlet label;\r\n\r\n\t\t// Create icon\r\n\t\tif (branch.icon) {\r\n\t\t\tlabel = this.createIconElement(level, type);\r\n\t\t\t(<HTMLImageElement>label).src = branch.icon;\r\n\t\t\tif (branch.label || branch.title) {\r\n\t\t\t\t(<HTMLImageElement>label).title = branch.title || branch.label;\r\n\t\t\t}\r\n\t\t}\r\n\t\telse if (branch.svg) {\r\n\t\t\tlabel = this.createSvgElement(level, type, branch.svg);\r\n\t\t\tif (branch.label || branch.title) {\r\n\t\t\t\t(<HTMLElement>label).title = branch.title || branch.label;\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\tlabel = this.createLabelElement(level, type);\r\n\t\t\tlabel.innerHTML = (branch.label ? this.language.translate(<keyof ILocaleProperties>branch.label) : \"\");\r\n\t\t\tif (branch.title) {\r\n\t\t\t\t(<HTMLElement>label).title = branch.title;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Apply reader text to label\r\n\t\tlet readerLabel = this.getReaderLabel(branch, label.innerHTML);\r\n\t\tlabel.setAttribute(\"aria-label\", readerLabel);\r\n\r\n\t\t// Add Label\r\n\t\telement.appendChild(label);\r\n\r\n\t\t// Create interaction object\r\n\t\t// TODO clean this up when it's disposed\r\n\t\tbranch.interactions = getInteraction().getInteraction(element);\r\n\t\tbranch.element = element;\r\n\r\n\t\t// Create interaction manager we can set event listeners to\r\n\t\tif (this.typeClickable(type)) {\r\n\t\t\t//branch.interactions.clickable = true;\r\n\t\t\t// TODO clean this up when it's disposed\r\n\t\t\tbranch.interactions.events.on(\"hit\", (ev) => {\r\n\t\t\t\tif (this.events.isEnabled(\"hit\") && !this.isDisposed()) {\r\n\t\t\t\t\tconst event: AMEvent<this, IExportMenuEvents>[\"hit\"] = {\r\n\t\t\t\t\t\t\"type\": \"hit\",\r\n\t\t\t\t\t\t\"event\": ev.event,\r\n\t\t\t\t\t\t\"target\": this,\r\n\t\t\t\t\t\t\"branch\": branch\r\n\t\t\t\t\t};\r\n\t\t\t\t\tthis.events.dispatchImmediately(\"hit\", event);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\t// TODO clean this up when it's disposed\r\n\t\t\tbranch.interactions.events.on(\"keyup\", (ev) => {\r\n\t\t\t\tif (keyboard.isKey(ev.event, \"enter\")) {\r\n\t\t\t\t\tif (this.events.isEnabled(\"enter\")) {\r\n\t\t\t\t\t\tconst event: AMEvent<this, IExportMenuEvents>[\"enter\"] = {\r\n\t\t\t\t\t\t\t\"type\": \"enter\",\r\n\t\t\t\t\t\t\t\"event\": ev.event,\r\n\t\t\t\t\t\t\t\"target\": this,\r\n\t\t\t\t\t\t\t\"branch\": branch\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t\tthis.events.dispatchImmediately(\"enter\", event);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\t{\r\n\t\t\tconst submenu = this.getSubMenu(branch);\r\n\r\n\t\t\t// Add ENTER event to open sub-menus\r\n\t\t\tif (submenu != null) {\r\n\t\t\t\t// TODO clean this up when it's disposed\r\n\t\t\t\tbranch.interactions.events.on(\"keyup\", (ev) => {\r\n\t\t\t\t\tif (keyboard.isKey(ev.event, \"enter\")) {\r\n\t\t\t\t\t\t// This is item has sub-menu, activate the first child on ENTER\r\n\t\t\t\t\t\tthis.selectBranch(submenu[0]);\r\n\r\n\t\t\t\t\t\t// Attempt to set focus\r\n\t\t\t\t\t\tthis.setFocus(submenu[0]);\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t\tbranch.interactions.events.on(\"hit\", (ev) => {\r\n\t\t\t\t\tthis.selectBranch(branch);\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Add events\r\n\t\t// TODO clean this up when it's disposed\r\n\t\tbranch.interactions.events.on(\"over\", (ev) => {\r\n\r\n\t\t\tif (ev.pointer.touch) {\r\n\t\t\t\t// Cancel pending menu closure\r\n\t\t\t\tthis._ignoreNextClose = true;\r\n\t\t\t}\r\n\r\n\t\t\tthis.selectBranch(branch);\r\n\r\n\t\t\tif (this.events.isEnabled(\"over\")) {\r\n\t\t\t\tconst event: AMEvent<this, IExportMenuEvents>[\"over\"] = {\r\n\t\t\t\t\t\"type\": \"over\",\r\n\t\t\t\t\t\"event\": ev.event,\r\n\t\t\t\t\t\"target\": this,\r\n\t\t\t\t\t\"branch\": branch\r\n\t\t\t\t};\r\n\t\t\t\tthis.events.dispatchImmediately(\"over\", event);\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\t// TODO clean this up when it's disposed\r\n\t\tbranch.interactions.events.on(\"out\", (ev) => {\r\n\t\t\tif (this.isDisposed()) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tif (!ev.pointer.touch) {\r\n\t\t\t\tthis.delayUnselectBranch(branch);\r\n\t\t\t}\r\n\t\t\tif (this.events.isEnabled(\"out\")) {\r\n\t\t\t\tconst event: AMEvent<this, IExportMenuEvents>[\"out\"] = {\r\n\t\t\t\t\t\"type\": \"out\",\r\n\t\t\t\t\t\"event\": ev.event,\r\n\t\t\t\t\t\"target\": this,\r\n\t\t\t\t\t\"branch\": branch\r\n\t\t\t\t};\r\n\t\t\t\tthis.events.dispatchImmediately(\"out\", event);\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\t// TODO clean this up when it's disposed\r\n\t\tbranch.interactions.events.on(\"focus\", (ev) => {\r\n\t\t\tthis.selectBranch(branch);\r\n\t\t});\r\n\r\n\t\t// TODO clean this up when it's disposed\r\n\t\tbranch.interactions.events.on(\"blur\", (ev) => {\r\n\t\t\tthis.delayUnselectBranch(branch);\r\n\t\t});\r\n\r\n\t\t// Increment level\r\n\t\tlet local_level = level + 1;\r\n\r\n\t\t// Has sub-menu?\r\n\t\tif (branch.menu) {\r\n\t\t\tlet submenu = this.createMenuElement(local_level);\r\n\t\t\tbranch.submenuElement = submenu;\r\n\t\t\tfor (let len = branch.menu.length, i = 0; i < len; i++) {\r\n\t\t\t\tlet ascendants = new List<IExportMenuItem>();\r\n\t\t\t\tbranch.menu[i].ascendants = ascendants;\r\n\t\t\t\tif (branch.ascendants.length) {\r\n\t\t\t\t\tascendants.copyFrom(branch.ascendants);\r\n\t\t\t\t}\r\n\t\t\t\tascendants.push(branch);\r\n\t\t\t\tthis.drawBranch(submenu, branch.menu[i], local_level);\r\n\t\t\t}\r\n\r\n\t\t\t// Sub-menu is empty (all items are not supported)\r\n\t\t\t// Do not draw this menu item at all\r\n\t\t\tif (submenu.innerHTML == \"\") {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\telement.appendChild(submenu);\r\n\t\t}\r\n\r\n\t\t// Should this item be hidden?\r\n\t\tif (branch.hidden) {\r\n\t\t\tthis.hideBranch(branch);\r\n\t\t}\r\n\r\n\t\t// Add id?\r\n\t\tif (branch.id) {\r\n\t\t\telement.setAttribute(\"id\", branch.id);\r\n\t\t}\r\n\r\n\t\t// Background color?\r\n\t\tif (branch.color) {\r\n\t\t\telement.style.backgroundColor = branch.color.hex;\r\n\t\t}\r\n\r\n\t\t// Append to container\r\n\t\tcontainer.appendChild(element);\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Creates a menu element to hold its elements in. Usually it's an `<ul>`\r\n\t * tag.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param level  Current nesting level\r\n\t * @return HTML element reference\r\n\t */\r\n\tpublic createMenuElement(level: number): HTMLElement {\r\n\t\tlet element: HTMLElement = document.createElement(this.menuTag);\r\n\t\telement.className = this.getMenuItemClass(level);\r\n\r\n\t\t// Accessibility\r\n\t\tif (level === 0) {\r\n\t\t\telement.setAttribute(\"role\", \"menubar\");\r\n\t\t}\r\n\t\telse {\r\n\t\t\telement.setAttribute(\"role\", \"menu\");\r\n\t\t}\r\n\t\treturn element;\r\n\t}\r\n\r\n\t/**\r\n\t * Generates a class name for the menu element based on its nesting level.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param level  Current nesting level\r\n\t * @return Class name(s)\r\n\t */\r\n\tpublic getMenuItemClass(level: number): string {\r\n\t\tlet className = this.classPrefix + \"-menu \" + this.classPrefix + \"-menu-level-\" + level;\r\n\t\tif (level === 0) {\r\n\t\t\tclassName += \" \" + this.classPrefix + \"-menu-root \" +\r\n\t\t\t\tthis.classPrefix + \"-\" + this.align + \" \" +\r\n\t\t\t\tthis.classPrefix + \"-\" + this.verticalAlign;\r\n\t\t}\r\n\t\treturn this.adapter.apply(\"menuClass\", {\r\n\t\t\tclassName: className,\r\n\t\t\tlevel: level\r\n\t\t}).className;\r\n\t}\r\n\r\n\t/**\r\n\t * Creates menu item. Usually `<li>` tag. Its label and sub-elements will go\r\n\t * into this element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param level  Current nesting level\r\n\t * @param type   Type of the menu item\r\n\t * @return HTML element reference\r\n\t */\r\n\tpublic createItemElement(level: number, type?: keyof IExportOptions): HTMLElement {\r\n\t\tlet element: HTMLElement = document.createElement(this.itemTag);\r\n\t\tlet className = this.classPrefix + \"-item \" + this.classPrefix\r\n\t\t\t+ \"-item-level-\" + level\r\n\t\t\t+ \" \" + this.classPrefix + \"-item-\" + (type || \"blank\");\r\n\t\telement.className = this.adapter.apply(\"itemClass\", {\r\n\t\t\tclassName: className,\r\n\t\t\tlevel: level,\r\n\t\t\ttype: type\r\n\t\t}).className;\r\n\t\telement.setAttribute(\"role\", \"menuitem\");\r\n\t\telement.setAttribute(\"tabindex\", this.tabindex.toString());\r\n\t\treturn element;\r\n\t}\r\n\r\n\t/**\r\n\t * Creates a \"label\" part of the menu item. It could be text or any HTML\r\n\t * content.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param level  Current nesting level\r\n\t * @param type   Type of the menu item\r\n\t * @return An HTML Element\r\n\t */\r\n\tpublic createLabelElement(level: number, type?: keyof IExportOptions): HTMLElement {\r\n\t\tlet element: HTMLElement = document.createElement(this.labelTag);\r\n\t\tlet className = this.classPrefix + \"-label \" + this.classPrefix\r\n\t\t\t+ \"-label-level-\" + level\r\n\t\t\t+ \" \" + this.classPrefix + \"-item-\" + (type || \"blank\");\r\n\t\tif (this.typeClickable(type)) {\r\n\t\t\tclassName += \" \" + this.classPrefix + \"-clickable\";\r\n\t\t}\r\n\t\telement.className = this.adapter.apply(\"labelClass\", {\r\n\t\t\tclassName: className,\r\n\t\t\tlevel: level,\r\n\t\t\ttype: type\r\n\t\t}).className;\r\n\r\n\t\t// Accessible navigation\r\n\t\t//element.setAttribute(\"tabindex\", this.tabindex.toString());\r\n\t\t//element.setAttribute(\"role\", \"menuitem\");\r\n\t\treturn element;\r\n\t}\r\n\r\n\t/**\r\n\t * Creates a \"icon\" part of the menu item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param level  Current nesting level\r\n\t * @param type   Type of the menu item\r\n\t * @return An HTML Element\r\n\t */\r\n\tpublic createIconElement(level: number, type?: keyof IExportOptions): HTMLElement {\r\n\t\tlet element: HTMLElement = document.createElement(this.iconTag);\r\n\t\tlet className = this.classPrefix + \"-icon \" + this.classPrefix\r\n\t\t\t+ \"-icon-level-\" + level\r\n\t\t\t+ \" \" + this.classPrefix + \"-item-\" + (type || \"blank\");\r\n\t\tif (this.typeClickable(type)) {\r\n\t\t\tclassName += \" \" + this.classPrefix + \"-clickable\";\r\n\t\t}\r\n\t\telement.className = this.adapter.apply(\"labelClass\", {\r\n\t\t\tclassName: className,\r\n\t\t\tlevel: level,\r\n\t\t\ttype: type\r\n\t\t}).className;\r\n\r\n\t\t// Accessible navigation\r\n\t\telement.setAttribute(\"tabindex\", this.tabindex.toString());\r\n\t\telement.setAttribute(\"role\", \"menuitem\");\r\n\t\treturn element;\r\n\t}\r\n\r\n\t/**\r\n\t * Creates a a custom element out of raw HTML.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param level  Current nesting level\r\n\t * @param type   Type of the menu item\r\n\t * @return An HTML Element\r\n\t */\r\n\tpublic createSvgElement(level: number, type?: keyof IExportOptions, svg?: string): HTMLElement {\r\n\t\tlet parser = new DOMParser();\r\n\t\tlet element = parser.parseFromString(svg, \"image/svg+xml\").documentElement;\r\n\t\tlet className = this.classPrefix + \"-icon \" + this.classPrefix\r\n\t\t\t+ \"-icon-level-\" + level\r\n\t\t\t+ \" \" + this.classPrefix + \"-item-\" + (type || \"blank\");\r\n\t\tif (this.typeClickable(type)) {\r\n\t\t\tclassName += \" \" + this.classPrefix + \"-clickable\";\r\n\t\t}\r\n\t\telement.setAttribute(\"class\", this.adapter.apply(\"labelClass\", {\r\n\t\t\tclassName: className,\r\n\t\t\tlevel: level,\r\n\t\t\ttype: type\r\n\t\t}).className);\r\n\r\n\t\t// Accessible navigation\r\n\t\telement.setAttribute(\"tabindex\", this.tabindex.toString());\r\n\t\telement.setAttribute(\"role\", \"menuitem\");\r\n\t\treturn element;\r\n\t}\r\n\r\n\t/**\r\n\t * Destroys the menu and all its elements.\r\n\t */\r\n\tpublic dispose(): void {\r\n\t\tif (!this._disposed) {\r\n\t\t\tsuper.dispose();\r\n\r\n\t\t\tif (this._element && this._element.parentNode) {\r\n\t\t\t\tthis._element.parentNode.removeChild(this._element);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Checks whether menu item type is supposed to be clickable.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param type  Menu item type\r\n\t * @return Is clickable?\r\n\t */\r\n\tpublic typeClickable(type: keyof IExportOptions | undefined | null): type is keyof IExportOptions {\r\n\t\treturn $type.hasValue(type);\r\n\t}\r\n\r\n\t/**\r\n\t * Checks whether menu item has any sub-items.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param branch  A menu item\r\n\t * @return Has sub-items?\r\n\t */\r\n\tpublic hasSubMenu(branch: IExportMenuItem): boolean {\r\n\t\treturn (branch.menu && branch.menu.length) ? true : false;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns sub-items (if they exist).\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param branch  A menu item\r\n\t * @return Submenus\r\n\t */\r\n\tpublic getSubMenu(branch: IExportMenuItem): $type.Optional<Array<IExportMenuItem>> {\r\n\t\tif (branch.menu && branch.menu.length) {\r\n\t\t\treturn branch.menu;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Generates and returns an applicable label to be used for screen readers.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param item   A menu item instance\r\n\t * @param label  Current label\r\n\t * @return Reader text\r\n\t */\r\n\tpublic getReaderLabel(branch: IExportMenuItem, label: string): string {\r\n\r\n\t\t// Strip any HTML from the label\r\n\t\tlabel = $utils.stripTags(label);\r\n\r\n\t\t// Add textual note if the branch is clickable\r\n\t\tif (branch.ascendants.length == 0) {\r\n\t\t\tlabel = label == \"...\" ? this.language.translate(\"Export\") : label;\r\n\t\t\tlabel += \" [\" + this.language.translate(\"Press ENTER or use arrow keys to navigate\") + \"]\";\r\n\t\t}\r\n\t\telse if (this.hasSubMenu(branch)) {\r\n\t\t\tlabel += \" [\" + this.language.translate(\"Click, tap or press ENTER to open\") + \"]\";\r\n\t\t}\r\n\t\telse if (branch.type == \"print\") {\r\n\t\t\tlabel = this.language.translate(\"Click, tap or press ENTER to print.\");\r\n\t\t}\r\n\t\telse if (this.typeClickable(branch.type)) {\r\n\t\t\tlabel = this.language.translate(\"Click, tap or press ENTER to export as %1.\", undefined, label);\r\n\t\t}\r\n\r\n\t\treturn this.adapter.apply(\"rederLabel\", {\r\n\t\t\tlabel: label,\r\n\t\t\tbranch: branch\r\n\t\t}).label;\r\n\t}\r\n\r\n\t/**\r\n\t * Getters and setters\r\n\t */\r\n\r\n\t/**\r\n\t * An HTML container to place the Menu in.\r\n\t *\r\n\t * A container must be an HTML element, because menu itself is HTML, and\r\n\t * cannot be placed into SVG.\r\n\t *\r\n\t * @param container Reference to container element\r\n\t * @todo Check if menu is already build. If it is, just move it to a new container\r\n\t */\r\n\tpublic set container(container: $type.Optional<HTMLElement>) {\r\n\t\tthis._container = container;\r\n\t\tthis.invalidate();\r\n\t}\r\n\r\n\t/**\r\n\t * @return Container\r\n\t */\r\n\tpublic get container(): $type.Optional<HTMLElement> {\r\n\t\treturn this._container;\r\n\t}\r\n\r\n\t/**\r\n\t * A list of menu items. Can be nested.\r\n\t *\r\n\t * @param items  Menu items\r\n\t */\r\n\tpublic set items(items: Array<IExportMenuItem>) {\r\n\t\tthis._items = items;\r\n\t\tthis.invalidate();\r\n\t}\r\n\r\n\t/**\r\n\t * @return Menu items\r\n\t */\r\n\tpublic get items(): Array<IExportMenuItem> {\r\n\t\treturn this._items;\r\n\t}\r\n\r\n\t/**\r\n\t * Sets main menu tag to place menu in.\r\n\t *\r\n\t * This also sets up how menu items are built.\r\n\t *\r\n\t * If you set this to \"ul\", menu items will be wrapped into `<li>` tags.\r\n\t *\r\n\t * If set to \"div\", menu items will be wrapped in `<div>` tags.\r\n\t *\r\n\t * @default \"ul\"\r\n\t * @param tag Tag to use for menu\r\n\t */\r\n\tpublic set tag(tag: \"ul\" | \"div\") {\r\n\t\tthis._menuTag = tag;\r\n\t\tthis._itemTag = tag == \"ul\" ? \"li\" : \"div\";\r\n\t\tthis.invalidate();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns current menu tag.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @return Menu tag (item that contains sub-items)\r\n\t */\r\n\tpublic get menuTag(): string {\r\n\t\treturn this.adapter.apply(\"menuTag\", {\r\n\t\t\ttag: this._menuTag\r\n\t\t}).tag;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns tag to wrap items into.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @return Item tag\r\n\t */\r\n\tpublic get itemTag(): string {\r\n\t\treturn this.adapter.apply(\"itemTag\", {\r\n\t\t\ttag: this._itemTag\r\n\t\t}).tag;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns menu label tag.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @return Label tag\r\n\t */\r\n\tpublic get labelTag(): string {\r\n\t\treturn this.adapter.apply(\"labelTag\", {\r\n\t\t\ttag: this._labelTag\r\n\t\t}).tag;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns icon tag.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @return Icon tag\r\n\t */\r\n\tpublic get iconTag(): string {\r\n\t\treturn this.adapter.apply(\"iconTag\", {\r\n\t\t\ttag: this._iconTag\r\n\t\t}).tag;\r\n\t}\r\n\r\n\t/**\r\n\t * A horizontal alignment for the menu placement.\r\n\t *\r\n\t * @param value Horizontal alignment\r\n\t */\r\n\tpublic set align(value: Align) {\r\n\t\tthis._align = value;\r\n\t\tthis.invalidate();\r\n\t}\r\n\r\n\t/**\r\n\t * @return Horizontal alignment\r\n\t */\r\n\tpublic get align(): Align {\r\n\t\treturn this.adapter.apply(\"align\", {\r\n\t\t\talign: this._align\r\n\t\t}).align;\r\n\t}\r\n\r\n\t/**\r\n\t * A vertical alignment for the menu placement.\r\n\t *\r\n\t * @param value Vertical alignment\r\n\t */\r\n\tpublic set verticalAlign(value: VerticalAlign) {\r\n\t\tthis._verticalAlign = value;\r\n\t\tthis.invalidate();\r\n\t}\r\n\r\n\t/**\r\n\t * @return Vertical alignment\r\n\t */\r\n\tpublic get verticalAlign(): VerticalAlign {\r\n\t\treturn this.adapter.apply(\"verticalAlign\", {\r\n\t\t\tverticalAlign: this._verticalAlign\r\n\t\t}).verticalAlign;\r\n\t}\r\n\r\n\t/**\r\n\t * Class name prefix.\r\n\t *\r\n\t * @default \"amexport\"\r\n\t * @param value Class name prefix\r\n\t */\r\n\tpublic set classPrefix(value: string) {\r\n\t\tthis._classPrefix = value;\r\n\t\tthis.invalidate();\r\n\t}\r\n\r\n\t/**\r\n\t * @return Class name prefix\r\n\t */\r\n\tpublic get classPrefix(): string {\r\n\t\treturn this.adapter.apply(\"classPrefix\", {\r\n\t\t\tclassPrefix: this._classPrefix\r\n\t\t}).classPrefix;\r\n\t}\r\n\r\n\t/**\r\n\t * Indicates whether [[ExportMenu]] should load external CSS to style itself.\r\n\t *\r\n\t * If set to `false`, the menu will not be styled, and will rely on some\r\n\t * external CSS.\r\n\t *\r\n\t * @default true\r\n\t * @param Should ExportMenu load its own CSS?\r\n\t */\r\n\tpublic set defaultStyles(value: boolean) {\r\n\t\tif (this._defaultStyles != value) {\r\n\t\t\tthis._defaultStyles = value;\r\n\t\t\tif (value) {\r\n\t\t\t\tthis.loadDefaultCSS();\r\n\t\t\t}\r\n\t\t}\r\n\t\tthis.invalidate();\r\n\t}\r\n\r\n\t/**\r\n\t * @return Should ExportMenu load its own CSS?\r\n\t */\r\n\tpublic get defaultStyles(): boolean {\r\n\t\treturn this.adapter.apply(\"defaultStyles\", {\r\n\t\t\tdefaultStyles: this._defaultStyles\r\n\t\t}).defaultStyles;\r\n\t}\r\n\r\n\t/**\r\n\t * Loads the default CSS.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic loadDefaultCSS(): void {\r\n\t\tthis._disposers.push(exportCSS($dom.getShadowRoot(this.container), this.classPrefix));\r\n\r\n\t\tif (this._element) {\r\n\t\t\tthis._element.style.display = \"\";\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A tab index for the menu.\r\n\t *\r\n\t * Tab index will influence the order in which elements on the chart and\r\n\t * the whole page are selected when pressing TAB key.\r\n\t *\r\n\t * @param value Tab index\r\n\t */\r\n\tpublic set tabindex(value: number) {\r\n\t\tthis._tabindex = value;\r\n\t\tthis.invalidate();\r\n\t}\r\n\r\n\t/**\r\n\t * @return Tab index\r\n\t */\r\n\tpublic get tabindex(): number {\r\n\t\treturn this.adapter.apply(\"tabindex\", {\r\n\t\t\ttabindex: this._tabindex\r\n\t\t}).tabindex;\r\n\t}\r\n\r\n\t/**\r\n\t * A [[Language]] instance.\r\n\t *\r\n\t * @param value An instance of [[Language]]\r\n\t */\r\n\tpublic set language(value: Language) {\r\n\t\tthis._language.set(value, value.events.on(\"localechanged\", (ev) => {\r\n\t\t\tthis.invalidate();\r\n\t\t}));\r\n\t\tthis.invalidate();\r\n\t}\r\n\r\n\t/**\r\n\t * @return A [[Language]] instance to be used\r\n\t */\r\n\tpublic get language(): Language {\r\n\t\tlet language = this._language.get();\r\n\r\n\t\tif (language == null) {\r\n\t\t\tlanguage = new Language();\r\n\r\n\t\t\t// TODO code duplication with `set language()`\r\n\t\t\tthis._language.set(language, language.events.on(\"localechanged\", (ev) => {\r\n\t\t\t\tthis.invalidate();\r\n\t\t\t}));\r\n\t\t}\r\n\r\n\t\treturn language;\r\n\t}\r\n\r\n\t/**\r\n\t * Controlling the menu\r\n\t */\r\n\r\n\t/**\r\n\t * Removes all active classes from menu items. Useful on touch devices and\r\n\t * keyboard navigation where open menu can be closed instantly by clicking or\r\n\t * tapping outside it.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic close(): void {\r\n\r\n\t\tif (this.isDisposed()) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tif (this._ignoreNextClose) {\r\n\t\t\tthis._ignoreNextClose = false;\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tif (this.closeOnClick) {\r\n\t\t\tthis._element.style.pointerEvents = \"none\";\r\n\t\t\tsetTimeout(() => {\r\n\t\t\t\tthis._element.style.pointerEvents = \"auto\";\r\n\t\t\t}, 100);\r\n\t\t}\r\n\r\n\t\tif (this._currentSelection) {\r\n\t\t\tthis.setBlur(this._currentSelection);\r\n\t\t\tthis._currentSelection = undefined;\r\n\t\t}\r\n\r\n\t\tif (this._element) {\r\n\t\t\tlet items = this._element.getElementsByClassName(\"active\");\r\n\t\t\tfor (let len = items.length, i = len - 1; i >= 0; i--) {\r\n\t\t\t\tif (items[i]) {\r\n\t\t\t\t\t$dom.removeClass(<HTMLElement>items[i], \"active\");\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.events.dispatchImmediately(\"closed\", {\r\n\t\t\ttype: \"closed\",\r\n\t\t\ttarget: this\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Selects a branch in the menu.\r\n\t *\r\n\t * Handles closing of currently open branch.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param branch Branch to select\r\n\t */\r\n\tpublic selectBranch(branch: IExportMenuItem): void {\r\n\r\n\t\tif (this.isDisposed()) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t// Cancel previous closure\r\n\t\tif (branch.closeTimeout) {\r\n\t\t\tthis.removeDispose(branch.closeTimeout);\r\n\t\t\tbranch.closeTimeout = undefined;\r\n\t\t}\r\n\r\n\t\t// Add active class\r\n\t\t$dom.addClass(branch.element, \"active\");\r\n\r\n\t\t// Set expanded\r\n\t\tif (branch.submenuElement) {\r\n\t\t\tbranch.submenuElement.setAttribute(\"aria-expanded\", \"true\");\r\n\t\t}\r\n\r\n\t\t// Remove current selection\r\n\t\tif (this._currentSelection && this._currentSelection !== branch && this._currentSelection.ascendants) {\r\n\t\t\t$iter.each($iter.concat($iter.fromArray([this._currentSelection]), this._currentSelection.ascendants.iterator()), (ascendant) => {\r\n\t\t\t\tif (!branch.ascendants.contains(ascendant) && branch !== ascendant) {\r\n\t\t\t\t\tthis.unselectBranch(ascendant, true);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\t// Select and/or cancel timeout for current ascendants\r\n\t\t$iter.each(branch.ascendants.iterator(), (ascendant) => {\r\n\t\t\tif (ascendant.closeTimeout) {\r\n\t\t\t\tthis.removeDispose(ascendant.closeTimeout);\r\n\t\t\t\tascendant.closeTimeout = undefined;\r\n\t\t\t}\r\n\t\t\t$dom.addClass(ascendant.element, \"active\");\r\n\t\t});\r\n\r\n\t\t// Log current selection\r\n\t\tthis._currentSelection = branch;\r\n\r\n\t\t// Invoke event\r\n\t\tif (this.events.isEnabled(\"branchselected\")) {\r\n\t\t\tconst event: AMEvent<this, IExportMenuEvents>[\"branchselected\"] = {\r\n\t\t\t\ttype: \"branchselected\",\r\n\t\t\t\ttarget: this,\r\n\t\t\t\tbranch: branch\r\n\t\t\t};\r\n\t\t\tthis.events.dispatchImmediately(\"branchselected\", event);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Unselects a branch. Also selects a branch one level up if necessary.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param branch Branch to unselect\r\n\t * @param simple If `true`, only the branch will be unselected without selecting parent branch\r\n\t */\r\n\tpublic unselectBranch(branch: IExportMenuItem, simple?: boolean): void {\r\n\r\n\t\tif (this.isDisposed()) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t// Remove active class\r\n\t\t$dom.removeClass(branch.element, \"active\");\r\n\r\n\t\t// Set expanded\r\n\t\tif (branch.submenuElement) {\r\n\t\t\tbranch.submenuElement.removeAttribute(\"aria-expanded\");\r\n\t\t}\r\n\r\n\t\t// Remove current selection\r\n\t\tif (this._currentSelection == branch) {\r\n\t\t\tthis._currentSelection = undefined;\r\n\t\t}\r\n\r\n\t\t// Invoke event\r\n\t\tif (this.events.isEnabled(\"branchunselected\")) {\r\n\t\t\tconst event: AMEvent<this, IExportMenuEvents>[\"branchunselected\"] = {\r\n\t\t\t\ttype: \"branchunselected\",\r\n\t\t\t\ttarget: this,\r\n\t\t\t\tbranch: branch\r\n\t\t\t};\r\n\t\t\tthis.events.dispatchImmediately(\"branchunselected\", event);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Delay unselection of a branch. This can still be cancelled in some other\r\n\t * place if the branch or its children regain focus.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param branch Branch to unselect\r\n\t * @param simple If `true`, only the branch will be unselected without selecting parent branch\r\n\t */\r\n\tpublic delayUnselectBranch(branch: IExportMenuItem, simple?: boolean): void {\r\n\r\n\t\tif (this.isDisposed()) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t// Schedule branch unselection\r\n\t\tif (branch.closeTimeout) {\r\n\t\t\tthis.removeDispose(branch.closeTimeout);\r\n\t\t\tbranch.closeTimeout = undefined;\r\n\t\t}\r\n\t\tbranch.closeTimeout = this.setTimeout(() => {\r\n\t\t\tthis.unselectBranch(branch, simple);\r\n\t\t}, this.closeDelay);\r\n\r\n\t\t// Schedule unselection of all ascendants\r\n\t\t// In case focus went away from the export menu altogether, this will ensure\r\n\t\t// that all items will be closed.\r\n\t\t// In case we're jumping to other menu item, those delayed unselections will\r\n\t\t// be cancelled by `selectBranch`\r\n\t\tif (simple !== true && branch.ascendants) {\r\n\t\t\t$iter.each(branch.ascendants.iterator(), (ascendant) => {\r\n\t\t\t\tthis.delayUnselectBranch(ascendant, true);\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Navigates the menu based on which direction kayboard key was pressed.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param key A key that was pressed\r\n\t */\r\n\tpublic moveSelection(key: KeyboardKeys): void {\r\n\r\n\t\tif (this.isDisposed()) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t// Check if there's a current selection\r\n\t\tif (!this._currentSelection) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tlet newSelection: $type.Optional<IExportMenuItem>;\r\n\r\n\t\tif (key == \"up\") {\r\n\t\t\t// Try moving up in current menu list, or to the last item if already\r\n\t\t\t// at the top\r\n\t\t\tnewSelection = this.getPrevSibling(this._currentSelection);\r\n\t\t}\r\n\t\telse if (key == \"down\") {\r\n\t\t\t// Try moving down in current menu list, or to the top item if already\r\n\t\t\t// at the bottom\r\n\t\t\tnewSelection = this.getNextSibling(this._currentSelection);\r\n\t\t}\r\n\t\telse if ((key == \"left\" && this.align == \"right\") || (key == \"right\" && this.align == \"left\")) {\r\n\t\t\tlet menu = this.getSubMenu(this._currentSelection);\r\n\r\n\t\t\t// Go one level-deeper\r\n\t\t\tif (menu != null) {\r\n\t\t\t\tnewSelection = menu[0];\r\n\t\t\t}\r\n\t\t}\r\n\t\telse if ((key == \"right\" && this.align == \"right\") || (key == \"left\" && this.align == \"left\")) {\r\n\t\t\t// Go one level-deeper\r\n\t\t\tnewSelection = this.getParentItem(this._currentSelection);\r\n\t\t}\r\n\r\n\t\tif (newSelection && newSelection !== this._currentSelection) {\r\n\t\t\tthis.selectBranch(newSelection);\r\n\t\t\tthis.setFocus(newSelection);\r\n\t\t\tthis._currentSelection = newSelection;\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns all siblings of a menu item, including this same menu item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param branch  Menu item\r\n\t * @return List of sibling menu items\r\n\t */\r\n\tpublic getSiblings(branch: IExportMenuItem): Array<IExportMenuItem> {\r\n\t\tlet parent = this.getParentItem(branch);\r\n\r\n\t\tif (parent && parent.menu) {\r\n\t\t\treturn parent.menu;\r\n\r\n\t\t} else {\r\n\t\t\treturn [];\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns menu items parent item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param branch  Menu item\r\n\t * @return Parent menu item\r\n\t */\r\n\tpublic getParentItem(branch: IExportMenuItem): $type.Optional<IExportMenuItem> {\r\n\t\tif (branch.ascendants && branch.ascendants.length) {\r\n\t\t\treturn branch.ascendants.getIndex(branch.ascendants.length - 1);\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn undefined;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns next sibling in the same menu branch. If there is no next sibling,\r\n\t * the first one is returned. If there is just one item, that item is\r\n\t * returned. Unsupported menu items are skipped.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param branch  Menu item to search siblings for\r\n\t * @return Menu item\r\n\t */\r\n\tpublic getNextSibling(branch: IExportMenuItem): IExportMenuItem {\r\n\t\tlet siblings = this.getSiblings(branch);\r\n\t\tif (siblings.length > 1) {\r\n\t\t\tlet next = siblings.indexOf(branch) + 1;\r\n\t\t\tnext = siblings.length == next ? 0 : next;\r\n\t\t\treturn siblings[next].unsupported ? this.getNextSibling(siblings[next]) : siblings[next];\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn branch;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns previous sibling in the same menu branch. If there is no next\r\n\t * sibling, the first one is returned. If there is just one item, that item is\r\n\t * returned. Unsupported menu items are skipped.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param branch  Menu item to search siblings for\r\n\t * @return Menu item\r\n\t */\r\n\tpublic getPrevSibling(branch: IExportMenuItem): IExportMenuItem {\r\n\t\tlet siblings = this.getSiblings(branch);\r\n\t\tif (siblings.length > 1) {\r\n\t\t\tlet prev = siblings.indexOf(branch) - 1;\r\n\t\t\tprev = prev == -1 ? siblings.length - 1 : prev;\r\n\t\t\treturn siblings[prev].unsupported ? this.getPrevSibling(siblings[prev]) : siblings[prev];\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn branch;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Attempts to set focus on particular menu element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param branch Menu item\r\n\t */\r\n\tpublic setFocus(branch: IExportMenuItem): void {\r\n\t\tif (branch.interactions) {\r\n\t\t\ttry {\r\n\t\t\t\t(<HTMLElement>branch.interactions.element).focus();\r\n\t\t\t}\r\n\t\t\tcatch (e) {\r\n\t\t\t\t// nothing\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Attempts to remove focus from the menu element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param branch Menu item\r\n\t */\r\n\tpublic setBlur(branch: IExportMenuItem): void {\r\n\t\tif (branch.interactions) {\r\n\t\t\ttry {\r\n\t\t\t\t(<HTMLElement>branch.interactions.element).blur();\r\n\t\t\t}\r\n\t\t\tcatch (e) {\r\n\t\t\t\t// nothing\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Hides the whole branch of menu.\r\n\t *\r\n\t * @param  branch  branch\r\n\t */\r\n\tpublic hideBranch(branch: IExportMenuItem): void {\r\n\t\tbranch.element.style.display = \"none\";\r\n\t}\r\n\r\n\t/**\r\n\t * Show the branch of menu.\r\n\t *\r\n\t * @param  branch  branch\r\n\t */\r\n\tpublic showBranch(branch: IExportMenuItem): void {\r\n\t\tbranch.element.style.display = \"\";\r\n\t}\r\n\r\n\t/**\r\n\t * The main element o fthe menu - usually `<ul>`.\r\n\t *\r\n\t * @since 4.10.6\r\n\t * @return Menu element\r\n\t */\r\n\tpublic get element(): $type.Optional<HTMLElement> {\r\n\t\treturn this._element;\r\n\t}\r\n\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}