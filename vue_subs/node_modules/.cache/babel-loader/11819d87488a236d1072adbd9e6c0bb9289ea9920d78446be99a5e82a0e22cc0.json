{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n/**\r\n * Functionality for drawing simple buttons.\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\nimport { Container } from \"../Container\";\nimport { Label } from \"./Label\";\nimport { RoundedRectangle } from \"../elements/RoundedRectangle\";\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\nimport { registry } from \"../Registry\";\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n/**\r\n * Button class is capable of drawing a simple rectangular button with\r\n * optionally rounded corners and an icon in it.\r\n *\r\n * @see {@link IButtonEvents} for a list of available events\r\n * @see {@link IButtonAdapters} for a list of available Adapters\r\n */\nvar Button = /** @class */function (_super) {\n  __extends(Button, _super);\n  /**\r\n   * Constructor\r\n   */\n  function Button() {\n    var _this =\n    // Init\n    _super.call(this) || this;\n    _this.className = \"Button\";\n    _this.tooltipY = 0;\n    // Set defaults\n    _this.iconPosition = \"left\";\n    _this.layout = \"horizontal\";\n    _this.contentAlign = \"center\";\n    _this.contentValign = \"middle\";\n    _this.padding(8, 16, 8, 16);\n    _this.setStateOnChildren = true;\n    var interfaceColors = new InterfaceColorSet();\n    // Create background\n    var background = _this.background;\n    background.fill = interfaceColors.getFor(\"secondaryButton\");\n    background.stroke = interfaceColors.getFor(\"secondaryButtonStroke\");\n    background.fillOpacity = 1;\n    background.strokeOpacity = 1;\n    background.cornerRadius(3, 3, 3, 3);\n    // Create the label element\n    _this.label = new Label();\n    _this.label.fill = interfaceColors.getFor(\"secondaryButtonText\");\n    ;\n    _this.label.shouldClone = false;\n    // Create default states\n    var hoverState = background.states.create(\"hover\");\n    hoverState.properties.fillOpacity = 1;\n    hoverState.properties.fill = interfaceColors.getFor(\"secondaryButtonHover\");\n    var downState = background.states.create(\"down\");\n    downState.transitionDuration = 100;\n    downState.properties.fill = interfaceColors.getFor(\"secondaryButtonDown\");\n    downState.properties.fillOpacity = 1;\n    // Set up accessibility\n    // A button should be always focusable\n    _this.role = \"button\";\n    _this.focusable = true;\n    // Apply theme\n    _this.applyTheme();\n    return _this;\n  }\n  Object.defineProperty(Button.prototype, \"icon\", {\n    /**\r\n     * @return Icon Sprite\r\n     */\n    get: function () {\n      return this._icon;\n    },\n    /**\r\n     * A [[Sprite]] to be used as an icon on button.\r\n     *\r\n     * @param icon Icon Sprite\r\n     */\n    set: function (icon) {\n      var currentIcon = this._icon;\n      if (currentIcon) {\n        //this._icon.dispose();\n        //this.removeDispose(currentIcon);\n        currentIcon.parent = undefined;\n      }\n      if (icon) {\n        this._icon = icon;\n        icon.parent = this;\n        icon.interactionsEnabled = false;\n        icon.shouldClone = false;\n        this.iconPosition = this.iconPosition;\n        this._disposers.push(icon);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Button.prototype, \"iconPosition\", {\n    /**\r\n     * @return Icon position\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"iconPosition\");\n    },\n    /**\r\n     * Icon position: \"left\" or \"right\".\r\n     *\r\n     * @default \"left\"\r\n     * @param position  Icon position\r\n     */\n    set: function (position) {\n      this.setPropertyValue(\"iconPosition\", position);\n      if (this.icon) {\n        if (position == \"left\") {\n          this.icon.toBack();\n        } else {\n          this.icon.toFront();\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Button.prototype, \"label\", {\n    /**\r\n     * @return Label element\r\n     */\n    get: function () {\n      return this._label;\n    },\n    /**\r\n     * [[Label]] element to be used for text.\r\n     *\r\n     * @param label element\r\n     */\n    set: function (label) {\n      if (this._label) {\n        //this._label.dispose();\n        this.removeDispose(this._label);\n      }\n      this._label = label;\n      if (label) {\n        label.parent = this;\n        label.interactionsEnabled = false;\n        this._disposers.push(this._label);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Creates a background element for the button.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @return Background element\r\n   */\n  Button.prototype.createBackground = function () {\n    return new RoundedRectangle();\n  };\n  /**\r\n   * Copies properties and other attributes.\r\n   *\r\n   * @param source  Source\r\n   */\n  Button.prototype.copyFrom = function (source) {\n    _super.prototype.copyFrom.call(this, source);\n    if (source.label) {\n      this.label.copyFrom(source.label);\n    }\n    if (source.icon) {\n      this.icon = source.icon.clone();\n    }\n  };\n  return Button;\n}(Container);\nexport { Button };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\nregistry.registeredClasses[\"Button\"] = Button;","map":{"version":3,"names":["Container","Label","RoundedRectangle","InterfaceColorSet","registry","Button","_super","__extends","_this","call","className","tooltipY","iconPosition","layout","contentAlign","contentValign","padding","setStateOnChildren","interfaceColors","background","fill","getFor","stroke","fillOpacity","strokeOpacity","cornerRadius","label","shouldClone","hoverState","states","create","properties","downState","transitionDuration","role","focusable","applyTheme","Object","defineProperty","prototype","get","_icon","set","icon","currentIcon","parent","undefined","interactionsEnabled","_disposers","push","getPropertyValue","position","setPropertyValue","toBack","toFront","_label","removeDispose","createBackground","copyFrom","source","clone","registeredClasses"],"sources":["../../../../../src/.internal/core/elements/Button.ts"],"sourcesContent":["/**\r\n * Functionality for drawing simple buttons.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Container, IContainerProperties, IContainerAdapters, IContainerEvents } from \"../Container\";\r\nimport { Sprite } from \"../Sprite\";\r\nimport { Label } from \"./Label\";\r\nimport { RoundedRectangle } from \"../elements/RoundedRectangle\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport { registry } from \"../Registry\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[Button]].\r\n */\r\nexport interface IButtonProperties extends IContainerProperties {\r\n\r\n\t/**\r\n\t * Icon (if available) position - left or right.\r\n\t */\r\n\ticonPosition?: \"left\" | \"right\";\r\n\r\n\t/**\r\n\t * Icon sprite\r\n\t */\r\n\ticon?: Sprite;\r\n}\r\n\r\n/**\r\n * Defines events for [[Button]].\r\n */\r\nexport interface IButtonEvents extends IContainerEvents { }\r\n\r\n/**\r\n * Defines adapters for [[Button]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IButtonAdapters extends IContainerAdapters, IButtonProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Button class is capable of drawing a simple rectangular button with\r\n * optionally rounded corners and an icon in it.\r\n *\r\n * @see {@link IButtonEvents} for a list of available events\r\n * @see {@link IButtonAdapters} for a list of available Adapters\r\n */\r\nexport class Button extends Container {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IButtonProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IButtonAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IButtonEvents;\r\n\r\n\t/**\r\n\t * Icon reference.\r\n\t */\r\n\tprotected _icon: Sprite;\r\n\r\n\t/**\r\n\t * [[Label]] element for button content.\r\n\t */\r\n\tprotected _label: $type.Optional<Label>;\r\n\r\n\t/**\r\n\t * A type for background.\r\n\t */\r\n\tpublic _background: RoundedRectangle;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"Button\";\r\n\r\n\t\tthis.tooltipY = 0;\r\n\r\n\t\t// Set defaults\r\n\t\tthis.iconPosition = \"left\";\r\n\t\tthis.layout = \"horizontal\";\r\n\t\tthis.contentAlign = \"center\";\r\n\t\tthis.contentValign = \"middle\";\r\n\t\tthis.padding(8, 16, 8, 16);\r\n\t\tthis.setStateOnChildren = true;\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\r\n\t\t// Create background\r\n\t\tlet background = this.background;\r\n\t\tbackground.fill = interfaceColors.getFor(\"secondaryButton\");\r\n\t\tbackground.stroke = interfaceColors.getFor(\"secondaryButtonStroke\");\r\n\t\tbackground.fillOpacity = 1;\r\n\t\tbackground.strokeOpacity = 1;\r\n\t\tbackground.cornerRadius(3, 3, 3, 3);\r\n\r\n\t\t// Create the label element\r\n\t\tthis.label = new Label();\r\n\t\tthis.label.fill = interfaceColors.getFor(\"secondaryButtonText\");;\r\n\t\tthis.label.shouldClone = false;\r\n\r\n\t\t// Create default states\r\n\t\tlet hoverState = background.states.create(\"hover\");\r\n\t\thoverState.properties.fillOpacity = 1;\r\n\t\thoverState.properties.fill = interfaceColors.getFor(\"secondaryButtonHover\");\r\n\r\n\t\tlet downState = background.states.create(\"down\");\r\n\t\tdownState.transitionDuration = 100;\r\n\t\tdownState.properties.fill = interfaceColors.getFor(\"secondaryButtonDown\");\r\n\t\tdownState.properties.fillOpacity = 1;\r\n\t\t// Set up accessibility\r\n\t\t// A button should be always focusable\r\n\t\tthis.role = \"button\";\r\n\t\tthis.focusable = true;\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * A [[Sprite]] to be used as an icon on button.\r\n\t *\r\n\t * @param icon Icon Sprite\r\n\t */\r\n\tpublic set icon(icon: Sprite) {\r\n\t\tlet currentIcon = this._icon;\r\n\t\tif (currentIcon) {\r\n\t\t\t//this._icon.dispose();\r\n\t\t\t//this.removeDispose(currentIcon);\r\n\t\t\tcurrentIcon.parent = undefined;\r\n\t\t}\r\n\t\tif (icon) {\r\n\t\t\tthis._icon = icon;\r\n\t\t\ticon.parent = this;\r\n\t\t\ticon.interactionsEnabled = false;\r\n\t\t\ticon.shouldClone = false;\r\n\t\t\tthis.iconPosition = this.iconPosition;\r\n\t\t\tthis._disposers.push(icon);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Icon Sprite\r\n\t */\r\n\tpublic get icon(): Sprite {\r\n\t\treturn this._icon;\r\n\t}\r\n\r\n\t/**\r\n\t * Icon position: \"left\" or \"right\".\r\n\t *\r\n\t * @default \"left\"\r\n\t * @param position  Icon position\r\n\t */\r\n\tpublic set iconPosition(position: \"left\" | \"right\") {\r\n\t\tthis.setPropertyValue(\"iconPosition\", position);\r\n\r\n\t\tif (this.icon) {\r\n\t\t\tif (position == \"left\") {\r\n\t\t\t\tthis.icon.toBack();\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.icon.toFront();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Icon position\r\n\t */\r\n\tpublic get iconPosition(): \"left\" | \"right\" {\r\n\t\treturn this.getPropertyValue(\"iconPosition\");\r\n\t}\r\n\r\n\t/**\r\n\t * [[Label]] element to be used for text.\r\n\t *\r\n\t * @param label element\r\n\t */\r\n\tpublic set label(label: $type.Optional<Label>) {\r\n\t\tif (this._label) {\r\n\t\t\t//this._label.dispose();\r\n\t\t\tthis.removeDispose(this._label);\r\n\t\t}\r\n\t\tthis._label = label;\r\n\t\tif (label) {\r\n\t\t\tlabel.parent = this;\r\n\t\t\tlabel.interactionsEnabled = false;\r\n\t\t\tthis._disposers.push(this._label);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Label element\r\n\t */\r\n\tpublic get label(): $type.Optional<Label> {\r\n\t\treturn this._label;\r\n\t}\r\n\r\n\t/**\r\n\t * Creates a background element for the button.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @return Background element\r\n\t */\r\n\tpublic createBackground(): this[\"_background\"] {\r\n\t\treturn new RoundedRectangle();\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Copies properties and other attributes.\r\n\t *\r\n\t * @param source  Source\r\n\t */\r\n\tpublic copyFrom(source: this): void {\r\n\t\tsuper.copyFrom(source);\r\n\t\tif (source.label) {\r\n\t\t\tthis.label.copyFrom(source.label)\r\n\t\t}\r\n\t\tif (source.icon) {\r\n\t\t\tthis.icon = source.icon.clone();\r\n\t\t}\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Button\"] = Button;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}