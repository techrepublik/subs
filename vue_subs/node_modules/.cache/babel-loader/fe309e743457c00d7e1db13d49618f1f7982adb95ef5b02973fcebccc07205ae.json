{"ast":null,"code":"/**\r\n * A collection of GeoJSON format-related utility functions.\r\n */\nimport * as $math from \"../../core/utils/Math\";\nimport * as $array from \"../../core/utils/Array\";\n/**\r\n * Normalizes a geo-point.\r\n *\r\n * @ignore Exclude from docs\r\n * @param geoPoint  Source geo-point\r\n * @return Normalized geo-point\r\n */\nexport function normalizePoint(geoPoint) {\n  var longitude = wrapAngleTo180(geoPoint.longitude);\n  var latitude = Math.asin(Math.sin(geoPoint.latitude * $math.RADIANS)) * $math.DEGREES;\n  var latitude180 = wrapAngleTo180(geoPoint.latitude);\n  if (Math.abs(latitude180) > 90) {\n    longitude = wrapAngleTo180(longitude + 180);\n  }\n  geoPoint.longitude = longitude;\n  geoPoint.latitude = latitude;\n  return geoPoint;\n}\n/**\r\n * Normalizes all points of a geo-line.\r\n *\r\n * @ignore Exclude from docs\r\n * @param multiline  Source geo-line\r\n * @return Normalized geo-line\r\n */\nexport function normalizeMultiline(multiline) {\n  $array.each(multiline, function (segment) {\n    $array.each(segment, function (point) {\n      normalizePoint(point);\n    });\n  });\n  return multiline;\n}\n/**\r\n * [wrapAngleTo180 description]\r\n *\r\n * @todo Description\r\n * @ignore Exclude from docs\r\n * @param angle  Angle\r\n * @return Angle\r\n */\nexport function wrapAngleTo180(angle) {\n  angle = angle % 360;\n  if (angle > 180) {\n    angle -= 360;\n  }\n  if (angle < -180) {\n    angle += 360;\n  }\n  return angle;\n}\n/**\r\n * Converts a geo point to a regular point object.\r\n *\r\n * @ignore Exclude from docs\r\n * @param geoPoint  Source geo point\r\n * @return Point\r\n */\nexport function geoToPoint(geoPoint) {\n  return {\n    x: geoPoint.longitude,\n    y: geoPoint.latitude\n  };\n}","map":{"version":3,"names":["$math","$array","normalizePoint","geoPoint","longitude","wrapAngleTo180","latitude","Math","asin","sin","RADIANS","DEGREES","latitude180","abs","normalizeMultiline","multiline","each","segment","point","angle","geoToPoint","x","y"],"sources":["../../../../../src/.internal/charts/map/Geo.ts"],"sourcesContent":["/**\r\n * A collection of GeoJSON format-related utility functions.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { IGeoPoint } from \"../../core/defs/IGeoPoint\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $array from \"../../core/utils/Array\";\r\n\r\n\r\n/**\r\n * Normalizes a geo-point.\r\n *\r\n * @ignore Exclude from docs\r\n * @param geoPoint  Source geo-point\r\n * @return Normalized geo-point\r\n */\r\nexport function normalizePoint(geoPoint: IGeoPoint): IGeoPoint {\r\n\tlet longitude = wrapAngleTo180(geoPoint.longitude);\r\n\tlet latitude = Math.asin(Math.sin((geoPoint.latitude * $math.RADIANS))) * $math.DEGREES;\r\n\r\n\tlet latitude180 = wrapAngleTo180(geoPoint.latitude);\r\n\r\n\tif (Math.abs(latitude180) > 90) {\r\n\t\tlongitude = wrapAngleTo180(longitude + 180);\r\n\t}\r\n\r\n\tgeoPoint.longitude = longitude;\r\n\tgeoPoint.latitude = latitude;\r\n\r\n\treturn geoPoint;\r\n}\r\n\r\n/**\r\n * Normalizes all points of a geo-line.\r\n *\r\n * @ignore Exclude from docs\r\n * @param multiline  Source geo-line\r\n * @return Normalized geo-line\r\n */\r\nexport function normalizeMultiline(multiline: Array<Array<IGeoPoint>>): Array<Array<IGeoPoint>> {\r\n\t$array.each(multiline, (segment) => {\r\n\t\t$array.each(segment, (point) => {\r\n\t\t\tnormalizePoint(point);\r\n\t\t});\r\n\t});\r\n\treturn multiline;\r\n}\r\n\r\n/**\r\n * [wrapAngleTo180 description]\r\n *\r\n * @todo Description\r\n * @ignore Exclude from docs\r\n * @param angle  Angle\r\n * @return Angle\r\n */\r\nexport function wrapAngleTo180(angle: number): number {\r\n\tangle = angle % 360;\r\n\r\n\tif (angle > 180) {\r\n\t\tangle -= 360;\r\n\t}\r\n\tif (angle < -180) {\r\n\t\tangle += 360;\r\n\t}\r\n\r\n\treturn angle;\r\n}\r\n\r\n/**\r\n * Converts a geo point to a regular point object.\r\n *\r\n * @ignore Exclude from docs\r\n * @param geoPoint  Source geo point\r\n * @return Point\r\n */\r\nexport function geoToPoint(geoPoint: IGeoPoint): IPoint {\r\n\treturn { x: geoPoint.longitude, y: geoPoint.latitude };\r\n}\r\n"],"mappings":"AAAA;;;AAYA,OAAO,KAAKA,KAAK,MAAM,uBAAuB;AAC9C,OAAO,KAAKC,MAAM,MAAM,wBAAwB;AAGhD;;;;;;;AAOA,OAAM,SAAUC,cAAcA,CAACC,QAAmB;EACjD,IAAIC,SAAS,GAAGC,cAAc,CAACF,QAAQ,CAACC,SAAS,CAAC;EAClD,IAAIE,QAAQ,GAAGC,IAAI,CAACC,IAAI,CAACD,IAAI,CAACE,GAAG,CAAEN,QAAQ,CAACG,QAAQ,GAAGN,KAAK,CAACU,OAAQ,CAAC,CAAC,GAAGV,KAAK,CAACW,OAAO;EAEvF,IAAIC,WAAW,GAAGP,cAAc,CAACF,QAAQ,CAACG,QAAQ,CAAC;EAEnD,IAAIC,IAAI,CAACM,GAAG,CAACD,WAAW,CAAC,GAAG,EAAE,EAAE;IAC/BR,SAAS,GAAGC,cAAc,CAACD,SAAS,GAAG,GAAG,CAAC;;EAG5CD,QAAQ,CAACC,SAAS,GAAGA,SAAS;EAC9BD,QAAQ,CAACG,QAAQ,GAAGA,QAAQ;EAE5B,OAAOH,QAAQ;AAChB;AAEA;;;;;;;AAOA,OAAM,SAAUW,kBAAkBA,CAACC,SAAkC;EACpEd,MAAM,CAACe,IAAI,CAACD,SAAS,EAAE,UAACE,OAAO;IAC9BhB,MAAM,CAACe,IAAI,CAACC,OAAO,EAAE,UAACC,KAAK;MAC1BhB,cAAc,CAACgB,KAAK,CAAC;IACtB,CAAC,CAAC;EACH,CAAC,CAAC;EACF,OAAOH,SAAS;AACjB;AAEA;;;;;;;;AAQA,OAAM,SAAUV,cAAcA,CAACc,KAAa;EAC3CA,KAAK,GAAGA,KAAK,GAAG,GAAG;EAEnB,IAAIA,KAAK,GAAG,GAAG,EAAE;IAChBA,KAAK,IAAI,GAAG;;EAEb,IAAIA,KAAK,GAAG,CAAC,GAAG,EAAE;IACjBA,KAAK,IAAI,GAAG;;EAGb,OAAOA,KAAK;AACb;AAEA;;;;;;;AAOA,OAAM,SAAUC,UAAUA,CAACjB,QAAmB;EAC7C,OAAO;IAAEkB,CAAC,EAAElB,QAAQ,CAACC,SAAS;IAAEkB,CAAC,EAAEnB,QAAQ,CAACG;EAAQ,CAAE;AACvD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}