{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n/**\r\n * Functionality related to inertia\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\nimport { BaseObject } from \"../Base\";\nimport { getInteraction } from \"./Interaction\";\nimport { AnimationDisposer } from \"../utils/Animation\";\nimport * as $type from \"../utils/Type\";\n/**\r\n * A point of inertia is to simulate gradually drecreasing motion even after\r\n * actual interaction by user, that caused it, has already ended.\r\n *\r\n * [[Inertia]] object will continue triggering the same [[Sprite]] handlers\r\n * as if the interaction was still happening, gradually reducing\r\n * shift/angle/scale values until full stop.\r\n *\r\n * Basically, from the target element's point of view, while inertia is\r\n * playing, it is still being interacted with by user, albeit with a\r\n * decreasing speed.\r\n */\nvar Inertia = /** @class */function (_super) {\n  __extends(Inertia, _super);\n  /**\r\n   * Constructor\r\n   */\n  function Inertia(interaction, type, point, startPoint) {\n    var _this =\n    // Init\n    _super.call(this) || this;\n    /**\r\n     * List of animations currently playing.\r\n     */\n    _this.animations = [];\n    _this.className = \"Inertia\";\n    _this.interaction = interaction;\n    _this.type = type;\n    _this.point = point;\n    _this.startPoint = startPoint;\n    // Make animations disposable\n    _this._disposers.push(new AnimationDisposer(_this.animations));\n    return _this;\n  }\n  Object.defineProperty(Inertia.prototype, \"x\", {\n    /**\r\n     * Returns current X coordinate.\r\n     *\r\n     * @return X\r\n     */\n    get: function () {\n      return this.point.x;\n    },\n    /**\r\n     * Sets current X coordinate.\r\n     *\r\n     * Will trigger \"drag\" event for the target element.\r\n     *\r\n     * @param value X\r\n     */\n    set: function (value) {\n      if ($type.isNumber(value)) {\n        this.point.x = value;\n        this.handleMove();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Inertia.prototype, \"y\", {\n    /**\r\n     * Returns current Y coordinate.\r\n     *\r\n     * @return Y\r\n     */\n    get: function () {\n      return this.point.y;\n    },\n    /**\r\n     * Sets current Y coordinate.\r\n     *\r\n     * Will trigger \"drag\" event for the target element.\r\n     *\r\n     * @param value Y\r\n     */\n    set: function (value) {\n      if ($type.isNumber(value)) {\n        this.point.y = value;\n        this.handleMove();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Simulates dragging of element.\r\n   */\n  Inertia.prototype.handleMove = function () {\n    // Prepare {InteractionEvent} object\n    if (this.interaction.events.isEnabled(\"drag\")) {\n      var imev = {\n        type: \"drag\",\n        target: this.interaction,\n        shift: {\n          x: this.x - this.startPoint.x,\n          y: this.y - this.startPoint.y\n        },\n        startPoint: this.startPoint,\n        point: {\n          x: this.x,\n          y: this.y\n        },\n        touch: false\n      };\n      // Call handler\n      this.interaction.events.dispatchImmediately(\"drag\", imev);\n    }\n  };\n  /**\r\n   * Finishes up the inertia animation. (removes reference to this animation\r\n   * object)\r\n   */\n  Inertia.prototype.done = function () {\n    // Remove inertia animation from the object\n    this.interaction.inertias.removeKey(this.type);\n    // Move ended\n    if (this.type === \"move\") {\n      getInteraction().processDragStop(this.interaction);\n    }\n    // Destroy\n    this.dispose();\n  };\n  return Inertia;\n}(BaseObject);\nexport { Inertia };","map":{"version":3,"names":["BaseObject","getInteraction","AnimationDisposer","$type","Inertia","_super","__extends","interaction","type","point","startPoint","_this","call","animations","className","_disposers","push","Object","defineProperty","prototype","get","x","set","value","isNumber","handleMove","y","events","isEnabled","imev","target","shift","touch","dispatchImmediately","done","inertias","removeKey","processDragStop","dispose"],"sources":["../../../../../src/.internal/core/interaction/Inertia.ts"],"sourcesContent":["/**\r\n * Functionality related to inertia\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { BaseObject } from \"../Base\";\r\nimport { getInteraction } from \"./Interaction\";\r\nimport { InteractionObject, IInteractionObjectEvents } from \"./InteractionObject\";\r\nimport { Animation, IAnimatable, AnimationDisposer } from \"../utils/Animation\";\r\nimport { AMEvent } from \"../utils/EventDispatcher\";\r\nimport { IPoint } from \"../defs/IPoint\";\r\nimport * as $type from \"../utils/Type\";\r\n\r\n/**\r\n * Defines a list of available inertia types.\r\n */\r\nexport type InertiaTypes = \"move\" | \"resize\";\r\n\r\n/**\r\n * A point of inertia is to simulate gradually drecreasing motion even after\r\n * actual interaction by user, that caused it, has already ended.\r\n *\r\n * [[Inertia]] object will continue triggering the same [[Sprite]] handlers\r\n * as if the interaction was still happening, gradually reducing\r\n * shift/angle/scale values until full stop.\r\n *\r\n * Basically, from the target element's point of view, while inertia is\r\n * playing, it is still being interacted with by user, albeit with a\r\n * decreasing speed.\r\n */\r\nexport class Inertia extends BaseObject implements IAnimatable {\r\n\r\n\t/**\r\n\t * Holds what type of inertia it is.\r\n\t */\r\n\tpublic type: InertiaTypes;\r\n\r\n\t/**\r\n\t * An element we're performing animation on.\r\n\t */\r\n\tpublic interaction: InteractionObject;\r\n\r\n\t/**\r\n\t * Starting pointer position. The position of pointer when we \"released\"\r\n\t * the element.\r\n\t */\r\n\tpublic startPoint: IPoint;\r\n\r\n\t/**\r\n\t * Current (simulated) pointer position.\r\n\t */\r\n\tpublic point: IPoint;\r\n\r\n\t/**\r\n\t * List of animations currently playing.\r\n\t */\r\n\tpublic animations: Array<Animation> = [];\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor(interaction: InteractionObject, type: InertiaTypes, point: IPoint, startPoint: IPoint) {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"Inertia\";\r\n\r\n\t\tthis.interaction = interaction;\r\n\t\tthis.type = type;\r\n\t\tthis.point = point;\r\n\t\tthis.startPoint = startPoint;\r\n\r\n\t\t// Make animations disposable\r\n\t\tthis._disposers.push(new AnimationDisposer(this.animations));\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Sets current X coordinate.\r\n\t *\r\n\t * Will trigger \"drag\" event for the target element.\r\n\t *\r\n\t * @param value X\r\n\t */\r\n\tpublic set x(value: number) {\r\n\t\tif ($type.isNumber(value)) {\r\n\t\t\tthis.point.x = value;\r\n\t\t\tthis.handleMove();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns current X coordinate.\r\n\t *\r\n\t * @return X\r\n\t */\r\n\tpublic get x(): number {\r\n\t\treturn this.point.x;\r\n\t}\r\n\r\n\t/**\r\n\t * Sets current Y coordinate.\r\n\t *\r\n\t * Will trigger \"drag\" event for the target element.\r\n\t *\r\n\t * @param value Y\r\n\t */\r\n\tpublic set y(value: number) {\r\n\t\tif ($type.isNumber(value)) {\r\n\t\t\tthis.point.y = value;\r\n\t\t\tthis.handleMove();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns current Y coordinate.\r\n\t *\r\n\t * @return Y\r\n\t */\r\n\tpublic get y(): number {\r\n\t\treturn this.point.y;\r\n\t}\r\n\r\n\t/**\r\n\t * Simulates dragging of element.\r\n\t */\r\n\tpublic handleMove() {\r\n\r\n\t\t// Prepare {InteractionEvent} object\r\n\t\tif (this.interaction.events.isEnabled(\"drag\")) {\r\n\t\t\tlet imev: AMEvent<InteractionObject, IInteractionObjectEvents>[\"drag\"] = {\r\n\t\t\t\ttype: \"drag\",\r\n\t\t\t\ttarget: this.interaction,\r\n\t\t\t\tshift: {\r\n\t\t\t\t\tx: this.x - this.startPoint.x,\r\n\t\t\t\t\ty: this.y - this.startPoint.y\r\n\t\t\t\t},\r\n\t\t\t\tstartPoint: this.startPoint,\r\n\t\t\t\tpoint: {\r\n\t\t\t\t\tx: this.x,\r\n\t\t\t\t\ty: this.y\r\n\t\t\t\t},\r\n\t\t\t\ttouch: false\r\n\t\t\t};\r\n\r\n\t\t\t// Call handler\r\n\t\t\tthis.interaction.events.dispatchImmediately(\"drag\", imev);\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Finishes up the inertia animation. (removes reference to this animation\r\n\t * object)\r\n\t */\r\n\tpublic done() {\r\n\r\n\t\t// Remove inertia animation from the object\r\n\t\tthis.interaction.inertias.removeKey(this.type);\r\n\r\n\t\t// Move ended\r\n\t\tif (this.type === \"move\") {\r\n\t\t\tgetInteraction().processDragStop(this.interaction);\r\n\t\t}\r\n\r\n\t\t// Destroy\r\n\t\tthis.dispose();\r\n\r\n\t}\r\n\r\n}\r\n"],"mappings":";AAAA;;;;AAIA;;;;;;AAMA,SAASA,UAAU,QAAQ,SAAS;AACpC,SAASC,cAAc,QAAQ,eAAe;AAE9C,SAAiCC,iBAAiB,QAAQ,oBAAoB;AAG9E,OAAO,KAAKC,KAAK,MAAM,eAAe;AAOtC;;;;;;;;;;;;AAYA,IAAAC,OAAA,0BAAAC,MAAA;EAA6BC,SAAA,CAAAF,OAAA,EAAAC,MAAA;EA4B5B;;;EAGA,SAAAD,QAAYG,WAA8B,EAAEC,IAAkB,EAAEC,KAAa,EAAEC,UAAkB;IAAjG,IAAAC,KAAA;IAEC;IACAN,MAAA,CAAAO,IAAA,MAAO;IAXR;;;IAGOD,KAAA,CAAAE,UAAU,GAAqB,EAAE;IASvCF,KAAI,CAACG,SAAS,GAAG,SAAS;IAE1BH,KAAI,CAACJ,WAAW,GAAGA,WAAW;IAC9BI,KAAI,CAACH,IAAI,GAAGA,IAAI;IAChBG,KAAI,CAACF,KAAK,GAAGA,KAAK;IAClBE,KAAI,CAACD,UAAU,GAAGA,UAAU;IAE5B;IACAC,KAAI,CAACI,UAAU,CAACC,IAAI,CAAC,IAAId,iBAAiB,CAACS,KAAI,CAACE,UAAU,CAAC,CAAC;;EAE7D;EASAI,MAAA,CAAAC,cAAA,CAAWd,OAAA,CAAAe,SAAA,KAAC;IAOZ;;;;;SAKA,SAAAC,CAAA;MACC,OAAO,IAAI,CAACX,KAAK,CAACY,CAAC;IACpB,CAAC;IArBD;;;;;;;SAOA,SAAAC,CAAaC,KAAa;MACzB,IAAIpB,KAAK,CAACqB,QAAQ,CAACD,KAAK,CAAC,EAAE;QAC1B,IAAI,CAACd,KAAK,CAACY,CAAC,GAAGE,KAAK;QACpB,IAAI,CAACE,UAAU,EAAE;;IAEnB,CAAC;;;;EAkBDR,MAAA,CAAAC,cAAA,CAAWd,OAAA,CAAAe,SAAA,KAAC;IAOZ;;;;;SAKA,SAAAC,CAAA;MACC,OAAO,IAAI,CAACX,KAAK,CAACiB,CAAC;IACpB,CAAC;IArBD;;;;;;;SAOA,SAAAJ,CAAaC,KAAa;MACzB,IAAIpB,KAAK,CAACqB,QAAQ,CAACD,KAAK,CAAC,EAAE;QAC1B,IAAI,CAACd,KAAK,CAACiB,CAAC,GAAGH,KAAK;QACpB,IAAI,CAACE,UAAU,EAAE;;IAEnB,CAAC;;;;EAWD;;;EAGOrB,OAAA,CAAAe,SAAA,CAAAM,UAAU,GAAjB;IAEC;IACA,IAAI,IAAI,CAAClB,WAAW,CAACoB,MAAM,CAACC,SAAS,CAAC,MAAM,CAAC,EAAE;MAC9C,IAAIC,IAAI,GAAiE;QACxErB,IAAI,EAAE,MAAM;QACZsB,MAAM,EAAE,IAAI,CAACvB,WAAW;QACxBwB,KAAK,EAAE;UACNV,CAAC,EAAE,IAAI,CAACA,CAAC,GAAG,IAAI,CAACX,UAAU,CAACW,CAAC;UAC7BK,CAAC,EAAE,IAAI,CAACA,CAAC,GAAG,IAAI,CAAChB,UAAU,CAACgB;SAC5B;QACDhB,UAAU,EAAE,IAAI,CAACA,UAAU;QAC3BD,KAAK,EAAE;UACNY,CAAC,EAAE,IAAI,CAACA,CAAC;UACTK,CAAC,EAAE,IAAI,CAACA;SACR;QACDM,KAAK,EAAE;OACP;MAED;MACA,IAAI,CAACzB,WAAW,CAACoB,MAAM,CAACM,mBAAmB,CAAC,MAAM,EAAEJ,IAAI,CAAC;;EAG3D,CAAC;EAED;;;;EAIOzB,OAAA,CAAAe,SAAA,CAAAe,IAAI,GAAX;IAEC;IACA,IAAI,CAAC3B,WAAW,CAAC4B,QAAQ,CAACC,SAAS,CAAC,IAAI,CAAC5B,IAAI,CAAC;IAE9C;IACA,IAAI,IAAI,CAACA,IAAI,KAAK,MAAM,EAAE;MACzBP,cAAc,EAAE,CAACoC,eAAe,CAAC,IAAI,CAAC9B,WAAW,CAAC;;IAGnD;IACA,IAAI,CAAC+B,OAAO,EAAE;EAEf,CAAC;EAEF,OAAAlC,OAAC;AAAD,CAAC,CA5I4BJ,UAAU","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}