{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n/**\r\n * Module contains functionality related to [[Sprite]] states.\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\nimport { BaseObject } from \"./Base\";\nimport { registry } from \"./Registry\";\nimport { Adapter } from \"./utils/Adapter\";\nimport { List, ListDisposer } from \"./utils/List\";\nimport { toColor } from \"./utils/Color\";\nimport { percent } from \"./utils/Percent\";\nimport * as $utils from \"./utils/Utils\";\nimport * as $ease from \"./utils/Ease\";\nimport * as $object from \"./utils/Object\";\nimport * as $type from \"./utils/Type\";\n/**\r\n * Defines a state for [[Sprite]].\r\n *\r\n * A \"state\" is a special object that has all the same properties as the\r\n * [[Sprite]] of the same type, and which can be used to quickly apply a set\r\n * of property values. (set state)\r\n *\r\n * When [[Sprite]] (or any object that extends Sprite) is created it creates a\r\n * \"default\" state. You can modify the \"default\" state so that when the Sprite\r\n * returns to default state certain properties are added.\r\n *\r\n * Default state can be accessed using Sprite's `defaultState` getter.\r\n *\r\n * ```TypeScript\r\n * sprite.defaultState.properties.fillOpacity = 0.5;\r\n * ```\r\n * ```JavaScript\r\n * sprite.defaultState.properties.fillOpacity = 0.5;\r\n * ```\r\n * ```JSON\r\n * {\r\n *   // ...\r\n *   \"defaultState\": {\r\n *     \"properties\": {\r\n *       \"fillOpacity\": 0.5\r\n *     }\r\n *   }\r\n * }\r\n * ```\r\n *\r\n * If Sprite is \"hoverable\", it automatically adds a \"hover\" state, which is\r\n * applied when it has a cursor over it.\r\n *\r\n * ```TypeScript\r\n * let hoverstate = sprite.states.create(\"hover\");\r\n * hoverstate.properties.fillOpacity = 1;\r\n * ```\r\n * ```JavaScript\r\n * var hoverstate = sprite.states.create(\"hover\");\r\n * hoverstate.properties.fillOpacity = 1;\r\n * ```\r\n * ```JSON\r\n * {\r\n *   // ...\r\n *   \"states\": {\r\n *     \"hover\": {\r\n *       \"properties\": {\r\n *         \"fillOpacity\": 0.5\r\n *       }\r\n *     }\r\n *   }\r\n * }\r\n * ```\r\n *\r\n * The above will automatically apply \"hover\" state when the Sprite is hovered,\r\n * thus will set its `fillOpacity` property to 1, and will reset it to 0.5 when\r\n * it's no longer hovered.\r\n *\r\n * Every object that inherits from [[Sprite]] can and will add their own\r\n * properties to the available list.\r\n *\r\n * User can create their own states, and apply them as needed:\r\n *\r\n * ```TypeScript\r\n * let myCustomState = sprite.states.create(\"mystate\");\r\n * myCustomState.properties.fillOpacity = 0.5;\r\n * myCustomState.properties.strokeOpacity = 0.8;\r\n * sprite.setState(\"mystate\");\r\n * ```\r\n * ```JavaScript\r\n * var myCustomState = sprite.states.create(\"mystate\");\r\n * myCustomState.properties.fillOpacity = 0.5;\r\n * myCustomState.properties.strokeOpacity = 0.8;\r\n * sprite.setState(\"mystate\");\r\n * ```\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v4/concepts/states/}\r\n * @important\r\n */\nvar SpriteState = /** @class */function (_super) {\n  __extends(SpriteState, _super);\n  /**\r\n   * Constructor\r\n   */\n  function SpriteState() {\n    var _this =\n    // Init\n    _super.call(this) || this;\n    /**\r\n     * Duration of the transition to this state. 0 means instantenous transition.\r\n     * Any number means the [[Sprite]] will transit smoothly to this state,\r\n     * animating all animatable properties.\r\n     *\r\n     * @default 0\r\n     * @see {@link https://www.amcharts.com/docs/v4/concepts/animations/} for more info about animations\r\n     */\n    _this.transitionDuration = 0;\n    /**\r\n     * Easing function to use when transitioning to this state.\r\n     *\r\n     * @default cubicOut\r\n     * @see {@link Ease}\r\n     * @see {@link https://www.amcharts.com/docs/v4/concepts/animations/} for more info about animations\r\n     */\n    _this.transitionEasing = $ease.cubicOut;\n    /**\r\n     * Collection of properties and their values that should be applied to [[Sprite]]\r\n     * when switching to this State.\r\n     *\r\n     * The property values set on a [[SpriteState]] will override the ones set\r\n     * directly on a [[Sprite]].\r\n     */\n    _this.properties = {};\n    /**\r\n     * A collection of key/value pairs that can be used to bind specific Sprite\r\n     * properties to [[DataItem]].\r\n     *\r\n     * For example: `fill` property can be bound to `myCustomColor` field in\r\n     * DataItem. The Sprite will automatically get the value for `fill` from its\r\n     * DataItem.\r\n     *\r\n     * SpriteState-specific binding will override binding set directly on\r\n     * [[Sprite]]. I.e. you can make Sprite use different fill color on hover by\r\n     * adding a `fill` binding to a different DataItem key for Sprite's \"hover\"\r\n     * state object.\r\n     *\r\n     * @see {@link Sprite}\r\n     */\n    _this.propertyFields = {};\n    //public propertyFields: Dictionary<keyof this[\"_properties\"], string> = new Dictionary<keyof this[\"_properties\"], string>();;\n    /**\r\n     * A list of [[Filter]] elements to be applied to the relative [[Sprite]]\r\n     * when switching to this State.\r\n     *\r\n     * @param {List}\r\n     */\n    _this.filters = new List();\n    /**\r\n     * Identifies if this object is a \"template\" and should not be treated as\r\n     * real object that is drawn or actually used in the chart.\r\n     */\n    _this.isTemplate = false;\n    _this.className = \"SpriteState\";\n    // Make filter list disposable\n    _this._disposers.push(new ListDisposer(_this.filters));\n    // Apply theme\n    _this.applyTheme();\n    return _this;\n  }\n  Object.defineProperty(SpriteState.prototype, \"adapter\", {\n    /**\r\n     * Holds Adapter.\r\n     */\n    get: function () {\n      var _this = this;\n      if (!this._adapterO) {\n        this._adapterO = new Adapter(this);\n        // Decorate adapter with events so that we can apply its settings whenever\n        // it is modified\n        this._adapterO.events.on(\"inserted\", function (ev) {\n          _this[ev.newValue.key] = _this[ev.newValue.key];\n        }, undefined, false);\n        this._adapterO.events.on(\"removed\", function (ev) {\n          _this[ev.newValue.key] = _this[ev.newValue.key];\n        }, undefined, false);\n      }\n      return this._adapterO;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Returns [[Sprite]] element's property value.\r\n   *\r\n   * Will check if there are any bindings with [[DataItem]] and if there are\r\n   * any method callbacks set up for the specific property.\r\n   *\r\n   * @param propertyName  Property name\r\n   * @return Property value\r\n   */\n  SpriteState.prototype.getPropertyValue = function (propertyName) {\n    var propValue = this.properties[propertyName];\n    var sprite = this.sprite;\n    if (sprite) {\n      var fieldName = this.propertyFields[propertyName];\n      if ($type.hasValue(fieldName)) {\n        if (sprite.dataItem) {\n          propValue = sprite.dataItem.dataContext[fieldName];\n        }\n        if (propValue == undefined) {\n          propValue = \"__unset\";\n        }\n      }\n      // Apply adapters\n      // If the value itself is undefined, we're going to pass in Sprite's\n      // value to adapters\n      // @todo get rid of <any>\n      if (!$type.hasValue(propValue)) {\n        var spriteValue = sprite.getPropertyValue(propertyName);\n        if (this._adapterO) {\n          propValue = this._adapterO.apply(propertyName, spriteValue);\n        } else {\n          propValue = spriteValue;\n        }\n        if (propValue == spriteValue) {\n          propValue = undefined;\n        }\n      } else {\n        if (this._adapterO) {\n          propValue = this._adapterO.apply(propertyName, propValue);\n        }\n      }\n      /*let method = this.propertyMethods.getKey(propertyName);\r\n      if (method) {\r\n          propValue = method(sprite, propertyName);\r\n      }*/\n    }\n    return propValue;\n  };\n  /**\r\n   * Copies all property and style values from another [[SpriteState]] object.\r\n   *\r\n   * @param source  Source [[SpriteState]]\r\n   */\n  SpriteState.prototype.copyFrom = function (source) {\n    if (source && source != this) {\n      this.transitionDuration = source.transitionDuration;\n      this.transitionEasing = source.transitionEasing;\n      $utils.copyProperties(source.properties, this.properties);\n      $utils.copyProperties(source.propertyFields, this.propertyFields);\n      this.filters.copyFrom(source.filters);\n      if (source._adapterO) {\n        this.adapter.copyFrom(source._adapterO);\n      }\n    }\n  };\n  Object.defineProperty(SpriteState.prototype, \"allValues\", {\n    /**\r\n     * Returns all values that should be applied by the SpriteState.\r\n     *\r\n     * It takes adapters into account.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @return Properties\r\n     * @todo Add adapter values\r\n     * @todo proper type this[\"_properties\"]\r\n     */\n    get: function () {\n      var _this = this;\n      // Init return value\n      var res = {};\n      // Apply adapters to all values\n      $object.each(this.properties, function (prop, value) {\n        res[prop] = _this.getPropertyValue(prop);\n      });\n      // Cycle through all adapters and add values for missing properties\n      if (this._adapterO) {\n        var keys = this._adapterO.keys();\n        $object.each(keys, function (_x, prop) {\n          var value = _this.getPropertyValue(prop);\n          res[prop] = value;\n        });\n      }\n      // Cycle through all property fileds and add values for missing properties\n      var propertyFields = this.propertyFields;\n      $object.each(propertyFields, function (prop) {\n        var value = _this.getPropertyValue(prop);\n        res[prop] = value;\n      });\n      return res;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Resets the State to initial state - no values or Filters applied.\r\n   */\n  SpriteState.prototype.reset = function () {\n    this.properties = {};\n    this.filters.clear();\n  };\n  /**\r\n   * Processes JSON-based config before it is applied to the object.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param config  Config\r\n   */\n  SpriteState.prototype.processConfig = function (config) {\n    if ($type.hasValue(config) && $type.hasValue(config[\"properties\"])) {\n      $object.each(config[\"properties\"], function (key, value) {\n        if ($type.isString(value)) {\n          if (value.match(/^[0-9.\\-]+\\%$/)) {\n            config[\"properties\"][key] = percent($type.toNumber(value));\n          } else if (value.match(/^\\#[0-9abcdef]{3,}$/i)) {\n            config[\"properties\"][key] = toColor(value);\n          }\n        }\n      });\n    }\n    _super.prototype.processConfig.call(this, config);\n  };\n  /**\r\n   * Adds easing functions to \"function\" fields.\r\n   *\r\n   * @param field  Field name\r\n   * @return Assign as function?\r\n   */\n  SpriteState.prototype.asFunction = function (field) {\n    return field == \"transitionEasing\" || _super.prototype.asIs.call(this, field);\n  };\n  return SpriteState;\n}(BaseObject);\nexport { SpriteState };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\nregistry.registeredClasses[\"SpriteState\"] = SpriteState;","map":{"version":3,"names":["BaseObject","registry","Adapter","List","ListDisposer","toColor","percent","$utils","$ease","$object","$type","SpriteState","_super","__extends","_this","call","transitionDuration","transitionEasing","cubicOut","properties","propertyFields","filters","isTemplate","className","_disposers","push","applyTheme","Object","defineProperty","prototype","get","_adapterO","events","on","ev","newValue","key","undefined","getPropertyValue","propertyName","propValue","sprite","fieldName","hasValue","dataItem","dataContext","spriteValue","apply","copyFrom","source","copyProperties","adapter","res","each","prop","value","keys","_x","reset","clear","processConfig","config","isString","match","toNumber","asFunction","field","asIs","registeredClasses"],"sources":["../../../../src/.internal/core/SpriteState.ts"],"sourcesContent":["/**\r\n * Module contains functionality related to [[Sprite]] states.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { BaseObject } from \"./Base\";\r\nimport { registry } from \"./Registry\";\r\nimport { Adapter } from \"./utils/Adapter\";\r\nimport { List, ListDisposer } from \"./utils/List\";\r\nimport { Filter } from \"./rendering/filters/Filter\";\r\nimport { Sprite } from \"./Sprite\";\r\n\r\nimport { toColor } from \"./utils/Color\";\r\nimport { percent } from \"./utils/Percent\";\r\nimport * as $utils from \"./utils/Utils\";\r\nimport * as $ease from \"./utils/Ease\";\r\nimport * as $object from \"./utils/Object\";\r\nimport * as $type from \"./utils/Type\";\r\n\r\n/**\r\n * Defines a state for [[Sprite]].\r\n *\r\n * A \"state\" is a special object that has all the same properties as the\r\n * [[Sprite]] of the same type, and which can be used to quickly apply a set\r\n * of property values. (set state)\r\n *\r\n * When [[Sprite]] (or any object that extends Sprite) is created it creates a\r\n * \"default\" state. You can modify the \"default\" state so that when the Sprite\r\n * returns to default state certain properties are added.\r\n *\r\n * Default state can be accessed using Sprite's `defaultState` getter.\r\n *\r\n * ```TypeScript\r\n * sprite.defaultState.properties.fillOpacity = 0.5;\r\n * ```\r\n * ```JavaScript\r\n * sprite.defaultState.properties.fillOpacity = 0.5;\r\n * ```\r\n * ```JSON\r\n * {\r\n *   // ...\r\n *   \"defaultState\": {\r\n *     \"properties\": {\r\n *       \"fillOpacity\": 0.5\r\n *     }\r\n *   }\r\n * }\r\n * ```\r\n *\r\n * If Sprite is \"hoverable\", it automatically adds a \"hover\" state, which is\r\n * applied when it has a cursor over it.\r\n *\r\n * ```TypeScript\r\n * let hoverstate = sprite.states.create(\"hover\");\r\n * hoverstate.properties.fillOpacity = 1;\r\n * ```\r\n * ```JavaScript\r\n * var hoverstate = sprite.states.create(\"hover\");\r\n * hoverstate.properties.fillOpacity = 1;\r\n * ```\r\n * ```JSON\r\n * {\r\n *   // ...\r\n *   \"states\": {\r\n *     \"hover\": {\r\n *       \"properties\": {\r\n *         \"fillOpacity\": 0.5\r\n *       }\r\n *     }\r\n *   }\r\n * }\r\n * ```\r\n *\r\n * The above will automatically apply \"hover\" state when the Sprite is hovered,\r\n * thus will set its `fillOpacity` property to 1, and will reset it to 0.5 when\r\n * it's no longer hovered.\r\n *\r\n * Every object that inherits from [[Sprite]] can and will add their own\r\n * properties to the available list.\r\n *\r\n * User can create their own states, and apply them as needed:\r\n *\r\n * ```TypeScript\r\n * let myCustomState = sprite.states.create(\"mystate\");\r\n * myCustomState.properties.fillOpacity = 0.5;\r\n * myCustomState.properties.strokeOpacity = 0.8;\r\n * sprite.setState(\"mystate\");\r\n * ```\r\n * ```JavaScript\r\n * var myCustomState = sprite.states.create(\"mystate\");\r\n * myCustomState.properties.fillOpacity = 0.5;\r\n * myCustomState.properties.strokeOpacity = 0.8;\r\n * sprite.setState(\"mystate\");\r\n * ```\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v4/concepts/states/}\r\n * @important\r\n */\r\nexport class SpriteState<P, A> extends BaseObject {\r\n\r\n\t/**\r\n\t * Defines property types.\r\n\t */\r\n\tpublic _properties!: P;\r\n\r\n\t/**\r\n\t * Defines adapter types.\r\n\t */\r\n\tpublic _adapter!: A;\r\n\r\n\t/**\r\n\t * Title of the state, i.e. \"default\", \"hidden\", etc.\r\n\t */\r\n\tpublic name: string;\r\n\r\n\t/**\r\n\t * Reference to [[Sprite]] element this State is for.\r\n\t */\r\n\tpublic sprite: $type.Optional<Sprite>;\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic _adapterO: Adapter<this, A>;\r\n\r\n\t/**\r\n\t * Holds Adapter.\r\n\t */\r\n\tpublic get adapter(): Adapter<this, A> {\r\n\t\tif (!this._adapterO) {\r\n\t\t\tthis._adapterO = new Adapter<this, A>(this);\r\n\r\n\t\t\t// Decorate adapter with events so that we can apply its settings whenever\r\n\t\t\t// it is modified\r\n\t\t\tthis._adapterO.events.on(\"inserted\", (ev: any) => {\r\n\t\t\t\t(<any>this)[ev.newValue.key] = (<any>this)[ev.newValue.key];\r\n\t\t\t}, undefined, false);\r\n\t\t\tthis._adapterO.events.on(\"removed\", (ev: any) => {\r\n\t\t\t\t(<any>this)[ev.newValue.key] = (<any>this)[ev.newValue.key];\r\n\t\t\t}, undefined, false);\r\n\t\t}\r\n\t\treturn this._adapterO;\r\n\t}\r\n\r\n\t/**\r\n\t * Duration of the transition to this state. 0 means instantenous transition.\r\n\t * Any number means the [[Sprite]] will transit smoothly to this state,\r\n\t * animating all animatable properties.\r\n\t *\r\n\t * @default 0\r\n\t * @see {@link https://www.amcharts.com/docs/v4/concepts/animations/} for more info about animations\r\n\t */\r\n\tpublic transitionDuration: number = 0;\r\n\r\n\t/**\r\n\t * Easing function to use when transitioning to this state.\r\n\t *\r\n\t * @default cubicOut\r\n\t * @see {@link Ease}\r\n\t * @see {@link https://www.amcharts.com/docs/v4/concepts/animations/} for more info about animations\r\n\t */\r\n\tpublic transitionEasing: (value: number) => number = $ease.cubicOut;\r\n\r\n\t/**\r\n\t * Collection of properties and their values that should be applied to [[Sprite]]\r\n\t * when switching to this State.\r\n\t *\r\n\t * The property values set on a [[SpriteState]] will override the ones set\r\n\t * directly on a [[Sprite]].\r\n\t */\r\n\tpublic properties: P = <P>{};\r\n\r\n\t/**\r\n\t * A collection of key/value pairs that can be used to bind specific Sprite\r\n\t * properties to [[DataItem]].\r\n\t *\r\n\t * For example: `fill` property can be bound to `myCustomColor` field in\r\n\t * DataItem. The Sprite will automatically get the value for `fill` from its\r\n\t * DataItem.\r\n\t *\r\n\t * SpriteState-specific binding will override binding set directly on\r\n\t * [[Sprite]]. I.e. you can make Sprite use different fill color on hover by\r\n\t * adding a `fill` binding to a different DataItem key for Sprite's \"hover\"\r\n\t * state object.\r\n\t *\r\n\t * @see {@link Sprite}\r\n\t */\r\n\tpublic propertyFields: { [index in keyof this[\"_properties\"]]?: string } = {};\r\n\t//public propertyFields: Dictionary<keyof this[\"_properties\"], string> = new Dictionary<keyof this[\"_properties\"], string>();;\r\n\r\n\t/**\r\n\t * A list of [[Filter]] elements to be applied to the relative [[Sprite]]\r\n\t * when switching to this State.\r\n\t *\r\n\t * @param {List}\r\n\t */\r\n\tpublic filters = new List<Filter>();\r\n\r\n\t/**\r\n\t * Identifies if this object is a \"template\" and should not be treated as\r\n\t * real object that is drawn or actually used in the chart.\r\n\t */\r\n\tpublic isTemplate: boolean = false;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"SpriteState\";\r\n\r\n\t\t// Make filter list disposable\r\n\t\tthis._disposers.push(new ListDisposer(this.filters));\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns [[Sprite]] element's property value.\r\n\t *\r\n\t * Will check if there are any bindings with [[DataItem]] and if there are\r\n\t * any method callbacks set up for the specific property.\r\n\t *\r\n\t * @param propertyName  Property name\r\n\t * @return Property value\r\n\t */\r\n\tpublic getPropertyValue<Key extends keyof P>(propertyName: Key): P[Key] {\r\n\t\tlet propValue: any = this.properties[propertyName];\r\n\t\tlet sprite: $type.Optional<Sprite> = this.sprite;\r\n\r\n\t\tif (sprite) {\r\n\t\t\tlet fieldName: string = this.propertyFields[propertyName];\r\n\r\n\t\t\tif ($type.hasValue(fieldName)) {\r\n\t\t\t\tif (sprite.dataItem) {\r\n\t\t\t\t\tpropValue = (<any>sprite.dataItem.dataContext)[fieldName];\r\n\t\t\t\t}\r\n\t\t\t\tif(propValue == undefined){\r\n\t\t\t\t\tpropValue = \"__unset\"\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// Apply adapters\r\n\t\t\t// If the value itself is undefined, we're going to pass in Sprite's\r\n\t\t\t// value to adapters\r\n\t\t\t// @todo get rid of <any>\r\n\t\t\tif (!$type.hasValue(propValue)) {\r\n\t\t\t\tlet spriteValue = sprite.getPropertyValue(<any>propertyName);\r\n\t\t\t\tif (this._adapterO) {\r\n\t\t\t\t\tpropValue = this._adapterO.apply(<any>propertyName, spriteValue);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tpropValue = spriteValue;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (propValue == spriteValue) {\r\n\t\t\t\t\tpropValue = undefined;\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tif (this._adapterO) {\r\n\t\t\t\t\tpropValue = this._adapterO.apply(<any>propertyName, propValue)\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t/*let method = this.propertyMethods.getKey(propertyName);\r\n\t\t\tif (method) {\r\n\t\t\t\tpropValue = method(sprite, propertyName);\r\n\t\t\t}*/\r\n\r\n\t\t}\r\n\r\n\t\treturn propValue;\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all property and style values from another [[SpriteState]] object.\r\n\t *\r\n\t * @param source  Source [[SpriteState]]\r\n\t */\r\n\tpublic copyFrom(source: this) {\r\n\t\tif (source && source != this) {\r\n\t\t\tthis.transitionDuration = source.transitionDuration;\r\n\t\t\tthis.transitionEasing = source.transitionEasing;\r\n\r\n\t\t\t$utils.copyProperties(source.properties, this.properties);\r\n\t\t\t$utils.copyProperties(source.propertyFields, this.propertyFields);\r\n\t\t\tthis.filters.copyFrom(source.filters);\r\n\t\t\tif(source._adapterO){\r\n\t\t\t\tthis.adapter.copyFrom(source._adapterO);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns all values that should be applied by the SpriteState.\r\n\t *\r\n\t * It takes adapters into account.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @return Properties\r\n\t * @todo Add adapter values\r\n\t * @todo proper type this[\"_properties\"]\r\n\t */\r\n\tpublic get allValues(): P {\r\n\r\n\t\t// Init return value\r\n\t\tlet res: P = <P>{};\r\n\r\n\t\t// Apply adapters to all values\r\n\t\t$object.each(this.properties, (prop, value) => {\r\n\t\t\tres[prop] = this.getPropertyValue(prop);\r\n\t\t});\r\n\r\n\t\t// Cycle through all adapters and add values for missing properties\r\n\t\tif(this._adapterO){\r\n\t\t\tlet keys = this._adapterO.keys();\r\n\r\n\t\t\t$object.each(keys, (_x, prop) => {\r\n\t\t\t\tlet value = this.getPropertyValue<any>(prop);\r\n\t\t\t\t(<any>res)[prop] = value;\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\t// Cycle through all property fileds and add values for missing properties\r\n\t\tlet propertyFields = this.propertyFields;\r\n\r\n\t\t$object.each(propertyFields, (prop) => {\r\n\t\t\tlet value = this.getPropertyValue<any>(prop);\r\n\t\t\t(<any>res)[prop] = value;\r\n\t\t});\r\n\r\n\t\treturn res;\r\n\t}\r\n\r\n\t/**\r\n\t * Resets the State to initial state - no values or Filters applied.\r\n\t */\r\n\tpublic reset(): void {\r\n\t\tthis.properties = <P>{};\r\n\t\tthis.filters.clear();\r\n\t}\r\n\r\n\t/**\r\n\t * Processes JSON-based config before it is applied to the object.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param config  Config\r\n\t */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\tif ($type.hasValue(config) && $type.hasValue(config[\"properties\"])) {\r\n\t\t\t$object.each(config[\"properties\"], (key, value) => {\r\n\t\t\t\tif ($type.isString(value)) {\r\n\t\t\t\t\tif (value.match(/^[0-9.\\-]+\\%$/)) {\r\n\t\t\t\t\t\tconfig[\"properties\"][key] = percent($type.toNumber(value));\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if (value.match(/^\\#[0-9abcdef]{3,}$/i)) {\r\n\t\t\t\t\t\tconfig[\"properties\"][key] = toColor(value);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\tsuper.processConfig(config);\r\n\t}\r\n\r\n\t/**\r\n\t * Adds easing functions to \"function\" fields.\r\n\t *\r\n\t * @param field  Field name\r\n\t * @return Assign as function?\r\n\t */\r\n\tprotected asFunction(field: string): boolean {\r\n\t\treturn field == \"transitionEasing\" || super.asIs(field);\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"SpriteState\"] = SpriteState;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}