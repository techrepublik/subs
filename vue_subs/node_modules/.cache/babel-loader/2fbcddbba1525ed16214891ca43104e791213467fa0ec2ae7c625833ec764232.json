{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n/**\r\n * Serial chart module.\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\nimport { Chart, ChartDataItem } from \"../Chart\";\nimport { ListTemplate, ListDisposer } from \"../../core/utils/List\";\nimport { Container } from \"../../core/Container\";\nimport { Series } from \"../series/Series\";\nimport { percent } from \"../../core/utils/Percent\";\nimport { ColorSet } from \"../../core/utils/ColorSet\";\nimport { registry } from \"../../core/Registry\";\nimport * as $iter from \"../../core/utils/Iterator\";\nimport * as $type from \"../../core/utils/Type\";\nimport * as $array from \"../../core/utils/Array\";\nimport { Disposer } from \"../../core/utils/Disposer\";\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\n/**\r\n * Defines a [[DataItem]] for [[SerialChart]].\r\n *\r\n * @see {@link DataItem}\r\n */\nvar SerialChartDataItem = /** @class */function (_super) {\n  __extends(SerialChartDataItem, _super);\n  /**\r\n   * Constructor\r\n   */\n  function SerialChartDataItem() {\n    var _this = _super.call(this) || this;\n    _this.className = \"SerialChartDataItem\";\n    _this.applyTheme();\n    return _this;\n  }\n  return SerialChartDataItem;\n}(ChartDataItem);\nexport { SerialChartDataItem };\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n/**\r\n * A base class for all series-based charts, like XY, Pie, etc.\r\n *\r\n * Is not useful on its own.\r\n *\r\n * @see {@link ISerialChartEvents} for a list of available Events\r\n * @see {@link ISerialChartAdapters} for a list of available Adapters\r\n */\nvar SerialChart = /** @class */function (_super) {\n  __extends(SerialChart, _super);\n  /**\r\n   * Constructor\r\n   */\n  function SerialChart() {\n    var _this =\n    // Init\n    _super.call(this) || this;\n    _this._exitDP = {};\n    _this.className = \"SerialChart\";\n    _this.colors = new ColorSet();\n    _this._usesData = false;\n    // Create a container for series\n    var seriesContainer = _this.chartContainer.createChild(Container);\n    seriesContainer.shouldClone = false;\n    seriesContainer.width = percent(100);\n    seriesContainer.height = percent(100);\n    seriesContainer.isMeasured = false;\n    seriesContainer.layout = \"none\";\n    seriesContainer.zIndex = 2;\n    _this.seriesContainer = seriesContainer;\n    // Create a container for bullets\n    var bulletsContainer = _this.chartContainer.createChild(Container);\n    bulletsContainer.shouldClone = false;\n    bulletsContainer.width = percent(100);\n    bulletsContainer.height = percent(100);\n    bulletsContainer.isMeasured = false;\n    bulletsContainer.zIndex = 3;\n    bulletsContainer.layout = \"none\";\n    _this.bulletsContainer = bulletsContainer;\n    // Apply theme\n    _this.applyTheme();\n    return _this;\n  }\n  SerialChart.prototype.dispose = function () {\n    _super.prototype.dispose.call(this);\n    if (this.colors) {\n      this.colors.dispose();\n    }\n    if (this.patterns) {\n      this.patterns.dispose();\n    }\n  };\n  /**\r\n   * Sets defaults that instantiate some objects that rely on parent, so they\r\n   * cannot be set in constructor\r\n   */\n  SerialChart.prototype.applyInternalDefaults = function () {\n    _super.prototype.applyInternalDefaults.call(this);\n    // Add a default screen reader title for accessibility\n    // This will be overridden in screen reader if there are any `titles` set\n    if (!$type.hasValue(this.readerTitle)) {\n      this.readerTitle = this.language.translate(\"Serial chart\");\n    }\n  };\n  Object.defineProperty(SerialChart.prototype, \"series\", {\n    /**\r\n     * A list of chart's series.\r\n     *\r\n     * @return Chart's series\r\n     */\n    get: function () {\n      if (!this._series) {\n        this._series = new ListTemplate(this.createSeries());\n        this._series.events.on(\"inserted\", this.handleSeriesAdded, this, false);\n        this._series.events.on(\"removed\", this.handleSeriesRemoved, this, false);\n        this._disposers.push(new ListDisposer(this._series, false));\n        this._disposers.push(this._series.template);\n      }\n      return this._series;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  SerialChart.prototype.handleSeriesRemoved = function (event) {\n    var series = event.oldValue;\n    this.dataUsers.removeValue(series);\n    this.dataUsers.each(function (dataUser) {\n      dataUser.invalidateDataItems();\n    });\n    if (this._exitDP[series.uid]) {\n      this._exitDP[series.uid].dispose();\n      delete this._exitDP[series.uid];\n    }\n    if (series.autoDispose) {\n      series.dispose();\n    } else {\n      series.parent = undefined;\n      series.bulletsContainer.parent = undefined;\n    }\n    //this.feedLegend();\n    var legend = this.legend;\n    if (legend) {\n      var dataItems = this.legend.dataItems;\n      for (var i = dataItems.length - 1; i >= 0; i--) {\n        var dataItem = dataItems.getIndex(i);\n        if (dataItem && dataItem.dataContext == series) {\n          legend.dataItems.remove(dataItem);\n        }\n      }\n      for (var i = legend.data.length - 1; i >= 0; i--) {\n        var di = legend.data[i];\n        if (di && di == series) {\n          $array.remove(legend.data, di);\n        }\n      }\n    }\n  };\n  /**\r\n   * Decorates a new [[Series]] object with required parameters when it is\r\n   * added to the chart.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param event  Event\r\n   */\n  SerialChart.prototype.handleSeriesAdded = function (event) {\n    var _this = this;\n    var series = event.newValue;\n    if (series.isDisposed()) {\n      return;\n    }\n    series.chart = this;\n    series.parent = this.seriesContainer;\n    series.bulletsContainer.parent = this.bulletsContainer;\n    this._dataUsers.moveValue(series);\n    series.addDisposer(new Disposer(function () {\n      _this.dataUsers.removeValue(series);\n    }));\n    this.handleSeriesAdded2(series);\n    this.handleLegendSeriesAdded(series);\n  };\n  SerialChart.prototype.handleLegendSeriesAdded = function (series) {\n    if (!series.hiddenInLegend) {\n      if (this.legend) {\n        this.legend.addData(series);\n      }\n    }\n  };\n  SerialChart.prototype.handleSeriesAdded2 = function (series) {\n    var _this = this;\n    if (!this.dataInvalid) {\n      this._exitDP[series.uid] = registry.events.once(\"exitframe\", function () {\n        if (!series.data || series.data.length == 0) {\n          series.data = _this.data;\n          if (series.showOnInit) {\n            series.reinit();\n            series.setPropertyValue(\"showOnInit\", false);\n            series.showOnInit = true;\n          }\n          if (!series.isDisposed()) {\n            series.events.once(\"datavalidated\", function () {\n              if (series.data == _this.data) {\n                series._data = [];\n              }\n            });\n          }\n        }\n      });\n      this._disposers.push(this._exitDP[series.uid]);\n    }\n  };\n  /**\r\n   * Setups the legend to use the chart's data.\r\n   * @ignore\r\n   */\n  SerialChart.prototype.feedLegend = function () {\n    var legend = this.legend;\n    if (legend) {\n      var legendData_1 = [];\n      $iter.each(this.series.iterator(), function (series) {\n        if (!series.hiddenInLegend) {\n          legendData_1.push(series);\n        }\n      });\n      legend.dataFields.name = \"name\";\n      legend.data = legendData_1;\n    }\n  };\n  /**\r\n   * Creates and returns a new Series, suitable for this chart type.\r\n   *\r\n   * @return New series\r\n   */\n  SerialChart.prototype.createSeries = function () {\n    return new Series();\n  };\n  Object.defineProperty(SerialChart.prototype, \"colors\", {\n    /**\r\n     * @return Color list\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"colors\");\n    },\n    /**\r\n     * Chart's color list.\r\n     *\r\n     * This list can be used by a number of serial items, like applying a new\r\n     * color for each Series added. Or, applying a new color for each slice\r\n     * of a Pie chart.\r\n     *\r\n     * Please see [[ColorSet]] for information on how you can set up to generate\r\n     * unique colors.\r\n     *\r\n     * A theme you are using may override default pre-defined colors.\r\n     *\r\n     * @param value Color list\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"colors\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(SerialChart.prototype, \"patterns\", {\n    /**\r\n     * @return Pattern set\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"patterns\");\n    },\n    /**\r\n     * A [[PatternSet]] to use when creating patterned fills for slices.\r\n     *\r\n     * @since 4.7.5\r\n     * @param value  Pattern set\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"patterns\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Copies all parameters from another [[SerialChart]].\r\n   *\r\n   * @param source Source SerialChart\r\n   */\n  SerialChart.prototype.copyFrom = function (source) {\n    _super.prototype.copyFrom.call(this, source);\n    this.series.copyFrom(source.series);\n  };\n  /**\r\n   * Hides the chart instantly and then shows it. If defaultState.transitionDuration > 0, this will result an animation in which properties of hidden state will animate to properties of visible state.\r\n   */\n  SerialChart.prototype.appear = function () {\n    _super.prototype.appear.call(this);\n    this.series.each(function (series) {\n      if (series.showOnInit && series.inited) {\n        series.appear();\n      }\n    });\n  };\n  return SerialChart;\n}(Chart);\nexport { SerialChart };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\nregistry.registeredClasses[\"SerialChart\"] = SerialChart;","map":{"version":3,"names":["Chart","ChartDataItem","ListTemplate","ListDisposer","Container","Series","percent","ColorSet","registry","$iter","$type","$array","Disposer","SerialChartDataItem","_super","__extends","_this","call","className","applyTheme","SerialChart","_exitDP","colors","_usesData","seriesContainer","chartContainer","createChild","shouldClone","width","height","isMeasured","layout","zIndex","bulletsContainer","prototype","dispose","patterns","applyInternalDefaults","hasValue","readerTitle","language","translate","Object","defineProperty","get","_series","createSeries","events","on","handleSeriesAdded","handleSeriesRemoved","_disposers","push","template","event","series","oldValue","dataUsers","removeValue","each","dataUser","invalidateDataItems","uid","autoDispose","parent","undefined","legend","dataItems","i","length","dataItem","getIndex","dataContext","remove","data","di","newValue","isDisposed","chart","_dataUsers","moveValue","addDisposer","handleSeriesAdded2","handleLegendSeriesAdded","hiddenInLegend","addData","dataInvalid","once","showOnInit","reinit","setPropertyValue","_data","feedLegend","legendData_1","iterator","dataFields","name","getPropertyValue","set","value","copyFrom","source","appear","inited","registeredClasses"],"sources":["../../../../../src/.internal/charts/types/SerialChart.ts"],"sourcesContent":["/**\r\n * Serial chart module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Chart, IChartProperties, IChartDataFields, IChartAdapters, IChartEvents, ChartDataItem } from \"../Chart\";\r\nimport { IListEvents, ListTemplate, ListDisposer } from \"../../core/utils/List\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { Series } from \"../series/Series\";\r\nimport { percent } from \"../../core/utils/Percent\";\r\nimport { ColorSet } from \"../../core/utils/ColorSet\";\r\nimport { PatternSet } from \"../../core/utils/PatternSet\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $array from \"../../core/utils/Array\";\r\nimport { Disposer, IDisposer } from \"../../core/utils/Disposer\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[SerialChart]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class SerialChartDataItem extends ChartDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: SerialChart;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"SerialChartDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[SerialChart]].\r\n */\r\nexport interface ISerialChartDataFields extends IChartDataFields { }\r\n\r\n/**\r\n * Defines properties for [[SerialChart]]\r\n */\r\nexport interface ISerialChartProperties extends IChartProperties {\r\n\r\n\t/**\r\n\t * A set of colors to be used for chart elements, like Series, Slices, etc.\r\n\t */\r\n\tcolors?: ColorSet;\r\n\r\n\t/**\r\n\t * A set of patterns to use for fills, like Series, Slices, etc.\r\n\t *\r\n\t * @since 4.7.5\r\n\t */\r\n\tpatterns?: PatternSet;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[SerialChart]].\r\n */\r\nexport interface ISerialChartEvents extends IChartEvents { }\r\n\r\n/**\r\n * Defines adapters for [[SerialChart]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ISerialChartAdapters extends IChartAdapters, ISerialChartProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * A base class for all series-based charts, like XY, Pie, etc.\r\n *\r\n * Is not useful on its own.\r\n *\r\n * @see {@link ISerialChartEvents} for a list of available Events\r\n * @see {@link ISerialChartAdapters} for a list of available Adapters\r\n */\r\nexport class SerialChart extends Chart {\r\n\r\n\t/**\r\n\t * Defines data fields.\r\n\t */\r\n\tpublic _dataFields: ISerialChartDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: ISerialChartProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: ISerialChartAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: ISerialChartEvents;\r\n\r\n\t/**\r\n\t * Defines a type of series that this chart uses.\r\n\t */\r\n\tpublic _seriesType: Series;\r\n\r\n\t/**\r\n\t * Holds a list of [[Series]] displayed on the chart.\r\n\t */\r\n\tprotected _series: ListTemplate<this[\"_seriesType\"]>\r\n\r\n\t/**\r\n\t * Holds the reference to the container actual series are drawn in.\r\n\t */\r\n\tpublic readonly seriesContainer: Container;\r\n\r\n\t/**\r\n\t * Holds a reference to the container series' bullets are drawn in.\r\n\t */\r\n\tpublic readonly bulletsContainer: Container;\r\n\r\n\tprotected _exitDP: { [index: string]: IDisposer } = {};\r\n\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"SerialChart\";\r\n\r\n\t\tthis.colors = new ColorSet();\r\n\r\n\t\tthis._usesData = false;\r\n\r\n\t\t// Create a container for series\r\n\t\tlet seriesContainer: Container = this.chartContainer.createChild(Container);\r\n\t\tseriesContainer.shouldClone = false;\r\n\t\tseriesContainer.width = percent(100);\r\n\t\tseriesContainer.height = percent(100);\r\n\t\tseriesContainer.isMeasured = false;\r\n\t\tseriesContainer.layout = \"none\";\r\n\t\tseriesContainer.zIndex = 2;\r\n\t\tthis.seriesContainer = seriesContainer;\r\n\r\n\t\t// Create a container for bullets\r\n\t\tlet bulletsContainer: Container = this.chartContainer.createChild(Container);\r\n\t\tbulletsContainer.shouldClone = false;\r\n\t\tbulletsContainer.width = percent(100);\r\n\t\tbulletsContainer.height = percent(100);\r\n\t\tbulletsContainer.isMeasured = false;\r\n\t\tbulletsContainer.zIndex = 3;\r\n\t\tbulletsContainer.layout = \"none\";\r\n\t\tthis.bulletsContainer = bulletsContainer;\r\n\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\tpublic dispose(): void {\r\n\t\tsuper.dispose();\r\n\r\n\t\tif (this.colors) {\r\n\t\t\tthis.colors.dispose();\r\n\t\t}\r\n\r\n\t\tif (this.patterns) {\r\n\t\t\tthis.patterns.dispose();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\r\n\t\tsuper.applyInternalDefaults();\r\n\r\n\t\t// Add a default screen reader title for accessibility\r\n\t\t// This will be overridden in screen reader if there are any `titles` set\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Serial chart\");\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * A list of chart's series.\r\n\t *\r\n\t * @return Chart's series\r\n\t */\r\n\tpublic get series(): ListTemplate<this[\"_seriesType\"]> {\r\n\t\tif (!this._series) {\r\n\t\t\tthis._series = new ListTemplate<this[\"_seriesType\"]>(this.createSeries());\r\n\t\t\tthis._series.events.on(\"inserted\", this.handleSeriesAdded, this, false);\r\n\t\t\tthis._series.events.on(\"removed\", this.handleSeriesRemoved, this, false);\r\n\t\t\tthis._disposers.push(new ListDisposer(this._series, false));\r\n\t\t\tthis._disposers.push(this._series.template);\r\n\t\t}\r\n\t\treturn this._series;\r\n\t}\r\n\r\n\tprotected handleSeriesRemoved(event: IListEvents<Series>[\"removed\"]) {\r\n\t\tlet series = event.oldValue;\r\n\t\tthis.dataUsers.removeValue(series);\r\n\t\tthis.dataUsers.each((dataUser) => {\r\n\t\t\tdataUser.invalidateDataItems();\r\n\t\t})\r\n\r\n\t\tif (this._exitDP[series.uid]) {\r\n\t\t\tthis._exitDP[series.uid].dispose();\r\n\t\t\tdelete this._exitDP[series.uid];\r\n\t\t}\r\n\r\n\t\tif (series.autoDispose) {\r\n\t\t\tseries.dispose();\r\n\t\t}\r\n\t\telse {\r\n\t\t\tseries.parent = undefined;\r\n\t\t\tseries.bulletsContainer.parent = undefined;\r\n\t\t}\r\n\t\t//this.feedLegend();\r\n\t\tlet legend = this.legend;\r\n\t\tif (legend) {\r\n\t\t\tlet dataItems = this.legend.dataItems;\r\n\t\t\tfor (let i = dataItems.length - 1; i >= 0; i--) {\r\n\t\t\t\tlet dataItem = dataItems.getIndex(i);\r\n\t\t\t\tif (dataItem && dataItem.dataContext == series) {\r\n\t\t\t\t\tlegend.dataItems.remove(dataItem);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tfor (let i = legend.data.length - 1; i >= 0; i--) {\r\n\t\t\t\tlet di = legend.data[i];\r\n\t\t\t\tif (di && di == series) {\r\n\t\t\t\t\t$array.remove(legend.data, di);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Decorates a new [[Series]] object with required parameters when it is\r\n\t * added to the chart.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param event  Event\r\n\t */\r\n\tpublic handleSeriesAdded(event: IListEvents<Series>[\"inserted\"]): void {\r\n\t\tlet series: Series = event.newValue;\r\n\t\tif (series.isDisposed()) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tseries.chart = this;\r\n\t\tseries.parent = this.seriesContainer;\r\n\r\n\t\tseries.bulletsContainer.parent = this.bulletsContainer;\r\n\r\n\t\tthis._dataUsers.moveValue(series);\r\n\t\tseries.addDisposer(new Disposer(() => {\r\n\t\t\tthis.dataUsers.removeValue(series);\r\n\t\t}))\r\n\r\n\t\tthis.handleSeriesAdded2(series);\r\n\t\tthis.handleLegendSeriesAdded(series);\r\n\t}\r\n\r\n\tprotected handleLegendSeriesAdded(series: Series) {\r\n\t\tif (!series.hiddenInLegend) {\r\n\t\t\tif (this.legend) {\r\n\t\t\t\tthis.legend.addData(series);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tprotected handleSeriesAdded2(series: Series) {\r\n\t\tif (!this.dataInvalid) {\r\n\t\t\tthis._exitDP[series.uid] = registry.events.once(\"exitframe\", () => {\r\n\t\t\t\tif (!series.data || series.data.length == 0) {\r\n\t\t\t\t\tseries.data = this.data;\r\n\t\t\t\t\tif (series.showOnInit) {\r\n\t\t\t\t\t\tseries.reinit()\r\n\t\t\t\t\t\tseries.setPropertyValue(\"showOnInit\", false);\r\n\t\t\t\t\t\tseries.showOnInit = true;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (!series.isDisposed()) {\r\n\t\t\t\t\t\tseries.events.once(\"datavalidated\", () => {\r\n\t\t\t\t\t\t\tif (series.data == this.data) {\r\n\t\t\t\t\t\t\t\t(<any>series)._data = [];\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t\tthis._disposers.push(this._exitDP[series.uid]);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Setups the legend to use the chart's data.\r\n\t * @ignore\r\n\t */\r\n\tpublic feedLegend(): void {\r\n\t\tlet legend = this.legend;\r\n\t\tif (legend) {\r\n\t\t\tlet legendData: Array<this[\"_seriesType\"]> = [];\r\n\r\n\t\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\t\tif (!series.hiddenInLegend) {\r\n\t\t\t\t\tlegendData.push(series);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\tlegend.dataFields.name = \"name\";\r\n\r\n\t\t\tlegend.data = legendData;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Creates and returns a new Series, suitable for this chart type.\r\n\t *\r\n\t * @return New series\r\n\t */\r\n\tprotected createSeries(): this[\"_seriesType\"] {\r\n\t\treturn new Series();\r\n\t}\r\n\r\n\t/**\r\n\t * Chart's color list.\r\n\t *\r\n\t * This list can be used by a number of serial items, like applying a new\r\n\t * color for each Series added. Or, applying a new color for each slice\r\n\t * of a Pie chart.\r\n\t *\r\n\t * Please see [[ColorSet]] for information on how you can set up to generate\r\n\t * unique colors.\r\n\t *\r\n\t * A theme you are using may override default pre-defined colors.\r\n\t *\r\n\t * @param value Color list\r\n\t */\r\n\tpublic set colors(value: ColorSet) {\r\n\t\tthis.setPropertyValue(\"colors\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Color list\r\n\t */\r\n\tpublic get colors(): ColorSet {\r\n\t\treturn this.getPropertyValue(\"colors\");\r\n\t}\r\n\r\n\t/**\r\n\t * A [[PatternSet]] to use when creating patterned fills for slices.\r\n\t *\r\n\t * @since 4.7.5\r\n\t * @param value  Pattern set\r\n\t */\r\n\tpublic set patterns(value: PatternSet) {\r\n\t\tthis.setPropertyValue(\"patterns\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Pattern set\r\n\t */\r\n\tpublic get patterns(): PatternSet {\r\n\t\treturn this.getPropertyValue(\"patterns\");\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all parameters from another [[SerialChart]].\r\n\t *\r\n\t * @param source Source SerialChart\r\n\t */\r\n\tpublic copyFrom(source: this) {\r\n\t\tsuper.copyFrom(source);\r\n\t\tthis.series.copyFrom(source.series);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Hides the chart instantly and then shows it. If defaultState.transitionDuration > 0, this will result an animation in which properties of hidden state will animate to properties of visible state.\r\n\t */\r\n\tpublic appear() {\r\n\t\tsuper.appear();\r\n\r\n\t\tthis.series.each((series) => {\r\n\t\t\tif (series.showOnInit && series.inited) {\r\n\t\t\t\tseries.appear();\r\n\t\t\t}\r\n\t\t})\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"SerialChart\"] = SerialChart;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}