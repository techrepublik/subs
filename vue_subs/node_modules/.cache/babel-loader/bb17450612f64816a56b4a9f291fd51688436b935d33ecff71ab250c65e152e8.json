{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.find.js\";\nimport \"core-js/modules/esnext.iterator.map.js\";\n/**\r\n * Value Axis module\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\nimport { Axis, AxisDataItem } from \"./Axis\";\nimport { AxisRendererY } from \"./AxisRendererY\";\nimport { MultiDisposer } from \"../../core/utils/Disposer\";\nimport { registry } from \"../../core/Registry\";\nimport { ValueAxisBreak } from \"./ValueAxisBreak\";\nimport * as $math from \"../../core/utils/Math\";\nimport * as $iter from \"../../core/utils/Iterator\";\nimport * as $object from \"../../core/utils/Object\";\nimport * as $type from \"../../core/utils/Type\";\nimport * as $utils from \"../../core/utils/Utils\";\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\n/**\r\n * Defines a [[DataItem]] for [[ValueAxis]].\r\n *\r\n * @see {@link DataItem}\r\n */\nvar ValueAxisDataItem = /** @class */function (_super) {\n  __extends(ValueAxisDataItem, _super);\n  /**\r\n   * Constructor\r\n   */\n  function ValueAxisDataItem() {\n    var _this = _super.call(this) || this;\n    _this.className = \"ValueAxisDataItem\";\n    _this.values.value = {};\n    _this.values.endValue = {};\n    _this.applyTheme();\n    return _this;\n  }\n  Object.defineProperty(ValueAxisDataItem.prototype, \"value\", {\n    /**\r\n     * @return Value\r\n     */\n    get: function () {\n      return this.values[\"value\"].value;\n    },\n    /**\r\n     * A data point's numeric value.\r\n     *\r\n     * @param value  Value\r\n     */\n    set: function (value) {\n      this.setValue(\"value\", value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ValueAxisDataItem.prototype, \"endValue\", {\n    /**\r\n     * @return Value\r\n     */\n    get: function () {\n      return this.values[\"endValue\"].value;\n    },\n    /**\r\n     * Data point's numeric end value.\r\n     *\r\n     * @param value  End value\r\n     */\n    set: function (value) {\n      this.setValue(\"endValue\", value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return ValueAxisDataItem;\n}(AxisDataItem);\nexport { ValueAxisDataItem };\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n/**\r\n * Used to create a value axis for the chart.\r\n *\r\n * ```TypeScript\r\n * // Create the axis\r\n * let valueAxis = chart.yAxes.push(new am4charts.ValueAxis());\r\n *\r\n * // Set settings\r\n * valueAxis.title.text = \"Monthly Sales\";\r\n * ```\r\n * ```JavaScript\r\n * // Create the axis\r\n * var valueAxis = chart.yAxes.push(new am4charts.ValueAxis());\r\n *\r\n * // Set settings\r\n * valueAxis.title.text = \"Monthly Sales\";\r\n * ```\r\n * ```JSON\r\n * \"yAxes\": [{\r\n *   \"type\": \"ValueAxis\",\r\n *   \"title\": {\r\n *     \"text\": \"Monthly Sales\"\r\n *   }\r\n * }]\r\n * ```\r\n *\r\n * @see {@link IValueAxisEvents} for a list of available Events\r\n * @see {@link IValueAxisAdapters} for a list of available Adapters\r\n * @important\r\n */\nvar ValueAxis = /** @class */function (_super) {\n  __extends(ValueAxis, _super);\n  /**\r\n   * Constructor\r\n   */\n  function ValueAxis() {\n    var _this =\n    // Init\n    _super.call(this) || this;\n    /**\r\n     * [_stepDecimalPlaces description]\r\n     *\r\n     * @todo Description\r\n     */\n    _this._stepDecimalPlaces = 0;\n    _this._prevStepDecimalPlaces = 0;\n    _this._adjustLabelPrecision = true;\n    /**\r\n     * Base value for the axis.\r\n     */\n    _this._baseValue = 0;\n    /**\r\n     * Adjusted start in case we have breaks.\r\n     *\r\n     * @todo Description\r\n     */\n    _this._adjustedStart = 0;\n    /**\r\n     * Adjusted end in case we have breaks.\r\n     *\r\n     * @todo Description\r\n     */\n    _this._adjustedEnd = 1;\n    _this._extremesChanged = false;\n    _this._deltaMinMax = 1;\n    _this._dsc = false;\n    /**\r\n     * As calculating totals is expensive operation and not often needed, we\r\n     * don't do it by default.\r\n     *\r\n     * In case you use `totalPercent` or `total` in your charts, this must be set\r\n     * to `true`.\r\n     *\r\n     * @default false\r\n     * @see {@link https://www.amcharts.com/docs/v4/chart-types/xy-chart/#100_stacks} For using `calculateTotals` for 100% stacked series.\r\n     * @see {@link https://www.amcharts.com/docs/v4/concepts/formatters/formatting-strings/#Placeholders_for_numeric_values} For using `calculateTotals` in labels.\r\n     */\n    _this.calculateTotals = false;\n    _this.className = \"ValueAxis\";\n    // Set field name\n    _this.axisFieldName = \"value\";\n    // Set defaults\n    _this.setPropertyValue(\"maxZoomFactor\", 1000);\n    _this.setPropertyValue(\"extraMin\", 0);\n    _this.setPropertyValue(\"extraMax\", 0);\n    _this.setPropertyValue(\"strictMinMax\", false);\n    _this.setPropertyValue(\"maxPrecision\", Number.MAX_VALUE);\n    _this.setPropertyValue(\"adjustLabelPrecision\", true);\n    _this.setPropertyValue(\"extraTooltipPrecision\", 0);\n    _this.keepSelection = false;\n    _this.includeRangesInMinMax = false;\n    // Apply theme\n    _this.applyTheme();\n    return _this;\n  }\n  /**\r\n   * Holds reference to a function that accepts a DataItem as parameter.\r\n   *\r\n   * It can either return a fill opacity for a fill, or manipulate data item\r\n   * directly, to create various highlighting scenarios.\r\n   */\n  ValueAxis.prototype.fillRule = function (dataItem) {\n    var value = dataItem.value;\n    var axis = dataItem.component;\n    if (!dataItem.axisFill.disabled) {\n      // rounding in left to solve floating point number\n      if ($math.round(value / axis.step / 2, 5) == Math.round(value / axis.step / 2)) {\n        dataItem.axisFill.__disabled = true;\n      } else {\n        dataItem.axisFill.__disabled = false;\n      }\n    }\n  };\n  /**\r\n   * Returns a new/empty [[DataItem]] of the type appropriate for this object.\r\n   *\r\n   * @see {@link DataItem}\r\n   * @return Data Item\r\n   */\n  ValueAxis.prototype.createDataItem = function () {\n    return new ValueAxisDataItem();\n  };\n  /**\r\n   * Returns a new/empty [[AxisBreak]] of the appropriate type.\r\n   *\r\n   * @return Axis break\r\n   */\n  ValueAxis.prototype.createAxisBreak = function () {\n    return new ValueAxisBreak();\n  };\n  /**\r\n   * [dataChangeUpdate description]\r\n   *\r\n   * This is a placeholder to override for extending classes.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @todo Description\r\n   */\n  ValueAxis.prototype.dataChangeUpdate = function () {\n    this.clearCache();\n    if (!this.keepSelection) {\n      if (this._start != 0 || this._end != 1) {\n        this._start = 0;\n        this._end = 1;\n        this.dispatchImmediately(\"startendchanged\");\n      }\n    } else {\n      if (this._start != 0) {\n        this.dispatchImmediately(\"startchanged\");\n      }\n      if (this._end != 1) {\n        this.dispatchImmediately(\"endchanged\");\n      }\n      if (this._start != 0 || this._end != 1) {\n        this.dispatchImmediately(\"startendchanged\");\n      }\n    }\n    this._maxZoomed = this._maxDefined;\n    this._minZoomed = this._minDefined;\n    this._maxAdjusted = this._maxDefined;\n    this._minAdjusted = this._minDefined;\n  };\n  /**\r\n   * Processes data items of the related Series.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  ValueAxis.prototype.processSeriesDataItems = function () {\n    // @todo: add some boolean (maybe autodedect) if we need these calculations or not. this place uses a lot of cpu\n    if (this.calculateTotals) {\n      var series = this.series.getIndex(0);\n      var startIndex = series.startIndex;\n      if (series.dataItems.length > 0) {\n        if (startIndex > 0) {\n          startIndex--;\n        }\n        var endIndex = series.endIndex;\n        if (endIndex < series.dataItems.length) {\n          endIndex++;\n        }\n        var _loop_1 = function (i) {\n          // This has to be `var` in order to avoid garbage collection\n          var total = {};\n          var sum = {};\n          this_1.series.each(function (series) {\n            if (!series.excludeFromTotal) {\n              var dataItem_1 = series.dataItems.getIndex(i);\n              if (dataItem_1) {\n                $object.each(dataItem_1.values, function (key) {\n                  var value = dataItem_1.values[key].workingValue; // can not use getWorkingValue here!\n                  if ($type.isNumber(value)) {\n                    if (!$type.isNumber(total[key])) {\n                      total[key] = Math.abs(value);\n                    } else {\n                      total[key] += Math.abs(value);\n                    }\n                    if (!$type.isNumber(sum[key])) {\n                      sum[key] = value;\n                    } else {\n                      sum[key] += value;\n                    }\n                  }\n                });\n              }\n            }\n          });\n          this_1.series.each(function (series) {\n            if (!series.excludeFromTotal) {\n              var dataItem_2 = series.dataItems.getIndex(i);\n              if (dataItem_2) {\n                $object.each(dataItem_2.values, function (key) {\n                  var value = dataItem_2.values[key].workingValue; // can not use getWorkingValue here!\n                  if ($type.isNumber(value)) {\n                    dataItem_2.setCalculatedValue(key, total[key], \"total\");\n                    dataItem_2.setCalculatedValue(key, 100 * value / total[key], \"totalPercent\");\n                    dataItem_2.setCalculatedValue(key, sum[key], \"sum\");\n                  }\n                });\n              }\n            }\n          });\n        };\n        var this_1 = this;\n        // This has to be `var` in order to avoid garbage collection\n        for (var i = startIndex; i < endIndex; ++i) {\n          _loop_1(i);\n        }\n      }\n    }\n  };\n  /**\r\n   * Validates the whole axis. Causes it to redraw.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @todo Description (review)\r\n   */\n  ValueAxis.prototype.validate = function () {\n    if (this.axisLength <= 0) {\n      return;\n    }\n    _super.prototype.validate.call(this);\n    this.getMinMax();\n    if (!$type.isNumber(this._minAdjusted)) {\n      this.dataItems.each(function (dataItem) {\n        dataItem.value = null;\n      });\n    }\n    this.fixAxisBreaks();\n    this.calculateZoom();\n    this.validateAxisElements();\n    this.validateAxisRanges();\n    this.validateBreaks();\n    this.hideUnusedDataItems();\n    this.renderer.invalidateLayout();\n    // hide too close\n    //this.hideTooCloseDataItems();\n  };\n  /**\r\n   * Calculates all positions, related to axis as per current zoom.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  ValueAxis.prototype.calculateZoom = function () {\n    if ($type.isNumber(this.min) && $type.isNumber(this.max)) {\n      var min = this.positionToValue(this.start);\n      var max = this.positionToValue(this.end);\n      var differece = this.adjustDifference(min, max);\n      var minMaxStep = this.adjustMinMax(min, max, differece, this._gridCount, true);\n      var stepDecimalPlaces = $utils.decimalPlaces(minMaxStep.step);\n      this._stepDecimalPlaces = stepDecimalPlaces;\n      min = $math.round(min, stepDecimalPlaces);\n      max = $math.round(max, stepDecimalPlaces);\n      minMaxStep = this.adjustMinMax(min, max, differece, this._gridCount, true);\n      var step = minMaxStep.step;\n      if (this.syncWithAxis) {\n        var calculated = this.getCache(min + \"-\" + max);\n        if ($type.isNumber(calculated)) {\n          step = calculated;\n        }\n      } else {\n        min = minMaxStep.min;\n        max = minMaxStep.max;\n      }\n      if (this._minZoomed != min || this._maxZoomed != max || this._step != step || this._dsc) {\n        this._dsc = false;\n        this._minZoomed = min;\n        this._maxZoomed = max;\n        this._step = step;\n        this.dispatchImmediately(\"selectionextremeschanged\");\n      }\n    }\n  };\n  ValueAxis.prototype.fixSmallStep = function (step) {\n    if (1 + step == 1) {\n      step *= 2;\n      return this.fixSmallStep(step);\n    }\n    return step;\n  };\n  /**\r\n   * Validates Axis elements.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @todo Description\r\n   */\n  ValueAxis.prototype.validateAxisElements = function () {\n    var _this = this;\n    if ($type.isNumber(this.max) && $type.isNumber(this.min)) {\n      // first regular items\n      var value_1 = this.minZoomed - this._step * 2;\n      if (!this.logarithmic) {\n        value_1 = Math.floor(value_1 / this._step) * this._step;\n      } else {\n        var differencePower = Math.log(this.max) * Math.LOG10E - Math.log(this.min) * Math.LOG10E;\n        if (differencePower > 1) {\n          value_1 = Math.pow(10, Math.log(this.min) * Math.LOG10E);\n        } else {\n          value_1 = Math.floor(this.minZoomed / this._step) * this._step;\n          if (value_1 == 0) {\n            value_1 = this.minZoomed;\n          }\n        }\n      }\n      var maxZoomed = this._maxZoomed + this._step;\n      this.resetIterators();\n      var dataItemsIterator_1 = this._dataItemsIterator;\n      if (this._step == 0) {\n        return;\n      }\n      this._step = this.fixSmallStep(this._step);\n      var i = 0;\n      var precisionChanged = this._prevStepDecimalPlaces != this._stepDecimalPlaces;\n      this._prevStepDecimalPlaces = this._stepDecimalPlaces;\n      while (value_1 <= maxZoomed) {\n        var axisBreak = this.isInBreak(value_1);\n        if (!axisBreak) {\n          var dataItem = dataItemsIterator_1.find(function (x) {\n            return x.value === value_1;\n          });\n          if (dataItem.__disabled) {\n            dataItem.__disabled = false;\n          }\n          //this.processDataItem(dataItem);\n          this.appendDataItem(dataItem);\n          dataItem.axisBreak = undefined;\n          if (dataItem.value != value_1 || precisionChanged) {\n            dataItem.value = value_1;\n            dataItem.text = this.formatLabel(value_1);\n            if (dataItem.label && dataItem.label.invalid) {\n              dataItem.label.validate();\n            }\n            if (dataItem.value >= this.min && dataItem.value <= this.max) {\n              if (dataItem.label) {\n                if (this.axisLetter == \"Y\" && dataItem.label.measuredWidth > this.ghostLabel.measuredWidth || this.axisLetter == \"X\" && dataItem.label.measuredHeight > this.ghostLabel.measuredHeight) {\n                  this.ghostLabel.text = dataItem.label.currentText;\n                  this.ghostLabel.validate();\n                }\n              }\n            }\n          }\n          this.validateDataElement(dataItem);\n        }\n        i++;\n        var oldValue = value_1;\n        if (!this.logarithmic) {\n          value_1 += this._step;\n        } else {\n          var differencePower = Math.log(this.max) * Math.LOG10E - Math.log(this.min) * Math.LOG10E;\n          if (differencePower > 1) {\n            value_1 = Math.pow(10, Math.log(this.min) * Math.LOG10E + i);\n          } else {\n            value_1 += this._step;\n          }\n        }\n        var stepPower = Math.pow(10, Math.floor(Math.log(Math.abs(this._step)) * Math.LOG10E));\n        if (stepPower < 1) {\n          // exponent is less then 1 too. Count decimals of exponent\n          var decCount = Math.round(Math.abs(Math.log(Math.abs(stepPower)) * Math.LOG10E)) + 2;\n          decCount = Math.min(13, decCount);\n          // round value to avoid floating point issues\n          value_1 = $math.round(value_1, decCount);\n          // ceil causes problems: https://codepen.io/team/amcharts/pen/XWMjZwy?editors=1010\n          if (oldValue == value_1) {\n            value_1 = maxZoomed;\n            break;\n          }\n        }\n      }\n      var axisBreaks = this._axisBreaks;\n      if (axisBreaks) {\n        // breaks later\n        var renderer_1 = this.renderer;\n        $iter.each(axisBreaks.iterator(), function (axisBreak) {\n          if (axisBreak.breakSize > 0) {\n            // only add grid if gap is bigger then minGridDistance\n            if ($math.getDistance(axisBreak.startPoint, axisBreak.endPoint) > renderer_1.minGridDistance) {\n              var breakValue_1 = axisBreak.adjustedMin;\n              while (breakValue_1 <= axisBreak.adjustedMax) {\n                if (breakValue_1 >= axisBreak.adjustedStartValue && breakValue_1 <= axisBreak.adjustedEndValue) {\n                  var dataItem = dataItemsIterator_1.find(function (x) {\n                    return x.value === breakValue_1;\n                  });\n                  if (dataItem.__disabled) {\n                    dataItem.__disabled = false;\n                  }\n                  //this.processDataItem(dataItem);\n                  _this.appendDataItem(dataItem);\n                  dataItem.axisBreak = axisBreak;\n                  if (dataItem.value != breakValue_1) {\n                    dataItem.value = breakValue_1;\n                    dataItem.text = _this.formatLabel(breakValue_1);\n                    if (dataItem.label && dataItem.label.invalid) {\n                      dataItem.label.validate();\n                    }\n                  }\n                  _this.validateDataElement(dataItem);\n                }\n                breakValue_1 += axisBreak.adjustedStep;\n              }\n            }\n          }\n        });\n      }\n    }\n  };\n  /**\r\n   * Validates axis data item.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @todo Description\r\n   * @param dataItem  Data item\r\n   */\n  ValueAxis.prototype.validateDataElement = function (dataItem) {\n    _super.prototype.validateDataElement.call(this, dataItem);\n    //dataItem.__disabled = false;\n    dataItem.itemIndex = this._axisItemCount;\n    this._axisItemCount++;\n    var renderer = this.renderer;\n    var value = dataItem.value;\n    var endValue = dataItem.endValue;\n    var position = this.valueToPosition(value);\n    dataItem.position = position;\n    var endPosition = position;\n    var fillEndPosition = this.valueToPosition(value + this._step);\n    if ($type.isNumber(endValue)) {\n      endPosition = this.valueToPosition(endValue);\n      fillEndPosition = endPosition;\n    }\n    // this point is needed to calculate distance to satisfy minGridDistance\n    dataItem.point = renderer.positionToPoint(position);\n    var tick = dataItem.tick;\n    if (tick && !tick.disabled) {\n      renderer.updateTickElement(tick, position, endPosition);\n    }\n    var grid = dataItem.grid;\n    if (grid && !grid.disabled) {\n      renderer.updateGridElement(grid, position, endPosition);\n    }\n    var label = dataItem.label;\n    if (label && !label.disabled) {\n      renderer.updateLabelElement(label, position, endPosition);\n    }\n    var fill = dataItem.axisFill;\n    if (fill && !fill.disabled) {\n      renderer.updateFillElement(fill, position, fillEndPosition);\n      if (!dataItem.isRange) {\n        this.fillRule(dataItem);\n      }\n    }\n    if (dataItem.bullet) {\n      renderer.updateBullet(dataItem.bullet, position, endPosition);\n    }\n    var mask = dataItem.mask;\n    if (mask) {\n      renderer.updateFillElement(mask, position, fillEndPosition);\n    }\n  };\n  /**\r\n   * Formats the value according to axis' own [[NumberFormatter]].\r\n   *\r\n   * @param value  Source value\r\n   * @return Formatted value\r\n   */\n  ValueAxis.prototype.formatLabel = function (value) {\n    if (this.adjustLabelPrecision && value != 0) {\n      return this.numberFormatter.format(value, undefined, this._stepDecimalPlaces);\n    } else {\n      return this.numberFormatter.format(value);\n    }\n  };\n  Object.defineProperty(ValueAxis.prototype, \"basePoint\", {\n    /**\r\n     * Coordinates of the actual axis start.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @return Base point\r\n     */\n    get: function () {\n      var baseValue = this.baseValue;\n      var position = this.valueToPosition(baseValue);\n      var basePoint = this.renderer.positionToPoint(position);\n      return basePoint;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ValueAxis.prototype, \"baseValue\", {\n    /**\r\n     * @return base value\r\n     */\n    get: function () {\n      var baseValue = this._baseValue;\n      if (this.logarithmic) {\n        baseValue = this.min;\n      }\n      if (!this._adapterO) {\n        return baseValue;\n      } else {\n        return this._adapterO.apply(\"baseValue\", baseValue);\n      }\n    },\n    /**\r\n     * A base value.\r\n     *\r\n     * This is a threshold value that will divide \"positive\" and \"negative\"\r\n     * value ranges.\r\n     *\r\n     * Other scale-related functionality also depend on base value. E.g. stacks,\r\n     * value-dependent coloring, etc.\r\n     *\r\n     * @param value Base value\r\n     */\n    set: function (value) {\n      this._baseValue = value;\n      this.invalidateLayout();\n      this.invalidateSeries();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Converts a numeric value to relative position on axis\r\n   *\r\n   * An alias to `valueToPosition()`.\r\n   *\r\n   * @param value  Value\r\n   * @return Position\r\n   */\n  ValueAxis.prototype.anyToPosition = function (value) {\n    return this.valueToPosition(value);\n  };\n  /**\r\n   * Converts a numeric value to orientation point (x, y, angle) on axis\r\n   *\r\n   * @param value  Value\r\n   * @return Orientation point\r\n   */\n  ValueAxis.prototype.valueToPoint = function (value) {\n    var position = this.valueToPosition(value);\n    var point = this.renderer.positionToPoint(position);\n    var angle = this.renderer.positionToAngle(position);\n    return {\n      x: point.x,\n      y: point.y,\n      angle: angle\n    };\n  };\n  /**\r\n   * Converts a numeric value to orientation (x, y, angle) point on axis\r\n   *\r\n   * @param value  Value\r\n   * @return Orientation point\r\n   */\n  ValueAxis.prototype.anyToPoint = function (value) {\n    return this.valueToPoint(value);\n  };\n  /**\r\n   * Converts a numeric value to relative position on axis.\r\n   *\r\n   * @param value  Value\r\n   * @return relative position\r\n   */\n  ValueAxis.prototype.valueToPosition = function (value) {\n    if ($type.isNumber(value)) {\n      // todo: think if possible to take previous value and do not go through all previous breaks\n      var min_1 = this.min;\n      var max_1 = this.max;\n      if ($type.isNumber(min_1) && $type.isNumber(max_1)) {\n        var difference = this._difference;\n        var axisBreaks = this._axisBreaks;\n        if (axisBreaks && axisBreaks.length > 0) {\n          $iter.eachContinue(axisBreaks.iterator(), function (axisBreak) {\n            var startValue = axisBreak.adjustedStartValue;\n            var endValue = axisBreak.adjustedEndValue;\n            if ($type.isNumber(startValue) && $type.isNumber(endValue)) {\n              if (value < startValue) {\n                return false;\n              }\n              if ($math.intersect({\n                start: startValue,\n                end: endValue\n              }, {\n                start: min_1,\n                end: max_1\n              })) {\n                // todo: check this once and set some flag in axisBreak\n                startValue = Math.max(startValue, min_1);\n                endValue = Math.min(endValue, max_1);\n                var breakSize = axisBreak.breakSize;\n                // value to the right of break end\n                if (value > endValue) {\n                  min_1 += (endValue - startValue) * (1 - breakSize); // todo: maybe this can be done differently?\n                }\n                // value to the left of break start\n                else if (value < startValue) {}\n                // value within break\n                else {\n                  value = startValue + (value - startValue) * breakSize;\n                }\n              }\n            }\n            return true;\n          });\n        }\n        var position = void 0;\n        if (!this.logarithmic) {\n          position = (value - min_1) / difference;\n        } else {\n          var treatZeroAs = this.treatZeroAs;\n          if ($type.isNumber(treatZeroAs)) {\n            if (value <= treatZeroAs) {\n              value = treatZeroAs;\n            }\n          }\n          position = (Math.log(value) * Math.LOG10E - Math.log(this.min) * Math.LOG10E) / (Math.log(this.max) * Math.LOG10E - Math.log(this.min) * Math.LOG10E);\n        }\n        //position = $math.round(position, 10);\n        return position;\n      }\n    }\n    return 0;\n  };\n  /**\r\n   * When fontSize of fontFamily changes we need to hard-invalidate all Labels of this container to position them properly.\r\n   */\n  ValueAxis.prototype.invalidateLabels = function () {\n    _super.prototype.invalidateLabels.call(this);\n    if (this.dataItems) {\n      this.dataItems.each(function (dataItem) {\n        dataItem.value = undefined;\n      });\n      this.invalidate();\n    }\n  };\n  /**\r\n   * Converts an relative position to a corresponding value within\r\n   * axis' scale.\r\n   *\r\n   * @param position  Position (px)\r\n   * @return Value\r\n   */\n  ValueAxis.prototype.positionToValue = function (position) {\n    var min = this.min;\n    var max = this.max;\n    if ($type.isNumber(min) && $type.isNumber(max)) {\n      var difference_1 = max - min; //no need to adjust!\n      var value_2 = null;\n      var axisBreaks = this._axisBreaks;\n      if (axisBreaks) {\n        // in case we have some axis breaks\n        if (axisBreaks.length > 0) {\n          $iter.eachContinue(axisBreaks.iterator(), function (axisBreak) {\n            var breakStartPosition = axisBreak.startPosition;\n            var breakEndPosition = axisBreak.endPosition;\n            var breakStartValue = axisBreak.adjustedStartValue;\n            var breakEndValue = axisBreak.adjustedEndValue;\n            if ($type.isNumber(breakStartValue) && $type.isNumber(breakEndValue)) {\n              if (breakStartValue > max) {\n                return false;\n              }\n              if ($math.intersect({\n                start: breakStartValue,\n                end: breakEndValue\n              }, {\n                start: min,\n                end: max\n              })) {\n                breakStartValue = $math.max(breakStartValue, min);\n                breakEndValue = $math.min(breakEndValue, max);\n                var breakSize = axisBreak.breakSize;\n                difference_1 -= (breakEndValue - breakStartValue) * (1 - breakSize);\n                // position to the right of break end\n                if (position > breakEndPosition) {\n                  min += (breakEndValue - breakStartValue) * (1 - breakSize);\n                }\n                // position to the left of break start\n                else if (position < breakStartPosition) {}\n                // value within break\n                else {\n                  var breakPosition = (position - breakStartPosition) / (breakEndPosition - breakStartPosition);\n                  value_2 = breakStartValue + breakPosition * (breakEndValue - breakStartValue);\n                  return false;\n                }\n              }\n              return true;\n            }\n          });\n        }\n      }\n      if (!$type.isNumber(value_2)) {\n        if (this.logarithmic) {\n          value_2 = Math.pow(Math.E, (position * (Math.log(this.max) * Math.LOG10E - Math.log(this.min) * Math.LOG10E) + Math.log(this.min) * Math.LOG10E) / Math.LOG10E);\n        } else {\n          value_2 = position * difference_1 + min;\n        }\n      }\n      return value_2;\n    }\n    //}\n  };\n  /**\r\n   * Converts an X coordinate to a relative value in axis' scale.\r\n   *\r\n   * @param x  X (px)\r\n   * @return Value\r\n   */\n  ValueAxis.prototype.xToValue = function (x) {\n    return this.positionToValue(this.pointToPosition({\n      x: x,\n      y: 0\n    }));\n  };\n  /**\r\n   * Converts an Y coordinate to a relative value in axis' scale.\r\n   *\r\n   * @param y  Y (px)\r\n   * @return Value\r\n   */\n  ValueAxis.prototype.yToValue = function (y) {\n    return this.positionToValue(this.pointToPosition({\n      x: 0,\n      y: y\n    }));\n  };\n  /**\r\n   * Converts pixel coordinates to a relative position. (0-1)\r\n   *\r\n   * @param point  Coorinates (px)\r\n   * @return Position (0-1)\r\n   */\n  ValueAxis.prototype.pointToPosition = function (point) {\n    if (this.renderer instanceof AxisRendererY) {\n      return 1 - this.renderer.pointToPosition(point);\n    } else {\n      return this.renderer.pointToPosition(point);\n    }\n  };\n  /**\r\n   * @ignore\r\n   */\n  ValueAxis.prototype.animateMinMax = function (min, max) {\n    return this.animate([{\n      property: \"_minAdjusted\",\n      from: this._minAdjusted,\n      to: min\n    }, {\n      property: \"_maxAdjusted\",\n      from: this._maxAdjusted,\n      to: max\n    }], this.rangeChangeDuration, this.rangeChangeEasing);\n  };\n  /**\r\n   * Calculates smallest and biggest value for the axis scale.\r\n   * @ignore\r\n   * @todo Description (review)\r\n   */\n  ValueAxis.prototype.getMinMax = function () {\n    var _this = this;\n    this.updateGridCount();\n    var min = Number.POSITIVE_INFINITY;\n    var max = Number.NEGATIVE_INFINITY;\n    // only if min and max are not set from outside, we go through min and max influencers\n    if (!$type.isNumber(this._minDefined) || !$type.isNumber(this._maxDefined)) {\n      this.series.each(function (series) {\n        if (!series.ignoreMinMax) {\n          // check min\n          var seriesMin = series.min(_this);\n          if ($type.isNumber(seriesMin) && seriesMin < min) {\n            min = seriesMin;\n          }\n          // check max\n          var seriesMax = series.max(_this);\n          if ($type.isNumber(seriesMax) && seriesMax > max) {\n            max = seriesMax;\n          }\n        }\n      });\n      if (this.includeRangesInMinMax) {\n        this.axisRanges.each(function (range) {\n          if (!range.ignoreMinMax) {\n            var minValue = $math.min(range.value, range.endValue);\n            var maxValue = $math.max(range.value, range.endValue);\n            if (minValue < min || !$type.isNumber(min)) {\n              min = minValue;\n            }\n            if (maxValue > max || !$type.isNumber(max)) {\n              max = maxValue;\n            }\n          }\n        });\n      }\n    }\n    if (this.logarithmic) {\n      var treatZeroAs = this.treatZeroAs;\n      if ($type.isNumber(treatZeroAs)) {\n        if (min <= 0) {\n          min = treatZeroAs;\n        }\n      }\n      if (min <= 0) {\n        this.raiseCriticalError(new Error(\"Logarithmic value axis can not have values <= 0.\"), true);\n      }\n    }\n    if (min == 0 && max == 0) {\n      max = 0.9;\n      min = -0.9;\n    }\n    // if defined from outside\n    if ($type.isNumber(this._minDefined)) {\n      min = this._minDefined;\n    }\n    if ($type.isNumber(this._maxDefined)) {\n      max = this._maxDefined;\n    }\n    if (this._adapterO) {\n      min = this._adapterO.apply(\"min\", min);\n    }\n    if (this._adapterO) {\n      max = this._adapterO.apply(\"max\", max);\n    }\n    if (!$type.isNumber(min) || !$type.isNumber(max)) {\n      return;\n    }\n    this._minReal = min;\n    this._maxReal = max;\n    if (min == Number.POSITIVE_INFINITY) {\n      min = undefined;\n    }\n    if (max == Number.NEGATIVE_INFINITY) {\n      max = undefined;\n    }\n    var dif = this.adjustDifference(min, max); // previously it was max-min, but not worked well\n    min = this.fixMin(min);\n    max = this.fixMax(max);\n    // this happens if starLocation and endLocation are 0.5 and DateAxis has only one date\n    if (max - min <= 1 / Math.pow(10, 15)) {\n      if (max - min != 0) {\n        this._deltaMinMax = (max - min) / 2;\n      } else {\n        // the number by which we need to raise 10 to get difference\n        var exponent = Math.log(Math.abs(max)) * Math.LOG10E;\n        // here we find a number which is power of 10 and has the same count of numbers as difference has\n        var power = Math.pow(10, Math.floor(exponent));\n        // reduce this number by 10 times\n        power = power / 10;\n        this._deltaMinMax = power;\n      }\n      min -= this._deltaMinMax;\n      max += this._deltaMinMax;\n    }\n    min -= (max - min) * this.extraMin;\n    max += (max - min) * this.extraMax;\n    var strict = this.strictMinMax;\n    if ($type.isNumber(this._maxDefined)) {\n      strict = true;\n    }\n    var minMaxStep = this.adjustMinMax(min, max, dif, this._gridCount, strict);\n    min = minMaxStep.min;\n    max = minMaxStep.max;\n    dif = max - min; //new\n    // do it for the second time (importat!)\n    minMaxStep = this.adjustMinMax(min, max, max - min, this._gridCount, true);\n    min = minMaxStep.min;\n    max = minMaxStep.max;\n    // return min max if strict\n    if (this.strictMinMax) {\n      if ($type.isNumber(this._minDefined)) {\n        min = this._minDefined;\n      } else {\n        min = this._minReal;\n      }\n      if ($type.isNumber(this._maxDefined)) {\n        max = this._maxDefined;\n      } else {\n        max = this._maxReal;\n      }\n      if (max - min <= 0.00000001) {\n        min -= this._deltaMinMax;\n        max += this._deltaMinMax;\n      }\n      min -= (max - min) * this.extraMin;\n      max += (max - min) * this.extraMax;\n    }\n    if (this._adapterO) {\n      min = this._adapterO.apply(\"min\", min);\n    }\n    if (this._adapterO) {\n      max = this._adapterO.apply(\"max\", max);\n    }\n    this._step = minMaxStep.step;\n    if (!$type.isNumber(min) && !$type.isNumber(max)) {\n      this.start = 0;\n      this.end = 1;\n      this.renderer.labels.each(function (label) {\n        label.dataItem.text = \"\";\n      });\n    }\n    // checking isNumber is good when all series are hidden\n    if ((this._minAdjusted != min || this._maxAdjusted != max) && $type.isNumber(min) && $type.isNumber(max)) {\n      var animation = this._minMaxAnimation;\n      if (this._extremesChanged && $type.isNumber(this._minAdjusted) && $type.isNumber(this._maxAdjusted) && this.inited) {\n        if (animation && !animation.isFinished() && this._finalMax == max && this._finalMin == min) {\n          return;\n        } else {\n          this._finalMin = min;\n          this._finalMax = max;\n          animation = this.animateMinMax(min, max);\n          if (animation && !animation.isFinished()) {\n            animation.events.on(\"animationprogress\", this.validateDataItems, this);\n            animation.events.on(\"animationended\", function () {\n              //this.validateDataItems();\n              _this.series.each(function (series) {\n                series.validate();\n              });\n              _this.validateDataItems();\n              _this.handleSelectionExtremesChange();\n            });\n            this._minMaxAnimation = animation;\n          } else {\n            this.series.each(function (series) {\n              series.invalidate();\n            });\n          }\n          this.validateDataItems();\n          this.dispatchImmediately(\"extremeschanged\");\n          this.handleSelectionExtremesChange();\n        }\n      } else {\n        if (animation && !animation.isFinished() && this._finalMax == max && this._finalMin == min) {\n          return;\n        } else {\n          this._minAdjusted = min;\n          this._maxAdjusted = max;\n          this._finalMin = min;\n          this._finalMax = max;\n          this.invalidateDataItems();\n          this.dispatchImmediately(\"extremeschanged\");\n          this._saveMinMax(min, max);\n        }\n      }\n    }\n    this._extremesChanged = false;\n    this._difference = this.adjustDifference(min, max);\n  };\n  /**\r\n   * Adjusts the minimum value.\r\n   *\r\n   * This is a placeholder method for extending classes to override.\r\n   *\r\n   * For numeric values this does nothing, however for more complex types, like\r\n   * dates, it may be necessary to adjust.\r\n   *\r\n   * @param value  Value\r\n   * @return Adjusted value\r\n   */\n  ValueAxis.prototype.fixMin = function (value) {\n    return value;\n  };\n  /**\r\n   * Adjusts the maximum value.\r\n   *\r\n   * This is a placeholder method for extending classes to override.\r\n   *\r\n   * For numeric values this does nothing, however for more complex types, like\r\n   * dates, it may be necessary to adjust.\r\n   *\r\n   * @param value  Value\r\n   * @return Adjusted value\r\n   */\n  ValueAxis.prototype.fixMax = function (value) {\n    return value;\n  };\n  /**\r\n   * Adjusts actual min and max scale values so that the axis starts and ends\r\n   * at \"nice\" values, unless `strictMinMax` is set.\r\n   *\r\n   * The `difference` can be something else than `max - min`, because of the\r\n   * axis breaks.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @todo Description\r\n   * @param min        [description]\r\n   * @param max        [description]\r\n   * @param difference [description]\r\n   * @param gridCount  [description]\r\n   * @param strictMode [description]\r\n   * @return [description]\r\n   */\n  ValueAxis.prototype.adjustMinMax = function (min, max, difference, gridCount, strictMode) {\n    // will fail if 0\n    if (gridCount <= 1) {\n      gridCount = 1;\n    }\n    gridCount = Math.round(gridCount);\n    var initialMin = min;\n    var initialMax = max;\n    // in case min and max is the same, use max\n    if (difference === 0) {\n      difference = Math.abs(max);\n    }\n    // the number by which we need to raise 10 to get difference\n    var exponent = Math.log(Math.abs(difference)) * Math.LOG10E;\n    // here we find a number which is power of 10 and has the same count of numbers as difference has\n    var power = Math.pow(10, Math.floor(exponent));\n    // reduce this number by 10 times\n    power = power / 10;\n    var extra = power;\n    if (strictMode) {\n      extra = 0;\n    }\n    if (!this.logarithmic) {\n      // round down min\n      if (strictMode) {\n        min = Math.floor(min / power) * power;\n        // round up max\n        max = Math.ceil(max / power) * power;\n      } else {\n        min = Math.ceil(min / power) * power - extra;\n        // round up max\n        max = Math.floor(max / power) * power + extra;\n      }\n      // don't let min go below 0 if real min is >= 0\n      if (min < 0 && initialMin >= 0) {\n        min = 0;\n      }\n      // don't let max go above 0 if real max is <= 0\n      if (max > 0 && initialMax <= 0) {\n        max = 0;\n      }\n    } else {\n      if (min <= 0) {\n        //throw Error(\"Logarithmic value axis can not have values <= 0.\");\n        min = this.baseValue;\n      }\n      // @todo: think of a better way or to restrict zooming when no series are selected\n      if (min == Infinity) {\n        min = 1;\n      }\n      if (max == -Infinity) {\n        max = 10;\n      }\n      if (this.strictMinMax) {\n        if (this._minDefined > 0) {\n          min = this._minDefined;\n        } else {\n          min = min;\n        }\n        if (this._maxDefined > 0) {\n          max = max;\n        }\n      } else {\n        min = Math.pow(10, Math.floor(Math.log(Math.abs(min)) * Math.LOG10E));\n        max = Math.pow(10, Math.ceil(Math.log(Math.abs(max)) * Math.LOG10E));\n      }\n    }\n    // repeat diff, exponent and power again with rounded values\n    //difference = this.adjustDifference(min, max);\n    /*\r\n              if(min > initialMin){\r\n                min = initialMin;\r\n            }\r\n              if(max < initialMax){\r\n                max = initialMax;\r\n            }\r\n    */\n    exponent = Math.log(Math.abs(difference)) * Math.LOG10E;\n    power = Math.pow(10, Math.floor(exponent));\n    power = power / 10;\n    // approximate difference between two grid lines\n    var step = Math.ceil(difference / gridCount / power) * power;\n    var stepPower = Math.pow(10, Math.floor(Math.log(Math.abs(step)) * Math.LOG10E));\n    // TODO: in v3 I had fixStepE here, ommiting it for a while, need to think about other solution\n    // the step should divide by  2, 5, and 10.\n    var stepDivisor = Math.ceil(step / stepPower); // number 0 - 10\n    if (stepDivisor > 5) {\n      stepDivisor = 10;\n    } else if (stepDivisor <= 5 && stepDivisor > 2) {\n      stepDivisor = 5;\n    }\n    // now get real step\n    step = Math.ceil(step / (stepPower * stepDivisor)) * stepPower * stepDivisor;\n    if (this.maxPrecision < Number.MAX_VALUE && step != $math.ceil(step, this.maxPrecision)) {\n      step = $math.ceil(step, this.maxPrecision);\n    }\n    var decCount = 0;\n    // in case numbers are smaller than 1\n    if (stepPower < 1) {\n      // exponent is less then 1 too. Count decimals of exponent\n      decCount = Math.round(Math.abs(Math.log(Math.abs(stepPower)) * Math.LOG10E)) + 1;\n      // round step\n      step = $math.round(step, decCount);\n    }\n    if (!this.logarithmic) {\n      // final min and max\n      var minCount = Math.floor(min / step);\n      min = $math.round(step * minCount, decCount);\n      var maxCount = void 0;\n      if (!strictMode) {\n        maxCount = Math.ceil(max / step);\n      } else {\n        maxCount = Math.floor(max / step);\n      }\n      if (maxCount == minCount) {\n        maxCount++;\n      }\n      max = $math.round(step * maxCount, decCount);\n      if (max < initialMax) {\n        max = max + step;\n      }\n      if (min > initialMin) {\n        min = min - step;\n      }\n    }\n    return {\n      min: min,\n      max: max,\n      step: step\n    };\n  };\n  Object.defineProperty(ValueAxis.prototype, \"min\", {\n    /**\r\n     * @return Min value\r\n     */\n    get: function () {\n      var min = this._minAdjusted;\n      if (!$type.isNumber(min)) {\n        min = this._minDefined;\n      }\n      return min;\n    },\n    /**\r\n     * A minimum value for the axis scale.\r\n     *\r\n     * This value might be auto-adjusted by the Axis in order to accomodate the\r\n     * grid nicely, i.e. plot area is divided by grid in nice equal cells.\r\n     *\r\n     * The above might be overridden by `strictMinMax` which will force exact\r\n     * user-defined min and max values to be used for scale.\r\n     *\r\n     * @param value  Min value\r\n     */\n    set: function (value) {\n      if (this._minDefined != value) {\n        this._minDefined = value;\n        this.invalidate();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ValueAxis.prototype, \"minDefined\", {\n    /**\r\n     * Min value as defined by user's code, not auto-calculated.\r\n     *\r\n     * @readonly\r\n     * @return Min value\r\n     */\n    get: function () {\n      return this._minDefined;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ValueAxis.prototype, \"maxDefined\", {\n    /**\r\n     * Max value as defined by user's code, not auto-calculated.\r\n     *\r\n     * @readonly\r\n     * @return Man value\r\n     */\n    get: function () {\n      return this._maxDefined;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ValueAxis.prototype, \"extraMin\", {\n    /**\r\n     * @return {number}\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"extraMin\");\n    },\n    /**\r\n     * Allows relatively adjusting minimum value of the axis' scale.\r\n     *\r\n     * The value is relative to the actual range of values currently displayed\r\n     * on the axis.\r\n     *\r\n     * E.g.: 0.5 will mean half of the current range. If we have axis displaying\r\n     * from 100 to 200, we will now have axis displaying from 50 to 200 because\r\n     * we asked to expand minimum value by 50% (0.5).\r\n     *\r\n     * NOTE: this setting is not compatible with `strictMinMax`.\r\n     *\r\n     * @param {number}\r\n     */\n    set: function (value) {\n      if (this.setPropertyValue(\"extraMin\", value)) {\n        this.invalidateDataItems();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ValueAxis.prototype, \"extraMax\", {\n    /**\r\n     * @return Min multiplier\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"extraMax\");\n    },\n    /**\r\n     * Allows relatively adjusting maximum value of the axis' scale.\r\n     *\r\n     * The value is relative to the actual range of values currently displayed\r\n     * on the axis.\r\n     *\r\n     * E.g.: 0.5 will mean half of the current range. If we have axis displaying\r\n     * from 100 to 200, we will now have axis displaying from 100 to 250 because\r\n     * we asked to expand maximum value by 50% (0.5).\r\n     *\r\n     * NOTE: this setting is not compatible with `strictMinMax`.\r\n     *\r\n     * @param {number}\r\n     */\n    set: function (value) {\n      if (this.setPropertyValue(\"extraMax\", value)) {\n        this.invalidateDataItems();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ValueAxis.prototype, \"step\", {\n    /**\r\n     * Current calculated delta in values between two adjacent grid lines (step).\r\n     *\r\n     * This is a read-only value and cannot be used to set actual step.\r\n     *\r\n     * @readonly\r\n     * @see {@link https://www.amcharts.com/docs/v4/concepts/axes/positioning-axis-elements/#Setting_the_density_of_the_the_grid_labels} For more information about modifying density of labels\r\n     * @return [description]\r\n     */\n    get: function () {\n      return this._step;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ValueAxis.prototype, \"max\", {\n    /**\r\n     * @return Max value\r\n     */\n    get: function () {\n      var max = this._maxAdjusted;\n      if (!$type.isNumber(max)) {\n        max = this._maxDefined;\n      }\n      return max;\n    },\n    /**\r\n     * A maximum value for the axis scale.\r\n     *\r\n     * This value might be auto-adjusted by the Axis in order to accomodate the\r\n     * grid nicely, i.e. plot area is divided by grid in nice equal cells.\r\n     *\r\n     * The above might be overridden by `strictMinMax` which will force exact\r\n     * user-defined min and max values to be used for scale.\r\n     *\r\n     * @param value  Max value\r\n     */\n    set: function (value) {\n      if (this._maxDefined != value) {\n        this._maxDefined = value;\n        this.invalidate();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ValueAxis.prototype, \"adjustLabelPrecision\", {\n    /**\r\n     * @return Adjust precision\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"adjustLabelPrecision\");\n    },\n    /**\r\n     * By default the axis will adjust precision of all numbers to match number\r\n     * of decimals in all its labels, e.g.: `1.0`, `1.5`, `2.0`.\r\n     *\r\n     * To disable set `adjustLabelPrecision` to `false`, to use whatever other\r\n     * precision or number format settings are set.\r\n     *\r\n     * IMPORTANT: This setting will be ignored if your number format uses\r\n     * modifiers, e.g. `\"#a\"`.\r\n     *\r\n     * @default true\r\n     * @since 4.9.14\r\n     * @param  value  Adjust precision\r\n     */\n    set: function (value) {\n      if (this.setPropertyValue(\"adjustLabelPrecision\", value)) {\n        this.invalidate();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Used for the Series to register itself as the user of this Axis.\r\n   *\r\n   * This will also decorate both the Series and Axis with event handlers, used\r\n   * to redraw on Axis position/zoom change.\r\n   *\r\n   * A disposer for those events is returned, so that they can be disposed\r\n   * together with Series.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param series  Series\r\n   * @return Disposer for events\r\n   */\n  ValueAxis.prototype.registerSeries = function (series) {\n    return new MultiDisposer([_super.prototype.registerSeries.call(this, series), series.events.on(\"extremeschanged\", this.handleExtremesChange, this, false), series.events.on(\"selectionextremeschanged\", this.handleSelectionExtremesChange, this, false), this.events.on(\"extremeschanged\", series.invalidate, series, false)]);\n  };\n  /**\r\n   * Perform tasks after Axis zoom.\r\n   */\n  ValueAxis.prototype.handleSelectionExtremesChange = function () {\n    var _this = this;\n    var selectionMin;\n    var selectionMax;\n    var allHidden = true;\n    $iter.each(this.series.iterator(), function (series) {\n      if (!series.ignoreMinMax && !series.isHidden && !series.outOfRange) {\n        if (series.visible && !series.isHiding) {\n          allHidden = false;\n        }\n        var seriesSelectionMin = series.selectionMin(_this);\n        var seriesSelectionMax = series.selectionMax(_this);\n        if ($type.isNumber(seriesSelectionMin)) {\n          if (!$type.isNumber(selectionMin) || seriesSelectionMin < selectionMin) {\n            selectionMin = seriesSelectionMin;\n          }\n        }\n        // check max\n        if ($type.isNumber(seriesSelectionMax)) {\n          if (!$type.isNumber(selectionMax) || seriesSelectionMax > selectionMax) {\n            selectionMax = seriesSelectionMax;\n          }\n        }\n      }\n    });\n    if (this.includeRangesInMinMax) {\n      this.axisRanges.each(function (range) {\n        if (!range.ignoreMinMax) {\n          var minValue = $math.min(range.value, range.endValue);\n          var maxValue = $math.max(range.value, range.endValue);\n          if (minValue < selectionMin) {\n            selectionMin = minValue;\n          }\n          if (maxValue > selectionMax) {\n            selectionMax = maxValue;\n          }\n        }\n      });\n    }\n    // this is not good, as if date axis is initially zoomed, selection of y axis is reset to 0, 1 at the end of this method\n    //$iter.each(this.series.iterator(), (series) => {\n    //\tif (!series.appeared) {\n    //\t\tallHidden = true;\n    //\t}\n    //})\n    if ($type.isNumber(this._minDefined)) {\n      if (this.strictMinMax) {\n        selectionMin = this._minDefined;\n      } else {\n        selectionMin = this.min;\n      }\n    } else if (this.strictMinMax) {\n      selectionMin = this._minReal;\n    }\n    if ($type.isNumber(this._maxDefined)) {\n      if (this.strictMinMax) {\n        selectionMax = this._maxDefined;\n      } else {\n        selectionMax = this.max;\n      }\n    } else if (this.strictMinMax) {\n      selectionMax = this._maxReal;\n    }\n    if (selectionMin == selectionMax) {\n      selectionMin -= this._deltaMinMax;\n      selectionMax += this._deltaMinMax;\n      var minMaxStep2 = this.adjustMinMax(selectionMin, selectionMax, 0, this._gridCount, this.strictMinMax);\n      selectionMin = minMaxStep2.min;\n      selectionMax = minMaxStep2.max;\n    }\n    var dif = this.adjustDifference(selectionMin, selectionMax);\n    var minMaxStep = this.adjustMinMax(selectionMin, selectionMax, dif, this._gridCount);\n    selectionMin = minMaxStep.min;\n    selectionMax = minMaxStep.max;\n    selectionMin -= (selectionMax - selectionMin) * this.extraMin;\n    selectionMax += (selectionMax - selectionMin) * this.extraMax;\n    selectionMin = $math.fitToRange(selectionMin, this.min, this.max);\n    selectionMax = $math.fitToRange(selectionMax, this.min, this.max);\n    // do it for the second time !important\n    dif = this.adjustDifference(selectionMin, selectionMax);\n    minMaxStep = this.adjustMinMax(selectionMin, selectionMax, dif, this._gridCount, true);\n    selectionMin = minMaxStep.min;\n    selectionMax = minMaxStep.max;\n    if (this.strictMinMax) {\n      selectionMin = $math.max(selectionMin, this._minDefined);\n      selectionMax = $math.min(selectionMax, this._maxDefined);\n    }\n    var step = minMaxStep.step;\n    if (this.syncWithAxis) {\n      minMaxStep = this.syncAxes(selectionMin, selectionMax, step);\n      selectionMin = minMaxStep.min;\n      selectionMax = minMaxStep.max;\n      this.invalidate();\n    }\n    step = minMaxStep.step;\n    // needed because of grouping\n    this._difference = this.adjustDifference(this.min, this.max);\n    var start = this.valueToPosition(selectionMin);\n    var end = this.valueToPosition(selectionMax);\n    // in case all series are hidden or hiding, full zoomout\n    if (allHidden && !this.syncWithAxis) {\n      start = 0;\n      end = 1;\n    }\n    var declination = 0;\n    if (this.syncWithAxis) {\n      declination = 5;\n      this.setCache(selectionMin + \"-\" + selectionMax, step);\n    } else {\n      if (this._step != step || this._minZoomed != selectionMin || this._maxZoomed != selectionMax) {\n        this._dsc = true;\n      }\n      this._step = step;\n      this._minZoomed = selectionMin;\n      this._maxZoomed = selectionMax;\n    }\n    if (!this.keepSelection) {\n      this.zoom({\n        start: start,\n        end: end\n      }, false, false, declination);\n    }\n  };\n  Object.defineProperty(ValueAxis.prototype, \"strictMinMax\", {\n    /**\r\n     * @return Use exact values?\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"strictMinMax\");\n    },\n    /**\r\n     * Indicates whether to blindly use exact `min` and `max` values set by user\r\n     * when generating Axis scale.\r\n     *\r\n     * If not set, the Axis might slightly adjust those values to accomodate a\r\n     * better looking grid.\r\n     *\r\n     * NOTE: if `min` and `max` are not set, setting `strictMinMax` to `true`\r\n     * will result in fixing the scale of the axis to actual lowest and highest\r\n     * values in the series within currently selected scope.\r\n     *\r\n     * @default false\r\n     * @param value Use exact values?\r\n     */\n    set: function (value) {\n      if (this.setPropertyValue(\"strictMinMax\", value)) {\n        this.invalidate();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ValueAxis.prototype, \"logarithmic\", {\n    /**\r\n     * @return Logarithmic scale?\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"logarithmic\");\n    },\n    /**\r\n     * Indicates if this axis should use a logarithmic scale.\r\n     *\r\n     * Please note that logarithmic axis can **only** accommodate values bigger\r\n     * than zero.\r\n     *\r\n     * Having zero or negative values will result in error and failure of the\r\n     * whole chart.\r\n     *\r\n     * @param value Logarithmic scale?\r\n     */\n    set: function (value) {\n      if (this.setPropertyValue(\"logarithmic\", value)) {\n        this.invalidate();\n        this.series.each(function (series) {\n          series.invalidateDataItems();\n        });\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ValueAxis.prototype, \"keepSelection\", {\n    /**\r\n     * @return Preseve zoom after data update?\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"keepSelection\");\n    },\n    /**\r\n     * Indicates if a current selection (zoom) should be kept across data updates.\r\n     *\r\n     * If your axis is zoomed while chart's data is updated, the axis will try\r\n     * to retain the same start and end values.\r\n     *\r\n     * You can also use this to initially pre-zoom axis:\r\n     *\r\n     * ```TypeScript\r\n     * axis.keepSelection = true;\r\n     * axis.start = 0.5;\r\n     * axis.end = 0.7;\r\n     * ```\r\n     * ```JavaScript\r\n     * axis.keepSelection = true;\r\n     * axis.start = 0.5;\r\n     * axis.end = 0.7;\r\n     * ```\r\n     * ```JSON\r\n     * {\r\n     *   \"xAxes\": [{\r\n     *     // ...\r\n     *     \"keepSelection\": true,\r\n     *     \"start\": 0.5,\r\n     *     \"end\": 0.7\r\n     *   }]\r\n     * }\r\n     * ```\r\n     *\r\n     * The above will start the chart zoomed from the middle of the actual scope\r\n     * to 70%.\r\n     *\r\n     * @since 4.1.1\r\n     * @default false\r\n     * @param  value  Preseve zoom after data update?\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"keepSelection\", value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ValueAxis.prototype, \"includeRangesInMinMax\", {\n    /**\r\n     * @return Include ranges?\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"includeRangesInMinMax\");\n    },\n    /**\r\n     * If set to `true`, values of axis ranges will be included when calculating\r\n     * range of values / scale of the [[ValueAxis]].\r\n     *\r\n     * @default false\r\n     * @since 4.4.9\r\n     * @param  value  Include ranges?\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"includeRangesInMinMax\", value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ValueAxis.prototype, \"maxPrecision\", {\n    /**\r\n     * @return max precision\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"maxPrecision\");\n    },\n    /**\r\n     * Maximum number of decimals to allow when placing grid lines and labels\r\n     * on axis.\r\n     *\r\n     * Set it to `0` (zero) to force integer-only axis labels.\r\n     *\r\n     * @param {number}\r\n     */\n    set: function (value) {\n      if (this.setPropertyValue(\"maxPrecision\", value)) {\n        this.invalidate();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ValueAxis.prototype, \"extraTooltipPrecision\", {\n    /**\r\n     * @return Extra decimals\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"extraTooltipPrecision\");\n    },\n    /**\r\n     * This setting allows using bigger precision for numbers displayed in axis\r\n     * tooltip.\r\n     *\r\n     * Please note that this setting indicates additional decimal places to\r\n     * automatically-calculated axis number precision.\r\n     *\r\n     * So if your axis displays numbers like 0.1, 0.2, etc. (one decimal place),\r\n     * and you set `extraTooltipPrecision = 1`, tooltips will display numbers\r\n     * like 0.12, 0.25, etc. (two decimal places).\r\n     *\r\n     * @default 0\r\n     * @since 4.8.3\r\n     * @param  value  Extra decimals\r\n     */\n    set: function (value) {\n      if (this.setPropertyValue(\"extraTooltipPrecision\", value)) {\n        this.invalidate();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Invalidates axis data items when series extremes change\r\n   */\n  ValueAxis.prototype.handleExtremesChange = function () {\n    var _this = this;\n    this._extremesChanged = true;\n    this.getMinMax();\n    if (this.ghostLabel) {\n      var mw_1 = 0;\n      this.dataItems.each(function (dataItem) {\n        if (dataItem.label && dataItem.label.pixelWidth > mw_1) {\n          _this.ghostLabel.text = dataItem.label.currentText;\n        }\n      });\n    }\n  };\n  /**\r\n   * Returns relative position on axis for series' data item's value.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @todo Description (review)\r\n   * @param dataItem  Data item\r\n   * @param key       Data field to get value from\r\n   * @param location  Location (0-1)\r\n   * @param stackKey  ?\r\n   * @return X coordinate (px)\r\n   */\n  ValueAxis.prototype.getX = function (dataItem, key, location, stackKey, range) {\n    return this.renderer.positionToPoint(this.getPositionX(dataItem, key, location, stackKey, range)).x;\n  };\n  /**\r\n   * Returns the X coordinate for series' data item's value.\r\n   *\r\n   * @since 4.5.14\r\n   * @param  dataItem  Data item\r\n   * @param  key       Data field to get value from\r\n   * @param  location  Location (0-1)\r\n   * @param  stackKey  ?\r\n   * @return           Relative position\r\n   */\n  ValueAxis.prototype.getPositionX = function (dataItem, key, location, stackKey, range) {\n    var value = dataItem.getWorkingValue(key);\n    if (!$type.hasValue(stackKey)) {\n      stackKey = \"valueX\";\n    }\n    var stack = dataItem.getValue(stackKey, \"stack\");\n    if (!$type.isNumber(value)) {\n      value = this.baseValue;\n      if (this.logarithmic) {\n        if (stack > 0) {\n          value = 0;\n        }\n      }\n    }\n    var position = this.valueToPosition(value + stack);\n    if (range) {\n      position = $math.fitToRange(position, range.start, range.end);\n    }\n    return position;\n  };\n  /**\r\n   * Returns the Y coordinate for series' data item's value.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @todo Description (review)\r\n   * @param dataItem  Data item\r\n   * @param key       Data field to get value from\r\n   * @param location  Location (0-1)\r\n   * @param stackKey  Stack ID\r\n   * @return Y coordinate (px)\r\n   */\n  ValueAxis.prototype.getY = function (dataItem, key, location, stackKey, range) {\n    return this.renderer.positionToPoint(this.getPositionY(dataItem, key, location, stackKey, range)).y;\n  };\n  /**\r\n   * Returns relative position on axis for series' data item's value.\r\n   *\r\n   * @since 4.5.14\r\n   * @param  dataItem  Data item\r\n   * @param  key       Data field to get value from\r\n   * @param  location  Location (0-1)\r\n   * @param  stackKey  Stack ID\r\n   * @return           Relative position\r\n   */\n  ValueAxis.prototype.getPositionY = function (dataItem, key, location, stackKey, range) {\n    var value = dataItem.getWorkingValue(key);\n    if (!$type.hasValue(stackKey)) {\n      stackKey = \"valueY\";\n    }\n    var stack = dataItem.getValue(stackKey, \"stack\");\n    if (!$type.isNumber(value)) {\n      value = this.baseValue;\n      if (this.logarithmic) {\n        if (stack > 0) {\n          value = 0;\n        }\n      }\n    }\n    var position = this.valueToPosition(value + stack);\n    if (range) {\n      position = $math.fitToRange(position, range.start, range.end);\n    }\n    return position;\n  };\n  /**\r\n   * Returns an angle for series data item.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @todo Description (review)\r\n   * @param dataItem  Data item\r\n   * @param key       Data field to get value from\r\n   * @param location  Location (0-1)\r\n   * @param stackKey  Stack ID\r\n   * @param range Range to fit in\r\n   * @return Angle\r\n   */\n  ValueAxis.prototype.getAngle = function (dataItem, key, location, stackKey, range) {\n    var value = dataItem.getWorkingValue(key);\n    var stack = dataItem.getValue(stackKey, \"stack\");\n    if (!$type.isNumber(value)) {\n      value = this.baseValue;\n    }\n    var position = this.valueToPosition(value + stack);\n    if (range) {\n      position = $math.fitToRange(position, range.start, range.end);\n    }\n    return this.positionToAngle(position);\n  };\n  /**\r\n   * [getAnyRangePath description]\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @todo Description\r\n   * @param start     [description]\r\n   * @param end       [description]\r\n   * @param location  [description]\r\n   * @return [description]\r\n   */\n  ValueAxis.prototype.getAnyRangePath = function (start, end, location) {\n    var startPosition = this.valueToPosition(start);\n    var endPosition = this.valueToPosition(end);\n    return this.getPositionRangePath(startPosition, endPosition); // Base class (Axis) gets range shape from AxisRenderer\n  };\n  /**\r\n   * Returns text to show in a axis tooltip, based on specific position within\r\n   * axis.\r\n   *\r\n   * The label will be formatted as per [[NumberFormatter]] set for the whole\r\n   * chart, or explicitly for this Axis.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param position  Position (px)\r\n   * @return Label (numeric value)\r\n   */\n  ValueAxis.prototype.getTooltipText = function (position) {\n    var value = $math.round(this.positionToValue(position), this._stepDecimalPlaces + this.extraTooltipPrecision);\n    var valueStr = this.tooltip.numberFormatter.format(value);\n    if (!this._adapterO) {\n      return valueStr;\n    } else {\n      return this._adapterO.apply(\"getTooltipText\", valueStr);\n    }\n  };\n  /**\r\n   * Zooms axis to specific values.\r\n   *\r\n   * @param startValue      Start value\r\n   * @param endValue        End value\r\n   * @param skipRangeEvent  Do not invoke events\r\n   * @param instantly       Do not play zoom animations\r\n   */\n  ValueAxis.prototype.zoomToValues = function (startValue, endValue, skipRangeEvent, instantly) {\n    var start = (startValue - this.min) / (this.max - this.min);\n    var end = (endValue - this.min) / (this.max - this.min);\n    this.zoom({\n      start: start,\n      end: end\n    }, skipRangeEvent, instantly);\n  };\n  Object.defineProperty(ValueAxis.prototype, \"minZoomed\", {\n    /**\r\n     * A smallest value in axis scale within current zoom.\r\n     *\r\n     * @return Min zoom value\r\n     */\n    get: function () {\n      if (!this.syncWithAxis) {\n        return $math.max(this.min, this._minZoomed);\n      } else {\n        return this._minZoomed;\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ValueAxis.prototype, \"maxZoomed\", {\n    /**\r\n     * A biggest value in axis scale within current zoom.\r\n     * @return [description]\r\n     */\n    get: function () {\n      if (!this.syncWithAxis) {\n        return $math.min(this.max, this._maxZoomed);\n      } else {\n        return this._maxZoomed;\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Updates positioning of Axis breaks after something changes.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  ValueAxis.prototype.fixAxisBreaks = function () {\n    var _this = this;\n    _super.prototype.fixAxisBreaks.call(this);\n    var axisBreaks = this._axisBreaks;\n    if (axisBreaks && axisBreaks.length > 0) {\n      // process breaks\n      axisBreaks.each(function (axisBreak) {\n        var startValue = axisBreak.adjustedStartValue;\n        var endValue = axisBreak.adjustedEndValue;\n        // break difference\n        var axisBreakDif = endValue - startValue;\n        var axisBreakGridCount = Math.ceil(axisBreakDif * axisBreak.breakSize) * _this._gridCount / (_this.max - _this.min);\n        // calculate min, max and step for axis break\n        var breakMinMaxStep = _this.adjustMinMax(startValue, endValue, axisBreakDif, axisBreakGridCount, true);\n        axisBreak.adjustedStep = breakMinMaxStep.step;\n        axisBreak.adjustedMin = breakMinMaxStep.min;\n        axisBreak.adjustedMax = breakMinMaxStep.max;\n      });\n    }\n    this._difference = this.adjustDifference(this.min, this.max);\n  };\n  /**\r\n   * Returns value based on position.\r\n   *\r\n   * Please note that `position` represents position within axis which may be\r\n   * zoomed and not correspond to Cursor's `position`.\r\n   *\r\n   * To convert Cursor's `position` to Axis' `position` use `toAxisPosition()` method.\r\n   *\r\n   * @see {@link https://www.amcharts.com/docs/v4/tutorials/tracking-cursors-position-via-api/#Tracking_Cursor_s_position} For more information about cursor tracking.\r\n   * @param position  Relative position on axis (0-1)\r\n   * @return Position label\r\n   */\n  ValueAxis.prototype.getPositionLabel = function (position) {\n    var value = this.positionToValue(position);\n    return this.numberFormatter.format(value);\n  };\n  /**\r\n   * Shows Axis tooltip at specific value\r\n   *\r\n   * @param value Value\r\n   */\n  ValueAxis.prototype.showTooltipAt = function (value) {\n    this.showTooltipAtPosition(this.valueToPosition(value));\n  };\n  /**\r\n   * Copies all properties and related data from a different instance of Axis.\r\n   *\r\n   * @param source Source Axis\r\n   */\n  ValueAxis.prototype.copyFrom = function (source) {\n    _super.prototype.copyFrom.call(this, source);\n    this.min = source.min;\n    this.max = source.max;\n    this.calculateTotals = source.calculateTotals;\n    this._baseValue = source.baseValue;\n  };\n  Object.defineProperty(ValueAxis.prototype, \"syncWithAxis\", {\n    /**\r\n     * @return Target axis\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"syncWithAxis\");\n    },\n    /**\r\n     * Enables syncing of grid with another axis.\r\n     *\r\n     * To enable, set to a reference of the other `ValueAxis`. This axis will try\r\n     * to maintain its scale in such way that its grid matches target axis grid.\r\n     *\r\n     * IMPORTANT #1: At this stage it's an experimental feature. Use it at your\r\n     * own risk, as it may not work in 100% of the scenarios.\r\n     *\r\n     * IMPORTANT #2: `syncWithAxis` is not compatible with `strictMinMax` and\r\n     * `sequencedInterpolation` settings.\r\n     *\r\n     * IMPORTANT #3: `syncWithAxis` is not compatible with scrollbars. Make sure\r\n     * you do not add a scrollbar in the same direction as synced axes. For\r\n     * example, if you have vertical synced axes, do not add `scrollbarY` on\r\n     * your chart. It will create anomalies when used.\r\n     *\r\n     * IMPORTANT #4: `syncWithAxis` is not compatible with `XYCursor` if it has\r\n     * its `behavior` set to either `zoomY` or `zoomXY`.\r\n     *\r\n     * @since 4.8.1\r\n     * @param  axis  Target axis\r\n     */\n    set: function (axis) {\n      var _this = this;\n      if (this.setPropertyValue(\"syncWithAxis\", axis, true)) {\n        if (axis) {\n          this._disposers.push(axis.events.on(\"extremeschanged\", this.handleSelectionExtremesChange, this, false));\n          this._disposers.push(axis.events.on(\"selectionextremeschanged\", this.handleSelectionExtremesChange, this, false));\n          this._disposers.push(axis.events.on(\"startendchanged\", this.handleSelectionExtremesChange, this, false));\n          this.events.on(\"shown\", this.handleSelectionExtremesChange, this, false);\n          this.events.on(\"maxsizechanged\", function () {\n            _this.clearCache();\n            _this._disposers.push(registry.events.once(\"exitframe\", function () {\n              _this.handleSelectionExtremesChange();\n            }));\n          }, this, false);\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ValueAxis.prototype, \"treatZeroAs\", {\n    /**\r\n     * @return Zero replacement value\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"treatZeroAs\");\n    },\n    /**\r\n     * If set, zero values will be treated as this value.\r\n     *\r\n     * It is useful if you need to use data with zero-values on a logarithmic\r\n     * axis scale.\r\n     *\r\n     * @since 4.9.34\r\n     * @param  value  Zero replacement value\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"treatZeroAs\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Syncs with a target axis.\r\n   *\r\n   * @param  min  Min\r\n   * @param  max  Max\r\n   * @param  step Step\r\n   */\n  ValueAxis.prototype.syncAxes = function (min, max, step) {\n    var axis = this.syncWithAxis;\n    if (axis) {\n      if (!$type.isNumber(min)) {\n        min = this.min;\n      }\n      if (!$type.isNumber(max)) {\n        max = this.max;\n      }\n      if (!$type.isNumber(step)) {\n        step = this._step;\n      }\n      var count = Math.round((axis.maxZoomed - axis.minZoomed) / axis.step);\n      var currentCount = Math.round((max - min) / step);\n      if ($type.isNumber(count) && $type.isNumber(currentCount)) {\n        var synced = false;\n        var c = 0;\n        var diff = (max - min) * 0.01;\n        var omin = min;\n        var omax = max;\n        var ostep = step;\n        while (synced != true) {\n          synced = this.checkSync(omin, omax, ostep, count);\n          c++;\n          if (c > 1000) {\n            synced = true;\n          }\n          if (!synced) {\n            //omin = min - diff * c;\n            if (c / 3 == Math.round(c / 3)) {\n              omin = min - diff * c;\n              if (min >= 0 && omin < 0) {\n                omin = 0;\n              }\n            } else {\n              omax = max + diff * c;\n              if (omax <= 0 && omax > 0) {\n                omax = 0;\n              }\n            }\n            var minMaxStep = this.adjustMinMax(omin, omax, omax - omin, this._gridCount, true);\n            omin = minMaxStep.min;\n            omax = minMaxStep.max;\n            ostep = minMaxStep.step;\n          } else {\n            min = omin;\n            max = omax;\n            step = ostep;\n          }\n        }\n      }\n    }\n    return {\n      min: min,\n      max: max,\n      step: step\n    };\n  };\n  /**\r\n   * Returns `true` if axis needs to be resunced with some other axis.\r\n   */\n  ValueAxis.prototype.checkSync = function (min, max, step, count) {\n    var currentCount = (max - min) / step;\n    for (var i = 1; i < count; i++) {\n      if ($math.round(currentCount / i, 1) == count || currentCount * i == count) {\n        return true;\n      }\n    }\n    return false;\n  };\n  /**\r\n   * Processes JSON-based config before it is applied to the object.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param config  Config\r\n   */\n  ValueAxis.prototype.processConfig = function (config) {\n    if (config) {\n      // Set up axes\n      if ($type.hasValue(config.syncWithAxis) && $type.isString(config.syncWithAxis)) {\n        if (this.map.hasKey(config.syncWithAxis)) {\n          config.syncWithAxis = this.map.getKey(config.syncWithAxis);\n        } else {\n          this.processingErrors.push(\"[ValueAxis] No axis with id \\\"\" + config.syncWithAxis + \"\\\" found for `syncWithAxis`\");\n          delete config.xAxis;\n        }\n      }\n    }\n    _super.prototype.processConfig.call(this, config);\n  };\n  ValueAxis.prototype._saveMinMax = function (_min, _max) {};\n  return ValueAxis;\n}(Axis);\nexport { ValueAxis };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\nregistry.registeredClasses[\"ValueAxis\"] = ValueAxis;\nregistry.registeredClasses[\"ValueAxisDataItem\"] = ValueAxisDataItem;","map":{"version":3,"names":["Axis","AxisDataItem","AxisRendererY","MultiDisposer","registry","ValueAxisBreak","$math","$iter","$object","$type","$utils","ValueAxisDataItem","_super","__extends","_this","call","className","values","value","endValue","applyTheme","Object","defineProperty","prototype","get","set","setValue","ValueAxis","_stepDecimalPlaces","_prevStepDecimalPlaces","_adjustLabelPrecision","_baseValue","_adjustedStart","_adjustedEnd","_extremesChanged","_deltaMinMax","_dsc","calculateTotals","axisFieldName","setPropertyValue","Number","MAX_VALUE","keepSelection","includeRangesInMinMax","fillRule","dataItem","axis","component","axisFill","disabled","round","step","Math","__disabled","createDataItem","createAxisBreak","dataChangeUpdate","clearCache","_start","_end","dispatchImmediately","_maxZoomed","_maxDefined","_minZoomed","_minDefined","_maxAdjusted","_minAdjusted","processSeriesDataItems","series","getIndex","startIndex","dataItems","length","endIndex","i","total","sum","this_1","each","excludeFromTotal","dataItem_1","key","workingValue","isNumber","abs","dataItem_2","setCalculatedValue","validate","axisLength","getMinMax","fixAxisBreaks","calculateZoom","validateAxisElements","validateAxisRanges","validateBreaks","hideUnusedDataItems","renderer","invalidateLayout","min","max","positionToValue","start","end","differece","adjustDifference","minMaxStep","adjustMinMax","_gridCount","stepDecimalPlaces","decimalPlaces","syncWithAxis","calculated","getCache","_step","fixSmallStep","value_1","minZoomed","logarithmic","floor","differencePower","log","LOG10E","pow","maxZoomed","resetIterators","dataItemsIterator_1","_dataItemsIterator","precisionChanged","axisBreak","isInBreak","find","x","appendDataItem","undefined","text","formatLabel","label","invalid","axisLetter","measuredWidth","ghostLabel","measuredHeight","currentText","validateDataElement","oldValue","stepPower","decCount","axisBreaks","_axisBreaks","renderer_1","iterator","breakSize","getDistance","startPoint","endPoint","minGridDistance","breakValue_1","adjustedMin","adjustedMax","adjustedStartValue","adjustedEndValue","adjustedStep","itemIndex","_axisItemCount","position","valueToPosition","endPosition","fillEndPosition","point","positionToPoint","tick","updateTickElement","grid","updateGridElement","updateLabelElement","fill","updateFillElement","isRange","bullet","updateBullet","mask","adjustLabelPrecision","numberFormatter","format","baseValue","basePoint","_adapterO","apply","invalidateSeries","anyToPosition","valueToPoint","angle","positionToAngle","y","anyToPoint","min_1","max_1","difference","_difference","eachContinue","startValue","intersect","treatZeroAs","invalidateLabels","invalidate","difference_1","value_2","breakStartPosition","startPosition","breakEndPosition","breakStartValue","breakEndValue","breakPosition","E","xToValue","pointToPosition","yToValue","animateMinMax","animate","property","from","to","rangeChangeDuration","rangeChangeEasing","updateGridCount","POSITIVE_INFINITY","NEGATIVE_INFINITY","ignoreMinMax","seriesMin","seriesMax","axisRanges","range","minValue","maxValue","raiseCriticalError","Error","_minReal","_maxReal","dif","fixMin","fixMax","exponent","power","extraMin","extraMax","strict","strictMinMax","labels","animation","_minMaxAnimation","inited","isFinished","_finalMax","_finalMin","events","on","validateDataItems","handleSelectionExtremesChange","invalidateDataItems","_saveMinMax","gridCount","strictMode","initialMin","initialMax","extra","ceil","Infinity","stepDivisor","maxPrecision","minCount","maxCount","getPropertyValue","registerSeries","handleExtremesChange","selectionMin","selectionMax","allHidden","isHidden","outOfRange","visible","isHiding","seriesSelectionMin","seriesSelectionMax","minMaxStep2","fitToRange","syncAxes","declination","setCache","zoom","mw_1","pixelWidth","getX","location","stackKey","getPositionX","getWorkingValue","hasValue","stack","getValue","getY","getPositionY","getAngle","getAnyRangePath","getPositionRangePath","getTooltipText","extraTooltipPrecision","valueStr","tooltip","zoomToValues","skipRangeEvent","instantly","axisBreakDif","axisBreakGridCount","breakMinMaxStep","getPositionLabel","showTooltipAt","showTooltipAtPosition","copyFrom","source","_disposers","push","once","count","currentCount","synced","c","diff","omin","omax","ostep","checkSync","processConfig","config","isString","map","hasKey","getKey","processingErrors","xAxis","_min","_max","registeredClasses"],"sources":["../../../../../src/.internal/charts/axes/ValueAxis.ts"],"sourcesContent":["/**\r\n * Value Axis module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Axis, AxisDataItem, IAxisProperties, IAxisDataFields, IAxisAdapters, IAxisEvents } from \"./Axis\";\r\nimport { AxisRenderer } from \"./AxisRenderer\";\r\nimport { AxisRendererY } from \"./AxisRendererY\";\r\nimport { AxisTick } from \"./AxisTick\";\r\nimport { AxisLabel } from \"./AxisLabel\";\r\nimport { AxisFill } from \"./AxisFill\";\r\nimport { List } from \"../../core/utils/List\";\r\nimport { IPoint, IOrientationPoint } from \"../../core/defs/IPoint\";\r\nimport { Grid } from \"./Grid\";\r\nimport { IDisposer, MultiDisposer } from \"../../core/utils/Disposer\";\r\nimport { XYChart } from \"../types/XYChart\";\r\nimport { XYSeries, XYSeriesDataItem } from \"../series/XYSeries\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { ValueAxisBreak } from \"./ValueAxisBreak\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $object from \"../../core/utils/Object\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport { Animation } from \"../../core/utils/Animation\";\r\nimport { IRange } from \"../../core/defs/IRange\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[ValueAxis]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class ValueAxisDataItem extends AxisDataItem {\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: ValueAxis;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"ValueAxisDataItem\";\r\n\r\n\t\tthis.values.value = {};\r\n\t\tthis.values.endValue = {};\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * A data point's numeric value.\r\n\t *\r\n\t * @param value  Value\r\n\t */\r\n\tpublic set value(value: number) {\r\n\t\tthis.setValue(\"value\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Value\r\n\t */\r\n\tpublic get value(): number {\r\n\t\treturn this.values[\"value\"].value;\r\n\t}\r\n\r\n\t/**\r\n\t * Data point's numeric end value.\r\n\t *\r\n\t * @param value  End value\r\n\t */\r\n\tpublic set endValue(value: number) {\r\n\t\tthis.setValue(\"endValue\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Value\r\n\t */\r\n\tpublic get endValue(): number {\r\n\t\treturn this.values[\"endValue\"].value;\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n */\r\nexport interface IMinMaxStep {\r\n\tmin: number;\r\n\tmax: number;\r\n\tstep: number;\r\n}\r\n\r\n/**\r\n * Defines data fields for [[ValueAxis]].\r\n */\r\nexport interface IValueAxisDataFields extends IAxisDataFields { }\r\n\r\n/**\r\n * Defines properties for [[ValueAxis]].\r\n */\r\nexport interface IValueAxisProperties extends IAxisProperties {\r\n\tstrictMinMax?: boolean;\r\n\tlogarithmic?: boolean;\r\n\tmaxPrecision?: number;\r\n\tadjustLabelPrecision?: boolean;\r\n\textraTooltipPrecision?: number;\r\n\textraMin?: number;\r\n\textraMax?: number;\r\n\tkeepSelection?: boolean;\r\n\tincludeRangesInMinMax?: boolean;\r\n\tsyncWithAxis?: ValueAxis;\r\n\ttreatZeroAs?: number;\r\n}\r\n\r\n/**\r\n * Defines events for [[ValueAxis]].\r\n */\r\nexport interface IValueAxisEvents extends IAxisEvents {\r\n\r\n\t/**\r\n\t * Invoked when selection/zoom on axis occurs and start/end coordinates\r\n\t * change.\r\n\t */\r\n\tselectionextremeschanged: {};\r\n\r\n\t/**\r\n\t * Invoked when start/end coordinates of the axis change.\r\n\t */\r\n\textremeschanged: {};\r\n\r\n}\r\n\r\n/**\r\n * Defines adapters for [[ValueAxis]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IValueAxisAdapters extends IAxisAdapters, IValueAxisProperties {\r\n\t/**\r\n\t * Applied to the base value of the axis\r\n\t */\r\n\tbaseValue: number,\r\n\r\n\t/**\r\n\t * Applied to the min value of the axis\r\n\t */\r\n\tmin: number\r\n\r\n\t/**\r\n\t * Applied to the max value of the axis\r\n\t */\r\n\tmax: number\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Used to create a value axis for the chart.\r\n *\r\n * ```TypeScript\r\n * // Create the axis\r\n * let valueAxis = chart.yAxes.push(new am4charts.ValueAxis());\r\n *\r\n * // Set settings\r\n * valueAxis.title.text = \"Monthly Sales\";\r\n * ```\r\n * ```JavaScript\r\n * // Create the axis\r\n * var valueAxis = chart.yAxes.push(new am4charts.ValueAxis());\r\n *\r\n * // Set settings\r\n * valueAxis.title.text = \"Monthly Sales\";\r\n * ```\r\n * ```JSON\r\n * \"yAxes\": [{\r\n *   \"type\": \"ValueAxis\",\r\n *   \"title\": {\r\n *     \"text\": \"Monthly Sales\"\r\n *   }\r\n * }]\r\n * ```\r\n *\r\n * @see {@link IValueAxisEvents} for a list of available Events\r\n * @see {@link IValueAxisAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class ValueAxis<T extends AxisRenderer = AxisRenderer> extends Axis<T> {\r\n\r\n\t/**\r\n\t * Defines data fields.\r\n\t */\r\n\tpublic _dataFields: IValueAxisDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IValueAxisProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IValueAxisAdapters;\r\n\r\n\t/**\r\n\t * Defines the type of the Date Items.\r\n\t */\r\n\tpublic _dataItem: ValueAxisDataItem;\r\n\r\n\t/**\r\n\t * Defines the type of the axis breaks.\r\n\t */\r\n\tpublic _axisBreak: ValueAxisBreak;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IValueAxisEvents;\r\n\r\n\t/**\r\n\t * A reference to chart the axis is for.\r\n\t */\r\n\tpublic chart: XYChart;\r\n\r\n\t/**\r\n\t * A list of Series that are using this Axis.\r\n\t */\r\n\tpublic series: List<XYSeries>;\r\n\r\n\t/**\r\n\t * Minimum value for the axis scale.\r\n\t */\r\n\tprotected _min: number;\r\n\r\n\t/**\r\n\t * Maximum value for the axis scale.\r\n\t */\r\n\tprotected _max: number;\r\n\r\n\t/**\r\n\t * User-defined min value for axis.\r\n\t */\r\n\tprotected _minDefined: number;\r\n\r\n\t/**\r\n\t * User-defined max value for axis.\r\n\t */\r\n\tprotected _maxDefined: number;\r\n\r\n\t/**\r\n\t * [_minAdjusted description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _minAdjusted: number;\r\n\r\n\t/**\r\n\t * [_maxAdjusted description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _maxAdjusted: number;\r\n\r\n\t/**\r\n\t * Min real value. (lowest value of all data points)\r\n\t */\r\n\tprotected _minReal: number;\r\n\r\n\t/**\r\n\t * Max real value. (highest value of all data points)\r\n\t */\r\n\tprotected _maxReal: number;\r\n\r\n\t/**\r\n\t * Min value within current zoom.\r\n\t */\r\n\tprotected _minZoomed: number;\r\n\r\n\t/**\r\n\t * Max value within current zoom.\r\n\t */\r\n\tprotected _maxZoomed: number\r\n\r\n\t/**\r\n\t * [_step description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _step: number;\r\n\r\n\t/**\r\n\t * [_stepDecimalPlaces description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _stepDecimalPlaces: number = 0;\r\n\tprotected _prevStepDecimalPlaces: number = 0;\r\n\tprotected _adjustLabelPrecision: boolean = true;\r\n\r\n\t/**\r\n\t * [_difference description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _difference: number;\r\n\r\n\t/**\r\n\t * Base value for the axis.\r\n\t */\r\n\tprotected _baseValue: number = 0;\r\n\r\n\t/**\r\n\t * [_previousValue description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _previousValue: number;\r\n\r\n\t/**\r\n\t * [_previousPoint description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _previousPoint: IPoint;\r\n\r\n\t/**\r\n\t * Adjusted start in case we have breaks.\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _adjustedStart: number = 0;\r\n\r\n\t/**\r\n\t * Adjusted end in case we have breaks.\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _adjustedEnd: number = 1;\r\n\r\n\tprotected _finalMin: number;\r\n\tprotected _finalMax: number;\r\n\r\n\tprotected _extremesChanged: boolean = false;\r\n\r\n\tprotected _deltaMinMax: number = 1;\r\n\r\n\tprotected _dsc: boolean = false;\r\n\r\n\t/**\r\n\t * Holds reference to a function that accepts a DataItem as parameter.\r\n\t *\r\n\t * It can either return a fill opacity for a fill, or manipulate data item\r\n\t * directly, to create various highlighting scenarios.\r\n\t */\r\n\tpublic fillRule(dataItem: this[\"_dataItem\"]): void {\r\n\t\tlet value = dataItem.value;\r\n\t\tlet axis = dataItem.component;\r\n\t\tif (!dataItem.axisFill.disabled) {\r\n\t\t\t// rounding in left to solve floating point number\r\n\t\t\tif ($math.round(value / axis.step / 2, 5) == Math.round(value / axis.step / 2)) {\r\n\t\t\t\tdataItem.axisFill.__disabled = true;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tdataItem.axisFill.__disabled = false;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * As calculating totals is expensive operation and not often needed, we\r\n\t * don't do it by default.\r\n\t *\r\n\t * In case you use `totalPercent` or `total` in your charts, this must be set\r\n\t * to `true`.\r\n\t *\r\n\t * @default false\r\n\t * @see {@link https://www.amcharts.com/docs/v4/chart-types/xy-chart/#100_stacks} For using `calculateTotals` for 100% stacked series.\r\n\t * @see {@link https://www.amcharts.com/docs/v4/concepts/formatters/formatting-strings/#Placeholders_for_numeric_values} For using `calculateTotals` in labels.\r\n\t */\r\n\tpublic calculateTotals: boolean = false;\r\n\r\n\r\n\tprotected _minMaxAnimation: Animation;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"ValueAxis\";\r\n\r\n\t\t// Set field name\r\n\t\tthis.axisFieldName = \"value\";\r\n\r\n\t\t// Set defaults\r\n\t\tthis.setPropertyValue(\"maxZoomFactor\", 1000);\r\n\t\tthis.setPropertyValue(\"extraMin\", 0);\r\n\t\tthis.setPropertyValue(\"extraMax\", 0);\r\n\t\tthis.setPropertyValue(\"strictMinMax\", false);\r\n\t\tthis.setPropertyValue(\"maxPrecision\", Number.MAX_VALUE);\r\n\t\tthis.setPropertyValue(\"adjustLabelPrecision\", true);\r\n\t\tthis.setPropertyValue(\"extraTooltipPrecision\", 0);\r\n\t\tthis.keepSelection = false;\r\n\t\tthis.includeRangesInMinMax = false;\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty [[DataItem]] of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new ValueAxisDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty [[AxisBreak]] of the appropriate type.\r\n\t *\r\n\t * @return Axis break\r\n\t */\r\n\tprotected createAxisBreak(): this[\"_axisBreak\"] {\r\n\t\treturn new ValueAxisBreak();\r\n\t}\r\n\r\n\t/**\r\n\t * [dataChangeUpdate description]\r\n\t *\r\n\t * This is a placeholder to override for extending classes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t */\r\n\tpublic dataChangeUpdate(): void {\r\n\t\tthis.clearCache();\r\n\t\tif (!this.keepSelection) {\r\n\t\t\tif (this._start != 0 || this._end != 1) {\r\n\t\t\t\tthis._start = 0;\r\n\t\t\t\tthis._end = 1;\r\n\t\t\t\tthis.dispatchImmediately(\"startendchanged\");\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\tif (this._start != 0) {\r\n\t\t\t\tthis.dispatchImmediately(\"startchanged\");\r\n\t\t\t}\r\n\t\t\tif (this._end != 1) {\r\n\t\t\t\tthis.dispatchImmediately(\"endchanged\");\r\n\r\n\t\t\t}\r\n\t\t\tif (this._start != 0 || this._end != 1) {\r\n\t\t\t\tthis.dispatchImmediately(\"startendchanged\");\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis._maxZoomed = this._maxDefined;\r\n\t\tthis._minZoomed = this._minDefined;\r\n\r\n\t\tthis._maxAdjusted = this._maxDefined;\r\n\t\tthis._minAdjusted = this._minDefined;\r\n\t}\r\n\r\n\t/**\r\n\t * Processes data items of the related Series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic processSeriesDataItems(): void {\r\n\t\t// @todo: add some boolean (maybe autodedect) if we need these calculations or not. this place uses a lot of cpu\r\n\t\tif (this.calculateTotals) {\r\n\t\t\tlet series: XYSeries = this.series.getIndex(0);\r\n\t\t\tlet startIndex: number = series.startIndex;\r\n\r\n\t\t\tif (series.dataItems.length > 0) {\r\n\r\n\t\t\t\tif (startIndex > 0) {\r\n\t\t\t\t\tstartIndex--;\r\n\t\t\t\t}\r\n\t\t\t\tlet endIndex: number = series.endIndex;\r\n\t\t\t\tif (endIndex < series.dataItems.length) {\r\n\t\t\t\t\tendIndex++;\r\n\t\t\t\t}\r\n\r\n\r\n\t\t\t\t// This has to be `var` in order to avoid garbage collection\r\n\t\t\t\tfor (let i: number = startIndex; i < endIndex; ++i) {\r\n\t\t\t\t\t// This has to be `var` in order to avoid garbage collection\r\n\t\t\t\t\tconst total: { [index: string]: number } = {};\r\n\t\t\t\t\tconst sum: { [index: string]: number } = {};\r\n\r\n\t\t\t\t\tthis.series.each((series) => {\r\n\t\t\t\t\t\tif (!series.excludeFromTotal) {\r\n\t\t\t\t\t\t\tlet dataItem: XYSeriesDataItem = series.dataItems.getIndex(i);\r\n\t\t\t\t\t\t\tif (dataItem) {\r\n\t\t\t\t\t\t\t\t$object.each(dataItem.values, (key) => {\r\n\t\t\t\t\t\t\t\t\tlet value: number = dataItem.values[key].workingValue; // can not use getWorkingValue here!\r\n\r\n\t\t\t\t\t\t\t\t\tif ($type.isNumber(value)) {\r\n\t\t\t\t\t\t\t\t\t\tif (!$type.isNumber(total[key])) {\r\n\t\t\t\t\t\t\t\t\t\t\ttotal[key] = Math.abs(value);\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\t\t\t\ttotal[key] += Math.abs(value);\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\tif (!$type.isNumber(sum[key])) {\r\n\t\t\t\t\t\t\t\t\t\t\tsum[key] = value;\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\t\t\t\tsum[key] += value;\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\r\n\r\n\r\n\t\t\t\t\tthis.series.each((series) => {\r\n\t\t\t\t\t\tif (!series.excludeFromTotal) {\r\n\t\t\t\t\t\t\tlet dataItem: XYSeriesDataItem = series.dataItems.getIndex(i);\r\n\t\t\t\t\t\t\tif (dataItem) {\r\n\t\t\t\t\t\t\t\t$object.each(dataItem.values, (key) => {\r\n\t\t\t\t\t\t\t\t\tlet value: number = dataItem.values[key].workingValue; // can not use getWorkingValue here!\r\n\t\t\t\t\t\t\t\t\tif ($type.isNumber(value)) {\r\n\t\t\t\t\t\t\t\t\t\tdataItem.setCalculatedValue(key, total[key], \"total\");\r\n\t\t\t\t\t\t\t\t\t\tdataItem.setCalculatedValue(key, 100 * value / total[key], \"totalPercent\");\r\n\t\t\t\t\t\t\t\t\t\tdataItem.setCalculatedValue(key, sum[key], \"sum\");\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Validates the whole axis. Causes it to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t */\r\n\tpublic validate(): void {\r\n\r\n\t\tif (this.axisLength <= 0) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tsuper.validate();\r\n\r\n\t\tthis.getMinMax();\r\n\r\n\t\tif (!$type.isNumber(this._minAdjusted)) {\r\n\t\t\tthis.dataItems.each((dataItem) => {\r\n\t\t\t\tdataItem.value = null;\r\n\t\t\t})\r\n\t\t}\r\n\r\n\t\tthis.fixAxisBreaks();\r\n\r\n\t\tthis.calculateZoom();\r\n\r\n\t\tthis.validateAxisElements();\r\n\r\n\t\tthis.validateAxisRanges();\r\n\r\n\t\tthis.validateBreaks();\r\n\r\n\t\tthis.hideUnusedDataItems();\r\n\r\n\t\tthis.renderer.invalidateLayout();\r\n\t\t// hide too close\r\n\t\t//this.hideTooCloseDataItems();\r\n\t}\r\n\r\n\t/**\r\n\t * Calculates all positions, related to axis as per current zoom.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic calculateZoom(): void {\r\n\t\tif ($type.isNumber(this.min) && $type.isNumber(this.max)) {\r\n\t\t\tlet min: number = this.positionToValue(this.start);\r\n\t\t\tlet max: number = this.positionToValue(this.end);\r\n\r\n\t\t\tlet differece: number = this.adjustDifference(min, max);\r\n\t\t\tlet minMaxStep: IMinMaxStep = this.adjustMinMax(min, max, differece, this._gridCount, true);\r\n\r\n\t\t\tlet stepDecimalPlaces = $utils.decimalPlaces(minMaxStep.step);\r\n\t\t\tthis._stepDecimalPlaces = stepDecimalPlaces;\r\n\r\n\t\t\tmin = $math.round(min, stepDecimalPlaces);\r\n\t\t\tmax = $math.round(max, stepDecimalPlaces);\r\n\r\n\t\t\tminMaxStep = this.adjustMinMax(min, max, differece, this._gridCount, true);\r\n\t\t\tlet step = minMaxStep.step;\r\n\r\n\t\t\tif (this.syncWithAxis) {\r\n\t\t\t\tlet calculated = this.getCache(min + \"-\" + max);\r\n\t\t\t\tif ($type.isNumber(calculated)) {\r\n\t\t\t\t\tstep = calculated;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tmin = minMaxStep.min;\r\n\t\t\t\tmax = minMaxStep.max;\r\n\t\t\t}\r\n\r\n\t\t\tif (this._minZoomed != min || this._maxZoomed != max || this._step != step || this._dsc) {\r\n\t\t\t\tthis._dsc = false;\r\n\t\t\t\tthis._minZoomed = min;\r\n\t\t\t\tthis._maxZoomed = max;\r\n\r\n\t\t\t\tthis._step = step;\r\n\r\n\t\t\t\tthis.dispatchImmediately(\"selectionextremeschanged\");\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tprotected fixSmallStep(step: number): number {\r\n\t\tif (1 + step == 1) {\r\n\t\t\tstep *= 2;\r\n\t\t\treturn this.fixSmallStep(step);\r\n\t\t}\r\n\t\treturn step;\r\n\t}\r\n\r\n\t/**\r\n\t * Validates Axis elements.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t */\r\n\tpublic validateAxisElements(): void {\r\n\t\tif ($type.isNumber(this.max) && $type.isNumber(this.min)) {\r\n\t\t\t// first regular items\r\n\t\t\tlet value: number = this.minZoomed - this._step * 2;\r\n\r\n\t\t\tif (!this.logarithmic) {\r\n\t\t\t\tvalue = Math.floor(value / this._step) * this._step;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tlet differencePower = Math.log(this.max) * Math.LOG10E - Math.log(this.min) * Math.LOG10E;\r\n\t\t\t\tif (differencePower > 1) {\r\n\t\t\t\t\tvalue = Math.pow(10, Math.log(this.min) * Math.LOG10E);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tvalue = Math.floor(this.minZoomed / this._step) * this._step;\r\n\t\t\t\t\tif (value == 0) {\r\n\t\t\t\t\t\tvalue = this.minZoomed;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tlet maxZoomed = this._maxZoomed + this._step;\r\n\r\n\t\t\tthis.resetIterators();\r\n\r\n\t\t\tlet dataItemsIterator = this._dataItemsIterator;\r\n\r\n\t\t\tif (this._step == 0) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tthis._step = this.fixSmallStep(this._step);\r\n\r\n\t\t\tlet i: number = 0;\r\n\r\n\t\t\tconst precisionChanged = this._prevStepDecimalPlaces != this._stepDecimalPlaces;\r\n\t\t\tthis._prevStepDecimalPlaces = this._stepDecimalPlaces;\r\n\r\n\t\t\twhile (value <= maxZoomed) {\r\n\t\t\t\tlet axisBreak: ValueAxisBreak = <ValueAxisBreak>this.isInBreak(value);\r\n\r\n\t\t\t\tif (!axisBreak) {\r\n\r\n\t\t\t\t\tlet dataItem: this[\"_dataItem\"] = dataItemsIterator.find((x) => x.value === value);\r\n\t\t\t\t\tif (dataItem.__disabled) {\r\n\t\t\t\t\t\tdataItem.__disabled = false;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t//this.processDataItem(dataItem);\r\n\t\t\t\t\tthis.appendDataItem(dataItem);\r\n\t\t\t\t\tdataItem.axisBreak = undefined;\r\n\r\n\t\t\t\t\tif (dataItem.value != value || precisionChanged) {\r\n\t\t\t\t\t\tdataItem.value = value;\r\n\t\t\t\t\t\tdataItem.text = this.formatLabel(value);\r\n\r\n\t\t\t\t\t\tif (dataItem.label && dataItem.label.invalid) {\r\n\t\t\t\t\t\t\tdataItem.label.validate();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif (dataItem.value >= this.min && dataItem.value <= this.max) {\r\n\t\t\t\t\t\t\tif (dataItem.label) {\r\n\t\t\t\t\t\t\t\tif ((this.axisLetter == \"Y\" && dataItem.label.measuredWidth > this.ghostLabel.measuredWidth) || (this.axisLetter == \"X\" && dataItem.label.measuredHeight > this.ghostLabel.measuredHeight)) {\r\n\t\t\t\t\t\t\t\t\tthis.ghostLabel.text = dataItem.label.currentText;\r\n\t\t\t\t\t\t\t\t\tthis.ghostLabel.validate();\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tthis.validateDataElement(dataItem);\r\n\t\t\t\t}\r\n\t\t\t\ti++;\r\n\r\n\t\t\t\tlet oldValue = value;\r\n\r\n\t\t\t\tif (!this.logarithmic) {\r\n\t\t\t\t\tvalue += this._step;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tlet differencePower = Math.log(this.max) * Math.LOG10E - Math.log(this.min) * Math.LOG10E;\r\n\t\t\t\t\tif (differencePower > 1) {\r\n\t\t\t\t\t\tvalue = Math.pow(10, Math.log(this.min) * Math.LOG10E + i);\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tvalue += this._step;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet stepPower = Math.pow(10, Math.floor(Math.log(Math.abs(this._step)) * Math.LOG10E));\r\n\r\n\t\t\t\tif (stepPower < 1) {\r\n\t\t\t\t\t// exponent is less then 1 too. Count decimals of exponent\r\n\t\t\t\t\tlet decCount = Math.round(Math.abs(Math.log(Math.abs(stepPower)) * Math.LOG10E)) + 2;\r\n\t\t\t\t\tdecCount = Math.min(13, decCount);\r\n\t\t\t\t\t// round value to avoid floating point issues\r\n\t\t\t\t\tvalue = $math.round(value, decCount);\r\n\t\t\t\t\t// ceil causes problems: https://codepen.io/team/amcharts/pen/XWMjZwy?editors=1010\r\n\t\t\t\t\tif (oldValue == value) {\r\n\t\t\t\t\t\tvalue = maxZoomed;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tlet axisBreaks = this._axisBreaks;\r\n\t\t\tif (axisBreaks) {\r\n\t\t\t\t// breaks later\r\n\t\t\t\tlet renderer: AxisRenderer = this.renderer;\r\n\r\n\t\t\t\t$iter.each(axisBreaks.iterator(), (axisBreak) => {\r\n\t\t\t\t\tif (axisBreak.breakSize > 0) {\r\n\t\t\t\t\t\t// only add grid if gap is bigger then minGridDistance\r\n\t\t\t\t\t\tif ($math.getDistance(axisBreak.startPoint, axisBreak.endPoint) > renderer.minGridDistance) {\r\n\t\t\t\t\t\t\tlet breakValue: number = axisBreak.adjustedMin;\r\n\r\n\t\t\t\t\t\t\twhile (breakValue <= axisBreak.adjustedMax) {\r\n\t\t\t\t\t\t\t\tif (breakValue >= axisBreak.adjustedStartValue && breakValue <= axisBreak.adjustedEndValue) {\r\n\t\t\t\t\t\t\t\t\tlet dataItem: this[\"_dataItem\"] = dataItemsIterator.find((x) => x.value === breakValue);\r\n\t\t\t\t\t\t\t\t\tif (dataItem.__disabled) {\r\n\t\t\t\t\t\t\t\t\t\tdataItem.__disabled = false;\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t//this.processDataItem(dataItem);\r\n\t\t\t\t\t\t\t\t\tthis.appendDataItem(dataItem);\r\n\t\t\t\t\t\t\t\t\tdataItem.axisBreak = axisBreak;\r\n\t\t\t\t\t\t\t\t\tif (dataItem.value != breakValue) {\r\n\t\t\t\t\t\t\t\t\t\tdataItem.value = breakValue;\r\n\t\t\t\t\t\t\t\t\t\tdataItem.text = this.formatLabel(breakValue);\r\n\t\t\t\t\t\t\t\t\t\tif (dataItem.label && dataItem.label.invalid) {\r\n\t\t\t\t\t\t\t\t\t\t\tdataItem.label.validate();\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\tthis.validateDataElement(dataItem);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tbreakValue += axisBreak.adjustedStep;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Validates axis data item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param dataItem  Data item\r\n\t */\r\n\tpublic validateDataElement(dataItem: this[\"_dataItem\"]): void {\r\n\t\tsuper.validateDataElement(dataItem);\r\n\r\n\t\t//dataItem.__disabled = false;\r\n\r\n\t\tdataItem.itemIndex = this._axisItemCount;\r\n\t\tthis._axisItemCount++;\r\n\r\n\t\tlet renderer: AxisRenderer = this.renderer;\r\n\t\tlet value: number = dataItem.value;\r\n\t\tlet endValue: number = dataItem.endValue;\r\n\r\n\t\tlet position: number = this.valueToPosition(value);\r\n\t\tdataItem.position = position;\r\n\r\n\t\tlet endPosition: number = position;\r\n\t\tlet fillEndPosition: number = this.valueToPosition(value + this._step);\r\n\r\n\t\tif ($type.isNumber(endValue)) {\r\n\t\t\tendPosition = this.valueToPosition(endValue);\r\n\t\t\tfillEndPosition = endPosition;\r\n\t\t}\r\n\r\n\t\t// this point is needed to calculate distance to satisfy minGridDistance\r\n\t\tdataItem.point = renderer.positionToPoint(position);\r\n\r\n\t\tlet tick: AxisTick = dataItem.tick;\r\n\t\tif (tick && !tick.disabled) {\r\n\t\t\trenderer.updateTickElement(tick, position, endPosition);\r\n\t\t}\r\n\r\n\t\tlet grid: Grid = dataItem.grid;\r\n\t\tif (grid && !grid.disabled) {\r\n\t\t\trenderer.updateGridElement(grid, position, endPosition);\r\n\t\t}\r\n\r\n\r\n\t\tlet label: AxisLabel = dataItem.label;\r\n\t\tif (label && !label.disabled) {\r\n\t\t\trenderer.updateLabelElement(label, position, endPosition);\r\n\t\t}\r\n\r\n\t\tlet fill: AxisFill = dataItem.axisFill;\r\n\t\tif (fill && !fill.disabled) {\r\n\t\t\trenderer.updateFillElement(fill, position, fillEndPosition);\r\n\t\t\tif (!dataItem.isRange) {\r\n\t\t\t\tthis.fillRule(dataItem);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (dataItem.bullet) {\r\n\t\t\trenderer.updateBullet(dataItem.bullet, position, endPosition);\r\n\t\t}\r\n\r\n\t\tlet mask: AxisFill = dataItem.mask;\r\n\t\tif (mask) {\r\n\t\t\trenderer.updateFillElement(mask, position, fillEndPosition);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Formats the value according to axis' own [[NumberFormatter]].\r\n\t *\r\n\t * @param value  Source value\r\n\t * @return Formatted value\r\n\t */\r\n\tpublic formatLabel(value: number): string {\r\n\t\tif (this.adjustLabelPrecision && value != 0) {\r\n\t\t\treturn this.numberFormatter.format(value, undefined, this._stepDecimalPlaces);\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this.numberFormatter.format(value);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Coordinates of the actual axis start.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @return Base point\r\n\t */\r\n\tpublic get basePoint(): IPoint {\r\n\t\tlet baseValue: number = this.baseValue;\r\n\t\tlet position: number = this.valueToPosition(baseValue);\r\n\t\tlet basePoint: IPoint = this.renderer.positionToPoint(position);\r\n\r\n\t\treturn basePoint;\r\n\t}\r\n\r\n\t/**\r\n\t * A base value.\r\n\t *\r\n\t * This is a threshold value that will divide \"positive\" and \"negative\"\r\n\t * value ranges.\r\n\t *\r\n\t * Other scale-related functionality also depend on base value. E.g. stacks,\r\n\t * value-dependent coloring, etc.\r\n\t *\r\n\t * @param value Base value\r\n\t */\r\n\tpublic set baseValue(value: number) {\r\n\t\tthis._baseValue = value;\r\n\t\tthis.invalidateLayout();\r\n\t\tthis.invalidateSeries();\r\n\t}\r\n\r\n\t/**\r\n\t * @return base value\r\n\t */\r\n\tpublic get baseValue(): number {\r\n\r\n\t\tlet baseValue = this._baseValue;\r\n\t\tif (this.logarithmic) {\r\n\t\t\tbaseValue = this.min;\r\n\t\t}\r\n\r\n\t\tif (!this._adapterO) {\r\n\t\t\treturn baseValue;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this._adapterO.apply(\"baseValue\", baseValue);\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Converts a numeric value to relative position on axis\r\n\t *\r\n\t * An alias to `valueToPosition()`.\r\n\t *\r\n\t * @param value  Value\r\n\t * @return Position\r\n\t */\r\n\tpublic anyToPosition(value: number): number {\r\n\t\treturn this.valueToPosition(value);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Converts a numeric value to orientation point (x, y, angle) on axis\r\n\t *\r\n\t * @param value  Value\r\n\t * @return Orientation point\r\n\t */\r\n\tpublic valueToPoint(value: number): IOrientationPoint {\r\n\t\tlet position = this.valueToPosition(value);\r\n\t\tlet point = this.renderer.positionToPoint(position);\r\n\t\tlet angle = this.renderer.positionToAngle(position);\r\n\t\treturn { x: point.x, y: point.y, angle: angle };\r\n\t}\r\n\r\n\t/**\r\n\t * Converts a numeric value to orientation (x, y, angle) point on axis\r\n\t *\r\n\t * @param value  Value\r\n\t * @return Orientation point\r\n\t */\r\n\tpublic anyToPoint(value: number): IOrientationPoint {\r\n\t\treturn this.valueToPoint(value);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Converts a numeric value to relative position on axis.\r\n\t *\r\n\t * @param value  Value\r\n\t * @return relative position\r\n\t */\r\n\tpublic valueToPosition(value: number): number {\r\n\t\tif ($type.isNumber(value)) {\r\n\r\n\t\t\t// todo: think if possible to take previous value and do not go through all previous breaks\r\n\t\t\tlet min: number = this.min;\r\n\t\t\tlet max: number = this.max;\r\n\r\n\t\t\tif ($type.isNumber(min) && $type.isNumber(max)) {\r\n\t\t\t\tlet difference: number = this._difference;\r\n\r\n\t\t\t\tlet axisBreaks = this._axisBreaks;\r\n\t\t\t\tif (axisBreaks && axisBreaks.length > 0) {\r\n\t\t\t\t\t$iter.eachContinue(axisBreaks.iterator(), (axisBreak) => {\r\n\t\t\t\t\t\tlet startValue: number = axisBreak.adjustedStartValue;\r\n\t\t\t\t\t\tlet endValue: number = axisBreak.adjustedEndValue;\r\n\r\n\t\t\t\t\t\tif ($type.isNumber(startValue) && $type.isNumber(endValue)) {\r\n\r\n\t\t\t\t\t\t\tif (value < startValue) {\r\n\t\t\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tif ($math.intersect({ start: startValue, end: endValue }, { start: min, end: max })) { // todo: check this once and set some flag in axisBreak\r\n\t\t\t\t\t\t\t\tstartValue = Math.max(startValue, min);\r\n\t\t\t\t\t\t\t\tendValue = Math.min(endValue, max);\r\n\r\n\t\t\t\t\t\t\t\tlet breakSize: number = axisBreak.breakSize;\r\n\r\n\t\t\t\t\t\t\t\t// value to the right of break end\r\n\t\t\t\t\t\t\t\tif (value > endValue) {\r\n\t\t\t\t\t\t\t\t\tmin += (endValue - startValue) * (1 - breakSize); // todo: maybe this can be done differently?\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t// value to the left of break start\r\n\t\t\t\t\t\t\t\telse if (value < startValue) {\r\n\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t// value within break\r\n\t\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\t\tvalue = startValue + (value - startValue) * breakSize;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet position;\r\n\r\n\t\t\t\tif (!this.logarithmic) {\r\n\t\t\t\t\tposition = (value - min) / difference;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tlet treatZeroAs = this.treatZeroAs;\r\n\t\t\t\t\tif ($type.isNumber(treatZeroAs)) {\r\n\t\t\t\t\t\tif (value <= treatZeroAs) {\r\n\t\t\t\t\t\t\tvalue = treatZeroAs;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tposition = (Math.log(value) * Math.LOG10E - Math.log(this.min) * Math.LOG10E) / ((Math.log(this.max) * Math.LOG10E - Math.log(this.min) * Math.LOG10E));\r\n\t\t\t\t}\r\n\r\n\t\t\t\t//position = $math.round(position, 10);\r\n\r\n\t\t\t\treturn position;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn 0;\r\n\t}\r\n\r\n\t/**\r\n\t * When fontSize of fontFamily changes we need to hard-invalidate all Labels of this container to position them properly.\r\n\t */\r\n\tpublic invalidateLabels() {\r\n\t\tsuper.invalidateLabels();\r\n\t\tif (this.dataItems) {\r\n\t\t\tthis.dataItems.each((dataItem) => {\r\n\t\t\t\tdataItem.value = undefined;\r\n\t\t\t})\r\n\t\t\tthis.invalidate();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Converts an relative position to a corresponding value within\r\n\t * axis' scale.\r\n\t *\r\n\t * @param position  Position (px)\r\n\t * @return Value\r\n\t */\r\n\tpublic positionToValue(position: number): number {\r\n\r\n\t\tlet min: number = this.min;\r\n\t\tlet max: number = this.max;\r\n\r\n\t\tif ($type.isNumber(min) && $type.isNumber(max)) {\r\n\r\n\t\t\tlet difference: number = max - min; //no need to adjust!\r\n\r\n\t\t\tlet value: number = null;\r\n\r\n\t\t\tlet axisBreaks = this._axisBreaks;\r\n\r\n\t\t\tif (axisBreaks) {\r\n\t\t\t\t// in case we have some axis breaks\r\n\t\t\t\tif (axisBreaks.length > 0) {\r\n\t\t\t\t\t$iter.eachContinue(axisBreaks.iterator(), (axisBreak) => {\r\n\t\t\t\t\t\tlet breakStartPosition: number = axisBreak.startPosition;\r\n\t\t\t\t\t\tlet breakEndPosition: number = axisBreak.endPosition;\r\n\r\n\t\t\t\t\t\tlet breakStartValue: number = axisBreak.adjustedStartValue;\r\n\t\t\t\t\t\tlet breakEndValue: number = axisBreak.adjustedEndValue;\r\n\r\n\t\t\t\t\t\tif ($type.isNumber(breakStartValue) && $type.isNumber(breakEndValue)) {\r\n\r\n\t\t\t\t\t\t\tif (breakStartValue > max) {\r\n\t\t\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tif ($math.intersect({ start: breakStartValue, end: breakEndValue }, { start: min, end: max })) {\r\n\r\n\t\t\t\t\t\t\t\tbreakStartValue = $math.max(breakStartValue, min);\r\n\t\t\t\t\t\t\t\tbreakEndValue = $math.min(breakEndValue, max);\r\n\r\n\t\t\t\t\t\t\t\tlet breakSize: number = axisBreak.breakSize;\r\n\r\n\t\t\t\t\t\t\t\tdifference -= (breakEndValue - breakStartValue) * (1 - breakSize);\r\n\r\n\t\t\t\t\t\t\t\t// position to the right of break end\r\n\t\t\t\t\t\t\t\tif (position > breakEndPosition) {\r\n\t\t\t\t\t\t\t\t\tmin += (breakEndValue - breakStartValue) * (1 - breakSize);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t// position to the left of break start\r\n\t\t\t\t\t\t\t\telse if (position < breakStartPosition) {\r\n\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t// value within break\r\n\t\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\t\tlet breakPosition: number = (position - breakStartPosition) / (breakEndPosition - breakStartPosition);\r\n\t\t\t\t\t\t\t\t\tvalue = breakStartValue + breakPosition * (breakEndValue - breakStartValue);\r\n\t\t\t\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (!$type.isNumber(value)) {\r\n\t\t\t\tif (this.logarithmic) {\r\n\t\t\t\t\tvalue = Math.pow(Math.E, (position * ((Math.log(this.max) * Math.LOG10E - Math.log(this.min) * Math.LOG10E)) + Math.log(this.min) * Math.LOG10E) / Math.LOG10E);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tvalue = position * difference + min;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\treturn value;\r\n\t\t}\r\n\t\t//}\r\n\t}\r\n\r\n\t/**\r\n\t * Converts an X coordinate to a relative value in axis' scale.\r\n\t *\r\n\t * @param x  X (px)\r\n\t * @return Value\r\n\t */\r\n\tpublic xToValue(x: number): number {\r\n\t\treturn this.positionToValue(this.pointToPosition({ x: x, y: 0 }));\r\n\t}\r\n\r\n\t/**\r\n\t * Converts an Y coordinate to a relative value in axis' scale.\r\n\t *\r\n\t * @param y  Y (px)\r\n\t * @return Value\r\n\t */\r\n\tpublic yToValue(y: number): number {\r\n\t\treturn this.positionToValue(this.pointToPosition({ x: 0, y: y }));\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Converts pixel coordinates to a relative position. (0-1)\r\n\t *\r\n\t * @param point  Coorinates (px)\r\n\t * @return Position (0-1)\r\n\t */\r\n\tpublic pointToPosition(point: IPoint): number {\r\n\t\tif (this.renderer instanceof AxisRendererY) {\r\n\t\t\treturn 1 - this.renderer.pointToPosition(point);\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this.renderer.pointToPosition(point);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected animateMinMax(min: number, max: number): Animation {\r\n\t\treturn this.animate([{ property: \"_minAdjusted\", from: this._minAdjusted, to: min }, { property: \"_maxAdjusted\", from: this._maxAdjusted, to: max }], this.rangeChangeDuration, this.rangeChangeEasing);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Calculates smallest and biggest value for the axis scale.\r\n\t * @ignore\r\n\t * @todo Description (review)\r\n\t */\r\n\tpublic getMinMax() {\r\n\r\n\t\tthis.updateGridCount();\r\n\r\n\t\tlet min: number = Number.POSITIVE_INFINITY;\r\n\t\tlet max: number = Number.NEGATIVE_INFINITY;\r\n\r\n\t\t// only if min and max are not set from outside, we go through min and max influencers\r\n\t\tif (!$type.isNumber(this._minDefined) || !$type.isNumber(this._maxDefined)) {\r\n\t\t\tthis.series.each((series) => {\r\n\t\t\t\tif (!series.ignoreMinMax) {\r\n\t\t\t\t\t// check min\r\n\t\t\t\t\tlet seriesMin: number = series.min(this);\r\n\t\t\t\t\tif ($type.isNumber(seriesMin) && (seriesMin < min)) {\r\n\t\t\t\t\t\tmin = seriesMin;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t// check max\r\n\t\t\t\t\tlet seriesMax: number = series.max(this);\r\n\r\n\t\t\t\t\tif ($type.isNumber(seriesMax) && (seriesMax > max)) {\r\n\t\t\t\t\t\tmax = seriesMax;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\tif (this.includeRangesInMinMax) {\r\n\t\t\t\tthis.axisRanges.each((range) => {\r\n\t\t\t\t\tif (!range.ignoreMinMax) {\r\n\t\t\t\t\t\tlet minValue = $math.min(range.value, range.endValue);\r\n\t\t\t\t\t\tlet maxValue = $math.max(range.value, range.endValue);\r\n\r\n\r\n\t\t\t\t\t\tif (minValue < min || !$type.isNumber(min)) {\r\n\t\t\t\t\t\t\tmin = minValue;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif (maxValue > max || !$type.isNumber(max)) {\r\n\t\t\t\t\t\t\tmax = maxValue;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t})\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (this.logarithmic) {\r\n\t\t\tlet treatZeroAs = this.treatZeroAs;\r\n\t\t\tif ($type.isNumber(treatZeroAs)) {\r\n\t\t\t\tif (min <= 0) {\r\n\t\t\t\t\tmin = treatZeroAs;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (min <= 0) {\r\n\t\t\t\tthis.raiseCriticalError(new Error(\"Logarithmic value axis can not have values <= 0.\"), true);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (min == 0 && max == 0) {\r\n\t\t\tmax = 0.9;\r\n\t\t\tmin = -0.9;\r\n\t\t}\r\n\r\n\t\t// if defined from outside\r\n\t\tif ($type.isNumber(this._minDefined)) {\r\n\t\t\tmin = this._minDefined;\r\n\t\t}\r\n\r\n\t\tif ($type.isNumber(this._maxDefined)) {\r\n\t\t\tmax = this._maxDefined;\r\n\t\t}\r\n\r\n\t\tif (this._adapterO) {\r\n\t\t\tmin = this._adapterO.apply(\"min\", min);\r\n\t\t}\r\n\r\n\t\tif (this._adapterO) {\r\n\t\t\tmax = this._adapterO.apply(\"max\", max);\r\n\t\t}\r\n\r\n\t\tif (!$type.isNumber(min) || !$type.isNumber(max)) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tthis._minReal = min;\r\n\t\tthis._maxReal = max;\r\n\r\n\t\tif (min == Number.POSITIVE_INFINITY) {\r\n\t\t\tmin = undefined;\r\n\t\t}\r\n\t\tif (max == Number.NEGATIVE_INFINITY) {\r\n\t\t\tmax = undefined;\r\n\t\t}\r\n\r\n\t\tlet dif: number = this.adjustDifference(min, max); // previously it was max-min, but not worked well\r\n\r\n\r\n\t\tmin = this.fixMin(min);\r\n\t\tmax = this.fixMax(max);\r\n\r\n\t\t// this happens if starLocation and endLocation are 0.5 and DateAxis has only one date\r\n\t\tif (max - min <= 1 / Math.pow(10, 15)) {\r\n\t\t\tif (max - min != 0) {\r\n\t\t\t\tthis._deltaMinMax = (max - min) / 2;\r\n\t\t\t}\r\n\t\t\telse {\r\n\r\n\t\t\t\t// the number by which we need to raise 10 to get difference\r\n\t\t\t\tlet exponent: number = Math.log(Math.abs(max)) * Math.LOG10E;\r\n\r\n\t\t\t\t// here we find a number which is power of 10 and has the same count of numbers as difference has\r\n\t\t\t\tlet power = Math.pow(10, Math.floor(exponent));\r\n\r\n\t\t\t\t// reduce this number by 10 times\r\n\t\t\t\tpower = power / 10;\r\n\r\n\t\t\t\tthis._deltaMinMax = power;\r\n\t\t\t}\r\n\t\t\tmin -= this._deltaMinMax;\r\n\t\t\tmax += this._deltaMinMax;\r\n\t\t}\r\n\r\n\t\tmin -= (max - min) * this.extraMin;\r\n\t\tmax += (max - min) * this.extraMax;\r\n\r\n\t\tlet strict = this.strictMinMax;\r\n\t\tif ($type.isNumber(this._maxDefined)) {\r\n\t\t\tstrict = true;\r\n\t\t}\r\n\r\n\t\tlet minMaxStep: IMinMaxStep = this.adjustMinMax(min, max, dif, this._gridCount, strict);\r\n\r\n\t\tmin = minMaxStep.min;\r\n\t\tmax = minMaxStep.max;\r\n\r\n\t\tdif = max - min;  //new\r\n\r\n\t\t// do it for the second time (importat!)\r\n\t\tminMaxStep = this.adjustMinMax(min, max, max - min, this._gridCount, true);\r\n\r\n\t\tmin = minMaxStep.min;\r\n\t\tmax = minMaxStep.max;\r\n\r\n\t\t// return min max if strict\r\n\t\tif (this.strictMinMax) {\r\n\t\t\tif ($type.isNumber(this._minDefined)) {\r\n\t\t\t\tmin = this._minDefined;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tmin = this._minReal;\r\n\t\t\t}\r\n\r\n\t\t\tif ($type.isNumber(this._maxDefined)) {\r\n\t\t\t\tmax = this._maxDefined;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tmax = this._maxReal;\r\n\t\t\t}\r\n\r\n\t\t\tif (max - min <= 0.00000001) {\r\n\t\t\t\tmin -= this._deltaMinMax;\r\n\t\t\t\tmax += this._deltaMinMax;\r\n\t\t\t}\r\n\r\n\t\t\tmin -= (max - min) * this.extraMin;\r\n\t\t\tmax += (max - min) * this.extraMax;\r\n\t\t}\r\n\r\n\t\tif (this._adapterO) {\r\n\t\t\tmin = this._adapterO.apply(\"min\", min);\r\n\t\t}\r\n\r\n\t\tif (this._adapterO) {\r\n\t\t\tmax = this._adapterO.apply(\"max\", max);\r\n\t\t}\r\n\r\n\t\tthis._step = minMaxStep.step;\r\n\r\n\t\tif (!$type.isNumber(min) && !$type.isNumber(max)) {\r\n\t\t\tthis.start = 0;\r\n\t\t\tthis.end = 1;\r\n\r\n\t\t\tthis.renderer.labels.each((label) => {\r\n\t\t\t\tlabel.dataItem.text = \"\";\r\n\t\t\t})\r\n\t\t}\r\n\r\n\t\t// checking isNumber is good when all series are hidden\r\n\t\tif ((this._minAdjusted != min || this._maxAdjusted != max) && $type.isNumber(min) && $type.isNumber(max)) {\r\n\r\n\t\t\tlet animation = this._minMaxAnimation;\r\n\r\n\t\t\tif (this._extremesChanged && $type.isNumber(this._minAdjusted) && $type.isNumber(this._maxAdjusted) && this.inited) {\r\n\t\t\t\tif ((animation && !animation.isFinished()) && this._finalMax == max && this._finalMin == min) {\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis._finalMin = min;\r\n\t\t\t\t\tthis._finalMax = max;\r\n\r\n\t\t\t\t\tanimation = this.animateMinMax(min, max);\r\n\r\n\t\t\t\t\tif (animation && !animation.isFinished()) {\r\n\t\t\t\t\t\tanimation.events.on(\"animationprogress\", this.validateDataItems, this);\r\n\r\n\t\t\t\t\t\tanimation.events.on(\"animationended\", () => {\r\n\t\t\t\t\t\t\t//this.validateDataItems();\r\n\t\t\t\t\t\t\tthis.series.each((series) => {\r\n\t\t\t\t\t\t\t\tseries.validate();\r\n\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t\tthis.validateDataItems();\r\n\t\t\t\t\t\t\tthis.handleSelectionExtremesChange();\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t\tthis._minMaxAnimation = animation;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tthis.series.each((series) => {\r\n\t\t\t\t\t\t\tseries.invalidate();\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tthis.validateDataItems();\r\n\t\t\t\t\tthis.dispatchImmediately(\"extremeschanged\");\r\n\t\t\t\t\tthis.handleSelectionExtremesChange();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tif ((animation && !animation.isFinished()) && this._finalMax == max && this._finalMin == min) {\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis._minAdjusted = min;\r\n\t\t\t\t\tthis._maxAdjusted = max;\r\n\r\n\t\t\t\t\tthis._finalMin = min;\r\n\t\t\t\t\tthis._finalMax = max;\r\n\r\n\t\t\t\t\tthis.invalidateDataItems();\r\n\t\t\t\t\tthis.dispatchImmediately(\"extremeschanged\");\r\n\r\n\t\t\t\t\tthis._saveMinMax(min, max);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tthis._extremesChanged = false;\r\n\t\tthis._difference = this.adjustDifference(min, max);\r\n\t}\r\n\r\n\t/**\r\n\t * Adjusts the minimum value.\r\n\t *\r\n\t * This is a placeholder method for extending classes to override.\r\n\t *\r\n\t * For numeric values this does nothing, however for more complex types, like\r\n\t * dates, it may be necessary to adjust.\r\n\t *\r\n\t * @param value  Value\r\n\t * @return Adjusted value\r\n\t */\r\n\tprotected fixMin(value: number): number {\r\n\t\treturn value;\r\n\t}\r\n\r\n\t/**\r\n\t * Adjusts the maximum value.\r\n\t *\r\n\t * This is a placeholder method for extending classes to override.\r\n\t *\r\n\t * For numeric values this does nothing, however for more complex types, like\r\n\t * dates, it may be necessary to adjust.\r\n\t *\r\n\t * @param value  Value\r\n\t * @return Adjusted value\r\n\t */\r\n\tprotected fixMax(value: number): number {\r\n\t\treturn value;\r\n\t}\r\n\r\n\t/**\r\n\t * Adjusts actual min and max scale values so that the axis starts and ends\r\n\t * at \"nice\" values, unless `strictMinMax` is set.\r\n\t *\r\n\t * The `difference` can be something else than `max - min`, because of the\r\n\t * axis breaks.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param min        [description]\r\n\t * @param max        [description]\r\n\t * @param difference [description]\r\n\t * @param gridCount  [description]\r\n\t * @param strictMode [description]\r\n\t * @return [description]\r\n\t */\r\n\tpublic adjustMinMax(min: number, max: number, difference: number, gridCount: number, strictMode?: boolean): IMinMaxStep {\r\n\r\n\t\t// will fail if 0\r\n\t\tif (gridCount <= 1) {\r\n\t\t\tgridCount = 1;\r\n\t\t}\r\n\r\n\t\tgridCount = Math.round(gridCount);\r\n\r\n\t\tlet initialMin: number = min;\r\n\t\tlet initialMax: number = max;\r\n\r\n\t\t// in case min and max is the same, use max\r\n\t\tif (difference === 0) {\r\n\t\t\tdifference = Math.abs(max);\r\n\t\t}\r\n\r\n\t\t// the number by which we need to raise 10 to get difference\r\n\t\tlet exponent: number = Math.log(Math.abs(difference)) * Math.LOG10E;\r\n\r\n\t\t// here we find a number which is power of 10 and has the same count of numbers as difference has\r\n\t\tlet power = Math.pow(10, Math.floor(exponent));\r\n\r\n\t\t// reduce this number by 10 times\r\n\t\tpower = power / 10;\r\n\r\n\t\tlet extra: number = power;\r\n\t\tif (strictMode) {\r\n\t\t\textra = 0;\r\n\t\t}\r\n\r\n\t\tif (!this.logarithmic) {\r\n\r\n\t\t\t// round down min\r\n\t\t\tif (strictMode) {\r\n\t\t\t\tmin = Math.floor(min / power) * power;\r\n\t\t\t\t// round up max\r\n\t\t\t\tmax = Math.ceil(max / power) * power;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tmin = Math.ceil(min / power) * power - extra;\r\n\t\t\t\t// round up max\r\n\t\t\t\tmax = Math.floor(max / power) * power + extra;\r\n\t\t\t}\r\n\r\n\t\t\t// don't let min go below 0 if real min is >= 0\r\n\t\t\tif (min < 0 && initialMin >= 0) {\r\n\t\t\t\tmin = 0;\r\n\t\t\t}\r\n\t\t\t// don't let max go above 0 if real max is <= 0\r\n\t\t\tif (max > 0 && initialMax <= 0) {\r\n\t\t\t\tmax = 0;\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\tif (min <= 0) {\r\n\t\t\t\t//throw Error(\"Logarithmic value axis can not have values <= 0.\");\r\n\t\t\t\tmin = this.baseValue;\r\n\t\t\t}\r\n\r\n\t\t\t// @todo: think of a better way or to restrict zooming when no series are selected\r\n\t\t\tif (min == Infinity) {\r\n\t\t\t\tmin = 1;\r\n\t\t\t}\r\n\r\n\t\t\tif (max == -Infinity) {\r\n\t\t\t\tmax = 10;\r\n\t\t\t}\r\n\r\n\t\t\tif (this.strictMinMax) {\r\n\t\t\t\tif (this._minDefined > 0) {\r\n\t\t\t\t\tmin = this._minDefined;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tmin = min;\r\n\t\t\t\t}\r\n\t\t\t\tif (this._maxDefined > 0) {\r\n\t\t\t\t\tmax = max;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tmin = Math.pow(10, Math.floor(Math.log(Math.abs(min)) * Math.LOG10E));\r\n\t\t\t\tmax = Math.pow(10, Math.ceil(Math.log(Math.abs(max)) * Math.LOG10E));\r\n\t\t\t}\r\n\t\t}\r\n\t\t// repeat diff, exponent and power again with rounded values\r\n\t\t//difference = this.adjustDifference(min, max);\r\n\t\t/*\r\n\r\n\t\t\t\tif(min > initialMin){\r\n\t\t\t\t\tmin = initialMin;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif(max < initialMax){\r\n\t\t\t\t\tmax = initialMax;\r\n\t\t\t\t}\r\n\t\t*/\r\n\r\n\t\texponent = Math.log(Math.abs(difference)) * Math.LOG10E;\r\n\t\tpower = Math.pow(10, Math.floor(exponent));\r\n\t\tpower = power / 10;\r\n\r\n\t\t// approximate difference between two grid lines\r\n\t\tlet step = Math.ceil((difference / gridCount) / power) * power;\r\n\r\n\t\tlet stepPower = Math.pow(10, Math.floor(Math.log(Math.abs(step)) * Math.LOG10E));\r\n\r\n\t\t// TODO: in v3 I had fixStepE here, ommiting it for a while, need to think about other solution\r\n\t\t// the step should divide by  2, 5, and 10.\r\n\t\tlet stepDivisor: number = Math.ceil(step / stepPower); // number 0 - 10\r\n\r\n\r\n\t\tif (stepDivisor > 5) {\r\n\t\t\tstepDivisor = 10;\r\n\t\t}\r\n\t\telse if (stepDivisor <= 5 && stepDivisor > 2) {\r\n\t\t\tstepDivisor = 5;\r\n\t\t}\r\n\r\n\t\t// now get real step\r\n\t\tstep = Math.ceil(step / (stepPower * stepDivisor)) * stepPower * stepDivisor;\r\n\r\n\t\tif (this.maxPrecision < Number.MAX_VALUE && step != $math.ceil(step, this.maxPrecision)) {\r\n\t\t\tstep = $math.ceil(step, this.maxPrecision);\r\n\t\t}\r\n\r\n\t\tlet decCount: number = 0;\r\n\t\t// in case numbers are smaller than 1\r\n\t\tif (stepPower < 1) {\r\n\t\t\t// exponent is less then 1 too. Count decimals of exponent\r\n\t\t\tdecCount = Math.round(Math.abs(Math.log(Math.abs(stepPower)) * Math.LOG10E)) + 1;\r\n\t\t\t// round step\r\n\t\t\tstep = $math.round(step, decCount);\r\n\t\t}\r\n\t\tif (!this.logarithmic) {\r\n\t\t\t// final min and max\r\n\t\t\tlet minCount = Math.floor(min / step);\r\n\r\n\t\t\tmin = $math.round(step * minCount, decCount);\r\n\r\n\t\t\tlet maxCount: number;\r\n\r\n\t\t\tif (!strictMode) {\r\n\t\t\t\tmaxCount = Math.ceil(max / step);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tmaxCount = Math.floor(max / step);\r\n\t\t\t}\r\n\r\n\t\t\tif (maxCount == minCount) {\r\n\t\t\t\tmaxCount++;\r\n\t\t\t}\r\n\r\n\t\t\tmax = $math.round(step * maxCount, decCount);\r\n\r\n\t\t\tif (max < initialMax) {\r\n\t\t\t\tmax = max + step;\r\n\t\t\t}\r\n\r\n\t\t\tif (min > initialMin) {\r\n\t\t\t\tmin = min - step;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn { min: min, max: max, step: step };\r\n\t}\r\n\r\n\t/**\r\n\t * A minimum value for the axis scale.\r\n\t *\r\n\t * This value might be auto-adjusted by the Axis in order to accomodate the\r\n\t * grid nicely, i.e. plot area is divided by grid in nice equal cells.\r\n\t *\r\n\t * The above might be overridden by `strictMinMax` which will force exact\r\n\t * user-defined min and max values to be used for scale.\r\n\t *\r\n\t * @param value  Min value\r\n\t */\r\n\tpublic set min(value: number | undefined) {\r\n\t\tif (this._minDefined != value) {\r\n\t\t\tthis._minDefined = value;\r\n\t\t\tthis.invalidate();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Min value\r\n\t */\r\n\tpublic get min(): number | undefined {\r\n\t\tlet min = this._minAdjusted;\r\n\t\tif (!$type.isNumber(min)) {\r\n\t\t\tmin = this._minDefined;\r\n\t\t}\r\n\t\treturn min;\r\n\t}\r\n\r\n\t/**\r\n\t * Min value as defined by user's code, not auto-calculated.\r\n\t *\r\n\t * @readonly\r\n\t * @return Min value\r\n\t */\r\n\tpublic get minDefined(): number {\r\n\t\treturn this._minDefined;\r\n\t}\r\n\r\n\t/**\r\n\t * Max value as defined by user's code, not auto-calculated.\r\n\t *\r\n\t * @readonly\r\n\t * @return Man value\r\n\t */\r\n\tpublic get maxDefined(): number {\r\n\t\treturn this._maxDefined;\r\n\t}\r\n\r\n\t/**\r\n\t * Allows relatively adjusting minimum value of the axis' scale.\r\n\t *\r\n\t * The value is relative to the actual range of values currently displayed\r\n\t * on the axis.\r\n\t *\r\n\t * E.g.: 0.5 will mean half of the current range. If we have axis displaying\r\n\t * from 100 to 200, we will now have axis displaying from 50 to 200 because\r\n\t * we asked to expand minimum value by 50% (0.5).\r\n\t *\r\n\t * NOTE: this setting is not compatible with `strictMinMax`.\r\n\t *\r\n\t * @param {number}\r\n\t */\r\n\tpublic set extraMin(value: number) {\r\n\t\tif (this.setPropertyValue(\"extraMin\", value)) {\r\n\t\t\tthis.invalidateDataItems();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number}\r\n\t */\r\n\tpublic get extraMin(): number {\r\n\t\treturn this.getPropertyValue(\"extraMin\");\r\n\t}\r\n\r\n\t/**\r\n\t * Allows relatively adjusting maximum value of the axis' scale.\r\n\t *\r\n\t * The value is relative to the actual range of values currently displayed\r\n\t * on the axis.\r\n\t *\r\n\t * E.g.: 0.5 will mean half of the current range. If we have axis displaying\r\n\t * from 100 to 200, we will now have axis displaying from 100 to 250 because\r\n\t * we asked to expand maximum value by 50% (0.5).\r\n\t *\r\n\t * NOTE: this setting is not compatible with `strictMinMax`.\r\n\t *\r\n\t * @param {number}\r\n\t */\r\n\tpublic set extraMax(value: number) {\r\n\t\tif (this.setPropertyValue(\"extraMax\", value)) {\r\n\t\t\tthis.invalidateDataItems();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Min multiplier\r\n\t */\r\n\tpublic get extraMax(): number {\r\n\t\treturn this.getPropertyValue(\"extraMax\");\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Current calculated delta in values between two adjacent grid lines (step).\r\n\t *\r\n\t * This is a read-only value and cannot be used to set actual step.\r\n\t *\r\n\t * @readonly\r\n\t * @see {@link https://www.amcharts.com/docs/v4/concepts/axes/positioning-axis-elements/#Setting_the_density_of_the_the_grid_labels} For more information about modifying density of labels\r\n\t * @return [description]\r\n\t */\r\n\tpublic get step(): number {\r\n\t\treturn this._step;\r\n\t}\r\n\r\n\t/**\r\n\t * A maximum value for the axis scale.\r\n\t *\r\n\t * This value might be auto-adjusted by the Axis in order to accomodate the\r\n\t * grid nicely, i.e. plot area is divided by grid in nice equal cells.\r\n\t *\r\n\t * The above might be overridden by `strictMinMax` which will force exact\r\n\t * user-defined min and max values to be used for scale.\r\n\t *\r\n\t * @param value  Max value\r\n\t */\r\n\tpublic set max(value: number | undefined) {\r\n\t\tif (this._maxDefined != value) {\r\n\t\t\tthis._maxDefined = value;\r\n\t\t\tthis.invalidate();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Max value\r\n\t */\r\n\tpublic get max(): number | undefined {\r\n\t\tlet max = this._maxAdjusted;\r\n\t\tif (!$type.isNumber(max)) {\r\n\t\t\tmax = this._maxDefined;\r\n\t\t}\r\n\t\treturn max;\r\n\t}\r\n\r\n\t/**\r\n\t * By default the axis will adjust precision of all numbers to match number\r\n\t * of decimals in all its labels, e.g.: `1.0`, `1.5`, `2.0`.\r\n\t *\r\n\t * To disable set `adjustLabelPrecision` to `false`, to use whatever other\r\n\t * precision or number format settings are set.\r\n\t *\r\n\t * IMPORTANT: This setting will be ignored if your number format uses\r\n\t * modifiers, e.g. `\"#a\"`.\r\n\t *\r\n\t * @default true\r\n\t * @since 4.9.14\r\n\t * @param  value  Adjust precision\r\n\t */\r\n\tpublic set adjustLabelPrecision(value: boolean) {\r\n\t\tif (this.setPropertyValue(\"adjustLabelPrecision\", value)) {\r\n\t\t\tthis.invalidate();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Adjust precision\r\n\t */\r\n\tpublic get adjustLabelPrecision(): boolean {\r\n\t\treturn this.getPropertyValue(\"adjustLabelPrecision\");\r\n\t}\r\n\r\n\t/**\r\n\t * Used for the Series to register itself as the user of this Axis.\r\n\t *\r\n\t * This will also decorate both the Series and Axis with event handlers, used\r\n\t * to redraw on Axis position/zoom change.\r\n\t *\r\n\t * A disposer for those events is returned, so that they can be disposed\r\n\t * together with Series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param series  Series\r\n\t * @return Disposer for events\r\n\t */\r\n\tpublic registerSeries(series: XYSeries): IDisposer {\r\n\t\treturn new MultiDisposer([\r\n\t\t\tsuper.registerSeries(series),\r\n\r\n\t\t\tseries.events.on(\"extremeschanged\", this.handleExtremesChange, this, false),\r\n\t\t\tseries.events.on(\"selectionextremeschanged\", this.handleSelectionExtremesChange, this, false),\r\n\t\t\tthis.events.on(\"extremeschanged\", series.invalidate, series, false)\r\n\t\t]);\r\n\t}\r\n\r\n\t/**\r\n\t * Perform tasks after Axis zoom.\r\n\t */\r\n\tprotected handleSelectionExtremesChange(): void {\r\n\r\n\t\tlet selectionMin: number;\r\n\t\tlet selectionMax: number;\r\n\r\n\t\tlet allHidden: boolean = true;\r\n\r\n\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\tif (!series.ignoreMinMax && !series.isHidden && !series.outOfRange) {\r\n\r\n\t\t\t\tif (series.visible && !series.isHiding) {\r\n\t\t\t\t\tallHidden = false;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet seriesSelectionMin: number = series.selectionMin(this);\r\n\t\t\t\tlet seriesSelectionMax: number = series.selectionMax(this);\r\n\r\n\t\t\t\tif ($type.isNumber(seriesSelectionMin)) {\r\n\t\t\t\t\tif (!$type.isNumber(selectionMin) || (seriesSelectionMin < selectionMin)) {\r\n\t\t\t\t\t\tselectionMin = seriesSelectionMin;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t// check max\r\n\t\t\t\tif ($type.isNumber(seriesSelectionMax)) {\r\n\t\t\t\t\tif (!$type.isNumber(selectionMax) || (seriesSelectionMax > selectionMax)) {\r\n\t\t\t\t\t\tselectionMax = seriesSelectionMax;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tif (this.includeRangesInMinMax) {\r\n\t\t\tthis.axisRanges.each((range) => {\r\n\t\t\t\tif (!range.ignoreMinMax) {\r\n\t\t\t\t\tlet minValue = $math.min(range.value, range.endValue);\r\n\t\t\t\t\tlet maxValue = $math.max(range.value, range.endValue);\r\n\r\n\t\t\t\t\tif (minValue < selectionMin) {\r\n\t\t\t\t\t\tselectionMin = minValue;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (maxValue > selectionMax) {\r\n\t\t\t\t\t\tselectionMax = maxValue;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t}\r\n\r\n\t\t// this is not good, as if date axis is initially zoomed, selection of y axis is reset to 0, 1 at the end of this method\r\n\t\t//$iter.each(this.series.iterator(), (series) => {\r\n\t\t//\tif (!series.appeared) {\r\n\t\t//\t\tallHidden = true;\r\n\t\t//\t}\r\n\t\t//})\r\n\r\n\t\tif ($type.isNumber(this._minDefined)) {\r\n\t\t\tif (this.strictMinMax) {\r\n\t\t\t\tselectionMin = this._minDefined;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tselectionMin = this.min;\r\n\t\t\t}\r\n\t\t}\r\n\t\telse if (this.strictMinMax) {\r\n\t\t\tselectionMin = this._minReal;\r\n\t\t}\r\n\r\n\t\tif ($type.isNumber(this._maxDefined)) {\r\n\t\t\tif (this.strictMinMax) {\r\n\t\t\t\tselectionMax = this._maxDefined;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tselectionMax = this.max;\r\n\t\t\t}\r\n\t\t}\r\n\t\telse if (this.strictMinMax) {\r\n\t\t\tselectionMax = this._maxReal;\r\n\t\t}\r\n\r\n\t\tif (selectionMin == selectionMax) {\r\n\r\n\t\t\tselectionMin -= this._deltaMinMax;\r\n\t\t\tselectionMax += this._deltaMinMax;\r\n\r\n\t\t\tlet minMaxStep2 = this.adjustMinMax(selectionMin, selectionMax, 0, this._gridCount, this.strictMinMax);\r\n\t\t\tselectionMin = minMaxStep2.min;\r\n\t\t\tselectionMax = minMaxStep2.max;\r\n\t\t}\r\n\r\n\t\tlet dif: number = this.adjustDifference(selectionMin, selectionMax);\r\n\t\tlet minMaxStep: IMinMaxStep = this.adjustMinMax(selectionMin, selectionMax, dif, this._gridCount);\r\n\r\n\t\tselectionMin = minMaxStep.min;\r\n\t\tselectionMax = minMaxStep.max;\r\n\r\n\t\tselectionMin -= (selectionMax - selectionMin) * this.extraMin;\r\n\t\tselectionMax += (selectionMax - selectionMin) * this.extraMax;\r\n\r\n\t\tselectionMin = $math.fitToRange(selectionMin, this.min, this.max);\r\n\t\tselectionMax = $math.fitToRange(selectionMax, this.min, this.max);\r\n\r\n\t\t// do it for the second time !important\r\n\t\tdif = this.adjustDifference(selectionMin, selectionMax);\r\n\t\tminMaxStep = this.adjustMinMax(selectionMin, selectionMax, dif, this._gridCount, true);\r\n\r\n\t\tselectionMin = minMaxStep.min;\r\n\t\tselectionMax = minMaxStep.max;\r\n\r\n\t\tif (this.strictMinMax) {\r\n\t\t\tselectionMin = $math.max(selectionMin, this._minDefined);\r\n\t\t\tselectionMax = $math.min(selectionMax, this._maxDefined);\r\n\t\t}\r\n\t\tlet step = minMaxStep.step;\r\n\t\tif (this.syncWithAxis) {\r\n\t\t\tminMaxStep = this.syncAxes(selectionMin, selectionMax, step)\r\n\t\t\tselectionMin = minMaxStep.min;\r\n\t\t\tselectionMax = minMaxStep.max;\r\n\t\t\tthis.invalidate();\r\n\t\t}\r\n\t\tstep = minMaxStep.step;\r\n\r\n\t\t// needed because of grouping\r\n\t\tthis._difference = this.adjustDifference(this.min, this.max);\r\n\r\n\t\tlet start: number = this.valueToPosition(selectionMin);\r\n\t\tlet end: number = this.valueToPosition(selectionMax);\r\n\r\n\t\t// in case all series are hidden or hiding, full zoomout\r\n\t\tif (allHidden && !this.syncWithAxis) {\r\n\t\t\tstart = 0;\r\n\t\t\tend = 1;\r\n\t\t}\r\n\r\n\t\tlet declination = 0;\r\n\t\tif (this.syncWithAxis) {\r\n\t\t\tdeclination = 5;\r\n\t\t\tthis.setCache(selectionMin + \"-\" + selectionMax, step);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tif (this._step != step || this._minZoomed != selectionMin || this._maxZoomed != selectionMax) {\r\n\t\t\t\tthis._dsc = true;\r\n\t\t\t}\r\n\t\t\tthis._step = step;\r\n\t\t\tthis._minZoomed = selectionMin;\r\n\t\t\tthis._maxZoomed = selectionMax;\r\n\t\t}\r\n\r\n\r\n\t\tif (!this.keepSelection) {\r\n\t\t\tthis.zoom({ start: start, end: end }, false, false, declination);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Indicates whether to blindly use exact `min` and `max` values set by user\r\n\t * when generating Axis scale.\r\n\t *\r\n\t * If not set, the Axis might slightly adjust those values to accomodate a\r\n\t * better looking grid.\r\n\t *\r\n\t * NOTE: if `min` and `max` are not set, setting `strictMinMax` to `true`\r\n\t * will result in fixing the scale of the axis to actual lowest and highest\r\n\t * values in the series within currently selected scope.\r\n\t *\r\n\t * @default false\r\n\t * @param value Use exact values?\r\n\t */\r\n\tpublic set strictMinMax(value: boolean) {\r\n\t\tif (this.setPropertyValue(\"strictMinMax\", value)) {\r\n\t\t\tthis.invalidate();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Use exact values?\r\n\t */\r\n\tpublic get strictMinMax(): boolean {\r\n\t\treturn this.getPropertyValue(\"strictMinMax\");\r\n\t}\r\n\r\n\t/**\r\n\t * Indicates if this axis should use a logarithmic scale.\r\n\t *\r\n\t * Please note that logarithmic axis can **only** accommodate values bigger\r\n\t * than zero.\r\n\t *\r\n\t * Having zero or negative values will result in error and failure of the\r\n\t * whole chart.\r\n\t *\r\n\t * @param value Logarithmic scale?\r\n\t */\r\n\tpublic set logarithmic(value: boolean) {\r\n\t\tif (this.setPropertyValue(\"logarithmic\", value)) {\r\n\t\t\tthis.invalidate();\r\n\t\t\tthis.series.each((series) => {\r\n\t\t\t\tseries.invalidateDataItems();\r\n\t\t\t})\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Logarithmic scale?\r\n\t */\r\n\tpublic get logarithmic(): boolean {\r\n\t\treturn this.getPropertyValue(\"logarithmic\");\r\n\t}\r\n\r\n\t/**\r\n\t * Indicates if a current selection (zoom) should be kept across data updates.\r\n\t *\r\n\t * If your axis is zoomed while chart's data is updated, the axis will try\r\n\t * to retain the same start and end values.\r\n\t *\r\n\t * You can also use this to initially pre-zoom axis:\r\n\t *\r\n\t * ```TypeScript\r\n\t * axis.keepSelection = true;\r\n\t * axis.start = 0.5;\r\n\t * axis.end = 0.7;\r\n\t * ```\r\n\t * ```JavaScript\r\n\t * axis.keepSelection = true;\r\n\t * axis.start = 0.5;\r\n\t * axis.end = 0.7;\r\n\t * ```\r\n\t * ```JSON\r\n\t * {\r\n\t *   \"xAxes\": [{\r\n\t *     // ...\r\n\t *     \"keepSelection\": true,\r\n\t *     \"start\": 0.5,\r\n\t *     \"end\": 0.7\r\n\t *   }]\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * The above will start the chart zoomed from the middle of the actual scope\r\n\t * to 70%.\r\n\t *\r\n\t * @since 4.1.1\r\n\t * @default false\r\n\t * @param  value  Preseve zoom after data update?\r\n\t */\r\n\tpublic set keepSelection(value: boolean) {\r\n\t\tthis.setPropertyValue(\"keepSelection\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Preseve zoom after data update?\r\n\t */\r\n\tpublic get keepSelection(): boolean {\r\n\t\treturn this.getPropertyValue(\"keepSelection\");\r\n\t}\r\n\r\n\t/**\r\n\t * If set to `true`, values of axis ranges will be included when calculating\r\n\t * range of values / scale of the [[ValueAxis]].\r\n\t *\r\n\t * @default false\r\n\t * @since 4.4.9\r\n\t * @param  value  Include ranges?\r\n\t */\r\n\tpublic set includeRangesInMinMax(value: boolean) {\r\n\t\tthis.setPropertyValue(\"includeRangesInMinMax\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Include ranges?\r\n\t */\r\n\tpublic get includeRangesInMinMax(): boolean {\r\n\t\treturn this.getPropertyValue(\"includeRangesInMinMax\");\r\n\t}\r\n\r\n\t/**\r\n\t * Maximum number of decimals to allow when placing grid lines and labels\r\n\t * on axis.\r\n\t *\r\n\t * Set it to `0` (zero) to force integer-only axis labels.\r\n\t *\r\n\t * @param {number}\r\n\t */\r\n\tpublic set maxPrecision(value: number) {\r\n\t\tif (this.setPropertyValue(\"maxPrecision\", value)) {\r\n\t\t\tthis.invalidate();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return max precision\r\n\t */\r\n\tpublic get maxPrecision(): number {\r\n\t\treturn this.getPropertyValue(\"maxPrecision\");\r\n\t}\r\n\r\n\t/**\r\n\t * This setting allows using bigger precision for numbers displayed in axis\r\n\t * tooltip.\r\n\t *\r\n\t * Please note that this setting indicates additional decimal places to\r\n\t * automatically-calculated axis number precision.\r\n\t *\r\n\t * So if your axis displays numbers like 0.1, 0.2, etc. (one decimal place),\r\n\t * and you set `extraTooltipPrecision = 1`, tooltips will display numbers\r\n\t * like 0.12, 0.25, etc. (two decimal places).\r\n\t *\r\n\t * @default 0\r\n\t * @since 4.8.3\r\n\t * @param  value  Extra decimals\r\n\t */\r\n\tpublic set extraTooltipPrecision(value: number) {\r\n\t\tif (this.setPropertyValue(\"extraTooltipPrecision\", value)) {\r\n\t\t\tthis.invalidate();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Extra decimals\r\n\t */\r\n\tpublic get extraTooltipPrecision(): number {\r\n\t\treturn this.getPropertyValue(\"extraTooltipPrecision\");\r\n\t}\r\n\r\n\t/**\r\n\t * Invalidates axis data items when series extremes change\r\n\t */\r\n\tprotected handleExtremesChange() {\r\n\t\tthis._extremesChanged = true;\r\n\t\tthis.getMinMax();\r\n\r\n\t\tif (this.ghostLabel) {\r\n\t\t\tlet mw = 0;\r\n\r\n\t\t\tthis.dataItems.each((dataItem) => {\r\n\t\t\t\tif (dataItem.label && dataItem.label.pixelWidth > mw) {\r\n\t\t\t\t\tthis.ghostLabel.text = dataItem.label.currentText;\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns relative position on axis for series' data item's value.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param dataItem  Data item\r\n\t * @param key       Data field to get value from\r\n\t * @param location  Location (0-1)\r\n\t * @param stackKey  ?\r\n\t * @return X coordinate (px)\r\n\t */\r\n\tpublic getX(dataItem: XYSeriesDataItem, key: string, location?: number, stackKey?: string, range?: IRange): number {\r\n\t\treturn this.renderer.positionToPoint(this.getPositionX(dataItem, key, location, stackKey, range)).x;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the X coordinate for series' data item's value.\r\n\t *\r\n\t * @since 4.5.14\r\n\t * @param  dataItem  Data item\r\n\t * @param  key       Data field to get value from\r\n\t * @param  location  Location (0-1)\r\n\t * @param  stackKey  ?\r\n\t * @return           Relative position\r\n\t */\r\n\tpublic getPositionX(dataItem: XYSeriesDataItem, key: string, location?: number, stackKey?: string, range?: IRange): number {\r\n\t\tlet value: number = dataItem.getWorkingValue(key);\r\n\t\tif (!$type.hasValue(stackKey)) {\r\n\t\t\tstackKey = \"valueX\";\r\n\t\t}\r\n\t\tlet stack: number = dataItem.getValue(stackKey, \"stack\");\r\n\r\n\t\tif (!$type.isNumber(value)) {\r\n\t\t\tvalue = this.baseValue;\r\n\r\n\t\t\tif (this.logarithmic) {\r\n\t\t\t\tif (stack > 0) {\r\n\t\t\t\t\tvalue = 0;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tlet position = this.valueToPosition(value + stack);\r\n\r\n\t\tif (range) {\r\n\t\t\tposition = $math.fitToRange(position, range.start, range.end);\r\n\t\t}\r\n\r\n\t\treturn position;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the Y coordinate for series' data item's value.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param dataItem  Data item\r\n\t * @param key       Data field to get value from\r\n\t * @param location  Location (0-1)\r\n\t * @param stackKey  Stack ID\r\n\t * @return Y coordinate (px)\r\n\t */\r\n\tpublic getY(dataItem: XYSeriesDataItem, key: string, location?: number, stackKey?: string, range?: IRange): number {\r\n\t\treturn this.renderer.positionToPoint(this.getPositionY(dataItem, key, location, stackKey, range)).y;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns relative position on axis for series' data item's value.\r\n\t *\r\n\t * @since 4.5.14\r\n\t * @param  dataItem  Data item\r\n\t * @param  key       Data field to get value from\r\n\t * @param  location  Location (0-1)\r\n\t * @param  stackKey  Stack ID\r\n\t * @return           Relative position\r\n\t */\r\n\tpublic getPositionY(dataItem: XYSeriesDataItem, key: string, location?: number, stackKey?: string, range?: IRange): number {\r\n\t\tlet value: number = dataItem.getWorkingValue(key);\r\n\r\n\t\tif (!$type.hasValue(stackKey)) {\r\n\t\t\tstackKey = \"valueY\";\r\n\t\t}\r\n\r\n\t\tlet stack: number = dataItem.getValue(stackKey, \"stack\");\r\n\r\n\t\tif (!$type.isNumber(value)) {\r\n\t\t\tvalue = this.baseValue;\r\n\r\n\t\t\tif (this.logarithmic) {\r\n\t\t\t\tif (stack > 0) {\r\n\t\t\t\t\tvalue = 0;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\r\n\t\tlet position = this.valueToPosition(value + stack);\r\n\t\tif (range) {\r\n\t\t\tposition = $math.fitToRange(position, range.start, range.end);\r\n\t\t}\r\n\r\n\t\treturn position;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an angle for series data item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param dataItem  Data item\r\n\t * @param key       Data field to get value from\r\n\t * @param location  Location (0-1)\r\n\t * @param stackKey  Stack ID\r\n\t * @param range Range to fit in\r\n\t * @return Angle\r\n\t */\r\n\tpublic getAngle(dataItem: XYSeriesDataItem, key: string, location?: number, stackKey?: string, range?: IRange): number {\r\n\t\tlet value: number = dataItem.getWorkingValue(key);\r\n\t\tlet stack: number = dataItem.getValue(stackKey, \"stack\");\r\n\r\n\t\tif (!$type.isNumber(value)) {\r\n\t\t\tvalue = this.baseValue;\r\n\t\t}\r\n\r\n\t\tlet position = this.valueToPosition(value + stack);\r\n\t\tif (range) {\r\n\t\t\tposition = $math.fitToRange(position, range.start, range.end);\r\n\t\t}\r\n\r\n\t\treturn this.positionToAngle(position);\r\n\t}\r\n\r\n\t/**\r\n\t * [getAnyRangePath description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param start     [description]\r\n\t * @param end       [description]\r\n\t * @param location  [description]\r\n\t * @return [description]\r\n\t */\r\n\tpublic getAnyRangePath(start: number, end: number, location?: number): string {\r\n\t\tlet startPosition: number = this.valueToPosition(start);\r\n\t\tlet endPosition: number = this.valueToPosition(end);\r\n\r\n\t\treturn this.getPositionRangePath(startPosition, endPosition); // Base class (Axis) gets range shape from AxisRenderer\r\n\t}\r\n\r\n\t/**\r\n\t * Returns text to show in a axis tooltip, based on specific position within\r\n\t * axis.\r\n\t *\r\n\t * The label will be formatted as per [[NumberFormatter]] set for the whole\r\n\t * chart, or explicitly for this Axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param position  Position (px)\r\n\t * @return Label (numeric value)\r\n\t */\r\n\tpublic getTooltipText(position: number): string {\r\n\t\tlet value: number = $math.round(this.positionToValue(position), this._stepDecimalPlaces + this.extraTooltipPrecision);\r\n\t\tlet valueStr = this.tooltip.numberFormatter.format(value);\r\n\t\tif (!this._adapterO) {\r\n\t\t\treturn valueStr;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this._adapterO.apply(\"getTooltipText\", valueStr);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Zooms axis to specific values.\r\n\t *\r\n\t * @param startValue      Start value\r\n\t * @param endValue        End value\r\n\t * @param skipRangeEvent  Do not invoke events\r\n\t * @param instantly       Do not play zoom animations\r\n\t */\r\n\tpublic zoomToValues(startValue: number, endValue: number, skipRangeEvent?: boolean, instantly?: boolean): void {\r\n\t\tlet start: number = (startValue - this.min) / (this.max - this.min);\r\n\t\tlet end: number = (endValue - this.min) / (this.max - this.min);\r\n\r\n\t\tthis.zoom({ start: start, end: end }, skipRangeEvent, instantly);\r\n\t}\r\n\r\n\t/**\r\n\t * A smallest value in axis scale within current zoom.\r\n\t *\r\n\t * @return Min zoom value\r\n\t */\r\n\tpublic get minZoomed(): number {\r\n\t\tif (!this.syncWithAxis) {\r\n\t\t\treturn $math.max(this.min, this._minZoomed);\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this._minZoomed\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A biggest value in axis scale within current zoom.\r\n\t * @return [description]\r\n\t */\r\n\tpublic get maxZoomed(): number {\r\n\t\tif (!this.syncWithAxis) {\r\n\t\t\treturn $math.min(this.max, this._maxZoomed);\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this._maxZoomed;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates positioning of Axis breaks after something changes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic fixAxisBreaks(): void {\r\n\r\n\t\tsuper.fixAxisBreaks();\r\n\t\tlet axisBreaks = this._axisBreaks;\r\n\t\tif (axisBreaks && axisBreaks.length > 0) {\r\n\t\t\t// process breaks\r\n\t\t\taxisBreaks.each((axisBreak) => {\r\n\t\t\t\tlet startValue: number = axisBreak.adjustedStartValue;\r\n\t\t\t\tlet endValue: number = axisBreak.adjustedEndValue;\r\n\r\n\t\t\t\t// break difference\r\n\t\t\t\tlet axisBreakDif: number = endValue - startValue;\r\n\t\t\t\tlet axisBreakGridCount: number = Math.ceil(axisBreakDif * axisBreak.breakSize) * this._gridCount / (this.max - this.min);\r\n\r\n\t\t\t\t// calculate min, max and step for axis break\r\n\t\t\t\tlet breakMinMaxStep = this.adjustMinMax(startValue, endValue, axisBreakDif, axisBreakGridCount, true);\r\n\r\n\t\t\t\taxisBreak.adjustedStep = breakMinMaxStep.step;\r\n\t\t\t\taxisBreak.adjustedMin = breakMinMaxStep.min;\r\n\t\t\t\taxisBreak.adjustedMax = breakMinMaxStep.max;\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\tthis._difference = this.adjustDifference(this.min, this.max);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns value based on position.\r\n\t *\r\n\t * Please note that `position` represents position within axis which may be\r\n\t * zoomed and not correspond to Cursor's `position`.\r\n\t *\r\n\t * To convert Cursor's `position` to Axis' `position` use `toAxisPosition()` method.\r\n\t *\r\n\t * @see {@link https://www.amcharts.com/docs/v4/tutorials/tracking-cursors-position-via-api/#Tracking_Cursor_s_position} For more information about cursor tracking.\r\n\t * @param position  Relative position on axis (0-1)\r\n\t * @return Position label\r\n\t */\r\n\tpublic getPositionLabel(position: number): string {\r\n\t\tlet value: number = this.positionToValue(position);\r\n\t\treturn this.numberFormatter.format(value);\r\n\t}\r\n\r\n\t/**\r\n\t * Shows Axis tooltip at specific value\r\n\t *\r\n\t * @param value Value\r\n\t */\r\n\tpublic showTooltipAt(value: number) {\r\n\t\tthis.showTooltipAtPosition(this.valueToPosition(value));\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all properties and related data from a different instance of Axis.\r\n\t *\r\n\t * @param source Source Axis\r\n\t */\r\n\tpublic copyFrom(source: this): void {\r\n\t\tsuper.copyFrom(source);\r\n\t\tthis.min = source.min;\r\n\t\tthis.max = source.max;\r\n\t\tthis.calculateTotals = source.calculateTotals;\r\n\t\tthis._baseValue = source.baseValue;\r\n\t}\r\n\r\n\t/**\r\n\t * Enables syncing of grid with another axis.\r\n\t *\r\n\t * To enable, set to a reference of the other `ValueAxis`. This axis will try\r\n\t * to maintain its scale in such way that its grid matches target axis grid.\r\n\t *\r\n\t * IMPORTANT #1: At this stage it's an experimental feature. Use it at your\r\n\t * own risk, as it may not work in 100% of the scenarios.\r\n\t *\r\n\t * IMPORTANT #2: `syncWithAxis` is not compatible with `strictMinMax` and\r\n\t * `sequencedInterpolation` settings.\r\n\t * \r\n\t * IMPORTANT #3: `syncWithAxis` is not compatible with scrollbars. Make sure\r\n\t * you do not add a scrollbar in the same direction as synced axes. For\r\n\t * example, if you have vertical synced axes, do not add `scrollbarY` on\r\n\t * your chart. It will create anomalies when used.\r\n\t *\r\n\t * IMPORTANT #4: `syncWithAxis` is not compatible with `XYCursor` if it has\r\n\t * its `behavior` set to either `zoomY` or `zoomXY`.\r\n\t *\r\n\t * @since 4.8.1\r\n\t * @param  axis  Target axis\r\n\t */\r\n\tpublic set syncWithAxis(axis: ValueAxis) {\r\n\t\tif (this.setPropertyValue(\"syncWithAxis\", axis, true)) {\r\n\t\t\tif (axis) {\r\n\t\t\t\tthis._disposers.push(axis.events.on(\"extremeschanged\", this.handleSelectionExtremesChange, this, false));\r\n\t\t\t\tthis._disposers.push(axis.events.on(\"selectionextremeschanged\", this.handleSelectionExtremesChange, this, false));\r\n\t\t\t\tthis._disposers.push(axis.events.on(\"startendchanged\", this.handleSelectionExtremesChange, this, false));\r\n\t\t\t\tthis.events.on(\"shown\", this.handleSelectionExtremesChange, this, false);\r\n\t\t\t\tthis.events.on(\"maxsizechanged\", () => {\r\n\t\t\t\t\tthis.clearCache();\r\n\t\t\t\t\tthis._disposers.push(registry.events.once(\"exitframe\", () => {\r\n\t\t\t\t\t\tthis.handleSelectionExtremesChange();\r\n\t\t\t\t\t}))\r\n\t\t\t\t}, this, false);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Target axis\r\n\t */\r\n\tpublic get syncWithAxis(): ValueAxis {\r\n\t\treturn this.getPropertyValue(\"syncWithAxis\");\r\n\t}\r\n\r\n\t/**\r\n\t * If set, zero values will be treated as this value.\r\n\t *\r\n\t * It is useful if you need to use data with zero-values on a logarithmic\r\n\t * axis scale.\r\n\t *\r\n\t * @since 4.9.34\r\n\t * @param  value  Zero replacement value\r\n\t */\r\n\tpublic set treatZeroAs(value: number) {\r\n\t\tthis.setPropertyValue(\"treatZeroAs\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Zero replacement value\r\n\t */\r\n\tpublic get treatZeroAs(): number {\r\n\t\treturn this.getPropertyValue(\"treatZeroAs\");\r\n\t}\r\n\r\n\t/**\r\n\t * Syncs with a target axis.\r\n\t *\r\n\t * @param  min  Min\r\n\t * @param  max  Max\r\n\t * @param  step Step\r\n\t */\r\n\tprotected syncAxes(min: number, max: number, step: number) {\r\n\t\tlet axis = this.syncWithAxis;\r\n\t\tif (axis) {\r\n\r\n\t\t\tif (!$type.isNumber(min)) {\r\n\t\t\t\tmin = this.min;\r\n\t\t\t}\r\n\t\t\tif (!$type.isNumber(max)) {\r\n\t\t\t\tmax = this.max;\r\n\t\t\t}\r\n\r\n\t\t\tif (!$type.isNumber(step)) {\r\n\t\t\t\tstep = this._step;\r\n\t\t\t}\r\n\r\n\t\t\tlet count: number = Math.round((axis.maxZoomed - axis.minZoomed) / axis.step);\r\n\t\t\tlet currentCount = Math.round((max - min) / step);\r\n\r\n\t\t\tif ($type.isNumber(count) && $type.isNumber(currentCount)) {\r\n\t\t\t\tlet synced = false;\r\n\t\t\t\tlet c = 0\r\n\t\t\t\tlet diff = (max - min) * 0.01;\r\n\t\t\t\tlet omin = min;\r\n\t\t\t\tlet omax = max;\r\n\t\t\t\tlet ostep = step;\r\n\r\n\t\t\t\twhile (synced != true) {\r\n\t\t\t\t\tsynced = this.checkSync(omin, omax, ostep, count);\r\n\t\t\t\t\tc++;\r\n\t\t\t\t\tif (c > 1000) {\r\n\t\t\t\t\t\tsynced = true;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (!synced) {\r\n\t\t\t\t\t\t//omin = min - diff * c;\r\n\r\n\t\t\t\t\t\tif (c / 3 == Math.round(c / 3)) {\r\n\t\t\t\t\t\t\tomin = min - diff * c;\r\n\t\t\t\t\t\t\tif (min >= 0 && omin < 0) {\r\n\t\t\t\t\t\t\t\tomin = 0;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tomax = max + diff * c;\r\n\t\t\t\t\t\t\tif (omax <= 0 && omax > 0) {\r\n\t\t\t\t\t\t\t\tomax = 0;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tlet minMaxStep = this.adjustMinMax(omin, omax, omax - omin, this._gridCount, true);\r\n\t\t\t\t\t\tomin = minMaxStep.min;\r\n\t\t\t\t\t\tomax = minMaxStep.max;\r\n\t\t\t\t\t\tostep = minMaxStep.step;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tmin = omin;\r\n\t\t\t\t\t\tmax = omax;\r\n\t\t\t\t\t\tstep = ostep;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\r\n\t\treturn { min: min, max: max, step: step };\r\n\t}\r\n\r\n\t/**\r\n\t * Returns `true` if axis needs to be resunced with some other axis.\r\n\t */\r\n\tprotected checkSync(min: number, max: number, step: number, count: number): boolean {\r\n\t\tlet currentCount = (max - min) / step;\r\n\t\tfor (let i = 1; i < count; i++) {\r\n\t\t\tif ($math.round(currentCount / i, 1) == count || currentCount * i == count) {\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\t/**\r\n\t * Processes JSON-based config before it is applied to the object.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param config  Config\r\n\t */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\tif (config) {\r\n\r\n\t\t\t// Set up axes\r\n\t\t\tif ($type.hasValue(config.syncWithAxis) && $type.isString(config.syncWithAxis)) {\r\n\t\t\t\tif (this.map.hasKey(config.syncWithAxis)) {\r\n\t\t\t\t\tconfig.syncWithAxis = this.map.getKey(config.syncWithAxis);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis.processingErrors.push(\"[ValueAxis] No axis with id \\\"\" + config.syncWithAxis + \"\\\" found for `syncWithAxis`\");\r\n\t\t\t\t\tdelete config.xAxis;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tsuper.processConfig(config);\r\n\r\n\t}\r\n\r\n\tprotected _saveMinMax(_min: number, _max: number) {\r\n\r\n\t}\t\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"ValueAxis\"] = ValueAxis;\r\nregistry.registeredClasses[\"ValueAxisDataItem\"] = ValueAxisDataItem;\r\n"],"mappings":";;;;AAAA;;;;AAIA;;;;;;AAMA,SAASA,IAAI,EAAEC,YAAY,QAAsE,QAAQ;AAEzG,SAASC,aAAa,QAAQ,iBAAiB;AAO/C,SAAoBC,aAAa,QAAQ,2BAA2B;AAGpE,SAASC,QAAQ,QAAQ,qBAAqB;AAC9C,SAASC,cAAc,QAAQ,kBAAkB;AACjD,OAAO,KAAKC,KAAK,MAAM,uBAAuB;AAC9C,OAAO,KAAKC,KAAK,MAAM,2BAA2B;AAClD,OAAO,KAAKC,OAAO,MAAM,yBAAyB;AAClD,OAAO,KAAKC,KAAK,MAAM,uBAAuB;AAC9C,OAAO,KAAKC,MAAM,MAAM,wBAAwB;AAIhD;;;;;;AAOA;;;;;AAKA,IAAAC,iBAAA,0BAAAC,MAAA;EAAuCC,SAAA,CAAAF,iBAAA,EAAAC,MAAA;EAMtC;;;EAGA,SAAAD,kBAAA;IAAA,IAAAG,KAAA,GACCF,MAAA,CAAAG,IAAA,MAAO;IACPD,KAAI,CAACE,SAAS,GAAG,mBAAmB;IAEpCF,KAAI,CAACG,MAAM,CAACC,KAAK,GAAG,EAAE;IACtBJ,KAAI,CAACG,MAAM,CAACE,QAAQ,GAAG,EAAE;IAEzBL,KAAI,CAACM,UAAU,EAAE;;EAClB;EAOAC,MAAA,CAAAC,cAAA,CAAWX,iBAAA,CAAAY,SAAA,SAAK;IAIhB;;;SAGA,SAAAC,CAAA;MACC,OAAO,IAAI,CAACP,MAAM,CAAC,OAAO,CAAC,CAACC,KAAK;IAClC,CAAC;IAdD;;;;;SAKA,SAAAO,CAAiBP,KAAa;MAC7B,IAAI,CAACQ,QAAQ,CAAC,OAAO,EAAER,KAAK,CAAC;IAC9B,CAAC;;;;EAcDG,MAAA,CAAAC,cAAA,CAAWX,iBAAA,CAAAY,SAAA,YAAQ;IAInB;;;SAGA,SAAAC,CAAA;MACC,OAAO,IAAI,CAACP,MAAM,CAAC,UAAU,CAAC,CAACC,KAAK;IACrC,CAAC;IAdD;;;;;SAKA,SAAAO,CAAoBP,KAAa;MAChC,IAAI,CAACQ,QAAQ,CAAC,UAAU,EAAER,KAAK,CAAC;IACjC,CAAC;;;;EASF,OAAAP,iBAAC;AAAD,CAAC,CAnDsCV,YAAY;;AAoInD;;;;;;AAOA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8BA,IAAA0B,SAAA,0BAAAf,MAAA;EAAsEC,SAAA,CAAAc,SAAA,EAAAf,MAAA;EAqMrE;;;EAGA,SAAAe,UAAA;IAAA,IAAAb,KAAA;IAEC;IACAF,MAAA,CAAAG,IAAA,MAAO;IApGR;;;;;IAKUD,KAAA,CAAAc,kBAAkB,GAAW,CAAC;IAC9Bd,KAAA,CAAAe,sBAAsB,GAAW,CAAC;IAClCf,KAAA,CAAAgB,qBAAqB,GAAY,IAAI;IAS/C;;;IAGUhB,KAAA,CAAAiB,UAAU,GAAW,CAAC;IAgBhC;;;;;IAKUjB,KAAA,CAAAkB,cAAc,GAAW,CAAC;IAEpC;;;;;IAKUlB,KAAA,CAAAmB,YAAY,GAAW,CAAC;IAKxBnB,KAAA,CAAAoB,gBAAgB,GAAY,KAAK;IAEjCpB,KAAA,CAAAqB,YAAY,GAAW,CAAC;IAExBrB,KAAA,CAAAsB,IAAI,GAAY,KAAK;IAsB/B;;;;;;;;;;;IAWOtB,KAAA,CAAAuB,eAAe,GAAY,KAAK;IAYtCvB,KAAI,CAACE,SAAS,GAAG,WAAW;IAE5B;IACAF,KAAI,CAACwB,aAAa,GAAG,OAAO;IAE5B;IACAxB,KAAI,CAACyB,gBAAgB,CAAC,eAAe,EAAE,IAAI,CAAC;IAC5CzB,KAAI,CAACyB,gBAAgB,CAAC,UAAU,EAAE,CAAC,CAAC;IACpCzB,KAAI,CAACyB,gBAAgB,CAAC,UAAU,EAAE,CAAC,CAAC;IACpCzB,KAAI,CAACyB,gBAAgB,CAAC,cAAc,EAAE,KAAK,CAAC;IAC5CzB,KAAI,CAACyB,gBAAgB,CAAC,cAAc,EAAEC,MAAM,CAACC,SAAS,CAAC;IACvD3B,KAAI,CAACyB,gBAAgB,CAAC,sBAAsB,EAAE,IAAI,CAAC;IACnDzB,KAAI,CAACyB,gBAAgB,CAAC,uBAAuB,EAAE,CAAC,CAAC;IACjDzB,KAAI,CAAC4B,aAAa,GAAG,KAAK;IAC1B5B,KAAI,CAAC6B,qBAAqB,GAAG,KAAK;IAElC;IACA7B,KAAI,CAACM,UAAU,EAAE;;EAClB;EA7DA;;;;;;EAMOO,SAAA,CAAAJ,SAAA,CAAAqB,QAAQ,GAAf,UAAgBC,QAA2B;IAC1C,IAAI3B,KAAK,GAAG2B,QAAQ,CAAC3B,KAAK;IAC1B,IAAI4B,IAAI,GAAGD,QAAQ,CAACE,SAAS;IAC7B,IAAI,CAACF,QAAQ,CAACG,QAAQ,CAACC,QAAQ,EAAE;MAChC;MACA,IAAI3C,KAAK,CAAC4C,KAAK,CAAChC,KAAK,GAAG4B,IAAI,CAACK,IAAI,GAAG,CAAC,EAAE,CAAC,CAAC,IAAIC,IAAI,CAACF,KAAK,CAAChC,KAAK,GAAG4B,IAAI,CAACK,IAAI,GAAG,CAAC,CAAC,EAAE;QAC/EN,QAAQ,CAACG,QAAQ,CAACK,UAAU,GAAG,IAAI;OACnC,MACI;QACJR,QAAQ,CAACG,QAAQ,CAACK,UAAU,GAAG,KAAK;;;EAGvC,CAAC;EA6CD;;;;;;EAMU1B,SAAA,CAAAJ,SAAA,CAAA+B,cAAc,GAAxB;IACC,OAAO,IAAI3C,iBAAiB,EAAE;EAC/B,CAAC;EAED;;;;;EAKUgB,SAAA,CAAAJ,SAAA,CAAAgC,eAAe,GAAzB;IACC,OAAO,IAAIlD,cAAc,EAAE;EAC5B,CAAC;EAED;;;;;;;;EAQOsB,SAAA,CAAAJ,SAAA,CAAAiC,gBAAgB,GAAvB;IACC,IAAI,CAACC,UAAU,EAAE;IACjB,IAAI,CAAC,IAAI,CAACf,aAAa,EAAE;MACxB,IAAI,IAAI,CAACgB,MAAM,IAAI,CAAC,IAAI,IAAI,CAACC,IAAI,IAAI,CAAC,EAAE;QACvC,IAAI,CAACD,MAAM,GAAG,CAAC;QACf,IAAI,CAACC,IAAI,GAAG,CAAC;QACb,IAAI,CAACC,mBAAmB,CAAC,iBAAiB,CAAC;;KAE5C,MACI;MACJ,IAAI,IAAI,CAACF,MAAM,IAAI,CAAC,EAAE;QACrB,IAAI,CAACE,mBAAmB,CAAC,cAAc,CAAC;;MAEzC,IAAI,IAAI,CAACD,IAAI,IAAI,CAAC,EAAE;QACnB,IAAI,CAACC,mBAAmB,CAAC,YAAY,CAAC;;MAGvC,IAAI,IAAI,CAACF,MAAM,IAAI,CAAC,IAAI,IAAI,CAACC,IAAI,IAAI,CAAC,EAAE;QACvC,IAAI,CAACC,mBAAmB,CAAC,iBAAiB,CAAC;;;IAI7C,IAAI,CAACC,UAAU,GAAG,IAAI,CAACC,WAAW;IAClC,IAAI,CAACC,UAAU,GAAG,IAAI,CAACC,WAAW;IAElC,IAAI,CAACC,YAAY,GAAG,IAAI,CAACH,WAAW;IACpC,IAAI,CAACI,YAAY,GAAG,IAAI,CAACF,WAAW;EACrC,CAAC;EAED;;;;;EAKOrC,SAAA,CAAAJ,SAAA,CAAA4C,sBAAsB,GAA7B;IACC;IACA,IAAI,IAAI,CAAC9B,eAAe,EAAE;MACzB,IAAI+B,MAAM,GAAa,IAAI,CAACA,MAAM,CAACC,QAAQ,CAAC,CAAC,CAAC;MAC9C,IAAIC,UAAU,GAAWF,MAAM,CAACE,UAAU;MAE1C,IAAIF,MAAM,CAACG,SAAS,CAACC,MAAM,GAAG,CAAC,EAAE;QAEhC,IAAIF,UAAU,GAAG,CAAC,EAAE;UACnBA,UAAU,EAAE;;QAEb,IAAIG,QAAQ,GAAWL,MAAM,CAACK,QAAQ;QACtC,IAAIA,QAAQ,GAAGL,MAAM,CAACG,SAAS,CAACC,MAAM,EAAE;UACvCC,QAAQ,EAAE;;gCAKFC,CAAC;UACT;UACA,IAAMC,KAAK,GAAgC,EAAE;UAC7C,IAAMC,GAAG,GAAgC,EAAE;UAE3CC,MAAA,CAAKT,MAAM,CAACU,IAAI,CAAC,UAACV,MAAM;YACvB,IAAI,CAACA,MAAM,CAACW,gBAAgB,EAAE;cAC7B,IAAIC,UAAQ,GAAqBZ,MAAM,CAACG,SAAS,CAACF,QAAQ,CAACK,CAAC,CAAC;cAC7D,IAAIM,UAAQ,EAAE;gBACbxE,OAAO,CAACsE,IAAI,CAACE,UAAQ,CAAC/D,MAAM,EAAE,UAACgE,GAAG;kBACjC,IAAI/D,KAAK,GAAW8D,UAAQ,CAAC/D,MAAM,CAACgE,GAAG,CAAC,CAACC,YAAY,CAAC,CAAC;kBAEvD,IAAIzE,KAAK,CAAC0E,QAAQ,CAACjE,KAAK,CAAC,EAAE;oBAC1B,IAAI,CAACT,KAAK,CAAC0E,QAAQ,CAACR,KAAK,CAACM,GAAG,CAAC,CAAC,EAAE;sBAChCN,KAAK,CAACM,GAAG,CAAC,GAAG7B,IAAI,CAACgC,GAAG,CAAClE,KAAK,CAAC;qBAC5B,MACI;sBACJyD,KAAK,CAACM,GAAG,CAAC,IAAI7B,IAAI,CAACgC,GAAG,CAAClE,KAAK,CAAC;;oBAE9B,IAAI,CAACT,KAAK,CAAC0E,QAAQ,CAACP,GAAG,CAACK,GAAG,CAAC,CAAC,EAAE;sBAC9BL,GAAG,CAACK,GAAG,CAAC,GAAG/D,KAAK;qBAChB,MACI;sBACJ0D,GAAG,CAACK,GAAG,CAAC,IAAI/D,KAAK;;;gBAGpB,CAAC,CAAC;;;UAGL,CAAC,CAAC;UAGF2D,MAAA,CAAKT,MAAM,CAACU,IAAI,CAAC,UAACV,MAAM;YACvB,IAAI,CAACA,MAAM,CAACW,gBAAgB,EAAE;cAC7B,IAAIM,UAAQ,GAAqBjB,MAAM,CAACG,SAAS,CAACF,QAAQ,CAACK,CAAC,CAAC;cAC7D,IAAIW,UAAQ,EAAE;gBACb7E,OAAO,CAACsE,IAAI,CAACO,UAAQ,CAACpE,MAAM,EAAE,UAACgE,GAAG;kBACjC,IAAI/D,KAAK,GAAWmE,UAAQ,CAACpE,MAAM,CAACgE,GAAG,CAAC,CAACC,YAAY,CAAC,CAAC;kBACvD,IAAIzE,KAAK,CAAC0E,QAAQ,CAACjE,KAAK,CAAC,EAAE;oBAC1BmE,UAAQ,CAACC,kBAAkB,CAACL,GAAG,EAAEN,KAAK,CAACM,GAAG,CAAC,EAAE,OAAO,CAAC;oBACrDI,UAAQ,CAACC,kBAAkB,CAACL,GAAG,EAAE,GAAG,GAAG/D,KAAK,GAAGyD,KAAK,CAACM,GAAG,CAAC,EAAE,cAAc,CAAC;oBAC1EI,UAAQ,CAACC,kBAAkB,CAACL,GAAG,EAAEL,GAAG,CAACK,GAAG,CAAC,EAAE,KAAK,CAAC;;gBAEnD,CAAC,CAAC;;;UAGL,CAAC,CAAC;;;QA/CH;QACA,KAAK,IAAIP,CAAC,GAAWJ,UAAU,EAAEI,CAAC,GAAGD,QAAQ,EAAE,EAAEC,CAAC;kBAAzCA,CAAC;;;;EAkDb,CAAC;EAGD;;;;;;EAMO/C,SAAA,CAAAJ,SAAA,CAAAgE,QAAQ,GAAf;IAEC,IAAI,IAAI,CAACC,UAAU,IAAI,CAAC,EAAE;MACzB;;IAGD5E,MAAA,CAAAW,SAAA,CAAMgE,QAAQ,CAAAxE,IAAA,MAAE;IAEhB,IAAI,CAAC0E,SAAS,EAAE;IAEhB,IAAI,CAAChF,KAAK,CAAC0E,QAAQ,CAAC,IAAI,CAACjB,YAAY,CAAC,EAAE;MACvC,IAAI,CAACK,SAAS,CAACO,IAAI,CAAC,UAACjC,QAAQ;QAC5BA,QAAQ,CAAC3B,KAAK,GAAG,IAAI;MACtB,CAAC,CAAC;;IAGH,IAAI,CAACwE,aAAa,EAAE;IAEpB,IAAI,CAACC,aAAa,EAAE;IAEpB,IAAI,CAACC,oBAAoB,EAAE;IAE3B,IAAI,CAACC,kBAAkB,EAAE;IAEzB,IAAI,CAACC,cAAc,EAAE;IAErB,IAAI,CAACC,mBAAmB,EAAE;IAE1B,IAAI,CAACC,QAAQ,CAACC,gBAAgB,EAAE;IAChC;IACA;EACD,CAAC;EAED;;;;;EAKOtE,SAAA,CAAAJ,SAAA,CAAAoE,aAAa,GAApB;IACC,IAAIlF,KAAK,CAAC0E,QAAQ,CAAC,IAAI,CAACe,GAAG,CAAC,IAAIzF,KAAK,CAAC0E,QAAQ,CAAC,IAAI,CAACgB,GAAG,CAAC,EAAE;MACzD,IAAID,GAAG,GAAW,IAAI,CAACE,eAAe,CAAC,IAAI,CAACC,KAAK,CAAC;MAClD,IAAIF,GAAG,GAAW,IAAI,CAACC,eAAe,CAAC,IAAI,CAACE,GAAG,CAAC;MAEhD,IAAIC,SAAS,GAAW,IAAI,CAACC,gBAAgB,CAACN,GAAG,EAAEC,GAAG,CAAC;MACvD,IAAIM,UAAU,GAAgB,IAAI,CAACC,YAAY,CAACR,GAAG,EAAEC,GAAG,EAAEI,SAAS,EAAE,IAAI,CAACI,UAAU,EAAE,IAAI,CAAC;MAE3F,IAAIC,iBAAiB,GAAGlG,MAAM,CAACmG,aAAa,CAACJ,UAAU,CAACtD,IAAI,CAAC;MAC7D,IAAI,CAACvB,kBAAkB,GAAGgF,iBAAiB;MAE3CV,GAAG,GAAG5F,KAAK,CAAC4C,KAAK,CAACgD,GAAG,EAAEU,iBAAiB,CAAC;MACzCT,GAAG,GAAG7F,KAAK,CAAC4C,KAAK,CAACiD,GAAG,EAAES,iBAAiB,CAAC;MAEzCH,UAAU,GAAG,IAAI,CAACC,YAAY,CAACR,GAAG,EAAEC,GAAG,EAAEI,SAAS,EAAE,IAAI,CAACI,UAAU,EAAE,IAAI,CAAC;MAC1E,IAAIxD,IAAI,GAAGsD,UAAU,CAACtD,IAAI;MAE1B,IAAI,IAAI,CAAC2D,YAAY,EAAE;QACtB,IAAIC,UAAU,GAAG,IAAI,CAACC,QAAQ,CAACd,GAAG,GAAG,GAAG,GAAGC,GAAG,CAAC;QAC/C,IAAI1F,KAAK,CAAC0E,QAAQ,CAAC4B,UAAU,CAAC,EAAE;UAC/B5D,IAAI,GAAG4D,UAAU;;OAElB,MACI;QACJb,GAAG,GAAGO,UAAU,CAACP,GAAG;QACpBC,GAAG,GAAGM,UAAU,CAACN,GAAG;;MAGrB,IAAI,IAAI,CAACpC,UAAU,IAAImC,GAAG,IAAI,IAAI,CAACrC,UAAU,IAAIsC,GAAG,IAAI,IAAI,CAACc,KAAK,IAAI9D,IAAI,IAAI,IAAI,CAACf,IAAI,EAAE;QACxF,IAAI,CAACA,IAAI,GAAG,KAAK;QACjB,IAAI,CAAC2B,UAAU,GAAGmC,GAAG;QACrB,IAAI,CAACrC,UAAU,GAAGsC,GAAG;QAErB,IAAI,CAACc,KAAK,GAAG9D,IAAI;QAEjB,IAAI,CAACS,mBAAmB,CAAC,0BAA0B,CAAC;;;EAGvD,CAAC;EAESjC,SAAA,CAAAJ,SAAA,CAAA2F,YAAY,GAAtB,UAAuB/D,IAAY;IAClC,IAAI,CAAC,GAAGA,IAAI,IAAI,CAAC,EAAE;MAClBA,IAAI,IAAI,CAAC;MACT,OAAO,IAAI,CAAC+D,YAAY,CAAC/D,IAAI,CAAC;;IAE/B,OAAOA,IAAI;EACZ,CAAC;EAED;;;;;;EAMOxB,SAAA,CAAAJ,SAAA,CAAAqE,oBAAoB,GAA3B;IAAA,IAAA9E,KAAA;IACC,IAAIL,KAAK,CAAC0E,QAAQ,CAAC,IAAI,CAACgB,GAAG,CAAC,IAAI1F,KAAK,CAAC0E,QAAQ,CAAC,IAAI,CAACe,GAAG,CAAC,EAAE;MACzD;MACA,IAAIiB,OAAK,GAAW,IAAI,CAACC,SAAS,GAAG,IAAI,CAACH,KAAK,GAAG,CAAC;MAEnD,IAAI,CAAC,IAAI,CAACI,WAAW,EAAE;QACtBF,OAAK,GAAG/D,IAAI,CAACkE,KAAK,CAACH,OAAK,GAAG,IAAI,CAACF,KAAK,CAAC,GAAG,IAAI,CAACA,KAAK;OACnD,MACI;QACJ,IAAIM,eAAe,GAAGnE,IAAI,CAACoE,GAAG,CAAC,IAAI,CAACrB,GAAG,CAAC,GAAG/C,IAAI,CAACqE,MAAM,GAAGrE,IAAI,CAACoE,GAAG,CAAC,IAAI,CAACtB,GAAG,CAAC,GAAG9C,IAAI,CAACqE,MAAM;QACzF,IAAIF,eAAe,GAAG,CAAC,EAAE;UACxBJ,OAAK,GAAG/D,IAAI,CAACsE,GAAG,CAAC,EAAE,EAAEtE,IAAI,CAACoE,GAAG,CAAC,IAAI,CAACtB,GAAG,CAAC,GAAG9C,IAAI,CAACqE,MAAM,CAAC;SACtD,MACI;UACJN,OAAK,GAAG/D,IAAI,CAACkE,KAAK,CAAC,IAAI,CAACF,SAAS,GAAG,IAAI,CAACH,KAAK,CAAC,GAAG,IAAI,CAACA,KAAK;UAC5D,IAAIE,OAAK,IAAI,CAAC,EAAE;YACfA,OAAK,GAAG,IAAI,CAACC,SAAS;;;;MAKzB,IAAIO,SAAS,GAAG,IAAI,CAAC9D,UAAU,GAAG,IAAI,CAACoD,KAAK;MAE5C,IAAI,CAACW,cAAc,EAAE;MAErB,IAAIC,mBAAiB,GAAG,IAAI,CAACC,kBAAkB;MAE/C,IAAI,IAAI,CAACb,KAAK,IAAI,CAAC,EAAE;QACpB;;MAGD,IAAI,CAACA,KAAK,GAAG,IAAI,CAACC,YAAY,CAAC,IAAI,CAACD,KAAK,CAAC;MAE1C,IAAIvC,CAAC,GAAW,CAAC;MAEjB,IAAMqD,gBAAgB,GAAG,IAAI,CAAClG,sBAAsB,IAAI,IAAI,CAACD,kBAAkB;MAC/E,IAAI,CAACC,sBAAsB,GAAG,IAAI,CAACD,kBAAkB;MAErD,OAAOuF,OAAK,IAAIQ,SAAS,EAAE;QAC1B,IAAIK,SAAS,GAAmC,IAAI,CAACC,SAAS,CAACd,OAAK,CAAC;QAErE,IAAI,CAACa,SAAS,EAAE;UAEf,IAAInF,QAAQ,GAAsBgF,mBAAiB,CAACK,IAAI,CAAC,UAACC,CAAC;YAAK,OAAAA,CAAC,CAACjH,KAAK,KAAKiG,OAAK;UAAjB,CAAiB,CAAC;UAClF,IAAItE,QAAQ,CAACQ,UAAU,EAAE;YACxBR,QAAQ,CAACQ,UAAU,GAAG,KAAK;;UAE5B;UACA,IAAI,CAAC+E,cAAc,CAACvF,QAAQ,CAAC;UAC7BA,QAAQ,CAACmF,SAAS,GAAGK,SAAS;UAE9B,IAAIxF,QAAQ,CAAC3B,KAAK,IAAIiG,OAAK,IAAIY,gBAAgB,EAAE;YAChDlF,QAAQ,CAAC3B,KAAK,GAAGiG,OAAK;YACtBtE,QAAQ,CAACyF,IAAI,GAAG,IAAI,CAACC,WAAW,CAACpB,OAAK,CAAC;YAEvC,IAAItE,QAAQ,CAAC2F,KAAK,IAAI3F,QAAQ,CAAC2F,KAAK,CAACC,OAAO,EAAE;cAC7C5F,QAAQ,CAAC2F,KAAK,CAACjD,QAAQ,EAAE;;YAE1B,IAAI1C,QAAQ,CAAC3B,KAAK,IAAI,IAAI,CAACgF,GAAG,IAAIrD,QAAQ,CAAC3B,KAAK,IAAI,IAAI,CAACiF,GAAG,EAAE;cAC7D,IAAItD,QAAQ,CAAC2F,KAAK,EAAE;gBACnB,IAAK,IAAI,CAACE,UAAU,IAAI,GAAG,IAAI7F,QAAQ,CAAC2F,KAAK,CAACG,aAAa,GAAG,IAAI,CAACC,UAAU,CAACD,aAAa,IAAM,IAAI,CAACD,UAAU,IAAI,GAAG,IAAI7F,QAAQ,CAAC2F,KAAK,CAACK,cAAc,GAAG,IAAI,CAACD,UAAU,CAACC,cAAe,EAAE;kBAC3L,IAAI,CAACD,UAAU,CAACN,IAAI,GAAGzF,QAAQ,CAAC2F,KAAK,CAACM,WAAW;kBACjD,IAAI,CAACF,UAAU,CAACrD,QAAQ,EAAE;;;;;UAK9B,IAAI,CAACwD,mBAAmB,CAAClG,QAAQ,CAAC;;QAEnC6B,CAAC,EAAE;QAEH,IAAIsE,QAAQ,GAAG7B,OAAK;QAEpB,IAAI,CAAC,IAAI,CAACE,WAAW,EAAE;UACtBF,OAAK,IAAI,IAAI,CAACF,KAAK;SACnB,MACI;UACJ,IAAIM,eAAe,GAAGnE,IAAI,CAACoE,GAAG,CAAC,IAAI,CAACrB,GAAG,CAAC,GAAG/C,IAAI,CAACqE,MAAM,GAAGrE,IAAI,CAACoE,GAAG,CAAC,IAAI,CAACtB,GAAG,CAAC,GAAG9C,IAAI,CAACqE,MAAM;UACzF,IAAIF,eAAe,GAAG,CAAC,EAAE;YACxBJ,OAAK,GAAG/D,IAAI,CAACsE,GAAG,CAAC,EAAE,EAAEtE,IAAI,CAACoE,GAAG,CAAC,IAAI,CAACtB,GAAG,CAAC,GAAG9C,IAAI,CAACqE,MAAM,GAAG/C,CAAC,CAAC;WAC1D,MACI;YACJyC,OAAK,IAAI,IAAI,CAACF,KAAK;;;QAIrB,IAAIgC,SAAS,GAAG7F,IAAI,CAACsE,GAAG,CAAC,EAAE,EAAEtE,IAAI,CAACkE,KAAK,CAAClE,IAAI,CAACoE,GAAG,CAACpE,IAAI,CAACgC,GAAG,CAAC,IAAI,CAAC6B,KAAK,CAAC,CAAC,GAAG7D,IAAI,CAACqE,MAAM,CAAC,CAAC;QAEtF,IAAIwB,SAAS,GAAG,CAAC,EAAE;UAClB;UACA,IAAIC,QAAQ,GAAG9F,IAAI,CAACF,KAAK,CAACE,IAAI,CAACgC,GAAG,CAAChC,IAAI,CAACoE,GAAG,CAACpE,IAAI,CAACgC,GAAG,CAAC6D,SAAS,CAAC,CAAC,GAAG7F,IAAI,CAACqE,MAAM,CAAC,CAAC,GAAG,CAAC;UACpFyB,QAAQ,GAAG9F,IAAI,CAAC8C,GAAG,CAAC,EAAE,EAAEgD,QAAQ,CAAC;UACjC;UACA/B,OAAK,GAAG7G,KAAK,CAAC4C,KAAK,CAACiE,OAAK,EAAE+B,QAAQ,CAAC;UACpC;UACA,IAAIF,QAAQ,IAAI7B,OAAK,EAAE;YACtBA,OAAK,GAAGQ,SAAS;YACjB;;;;MAKH,IAAIwB,UAAU,GAAG,IAAI,CAACC,WAAW;MACjC,IAAID,UAAU,EAAE;QACf;QACA,IAAIE,UAAQ,GAAiB,IAAI,CAACrD,QAAQ;QAE1CzF,KAAK,CAACuE,IAAI,CAACqE,UAAU,CAACG,QAAQ,EAAE,EAAE,UAACtB,SAAS;UAC3C,IAAIA,SAAS,CAACuB,SAAS,GAAG,CAAC,EAAE;YAC5B;YACA,IAAIjJ,KAAK,CAACkJ,WAAW,CAACxB,SAAS,CAACyB,UAAU,EAAEzB,SAAS,CAAC0B,QAAQ,CAAC,GAAGL,UAAQ,CAACM,eAAe,EAAE;cAC3F,IAAIC,YAAU,GAAW5B,SAAS,CAAC6B,WAAW;cAE9C,OAAOD,YAAU,IAAI5B,SAAS,CAAC8B,WAAW,EAAE;gBAC3C,IAAIF,YAAU,IAAI5B,SAAS,CAAC+B,kBAAkB,IAAIH,YAAU,IAAI5B,SAAS,CAACgC,gBAAgB,EAAE;kBAC3F,IAAInH,QAAQ,GAAsBgF,mBAAiB,CAACK,IAAI,CAAC,UAACC,CAAC;oBAAK,OAAAA,CAAC,CAACjH,KAAK,KAAK0I,YAAU;kBAAtB,CAAsB,CAAC;kBACvF,IAAI/G,QAAQ,CAACQ,UAAU,EAAE;oBACxBR,QAAQ,CAACQ,UAAU,GAAG,KAAK;;kBAE5B;kBACAvC,KAAI,CAACsH,cAAc,CAACvF,QAAQ,CAAC;kBAC7BA,QAAQ,CAACmF,SAAS,GAAGA,SAAS;kBAC9B,IAAInF,QAAQ,CAAC3B,KAAK,IAAI0I,YAAU,EAAE;oBACjC/G,QAAQ,CAAC3B,KAAK,GAAG0I,YAAU;oBAC3B/G,QAAQ,CAACyF,IAAI,GAAGxH,KAAI,CAACyH,WAAW,CAACqB,YAAU,CAAC;oBAC5C,IAAI/G,QAAQ,CAAC2F,KAAK,IAAI3F,QAAQ,CAAC2F,KAAK,CAACC,OAAO,EAAE;sBAC7C5F,QAAQ,CAAC2F,KAAK,CAACjD,QAAQ,EAAE;;;kBAG3BzE,KAAI,CAACiI,mBAAmB,CAAClG,QAAQ,CAAC;;gBAEnC+G,YAAU,IAAI5B,SAAS,CAACiC,YAAY;;;;QAIxC,CAAC,CAAC;;;EAGL,CAAC;EAED;;;;;;;EAOOtI,SAAA,CAAAJ,SAAA,CAAAwH,mBAAmB,GAA1B,UAA2BlG,QAA2B;IACrDjC,MAAA,CAAAW,SAAA,CAAMwH,mBAAmB,CAAAhI,IAAA,OAAC8B,QAAQ,CAAC;IAEnC;IAEAA,QAAQ,CAACqH,SAAS,GAAG,IAAI,CAACC,cAAc;IACxC,IAAI,CAACA,cAAc,EAAE;IAErB,IAAInE,QAAQ,GAAiB,IAAI,CAACA,QAAQ;IAC1C,IAAI9E,KAAK,GAAW2B,QAAQ,CAAC3B,KAAK;IAClC,IAAIC,QAAQ,GAAW0B,QAAQ,CAAC1B,QAAQ;IAExC,IAAIiJ,QAAQ,GAAW,IAAI,CAACC,eAAe,CAACnJ,KAAK,CAAC;IAClD2B,QAAQ,CAACuH,QAAQ,GAAGA,QAAQ;IAE5B,IAAIE,WAAW,GAAWF,QAAQ;IAClC,IAAIG,eAAe,GAAW,IAAI,CAACF,eAAe,CAACnJ,KAAK,GAAG,IAAI,CAAC+F,KAAK,CAAC;IAEtE,IAAIxG,KAAK,CAAC0E,QAAQ,CAAChE,QAAQ,CAAC,EAAE;MAC7BmJ,WAAW,GAAG,IAAI,CAACD,eAAe,CAAClJ,QAAQ,CAAC;MAC5CoJ,eAAe,GAAGD,WAAW;;IAG9B;IACAzH,QAAQ,CAAC2H,KAAK,GAAGxE,QAAQ,CAACyE,eAAe,CAACL,QAAQ,CAAC;IAEnD,IAAIM,IAAI,GAAa7H,QAAQ,CAAC6H,IAAI;IAClC,IAAIA,IAAI,IAAI,CAACA,IAAI,CAACzH,QAAQ,EAAE;MAC3B+C,QAAQ,CAAC2E,iBAAiB,CAACD,IAAI,EAAEN,QAAQ,EAAEE,WAAW,CAAC;;IAGxD,IAAIM,IAAI,GAAS/H,QAAQ,CAAC+H,IAAI;IAC9B,IAAIA,IAAI,IAAI,CAACA,IAAI,CAAC3H,QAAQ,EAAE;MAC3B+C,QAAQ,CAAC6E,iBAAiB,CAACD,IAAI,EAAER,QAAQ,EAAEE,WAAW,CAAC;;IAIxD,IAAI9B,KAAK,GAAc3F,QAAQ,CAAC2F,KAAK;IACrC,IAAIA,KAAK,IAAI,CAACA,KAAK,CAACvF,QAAQ,EAAE;MAC7B+C,QAAQ,CAAC8E,kBAAkB,CAACtC,KAAK,EAAE4B,QAAQ,EAAEE,WAAW,CAAC;;IAG1D,IAAIS,IAAI,GAAalI,QAAQ,CAACG,QAAQ;IACtC,IAAI+H,IAAI,IAAI,CAACA,IAAI,CAAC9H,QAAQ,EAAE;MAC3B+C,QAAQ,CAACgF,iBAAiB,CAACD,IAAI,EAAEX,QAAQ,EAAEG,eAAe,CAAC;MAC3D,IAAI,CAAC1H,QAAQ,CAACoI,OAAO,EAAE;QACtB,IAAI,CAACrI,QAAQ,CAACC,QAAQ,CAAC;;;IAIzB,IAAIA,QAAQ,CAACqI,MAAM,EAAE;MACpBlF,QAAQ,CAACmF,YAAY,CAACtI,QAAQ,CAACqI,MAAM,EAAEd,QAAQ,EAAEE,WAAW,CAAC;;IAG9D,IAAIc,IAAI,GAAavI,QAAQ,CAACuI,IAAI;IAClC,IAAIA,IAAI,EAAE;MACTpF,QAAQ,CAACgF,iBAAiB,CAACI,IAAI,EAAEhB,QAAQ,EAAEG,eAAe,CAAC;;EAE7D,CAAC;EAED;;;;;;EAMO5I,SAAA,CAAAJ,SAAA,CAAAgH,WAAW,GAAlB,UAAmBrH,KAAa;IAC/B,IAAI,IAAI,CAACmK,oBAAoB,IAAInK,KAAK,IAAI,CAAC,EAAE;MAC5C,OAAO,IAAI,CAACoK,eAAe,CAACC,MAAM,CAACrK,KAAK,EAAEmH,SAAS,EAAE,IAAI,CAACzG,kBAAkB,CAAC;KAC7E,MACI;MACJ,OAAO,IAAI,CAAC0J,eAAe,CAACC,MAAM,CAACrK,KAAK,CAAC;;EAE3C,CAAC;EAQDG,MAAA,CAAAC,cAAA,CAAWK,SAAA,CAAAJ,SAAA,aAAS;IANpB;;;;;;SAMA,SAAAC,CAAA;MACC,IAAIgK,SAAS,GAAW,IAAI,CAACA,SAAS;MACtC,IAAIpB,QAAQ,GAAW,IAAI,CAACC,eAAe,CAACmB,SAAS,CAAC;MACtD,IAAIC,SAAS,GAAW,IAAI,CAACzF,QAAQ,CAACyE,eAAe,CAACL,QAAQ,CAAC;MAE/D,OAAOqB,SAAS;IACjB,CAAC;;;;EAaDpK,MAAA,CAAAC,cAAA,CAAWK,SAAA,CAAAJ,SAAA,aAAS;IAMpB;;;SAGA,SAAAC,CAAA;MAEC,IAAIgK,SAAS,GAAG,IAAI,CAACzJ,UAAU;MAC/B,IAAI,IAAI,CAACsF,WAAW,EAAE;QACrBmE,SAAS,GAAG,IAAI,CAACtF,GAAG;;MAGrB,IAAI,CAAC,IAAI,CAACwF,SAAS,EAAE;QACpB,OAAOF,SAAS;OAChB,MACI;QACJ,OAAO,IAAI,CAACE,SAAS,CAACC,KAAK,CAAC,WAAW,EAAEH,SAAS,CAAC;;IAGrD,CAAC;IAlCD;;;;;;;;;;;SAWA,SAAA/J,CAAqBP,KAAa;MACjC,IAAI,CAACa,UAAU,GAAGb,KAAK;MACvB,IAAI,CAAC+E,gBAAgB,EAAE;MACvB,IAAI,CAAC2F,gBAAgB,EAAE;IACxB,CAAC;;;;EAqBD;;;;;;;;EAQOjK,SAAA,CAAAJ,SAAA,CAAAsK,aAAa,GAApB,UAAqB3K,KAAa;IACjC,OAAO,IAAI,CAACmJ,eAAe,CAACnJ,KAAK,CAAC;EACnC,CAAC;EAGD;;;;;;EAMOS,SAAA,CAAAJ,SAAA,CAAAuK,YAAY,GAAnB,UAAoB5K,KAAa;IAChC,IAAIkJ,QAAQ,GAAG,IAAI,CAACC,eAAe,CAACnJ,KAAK,CAAC;IAC1C,IAAIsJ,KAAK,GAAG,IAAI,CAACxE,QAAQ,CAACyE,eAAe,CAACL,QAAQ,CAAC;IACnD,IAAI2B,KAAK,GAAG,IAAI,CAAC/F,QAAQ,CAACgG,eAAe,CAAC5B,QAAQ,CAAC;IACnD,OAAO;MAAEjC,CAAC,EAAEqC,KAAK,CAACrC,CAAC;MAAE8D,CAAC,EAAEzB,KAAK,CAACyB,CAAC;MAAEF,KAAK,EAAEA;IAAK,CAAE;EAChD,CAAC;EAED;;;;;;EAMOpK,SAAA,CAAAJ,SAAA,CAAA2K,UAAU,GAAjB,UAAkBhL,KAAa;IAC9B,OAAO,IAAI,CAAC4K,YAAY,CAAC5K,KAAK,CAAC;EAChC,CAAC;EAGD;;;;;;EAMOS,SAAA,CAAAJ,SAAA,CAAA8I,eAAe,GAAtB,UAAuBnJ,KAAa;IACnC,IAAIT,KAAK,CAAC0E,QAAQ,CAACjE,KAAK,CAAC,EAAE;MAE1B;MACA,IAAIiL,KAAG,GAAW,IAAI,CAACjG,GAAG;MAC1B,IAAIkG,KAAG,GAAW,IAAI,CAACjG,GAAG;MAE1B,IAAI1F,KAAK,CAAC0E,QAAQ,CAACgH,KAAG,CAAC,IAAI1L,KAAK,CAAC0E,QAAQ,CAACiH,KAAG,CAAC,EAAE;QAC/C,IAAIC,UAAU,GAAW,IAAI,CAACC,WAAW;QAEzC,IAAInD,UAAU,GAAG,IAAI,CAACC,WAAW;QACjC,IAAID,UAAU,IAAIA,UAAU,CAAC3E,MAAM,GAAG,CAAC,EAAE;UACxCjE,KAAK,CAACgM,YAAY,CAACpD,UAAU,CAACG,QAAQ,EAAE,EAAE,UAACtB,SAAS;YACnD,IAAIwE,UAAU,GAAWxE,SAAS,CAAC+B,kBAAkB;YACrD,IAAI5I,QAAQ,GAAW6G,SAAS,CAACgC,gBAAgB;YAEjD,IAAIvJ,KAAK,CAAC0E,QAAQ,CAACqH,UAAU,CAAC,IAAI/L,KAAK,CAAC0E,QAAQ,CAAChE,QAAQ,CAAC,EAAE;cAE3D,IAAID,KAAK,GAAGsL,UAAU,EAAE;gBACvB,OAAO,KAAK;;cAGb,IAAIlM,KAAK,CAACmM,SAAS,CAAC;gBAAEpG,KAAK,EAAEmG,UAAU;gBAAElG,GAAG,EAAEnF;cAAQ,CAAE,EAAE;gBAAEkF,KAAK,EAAE8F,KAAG;gBAAE7F,GAAG,EAAE8F;cAAG,CAAE,CAAC,EAAE;gBAAE;gBACtFI,UAAU,GAAGpJ,IAAI,CAAC+C,GAAG,CAACqG,UAAU,EAAEL,KAAG,CAAC;gBACtChL,QAAQ,GAAGiC,IAAI,CAAC8C,GAAG,CAAC/E,QAAQ,EAAEiL,KAAG,CAAC;gBAElC,IAAI7C,SAAS,GAAWvB,SAAS,CAACuB,SAAS;gBAE3C;gBACA,IAAIrI,KAAK,GAAGC,QAAQ,EAAE;kBACrBgL,KAAG,IAAI,CAAChL,QAAQ,GAAGqL,UAAU,KAAK,CAAC,GAAGjD,SAAS,CAAC,CAAC,CAAC;;gBAEnD;gBAAA,KACK,IAAIrI,KAAK,GAAGsL,UAAU,EAAE,C;gBAG7B;gBAAA,KACK;kBACJtL,KAAK,GAAGsL,UAAU,GAAG,CAACtL,KAAK,GAAGsL,UAAU,IAAIjD,SAAS;;;;YAKxD,OAAO,IAAI;UACZ,CAAC,CAAC;;QAGH,IAAIa,QAAQ;QAEZ,IAAI,CAAC,IAAI,CAAC/C,WAAW,EAAE;UACtB+C,QAAQ,GAAG,CAAClJ,KAAK,GAAGiL,KAAG,IAAIE,UAAU;SACrC,MACI;UACJ,IAAIK,WAAW,GAAG,IAAI,CAACA,WAAW;UAClC,IAAIjM,KAAK,CAAC0E,QAAQ,CAACuH,WAAW,CAAC,EAAE;YAChC,IAAIxL,KAAK,IAAIwL,WAAW,EAAE;cACzBxL,KAAK,GAAGwL,WAAW;;;UAIrBtC,QAAQ,GAAG,CAAChH,IAAI,CAACoE,GAAG,CAACtG,KAAK,CAAC,GAAGkC,IAAI,CAACqE,MAAM,GAAGrE,IAAI,CAACoE,GAAG,CAAC,IAAI,CAACtB,GAAG,CAAC,GAAG9C,IAAI,CAACqE,MAAM,KAAMrE,IAAI,CAACoE,GAAG,CAAC,IAAI,CAACrB,GAAG,CAAC,GAAG/C,IAAI,CAACqE,MAAM,GAAGrE,IAAI,CAACoE,GAAG,CAAC,IAAI,CAACtB,GAAG,CAAC,GAAG9C,IAAI,CAACqE,MAAM,CAAE;;QAGxJ;QAEA,OAAO2C,QAAQ;;;IAIjB,OAAO,CAAC;EACT,CAAC;EAED;;;EAGOzI,SAAA,CAAAJ,SAAA,CAAAoL,gBAAgB,GAAvB;IACC/L,MAAA,CAAAW,SAAA,CAAMoL,gBAAgB,CAAA5L,IAAA,MAAE;IACxB,IAAI,IAAI,CAACwD,SAAS,EAAE;MACnB,IAAI,CAACA,SAAS,CAACO,IAAI,CAAC,UAACjC,QAAQ;QAC5BA,QAAQ,CAAC3B,KAAK,GAAGmH,SAAS;MAC3B,CAAC,CAAC;MACF,IAAI,CAACuE,UAAU,EAAE;;EAEnB,CAAC;EAED;;;;;;;EAOOjL,SAAA,CAAAJ,SAAA,CAAA6E,eAAe,GAAtB,UAAuBgE,QAAgB;IAEtC,IAAIlE,GAAG,GAAW,IAAI,CAACA,GAAG;IAC1B,IAAIC,GAAG,GAAW,IAAI,CAACA,GAAG;IAE1B,IAAI1F,KAAK,CAAC0E,QAAQ,CAACe,GAAG,CAAC,IAAIzF,KAAK,CAAC0E,QAAQ,CAACgB,GAAG,CAAC,EAAE;MAE/C,IAAI0G,YAAU,GAAW1G,GAAG,GAAGD,GAAG,CAAC,CAAC;MAEpC,IAAI4G,OAAK,GAAW,IAAI;MAExB,IAAI3D,UAAU,GAAG,IAAI,CAACC,WAAW;MAEjC,IAAID,UAAU,EAAE;QACf;QACA,IAAIA,UAAU,CAAC3E,MAAM,GAAG,CAAC,EAAE;UAC1BjE,KAAK,CAACgM,YAAY,CAACpD,UAAU,CAACG,QAAQ,EAAE,EAAE,UAACtB,SAAS;YACnD,IAAI+E,kBAAkB,GAAW/E,SAAS,CAACgF,aAAa;YACxD,IAAIC,gBAAgB,GAAWjF,SAAS,CAACsC,WAAW;YAEpD,IAAI4C,eAAe,GAAWlF,SAAS,CAAC+B,kBAAkB;YAC1D,IAAIoD,aAAa,GAAWnF,SAAS,CAACgC,gBAAgB;YAEtD,IAAIvJ,KAAK,CAAC0E,QAAQ,CAAC+H,eAAe,CAAC,IAAIzM,KAAK,CAAC0E,QAAQ,CAACgI,aAAa,CAAC,EAAE;cAErE,IAAID,eAAe,GAAG/G,GAAG,EAAE;gBAC1B,OAAO,KAAK;;cAGb,IAAI7F,KAAK,CAACmM,SAAS,CAAC;gBAAEpG,KAAK,EAAE6G,eAAe;gBAAE5G,GAAG,EAAE6G;cAAa,CAAE,EAAE;gBAAE9G,KAAK,EAAEH,GAAG;gBAAEI,GAAG,EAAEH;cAAG,CAAE,CAAC,EAAE;gBAE9F+G,eAAe,GAAG5M,KAAK,CAAC6F,GAAG,CAAC+G,eAAe,EAAEhH,GAAG,CAAC;gBACjDiH,aAAa,GAAG7M,KAAK,CAAC4F,GAAG,CAACiH,aAAa,EAAEhH,GAAG,CAAC;gBAE7C,IAAIoD,SAAS,GAAWvB,SAAS,CAACuB,SAAS;gBAE3CsD,YAAU,IAAI,CAACM,aAAa,GAAGD,eAAe,KAAK,CAAC,GAAG3D,SAAS,CAAC;gBAEjE;gBACA,IAAIa,QAAQ,GAAG6C,gBAAgB,EAAE;kBAChC/G,GAAG,IAAI,CAACiH,aAAa,GAAGD,eAAe,KAAK,CAAC,GAAG3D,SAAS,CAAC;;gBAE3D;gBAAA,KACK,IAAIa,QAAQ,GAAG2C,kBAAkB,EAAE,C;gBAGxC;gBAAA,KACK;kBACJ,IAAIK,aAAa,GAAW,CAAChD,QAAQ,GAAG2C,kBAAkB,KAAKE,gBAAgB,GAAGF,kBAAkB,CAAC;kBACrGD,OAAK,GAAGI,eAAe,GAAGE,aAAa,IAAID,aAAa,GAAGD,eAAe,CAAC;kBAC3E,OAAO,KAAK;;;cAGd,OAAO,IAAI;;UAEb,CAAC,CAAC;;;MAIJ,IAAI,CAACzM,KAAK,CAAC0E,QAAQ,CAAC2H,OAAK,CAAC,EAAE;QAC3B,IAAI,IAAI,CAACzF,WAAW,EAAE;UACrByF,OAAK,GAAG1J,IAAI,CAACsE,GAAG,CAACtE,IAAI,CAACiK,CAAC,EAAE,CAACjD,QAAQ,IAAKhH,IAAI,CAACoE,GAAG,CAAC,IAAI,CAACrB,GAAG,CAAC,GAAG/C,IAAI,CAACqE,MAAM,GAAGrE,IAAI,CAACoE,GAAG,CAAC,IAAI,CAACtB,GAAG,CAAC,GAAG9C,IAAI,CAACqE,MAAM,CAAE,GAAGrE,IAAI,CAACoE,GAAG,CAAC,IAAI,CAACtB,GAAG,CAAC,GAAG9C,IAAI,CAACqE,MAAM,IAAIrE,IAAI,CAACqE,MAAM,CAAC;SAC/J,MACI;UACJqF,OAAK,GAAG1C,QAAQ,GAAGyC,YAAU,GAAG3G,GAAG;;;MAIrC,OAAO4G,OAAK;;IAEb;EACD,CAAC;EAED;;;;;;EAMOnL,SAAA,CAAAJ,SAAA,CAAA+L,QAAQ,GAAf,UAAgBnF,CAAS;IACxB,OAAO,IAAI,CAAC/B,eAAe,CAAC,IAAI,CAACmH,eAAe,CAAC;MAAEpF,CAAC,EAAEA,CAAC;MAAE8D,CAAC,EAAE;IAAC,CAAE,CAAC,CAAC;EAClE,CAAC;EAED;;;;;;EAMOtK,SAAA,CAAAJ,SAAA,CAAAiM,QAAQ,GAAf,UAAgBvB,CAAS;IACxB,OAAO,IAAI,CAAC7F,eAAe,CAAC,IAAI,CAACmH,eAAe,CAAC;MAAEpF,CAAC,EAAE,CAAC;MAAE8D,CAAC,EAAEA;IAAC,CAAE,CAAC,CAAC;EAClE,CAAC;EAGD;;;;;;EAMOtK,SAAA,CAAAJ,SAAA,CAAAgM,eAAe,GAAtB,UAAuB/C,KAAa;IACnC,IAAI,IAAI,CAACxE,QAAQ,YAAY9F,aAAa,EAAE;MAC3C,OAAO,CAAC,GAAG,IAAI,CAAC8F,QAAQ,CAACuH,eAAe,CAAC/C,KAAK,CAAC;KAC/C,MACI;MACJ,OAAO,IAAI,CAACxE,QAAQ,CAACuH,eAAe,CAAC/C,KAAK,CAAC;;EAE7C,CAAC;EAED;;;EAGU7I,SAAA,CAAAJ,SAAA,CAAAkM,aAAa,GAAvB,UAAwBvH,GAAW,EAAEC,GAAW;IAC/C,OAAO,IAAI,CAACuH,OAAO,CAAC,CAAC;MAAEC,QAAQ,EAAE,cAAc;MAAEC,IAAI,EAAE,IAAI,CAAC1J,YAAY;MAAE2J,EAAE,EAAE3H;IAAG,CAAE,EAAE;MAAEyH,QAAQ,EAAE,cAAc;MAAEC,IAAI,EAAE,IAAI,CAAC3J,YAAY;MAAE4J,EAAE,EAAE1H;IAAG,CAAE,CAAC,EAAE,IAAI,CAAC2H,mBAAmB,EAAE,IAAI,CAACC,iBAAiB,CAAC;EACxM,CAAC;EAGD;;;;;EAKOpM,SAAA,CAAAJ,SAAA,CAAAkE,SAAS,GAAhB;IAAA,IAAA3E,KAAA;IAEC,IAAI,CAACkN,eAAe,EAAE;IAEtB,IAAI9H,GAAG,GAAW1D,MAAM,CAACyL,iBAAiB;IAC1C,IAAI9H,GAAG,GAAW3D,MAAM,CAAC0L,iBAAiB;IAE1C;IACA,IAAI,CAACzN,KAAK,CAAC0E,QAAQ,CAAC,IAAI,CAACnB,WAAW,CAAC,IAAI,CAACvD,KAAK,CAAC0E,QAAQ,CAAC,IAAI,CAACrB,WAAW,CAAC,EAAE;MAC3E,IAAI,CAACM,MAAM,CAACU,IAAI,CAAC,UAACV,MAAM;QACvB,IAAI,CAACA,MAAM,CAAC+J,YAAY,EAAE;UACzB;UACA,IAAIC,SAAS,GAAWhK,MAAM,CAAC8B,GAAG,CAACpF,KAAI,CAAC;UACxC,IAAIL,KAAK,CAAC0E,QAAQ,CAACiJ,SAAS,CAAC,IAAKA,SAAS,GAAGlI,GAAI,EAAE;YACnDA,GAAG,GAAGkI,SAAS;;UAEhB;UACA,IAAIC,SAAS,GAAWjK,MAAM,CAAC+B,GAAG,CAACrF,KAAI,CAAC;UAExC,IAAIL,KAAK,CAAC0E,QAAQ,CAACkJ,SAAS,CAAC,IAAKA,SAAS,GAAGlI,GAAI,EAAE;YACnDA,GAAG,GAAGkI,SAAS;;;MAGlB,CAAC,CAAC;MAEF,IAAI,IAAI,CAAC1L,qBAAqB,EAAE;QAC/B,IAAI,CAAC2L,UAAU,CAACxJ,IAAI,CAAC,UAACyJ,KAAK;UAC1B,IAAI,CAACA,KAAK,CAACJ,YAAY,EAAE;YACxB,IAAIK,QAAQ,GAAGlO,KAAK,CAAC4F,GAAG,CAACqI,KAAK,CAACrN,KAAK,EAAEqN,KAAK,CAACpN,QAAQ,CAAC;YACrD,IAAIsN,QAAQ,GAAGnO,KAAK,CAAC6F,GAAG,CAACoI,KAAK,CAACrN,KAAK,EAAEqN,KAAK,CAACpN,QAAQ,CAAC;YAGrD,IAAIqN,QAAQ,GAAGtI,GAAG,IAAI,CAACzF,KAAK,CAAC0E,QAAQ,CAACe,GAAG,CAAC,EAAE;cAC3CA,GAAG,GAAGsI,QAAQ;;YAEf,IAAIC,QAAQ,GAAGtI,GAAG,IAAI,CAAC1F,KAAK,CAAC0E,QAAQ,CAACgB,GAAG,CAAC,EAAE;cAC3CA,GAAG,GAAGsI,QAAQ;;;QAGjB,CAAC,CAAC;;;IAIJ,IAAI,IAAI,CAACpH,WAAW,EAAE;MACrB,IAAIqF,WAAW,GAAG,IAAI,CAACA,WAAW;MAClC,IAAIjM,KAAK,CAAC0E,QAAQ,CAACuH,WAAW,CAAC,EAAE;QAChC,IAAIxG,GAAG,IAAI,CAAC,EAAE;UACbA,GAAG,GAAGwG,WAAW;;;MAInB,IAAIxG,GAAG,IAAI,CAAC,EAAE;QACb,IAAI,CAACwI,kBAAkB,CAAC,IAAIC,KAAK,CAAC,kDAAkD,CAAC,EAAE,IAAI,CAAC;;;IAI9F,IAAIzI,GAAG,IAAI,CAAC,IAAIC,GAAG,IAAI,CAAC,EAAE;MACzBA,GAAG,GAAG,GAAG;MACTD,GAAG,GAAG,CAAC,GAAG;;IAGX;IACA,IAAIzF,KAAK,CAAC0E,QAAQ,CAAC,IAAI,CAACnB,WAAW,CAAC,EAAE;MACrCkC,GAAG,GAAG,IAAI,CAAClC,WAAW;;IAGvB,IAAIvD,KAAK,CAAC0E,QAAQ,CAAC,IAAI,CAACrB,WAAW,CAAC,EAAE;MACrCqC,GAAG,GAAG,IAAI,CAACrC,WAAW;;IAGvB,IAAI,IAAI,CAAC4H,SAAS,EAAE;MACnBxF,GAAG,GAAG,IAAI,CAACwF,SAAS,CAACC,KAAK,CAAC,KAAK,EAAEzF,GAAG,CAAC;;IAGvC,IAAI,IAAI,CAACwF,SAAS,EAAE;MACnBvF,GAAG,GAAG,IAAI,CAACuF,SAAS,CAACC,KAAK,CAAC,KAAK,EAAExF,GAAG,CAAC;;IAGvC,IAAI,CAAC1F,KAAK,CAAC0E,QAAQ,CAACe,GAAG,CAAC,IAAI,CAACzF,KAAK,CAAC0E,QAAQ,CAACgB,GAAG,CAAC,EAAE;MACjD;;IAGD,IAAI,CAACyI,QAAQ,GAAG1I,GAAG;IACnB,IAAI,CAAC2I,QAAQ,GAAG1I,GAAG;IAEnB,IAAID,GAAG,IAAI1D,MAAM,CAACyL,iBAAiB,EAAE;MACpC/H,GAAG,GAAGmC,SAAS;;IAEhB,IAAIlC,GAAG,IAAI3D,MAAM,CAAC0L,iBAAiB,EAAE;MACpC/H,GAAG,GAAGkC,SAAS;;IAGhB,IAAIyG,GAAG,GAAW,IAAI,CAACtI,gBAAgB,CAACN,GAAG,EAAEC,GAAG,CAAC,CAAC,CAAC;IAGnDD,GAAG,GAAG,IAAI,CAAC6I,MAAM,CAAC7I,GAAG,CAAC;IACtBC,GAAG,GAAG,IAAI,CAAC6I,MAAM,CAAC7I,GAAG,CAAC;IAEtB;IACA,IAAIA,GAAG,GAAGD,GAAG,IAAI,CAAC,GAAG9C,IAAI,CAACsE,GAAG,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE;MACtC,IAAIvB,GAAG,GAAGD,GAAG,IAAI,CAAC,EAAE;QACnB,IAAI,CAAC/D,YAAY,GAAG,CAACgE,GAAG,GAAGD,GAAG,IAAI,CAAC;OACnC,MACI;QAEJ;QACA,IAAI+I,QAAQ,GAAW7L,IAAI,CAACoE,GAAG,CAACpE,IAAI,CAACgC,GAAG,CAACe,GAAG,CAAC,CAAC,GAAG/C,IAAI,CAACqE,MAAM;QAE5D;QACA,IAAIyH,KAAK,GAAG9L,IAAI,CAACsE,GAAG,CAAC,EAAE,EAAEtE,IAAI,CAACkE,KAAK,CAAC2H,QAAQ,CAAC,CAAC;QAE9C;QACAC,KAAK,GAAGA,KAAK,GAAG,EAAE;QAElB,IAAI,CAAC/M,YAAY,GAAG+M,KAAK;;MAE1BhJ,GAAG,IAAI,IAAI,CAAC/D,YAAY;MACxBgE,GAAG,IAAI,IAAI,CAAChE,YAAY;;IAGzB+D,GAAG,IAAI,CAACC,GAAG,GAAGD,GAAG,IAAI,IAAI,CAACiJ,QAAQ;IAClChJ,GAAG,IAAI,CAACA,GAAG,GAAGD,GAAG,IAAI,IAAI,CAACkJ,QAAQ;IAElC,IAAIC,MAAM,GAAG,IAAI,CAACC,YAAY;IAC9B,IAAI7O,KAAK,CAAC0E,QAAQ,CAAC,IAAI,CAACrB,WAAW,CAAC,EAAE;MACrCuL,MAAM,GAAG,IAAI;;IAGd,IAAI5I,UAAU,GAAgB,IAAI,CAACC,YAAY,CAACR,GAAG,EAAEC,GAAG,EAAE2I,GAAG,EAAE,IAAI,CAACnI,UAAU,EAAE0I,MAAM,CAAC;IAEvFnJ,GAAG,GAAGO,UAAU,CAACP,GAAG;IACpBC,GAAG,GAAGM,UAAU,CAACN,GAAG;IAEpB2I,GAAG,GAAG3I,GAAG,GAAGD,GAAG,CAAC,CAAE;IAElB;IACAO,UAAU,GAAG,IAAI,CAACC,YAAY,CAACR,GAAG,EAAEC,GAAG,EAAEA,GAAG,GAAGD,GAAG,EAAE,IAAI,CAACS,UAAU,EAAE,IAAI,CAAC;IAE1ET,GAAG,GAAGO,UAAU,CAACP,GAAG;IACpBC,GAAG,GAAGM,UAAU,CAACN,GAAG;IAEpB;IACA,IAAI,IAAI,CAACmJ,YAAY,EAAE;MACtB,IAAI7O,KAAK,CAAC0E,QAAQ,CAAC,IAAI,CAACnB,WAAW,CAAC,EAAE;QACrCkC,GAAG,GAAG,IAAI,CAAClC,WAAW;OACtB,MACI;QACJkC,GAAG,GAAG,IAAI,CAAC0I,QAAQ;;MAGpB,IAAInO,KAAK,CAAC0E,QAAQ,CAAC,IAAI,CAACrB,WAAW,CAAC,EAAE;QACrCqC,GAAG,GAAG,IAAI,CAACrC,WAAW;OACtB,MACI;QACJqC,GAAG,GAAG,IAAI,CAAC0I,QAAQ;;MAGpB,IAAI1I,GAAG,GAAGD,GAAG,IAAI,UAAU,EAAE;QAC5BA,GAAG,IAAI,IAAI,CAAC/D,YAAY;QACxBgE,GAAG,IAAI,IAAI,CAAChE,YAAY;;MAGzB+D,GAAG,IAAI,CAACC,GAAG,GAAGD,GAAG,IAAI,IAAI,CAACiJ,QAAQ;MAClChJ,GAAG,IAAI,CAACA,GAAG,GAAGD,GAAG,IAAI,IAAI,CAACkJ,QAAQ;;IAGnC,IAAI,IAAI,CAAC1D,SAAS,EAAE;MACnBxF,GAAG,GAAG,IAAI,CAACwF,SAAS,CAACC,KAAK,CAAC,KAAK,EAAEzF,GAAG,CAAC;;IAGvC,IAAI,IAAI,CAACwF,SAAS,EAAE;MACnBvF,GAAG,GAAG,IAAI,CAACuF,SAAS,CAACC,KAAK,CAAC,KAAK,EAAExF,GAAG,CAAC;;IAGvC,IAAI,CAACc,KAAK,GAAGR,UAAU,CAACtD,IAAI;IAE5B,IAAI,CAAC1C,KAAK,CAAC0E,QAAQ,CAACe,GAAG,CAAC,IAAI,CAACzF,KAAK,CAAC0E,QAAQ,CAACgB,GAAG,CAAC,EAAE;MACjD,IAAI,CAACE,KAAK,GAAG,CAAC;MACd,IAAI,CAACC,GAAG,GAAG,CAAC;MAEZ,IAAI,CAACN,QAAQ,CAACuJ,MAAM,CAACzK,IAAI,CAAC,UAAC0D,KAAK;QAC/BA,KAAK,CAAC3F,QAAQ,CAACyF,IAAI,GAAG,EAAE;MACzB,CAAC,CAAC;;IAGH;IACA,IAAI,CAAC,IAAI,CAACpE,YAAY,IAAIgC,GAAG,IAAI,IAAI,CAACjC,YAAY,IAAIkC,GAAG,KAAK1F,KAAK,CAAC0E,QAAQ,CAACe,GAAG,CAAC,IAAIzF,KAAK,CAAC0E,QAAQ,CAACgB,GAAG,CAAC,EAAE;MAEzG,IAAIqJ,SAAS,GAAG,IAAI,CAACC,gBAAgB;MAErC,IAAI,IAAI,CAACvN,gBAAgB,IAAIzB,KAAK,CAAC0E,QAAQ,CAAC,IAAI,CAACjB,YAAY,CAAC,IAAIzD,KAAK,CAAC0E,QAAQ,CAAC,IAAI,CAAClB,YAAY,CAAC,IAAI,IAAI,CAACyL,MAAM,EAAE;QACnH,IAAKF,SAAS,IAAI,CAACA,SAAS,CAACG,UAAU,EAAE,IAAK,IAAI,CAACC,SAAS,IAAIzJ,GAAG,IAAI,IAAI,CAAC0J,SAAS,IAAI3J,GAAG,EAAE;UAC7F;SACA,MACI;UACJ,IAAI,CAAC2J,SAAS,GAAG3J,GAAG;UACpB,IAAI,CAAC0J,SAAS,GAAGzJ,GAAG;UAEpBqJ,SAAS,GAAG,IAAI,CAAC/B,aAAa,CAACvH,GAAG,EAAEC,GAAG,CAAC;UAExC,IAAIqJ,SAAS,IAAI,CAACA,SAAS,CAACG,UAAU,EAAE,EAAE;YACzCH,SAAS,CAACM,MAAM,CAACC,EAAE,CAAC,mBAAmB,EAAE,IAAI,CAACC,iBAAiB,EAAE,IAAI,CAAC;YAEtER,SAAS,CAACM,MAAM,CAACC,EAAE,CAAC,gBAAgB,EAAE;cACrC;cACAjP,KAAI,CAACsD,MAAM,CAACU,IAAI,CAAC,UAACV,MAAM;gBACvBA,MAAM,CAACmB,QAAQ,EAAE;cAClB,CAAC,CAAC;cACFzE,KAAI,CAACkP,iBAAiB,EAAE;cACxBlP,KAAI,CAACmP,6BAA6B,EAAE;YACrC,CAAC,CAAC;YACF,IAAI,CAACR,gBAAgB,GAAGD,SAAS;WACjC,MACI;YACJ,IAAI,CAACpL,MAAM,CAACU,IAAI,CAAC,UAACV,MAAM;cACvBA,MAAM,CAACwI,UAAU,EAAE;YACpB,CAAC,CAAC;;UAGH,IAAI,CAACoD,iBAAiB,EAAE;UACxB,IAAI,CAACpM,mBAAmB,CAAC,iBAAiB,CAAC;UAC3C,IAAI,CAACqM,6BAA6B,EAAE;;OAErC,MACI;QACJ,IAAKT,SAAS,IAAI,CAACA,SAAS,CAACG,UAAU,EAAE,IAAK,IAAI,CAACC,SAAS,IAAIzJ,GAAG,IAAI,IAAI,CAAC0J,SAAS,IAAI3J,GAAG,EAAE;UAC7F;SACA,MACI;UACJ,IAAI,CAAChC,YAAY,GAAGgC,GAAG;UACvB,IAAI,CAACjC,YAAY,GAAGkC,GAAG;UAEvB,IAAI,CAAC0J,SAAS,GAAG3J,GAAG;UACpB,IAAI,CAAC0J,SAAS,GAAGzJ,GAAG;UAEpB,IAAI,CAAC+J,mBAAmB,EAAE;UAC1B,IAAI,CAACtM,mBAAmB,CAAC,iBAAiB,CAAC;UAE3C,IAAI,CAACuM,WAAW,CAACjK,GAAG,EAAEC,GAAG,CAAC;;;;IAI7B,IAAI,CAACjE,gBAAgB,GAAG,KAAK;IAC7B,IAAI,CAACoK,WAAW,GAAG,IAAI,CAAC9F,gBAAgB,CAACN,GAAG,EAAEC,GAAG,CAAC;EACnD,CAAC;EAED;;;;;;;;;;;EAWUxE,SAAA,CAAAJ,SAAA,CAAAwN,MAAM,GAAhB,UAAiB7N,KAAa;IAC7B,OAAOA,KAAK;EACb,CAAC;EAED;;;;;;;;;;;EAWUS,SAAA,CAAAJ,SAAA,CAAAyN,MAAM,GAAhB,UAAiB9N,KAAa;IAC7B,OAAOA,KAAK;EACb,CAAC;EAED;;;;;;;;;;;;;;;;EAgBOS,SAAA,CAAAJ,SAAA,CAAAmF,YAAY,GAAnB,UAAoBR,GAAW,EAAEC,GAAW,EAAEkG,UAAkB,EAAE+D,SAAiB,EAAEC,UAAoB;IAExG;IACA,IAAID,SAAS,IAAI,CAAC,EAAE;MACnBA,SAAS,GAAG,CAAC;;IAGdA,SAAS,GAAGhN,IAAI,CAACF,KAAK,CAACkN,SAAS,CAAC;IAEjC,IAAIE,UAAU,GAAWpK,GAAG;IAC5B,IAAIqK,UAAU,GAAWpK,GAAG;IAE5B;IACA,IAAIkG,UAAU,KAAK,CAAC,EAAE;MACrBA,UAAU,GAAGjJ,IAAI,CAACgC,GAAG,CAACe,GAAG,CAAC;;IAG3B;IACA,IAAI8I,QAAQ,GAAW7L,IAAI,CAACoE,GAAG,CAACpE,IAAI,CAACgC,GAAG,CAACiH,UAAU,CAAC,CAAC,GAAGjJ,IAAI,CAACqE,MAAM;IAEnE;IACA,IAAIyH,KAAK,GAAG9L,IAAI,CAACsE,GAAG,CAAC,EAAE,EAAEtE,IAAI,CAACkE,KAAK,CAAC2H,QAAQ,CAAC,CAAC;IAE9C;IACAC,KAAK,GAAGA,KAAK,GAAG,EAAE;IAElB,IAAIsB,KAAK,GAAWtB,KAAK;IACzB,IAAImB,UAAU,EAAE;MACfG,KAAK,GAAG,CAAC;;IAGV,IAAI,CAAC,IAAI,CAACnJ,WAAW,EAAE;MAEtB;MACA,IAAIgJ,UAAU,EAAE;QACfnK,GAAG,GAAG9C,IAAI,CAACkE,KAAK,CAACpB,GAAG,GAAGgJ,KAAK,CAAC,GAAGA,KAAK;QACrC;QACA/I,GAAG,GAAG/C,IAAI,CAACqN,IAAI,CAACtK,GAAG,GAAG+I,KAAK,CAAC,GAAGA,KAAK;OACpC,MACI;QACJhJ,GAAG,GAAG9C,IAAI,CAACqN,IAAI,CAACvK,GAAG,GAAGgJ,KAAK,CAAC,GAAGA,KAAK,GAAGsB,KAAK;QAC5C;QACArK,GAAG,GAAG/C,IAAI,CAACkE,KAAK,CAACnB,GAAG,GAAG+I,KAAK,CAAC,GAAGA,KAAK,GAAGsB,KAAK;;MAG9C;MACA,IAAItK,GAAG,GAAG,CAAC,IAAIoK,UAAU,IAAI,CAAC,EAAE;QAC/BpK,GAAG,GAAG,CAAC;;MAER;MACA,IAAIC,GAAG,GAAG,CAAC,IAAIoK,UAAU,IAAI,CAAC,EAAE;QAC/BpK,GAAG,GAAG,CAAC;;KAER,MACI;MACJ,IAAID,GAAG,IAAI,CAAC,EAAE;QACb;QACAA,GAAG,GAAG,IAAI,CAACsF,SAAS;;MAGrB;MACA,IAAItF,GAAG,IAAIwK,QAAQ,EAAE;QACpBxK,GAAG,GAAG,CAAC;;MAGR,IAAIC,GAAG,IAAI,CAACuK,QAAQ,EAAE;QACrBvK,GAAG,GAAG,EAAE;;MAGT,IAAI,IAAI,CAACmJ,YAAY,EAAE;QACtB,IAAI,IAAI,CAACtL,WAAW,GAAG,CAAC,EAAE;UACzBkC,GAAG,GAAG,IAAI,CAAClC,WAAW;SACtB,MACI;UACJkC,GAAG,GAAGA,GAAG;;QAEV,IAAI,IAAI,CAACpC,WAAW,GAAG,CAAC,EAAE;UACzBqC,GAAG,GAAGA,GAAG;;OAEV,MACI;QACJD,GAAG,GAAG9C,IAAI,CAACsE,GAAG,CAAC,EAAE,EAAEtE,IAAI,CAACkE,KAAK,CAAClE,IAAI,CAACoE,GAAG,CAACpE,IAAI,CAACgC,GAAG,CAACc,GAAG,CAAC,CAAC,GAAG9C,IAAI,CAACqE,MAAM,CAAC,CAAC;QACrEtB,GAAG,GAAG/C,IAAI,CAACsE,GAAG,CAAC,EAAE,EAAEtE,IAAI,CAACqN,IAAI,CAACrN,IAAI,CAACoE,GAAG,CAACpE,IAAI,CAACgC,GAAG,CAACe,GAAG,CAAC,CAAC,GAAG/C,IAAI,CAACqE,MAAM,CAAC,CAAC;;;IAGtE;IACA;IACA;;;;;;;;IAWAwH,QAAQ,GAAG7L,IAAI,CAACoE,GAAG,CAACpE,IAAI,CAACgC,GAAG,CAACiH,UAAU,CAAC,CAAC,GAAGjJ,IAAI,CAACqE,MAAM;IACvDyH,KAAK,GAAG9L,IAAI,CAACsE,GAAG,CAAC,EAAE,EAAEtE,IAAI,CAACkE,KAAK,CAAC2H,QAAQ,CAAC,CAAC;IAC1CC,KAAK,GAAGA,KAAK,GAAG,EAAE;IAElB;IACA,IAAI/L,IAAI,GAAGC,IAAI,CAACqN,IAAI,CAAEpE,UAAU,GAAG+D,SAAS,GAAIlB,KAAK,CAAC,GAAGA,KAAK;IAE9D,IAAIjG,SAAS,GAAG7F,IAAI,CAACsE,GAAG,CAAC,EAAE,EAAEtE,IAAI,CAACkE,KAAK,CAAClE,IAAI,CAACoE,GAAG,CAACpE,IAAI,CAACgC,GAAG,CAACjC,IAAI,CAAC,CAAC,GAAGC,IAAI,CAACqE,MAAM,CAAC,CAAC;IAEhF;IACA;IACA,IAAIkJ,WAAW,GAAWvN,IAAI,CAACqN,IAAI,CAACtN,IAAI,GAAG8F,SAAS,CAAC,CAAC,CAAC;IAGvD,IAAI0H,WAAW,GAAG,CAAC,EAAE;MACpBA,WAAW,GAAG,EAAE;KAChB,MACI,IAAIA,WAAW,IAAI,CAAC,IAAIA,WAAW,GAAG,CAAC,EAAE;MAC7CA,WAAW,GAAG,CAAC;;IAGhB;IACAxN,IAAI,GAAGC,IAAI,CAACqN,IAAI,CAACtN,IAAI,IAAI8F,SAAS,GAAG0H,WAAW,CAAC,CAAC,GAAG1H,SAAS,GAAG0H,WAAW;IAE5E,IAAI,IAAI,CAACC,YAAY,GAAGpO,MAAM,CAACC,SAAS,IAAIU,IAAI,IAAI7C,KAAK,CAACmQ,IAAI,CAACtN,IAAI,EAAE,IAAI,CAACyN,YAAY,CAAC,EAAE;MACxFzN,IAAI,GAAG7C,KAAK,CAACmQ,IAAI,CAACtN,IAAI,EAAE,IAAI,CAACyN,YAAY,CAAC;;IAG3C,IAAI1H,QAAQ,GAAW,CAAC;IACxB;IACA,IAAID,SAAS,GAAG,CAAC,EAAE;MAClB;MACAC,QAAQ,GAAG9F,IAAI,CAACF,KAAK,CAACE,IAAI,CAACgC,GAAG,CAAChC,IAAI,CAACoE,GAAG,CAACpE,IAAI,CAACgC,GAAG,CAAC6D,SAAS,CAAC,CAAC,GAAG7F,IAAI,CAACqE,MAAM,CAAC,CAAC,GAAG,CAAC;MAChF;MACAtE,IAAI,GAAG7C,KAAK,CAAC4C,KAAK,CAACC,IAAI,EAAE+F,QAAQ,CAAC;;IAEnC,IAAI,CAAC,IAAI,CAAC7B,WAAW,EAAE;MACtB;MACA,IAAIwJ,QAAQ,GAAGzN,IAAI,CAACkE,KAAK,CAACpB,GAAG,GAAG/C,IAAI,CAAC;MAErC+C,GAAG,GAAG5F,KAAK,CAAC4C,KAAK,CAACC,IAAI,GAAG0N,QAAQ,EAAE3H,QAAQ,CAAC;MAE5C,IAAI4H,QAAQ,SAAQ;MAEpB,IAAI,CAACT,UAAU,EAAE;QAChBS,QAAQ,GAAG1N,IAAI,CAACqN,IAAI,CAACtK,GAAG,GAAGhD,IAAI,CAAC;OAChC,MACI;QACJ2N,QAAQ,GAAG1N,IAAI,CAACkE,KAAK,CAACnB,GAAG,GAAGhD,IAAI,CAAC;;MAGlC,IAAI2N,QAAQ,IAAID,QAAQ,EAAE;QACzBC,QAAQ,EAAE;;MAGX3K,GAAG,GAAG7F,KAAK,CAAC4C,KAAK,CAACC,IAAI,GAAG2N,QAAQ,EAAE5H,QAAQ,CAAC;MAE5C,IAAI/C,GAAG,GAAGoK,UAAU,EAAE;QACrBpK,GAAG,GAAGA,GAAG,GAAGhD,IAAI;;MAGjB,IAAI+C,GAAG,GAAGoK,UAAU,EAAE;QACrBpK,GAAG,GAAGA,GAAG,GAAG/C,IAAI;;;IAGlB,OAAO;MAAE+C,GAAG,EAAEA,GAAG;MAAEC,GAAG,EAAEA,GAAG;MAAEhD,IAAI,EAAEA;IAAI,CAAE;EAC1C,CAAC;EAaD9B,MAAA,CAAAC,cAAA,CAAWK,SAAA,CAAAJ,SAAA,OAAG;IAOd;;;SAGA,SAAAC,CAAA;MACC,IAAI0E,GAAG,GAAG,IAAI,CAAChC,YAAY;MAC3B,IAAI,CAACzD,KAAK,CAAC0E,QAAQ,CAACe,GAAG,CAAC,EAAE;QACzBA,GAAG,GAAG,IAAI,CAAClC,WAAW;;MAEvB,OAAOkC,GAAG;IACX,CAAC;IA3BD;;;;;;;;;;;SAWA,SAAAzE,CAAeP,KAAyB;MACvC,IAAI,IAAI,CAAC8C,WAAW,IAAI9C,KAAK,EAAE;QAC9B,IAAI,CAAC8C,WAAW,GAAG9C,KAAK;QACxB,IAAI,CAAC0L,UAAU,EAAE;;IAEnB,CAAC;;;;EAmBDvL,MAAA,CAAAC,cAAA,CAAWK,SAAA,CAAAJ,SAAA,cAAU;IANrB;;;;;;SAMA,SAAAC,CAAA;MACC,OAAO,IAAI,CAACwC,WAAW;IACxB,CAAC;;;;EAQD3C,MAAA,CAAAC,cAAA,CAAWK,SAAA,CAAAJ,SAAA,cAAU;IANrB;;;;;;SAMA,SAAAC,CAAA;MACC,OAAO,IAAI,CAACsC,WAAW;IACxB,CAAC;;;;EAgBDzC,MAAA,CAAAC,cAAA,CAAWK,SAAA,CAAAJ,SAAA,YAAQ;IAMnB;;;SAGA,SAAAC,CAAA;MACC,OAAO,IAAI,CAACuP,gBAAgB,CAAC,UAAU,CAAC;IACzC,CAAC;IAzBD;;;;;;;;;;;;;;SAcA,SAAAtP,CAAoBP,KAAa;MAChC,IAAI,IAAI,CAACqB,gBAAgB,CAAC,UAAU,EAAErB,KAAK,CAAC,EAAE;QAC7C,IAAI,CAACgP,mBAAmB,EAAE;;IAE5B,CAAC;;;;EAuBD7O,MAAA,CAAAC,cAAA,CAAWK,SAAA,CAAAJ,SAAA,YAAQ;IAMnB;;;SAGA,SAAAC,CAAA;MACC,OAAO,IAAI,CAACuP,gBAAgB,CAAC,UAAU,CAAC;IACzC,CAAC;IAzBD;;;;;;;;;;;;;;SAcA,SAAAtP,CAAoBP,KAAa;MAChC,IAAI,IAAI,CAACqB,gBAAgB,CAAC,UAAU,EAAErB,KAAK,CAAC,EAAE;QAC7C,IAAI,CAACgP,mBAAmB,EAAE;;IAE5B,CAAC;;;;EAmBD7O,MAAA,CAAAC,cAAA,CAAWK,SAAA,CAAAJ,SAAA,QAAI;IATf;;;;;;;;;SASA,SAAAC,CAAA;MACC,OAAO,IAAI,CAACyF,KAAK;IAClB,CAAC;;;;EAaD5F,MAAA,CAAAC,cAAA,CAAWK,SAAA,CAAAJ,SAAA,OAAG;IAOd;;;SAGA,SAAAC,CAAA;MACC,IAAI2E,GAAG,GAAG,IAAI,CAAClC,YAAY;MAC3B,IAAI,CAACxD,KAAK,CAAC0E,QAAQ,CAACgB,GAAG,CAAC,EAAE;QACzBA,GAAG,GAAG,IAAI,CAACrC,WAAW;;MAEvB,OAAOqC,GAAG;IACX,CAAC;IA3BD;;;;;;;;;;;SAWA,SAAA1E,CAAeP,KAAyB;MACvC,IAAI,IAAI,CAAC4C,WAAW,IAAI5C,KAAK,EAAE;QAC9B,IAAI,CAAC4C,WAAW,GAAG5C,KAAK;QACxB,IAAI,CAAC0L,UAAU,EAAE;;IAEnB,CAAC;;;;EA2BDvL,MAAA,CAAAC,cAAA,CAAWK,SAAA,CAAAJ,SAAA,wBAAoB;IAM/B;;;SAGA,SAAAC,CAAA;MACC,OAAO,IAAI,CAACuP,gBAAgB,CAAC,sBAAsB,CAAC;IACrD,CAAC;IAzBD;;;;;;;;;;;;;;SAcA,SAAAtP,CAAgCP,KAAc;MAC7C,IAAI,IAAI,CAACqB,gBAAgB,CAAC,sBAAsB,EAAErB,KAAK,CAAC,EAAE;QACzD,IAAI,CAAC0L,UAAU,EAAE;;IAEnB,CAAC;;;;EASD;;;;;;;;;;;;;EAaOjL,SAAA,CAAAJ,SAAA,CAAAyP,cAAc,GAArB,UAAsB5M,MAAgB;IACrC,OAAO,IAAIjE,aAAa,CAAC,CACxBS,MAAA,CAAAW,SAAA,CAAMyP,cAAc,CAAAjQ,IAAA,OAACqD,MAAM,CAAC,EAE5BA,MAAM,CAAC0L,MAAM,CAACC,EAAE,CAAC,iBAAiB,EAAE,IAAI,CAACkB,oBAAoB,EAAE,IAAI,EAAE,KAAK,CAAC,EAC3E7M,MAAM,CAAC0L,MAAM,CAACC,EAAE,CAAC,0BAA0B,EAAE,IAAI,CAACE,6BAA6B,EAAE,IAAI,EAAE,KAAK,CAAC,EAC7F,IAAI,CAACH,MAAM,CAACC,EAAE,CAAC,iBAAiB,EAAE3L,MAAM,CAACwI,UAAU,EAAExI,MAAM,EAAE,KAAK,CAAC,CACnE,CAAC;EACH,CAAC;EAED;;;EAGUzC,SAAA,CAAAJ,SAAA,CAAA0O,6BAA6B,GAAvC;IAAA,IAAAnP,KAAA;IAEC,IAAIoQ,YAAoB;IACxB,IAAIC,YAAoB;IAExB,IAAIC,SAAS,GAAY,IAAI;IAE7B7Q,KAAK,CAACuE,IAAI,CAAC,IAAI,CAACV,MAAM,CAACkF,QAAQ,EAAE,EAAE,UAAClF,MAAM;MACzC,IAAI,CAACA,MAAM,CAAC+J,YAAY,IAAI,CAAC/J,MAAM,CAACiN,QAAQ,IAAI,CAACjN,MAAM,CAACkN,UAAU,EAAE;QAEnE,IAAIlN,MAAM,CAACmN,OAAO,IAAI,CAACnN,MAAM,CAACoN,QAAQ,EAAE;UACvCJ,SAAS,GAAG,KAAK;;QAGlB,IAAIK,kBAAkB,GAAWrN,MAAM,CAAC8M,YAAY,CAACpQ,KAAI,CAAC;QAC1D,IAAI4Q,kBAAkB,GAAWtN,MAAM,CAAC+M,YAAY,CAACrQ,KAAI,CAAC;QAE1D,IAAIL,KAAK,CAAC0E,QAAQ,CAACsM,kBAAkB,CAAC,EAAE;UACvC,IAAI,CAAChR,KAAK,CAAC0E,QAAQ,CAAC+L,YAAY,CAAC,IAAKO,kBAAkB,GAAGP,YAAa,EAAE;YACzEA,YAAY,GAAGO,kBAAkB;;;QAGnC;QACA,IAAIhR,KAAK,CAAC0E,QAAQ,CAACuM,kBAAkB,CAAC,EAAE;UACvC,IAAI,CAACjR,KAAK,CAAC0E,QAAQ,CAACgM,YAAY,CAAC,IAAKO,kBAAkB,GAAGP,YAAa,EAAE;YACzEA,YAAY,GAAGO,kBAAkB;;;;IAIrC,CAAC,CAAC;IAEF,IAAI,IAAI,CAAC/O,qBAAqB,EAAE;MAC/B,IAAI,CAAC2L,UAAU,CAACxJ,IAAI,CAAC,UAACyJ,KAAK;QAC1B,IAAI,CAACA,KAAK,CAACJ,YAAY,EAAE;UACxB,IAAIK,QAAQ,GAAGlO,KAAK,CAAC4F,GAAG,CAACqI,KAAK,CAACrN,KAAK,EAAEqN,KAAK,CAACpN,QAAQ,CAAC;UACrD,IAAIsN,QAAQ,GAAGnO,KAAK,CAAC6F,GAAG,CAACoI,KAAK,CAACrN,KAAK,EAAEqN,KAAK,CAACpN,QAAQ,CAAC;UAErD,IAAIqN,QAAQ,GAAG0C,YAAY,EAAE;YAC5BA,YAAY,GAAG1C,QAAQ;;UAExB,IAAIC,QAAQ,GAAG0C,YAAY,EAAE;YAC5BA,YAAY,GAAG1C,QAAQ;;;MAG1B,CAAC,CAAC;;IAGH;IACA;IACA;IACA;IACA;IACA;IAEA,IAAIhO,KAAK,CAAC0E,QAAQ,CAAC,IAAI,CAACnB,WAAW,CAAC,EAAE;MACrC,IAAI,IAAI,CAACsL,YAAY,EAAE;QACtB4B,YAAY,GAAG,IAAI,CAAClN,WAAW;OAC/B,MACI;QACJkN,YAAY,GAAG,IAAI,CAAChL,GAAG;;KAExB,MACI,IAAI,IAAI,CAACoJ,YAAY,EAAE;MAC3B4B,YAAY,GAAG,IAAI,CAACtC,QAAQ;;IAG7B,IAAInO,KAAK,CAAC0E,QAAQ,CAAC,IAAI,CAACrB,WAAW,CAAC,EAAE;MACrC,IAAI,IAAI,CAACwL,YAAY,EAAE;QACtB6B,YAAY,GAAG,IAAI,CAACrN,WAAW;OAC/B,MACI;QACJqN,YAAY,GAAG,IAAI,CAAChL,GAAG;;KAExB,MACI,IAAI,IAAI,CAACmJ,YAAY,EAAE;MAC3B6B,YAAY,GAAG,IAAI,CAACtC,QAAQ;;IAG7B,IAAIqC,YAAY,IAAIC,YAAY,EAAE;MAEjCD,YAAY,IAAI,IAAI,CAAC/O,YAAY;MACjCgP,YAAY,IAAI,IAAI,CAAChP,YAAY;MAEjC,IAAIwP,WAAW,GAAG,IAAI,CAACjL,YAAY,CAACwK,YAAY,EAAEC,YAAY,EAAE,CAAC,EAAE,IAAI,CAACxK,UAAU,EAAE,IAAI,CAAC2I,YAAY,CAAC;MACtG4B,YAAY,GAAGS,WAAW,CAACzL,GAAG;MAC9BiL,YAAY,GAAGQ,WAAW,CAACxL,GAAG;;IAG/B,IAAI2I,GAAG,GAAW,IAAI,CAACtI,gBAAgB,CAAC0K,YAAY,EAAEC,YAAY,CAAC;IACnE,IAAI1K,UAAU,GAAgB,IAAI,CAACC,YAAY,CAACwK,YAAY,EAAEC,YAAY,EAAErC,GAAG,EAAE,IAAI,CAACnI,UAAU,CAAC;IAEjGuK,YAAY,GAAGzK,UAAU,CAACP,GAAG;IAC7BiL,YAAY,GAAG1K,UAAU,CAACN,GAAG;IAE7B+K,YAAY,IAAI,CAACC,YAAY,GAAGD,YAAY,IAAI,IAAI,CAAC/B,QAAQ;IAC7DgC,YAAY,IAAI,CAACA,YAAY,GAAGD,YAAY,IAAI,IAAI,CAAC9B,QAAQ;IAE7D8B,YAAY,GAAG5Q,KAAK,CAACsR,UAAU,CAACV,YAAY,EAAE,IAAI,CAAChL,GAAG,EAAE,IAAI,CAACC,GAAG,CAAC;IACjEgL,YAAY,GAAG7Q,KAAK,CAACsR,UAAU,CAACT,YAAY,EAAE,IAAI,CAACjL,GAAG,EAAE,IAAI,CAACC,GAAG,CAAC;IAEjE;IACA2I,GAAG,GAAG,IAAI,CAACtI,gBAAgB,CAAC0K,YAAY,EAAEC,YAAY,CAAC;IACvD1K,UAAU,GAAG,IAAI,CAACC,YAAY,CAACwK,YAAY,EAAEC,YAAY,EAAErC,GAAG,EAAE,IAAI,CAACnI,UAAU,EAAE,IAAI,CAAC;IAEtFuK,YAAY,GAAGzK,UAAU,CAACP,GAAG;IAC7BiL,YAAY,GAAG1K,UAAU,CAACN,GAAG;IAE7B,IAAI,IAAI,CAACmJ,YAAY,EAAE;MACtB4B,YAAY,GAAG5Q,KAAK,CAAC6F,GAAG,CAAC+K,YAAY,EAAE,IAAI,CAAClN,WAAW,CAAC;MACxDmN,YAAY,GAAG7Q,KAAK,CAAC4F,GAAG,CAACiL,YAAY,EAAE,IAAI,CAACrN,WAAW,CAAC;;IAEzD,IAAIX,IAAI,GAAGsD,UAAU,CAACtD,IAAI;IAC1B,IAAI,IAAI,CAAC2D,YAAY,EAAE;MACtBL,UAAU,GAAG,IAAI,CAACoL,QAAQ,CAACX,YAAY,EAAEC,YAAY,EAAEhO,IAAI,CAAC;MAC5D+N,YAAY,GAAGzK,UAAU,CAACP,GAAG;MAC7BiL,YAAY,GAAG1K,UAAU,CAACN,GAAG;MAC7B,IAAI,CAACyG,UAAU,EAAE;;IAElBzJ,IAAI,GAAGsD,UAAU,CAACtD,IAAI;IAEtB;IACA,IAAI,CAACmJ,WAAW,GAAG,IAAI,CAAC9F,gBAAgB,CAAC,IAAI,CAACN,GAAG,EAAE,IAAI,CAACC,GAAG,CAAC;IAE5D,IAAIE,KAAK,GAAW,IAAI,CAACgE,eAAe,CAAC6G,YAAY,CAAC;IACtD,IAAI5K,GAAG,GAAW,IAAI,CAAC+D,eAAe,CAAC8G,YAAY,CAAC;IAEpD;IACA,IAAIC,SAAS,IAAI,CAAC,IAAI,CAACtK,YAAY,EAAE;MACpCT,KAAK,GAAG,CAAC;MACTC,GAAG,GAAG,CAAC;;IAGR,IAAIwL,WAAW,GAAG,CAAC;IACnB,IAAI,IAAI,CAAChL,YAAY,EAAE;MACtBgL,WAAW,GAAG,CAAC;MACf,IAAI,CAACC,QAAQ,CAACb,YAAY,GAAG,GAAG,GAAGC,YAAY,EAAEhO,IAAI,CAAC;KACtD,MACI;MACJ,IAAI,IAAI,CAAC8D,KAAK,IAAI9D,IAAI,IAAI,IAAI,CAACY,UAAU,IAAImN,YAAY,IAAI,IAAI,CAACrN,UAAU,IAAIsN,YAAY,EAAE;QAC7F,IAAI,CAAC/O,IAAI,GAAG,IAAI;;MAEjB,IAAI,CAAC6E,KAAK,GAAG9D,IAAI;MACjB,IAAI,CAACY,UAAU,GAAGmN,YAAY;MAC9B,IAAI,CAACrN,UAAU,GAAGsN,YAAY;;IAI/B,IAAI,CAAC,IAAI,CAACzO,aAAa,EAAE;MACxB,IAAI,CAACsP,IAAI,CAAC;QAAE3L,KAAK,EAAEA,KAAK;QAAEC,GAAG,EAAEA;MAAG,CAAE,EAAE,KAAK,EAAE,KAAK,EAAEwL,WAAW,CAAC;;EAElE,CAAC;EAgBDzQ,MAAA,CAAAC,cAAA,CAAWK,SAAA,CAAAJ,SAAA,gBAAY;IAMvB;;;SAGA,SAAAC,CAAA;MACC,OAAO,IAAI,CAACuP,gBAAgB,CAAC,cAAc,CAAC;IAC7C,CAAC;IAzBD;;;;;;;;;;;;;;SAcA,SAAAtP,CAAwBP,KAAc;MACrC,IAAI,IAAI,CAACqB,gBAAgB,CAAC,cAAc,EAAErB,KAAK,CAAC,EAAE;QACjD,IAAI,CAAC0L,UAAU,EAAE;;IAEnB,CAAC;;;;EAoBDvL,MAAA,CAAAC,cAAA,CAAWK,SAAA,CAAAJ,SAAA,eAAW;IAStB;;;SAGA,SAAAC,CAAA;MACC,OAAO,IAAI,CAACuP,gBAAgB,CAAC,aAAa,CAAC;IAC5C,CAAC;IAzBD;;;;;;;;;;;SAWA,SAAAtP,CAAuBP,KAAc;MACpC,IAAI,IAAI,CAACqB,gBAAgB,CAAC,aAAa,EAAErB,KAAK,CAAC,EAAE;QAChD,IAAI,CAAC0L,UAAU,EAAE;QACjB,IAAI,CAACxI,MAAM,CAACU,IAAI,CAAC,UAACV,MAAM;UACvBA,MAAM,CAAC8L,mBAAmB,EAAE;QAC7B,CAAC,CAAC;;IAEJ,CAAC;;;;EA6CD7O,MAAA,CAAAC,cAAA,CAAWK,SAAA,CAAAJ,SAAA,iBAAa;IAIxB;;;SAGA,SAAAC,CAAA;MACC,OAAO,IAAI,CAACuP,gBAAgB,CAAC,eAAe,CAAC;IAC9C,CAAC;IA7CD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;SAoCA,SAAAtP,CAAyBP,KAAc;MACtC,IAAI,CAACqB,gBAAgB,CAAC,eAAe,EAAErB,KAAK,CAAC;IAC9C,CAAC;;;;EAiBDG,MAAA,CAAAC,cAAA,CAAWK,SAAA,CAAAJ,SAAA,yBAAqB;IAIhC;;;SAGA,SAAAC,CAAA;MACC,OAAO,IAAI,CAACuP,gBAAgB,CAAC,uBAAuB,CAAC;IACtD,CAAC;IAjBD;;;;;;;;SAQA,SAAAtP,CAAiCP,KAAc;MAC9C,IAAI,CAACqB,gBAAgB,CAAC,uBAAuB,EAAErB,KAAK,CAAC;IACtD,CAAC;;;;EAiBDG,MAAA,CAAAC,cAAA,CAAWK,SAAA,CAAAJ,SAAA,gBAAY;IAMvB;;;SAGA,SAAAC,CAAA;MACC,OAAO,IAAI,CAACuP,gBAAgB,CAAC,cAAc,CAAC;IAC7C,CAAC;IAnBD;;;;;;;;SAQA,SAAAtP,CAAwBP,KAAa;MACpC,IAAI,IAAI,CAACqB,gBAAgB,CAAC,cAAc,EAAErB,KAAK,CAAC,EAAE;QACjD,IAAI,CAAC0L,UAAU,EAAE;;IAEnB,CAAC;;;;EAwBDvL,MAAA,CAAAC,cAAA,CAAWK,SAAA,CAAAJ,SAAA,yBAAqB;IAMhC;;;SAGA,SAAAC,CAAA;MACC,OAAO,IAAI,CAACuP,gBAAgB,CAAC,uBAAuB,CAAC;IACtD,CAAC;IA1BD;;;;;;;;;;;;;;;SAeA,SAAAtP,CAAiCP,KAAa;MAC7C,IAAI,IAAI,CAACqB,gBAAgB,CAAC,uBAAuB,EAAErB,KAAK,CAAC,EAAE;QAC1D,IAAI,CAAC0L,UAAU,EAAE;;IAEnB,CAAC;;;;EASD;;;EAGUjL,SAAA,CAAAJ,SAAA,CAAA0P,oBAAoB,GAA9B;IAAA,IAAAnQ,KAAA;IACC,IAAI,CAACoB,gBAAgB,GAAG,IAAI;IAC5B,IAAI,CAACuD,SAAS,EAAE;IAEhB,IAAI,IAAI,CAACmD,UAAU,EAAE;MACpB,IAAIqJ,IAAE,GAAG,CAAC;MAEV,IAAI,CAAC1N,SAAS,CAACO,IAAI,CAAC,UAACjC,QAAQ;QAC5B,IAAIA,QAAQ,CAAC2F,KAAK,IAAI3F,QAAQ,CAAC2F,KAAK,CAAC0J,UAAU,GAAGD,IAAE,EAAE;UACrDnR,KAAI,CAAC8H,UAAU,CAACN,IAAI,GAAGzF,QAAQ,CAAC2F,KAAK,CAACM,WAAW;;MAEnD,CAAC,CAAC;;EAEJ,CAAC;EAED;;;;;;;;;;;EAWOnH,SAAA,CAAAJ,SAAA,CAAA4Q,IAAI,GAAX,UAAYtP,QAA0B,EAAEoC,GAAW,EAAEmN,QAAiB,EAAEC,QAAiB,EAAE9D,KAAc;IACxG,OAAO,IAAI,CAACvI,QAAQ,CAACyE,eAAe,CAAC,IAAI,CAAC6H,YAAY,CAACzP,QAAQ,EAAEoC,GAAG,EAAEmN,QAAQ,EAAEC,QAAQ,EAAE9D,KAAK,CAAC,CAAC,CAACpG,CAAC;EACpG,CAAC;EAED;;;;;;;;;;EAUOxG,SAAA,CAAAJ,SAAA,CAAA+Q,YAAY,GAAnB,UAAoBzP,QAA0B,EAAEoC,GAAW,EAAEmN,QAAiB,EAAEC,QAAiB,EAAE9D,KAAc;IAChH,IAAIrN,KAAK,GAAW2B,QAAQ,CAAC0P,eAAe,CAACtN,GAAG,CAAC;IACjD,IAAI,CAACxE,KAAK,CAAC+R,QAAQ,CAACH,QAAQ,CAAC,EAAE;MAC9BA,QAAQ,GAAG,QAAQ;;IAEpB,IAAII,KAAK,GAAW5P,QAAQ,CAAC6P,QAAQ,CAACL,QAAQ,EAAE,OAAO,CAAC;IAExD,IAAI,CAAC5R,KAAK,CAAC0E,QAAQ,CAACjE,KAAK,CAAC,EAAE;MAC3BA,KAAK,GAAG,IAAI,CAACsK,SAAS;MAEtB,IAAI,IAAI,CAACnE,WAAW,EAAE;QACrB,IAAIoL,KAAK,GAAG,CAAC,EAAE;UACdvR,KAAK,GAAG,CAAC;;;;IAKZ,IAAIkJ,QAAQ,GAAG,IAAI,CAACC,eAAe,CAACnJ,KAAK,GAAGuR,KAAK,CAAC;IAElD,IAAIlE,KAAK,EAAE;MACVnE,QAAQ,GAAG9J,KAAK,CAACsR,UAAU,CAACxH,QAAQ,EAAEmE,KAAK,CAAClI,KAAK,EAAEkI,KAAK,CAACjI,GAAG,CAAC;;IAG9D,OAAO8D,QAAQ;EAChB,CAAC;EAED;;;;;;;;;;;EAWOzI,SAAA,CAAAJ,SAAA,CAAAoR,IAAI,GAAX,UAAY9P,QAA0B,EAAEoC,GAAW,EAAEmN,QAAiB,EAAEC,QAAiB,EAAE9D,KAAc;IACxG,OAAO,IAAI,CAACvI,QAAQ,CAACyE,eAAe,CAAC,IAAI,CAACmI,YAAY,CAAC/P,QAAQ,EAAEoC,GAAG,EAAEmN,QAAQ,EAAEC,QAAQ,EAAE9D,KAAK,CAAC,CAAC,CAACtC,CAAC;EACpG,CAAC;EAED;;;;;;;;;;EAUOtK,SAAA,CAAAJ,SAAA,CAAAqR,YAAY,GAAnB,UAAoB/P,QAA0B,EAAEoC,GAAW,EAAEmN,QAAiB,EAAEC,QAAiB,EAAE9D,KAAc;IAChH,IAAIrN,KAAK,GAAW2B,QAAQ,CAAC0P,eAAe,CAACtN,GAAG,CAAC;IAEjD,IAAI,CAACxE,KAAK,CAAC+R,QAAQ,CAACH,QAAQ,CAAC,EAAE;MAC9BA,QAAQ,GAAG,QAAQ;;IAGpB,IAAII,KAAK,GAAW5P,QAAQ,CAAC6P,QAAQ,CAACL,QAAQ,EAAE,OAAO,CAAC;IAExD,IAAI,CAAC5R,KAAK,CAAC0E,QAAQ,CAACjE,KAAK,CAAC,EAAE;MAC3BA,KAAK,GAAG,IAAI,CAACsK,SAAS;MAEtB,IAAI,IAAI,CAACnE,WAAW,EAAE;QACrB,IAAIoL,KAAK,GAAG,CAAC,EAAE;UACdvR,KAAK,GAAG,CAAC;;;;IAMZ,IAAIkJ,QAAQ,GAAG,IAAI,CAACC,eAAe,CAACnJ,KAAK,GAAGuR,KAAK,CAAC;IAClD,IAAIlE,KAAK,EAAE;MACVnE,QAAQ,GAAG9J,KAAK,CAACsR,UAAU,CAACxH,QAAQ,EAAEmE,KAAK,CAAClI,KAAK,EAAEkI,KAAK,CAACjI,GAAG,CAAC;;IAG9D,OAAO8D,QAAQ;EAChB,CAAC;EAED;;;;;;;;;;;;EAYOzI,SAAA,CAAAJ,SAAA,CAAAsR,QAAQ,GAAf,UAAgBhQ,QAA0B,EAAEoC,GAAW,EAAEmN,QAAiB,EAAEC,QAAiB,EAAE9D,KAAc;IAC5G,IAAIrN,KAAK,GAAW2B,QAAQ,CAAC0P,eAAe,CAACtN,GAAG,CAAC;IACjD,IAAIwN,KAAK,GAAW5P,QAAQ,CAAC6P,QAAQ,CAACL,QAAQ,EAAE,OAAO,CAAC;IAExD,IAAI,CAAC5R,KAAK,CAAC0E,QAAQ,CAACjE,KAAK,CAAC,EAAE;MAC3BA,KAAK,GAAG,IAAI,CAACsK,SAAS;;IAGvB,IAAIpB,QAAQ,GAAG,IAAI,CAACC,eAAe,CAACnJ,KAAK,GAAGuR,KAAK,CAAC;IAClD,IAAIlE,KAAK,EAAE;MACVnE,QAAQ,GAAG9J,KAAK,CAACsR,UAAU,CAACxH,QAAQ,EAAEmE,KAAK,CAAClI,KAAK,EAAEkI,KAAK,CAACjI,GAAG,CAAC;;IAG9D,OAAO,IAAI,CAAC0F,eAAe,CAAC5B,QAAQ,CAAC;EACtC,CAAC;EAED;;;;;;;;;;EAUOzI,SAAA,CAAAJ,SAAA,CAAAuR,eAAe,GAAtB,UAAuBzM,KAAa,EAAEC,GAAW,EAAE8L,QAAiB;IACnE,IAAIpF,aAAa,GAAW,IAAI,CAAC3C,eAAe,CAAChE,KAAK,CAAC;IACvD,IAAIiE,WAAW,GAAW,IAAI,CAACD,eAAe,CAAC/D,GAAG,CAAC;IAEnD,OAAO,IAAI,CAACyM,oBAAoB,CAAC/F,aAAa,EAAE1C,WAAW,CAAC,CAAC,CAAC;EAC/D,CAAC;EAED;;;;;;;;;;;EAWO3I,SAAA,CAAAJ,SAAA,CAAAyR,cAAc,GAArB,UAAsB5I,QAAgB;IACrC,IAAIlJ,KAAK,GAAWZ,KAAK,CAAC4C,KAAK,CAAC,IAAI,CAACkD,eAAe,CAACgE,QAAQ,CAAC,EAAE,IAAI,CAACxI,kBAAkB,GAAG,IAAI,CAACqR,qBAAqB,CAAC;IACrH,IAAIC,QAAQ,GAAG,IAAI,CAACC,OAAO,CAAC7H,eAAe,CAACC,MAAM,CAACrK,KAAK,CAAC;IACzD,IAAI,CAAC,IAAI,CAACwK,SAAS,EAAE;MACpB,OAAOwH,QAAQ;KACf,MACI;MACJ,OAAO,IAAI,CAACxH,SAAS,CAACC,KAAK,CAAC,gBAAgB,EAAEuH,QAAQ,CAAC;;EAEzD,CAAC;EAED;;;;;;;;EAQOvR,SAAA,CAAAJ,SAAA,CAAA6R,YAAY,GAAnB,UAAoB5G,UAAkB,EAAErL,QAAgB,EAAEkS,cAAwB,EAAEC,SAAmB;IACtG,IAAIjN,KAAK,GAAW,CAACmG,UAAU,GAAG,IAAI,CAACtG,GAAG,KAAK,IAAI,CAACC,GAAG,GAAG,IAAI,CAACD,GAAG,CAAC;IACnE,IAAII,GAAG,GAAW,CAACnF,QAAQ,GAAG,IAAI,CAAC+E,GAAG,KAAK,IAAI,CAACC,GAAG,GAAG,IAAI,CAACD,GAAG,CAAC;IAE/D,IAAI,CAAC8L,IAAI,CAAC;MAAE3L,KAAK,EAAEA,KAAK;MAAEC,GAAG,EAAEA;IAAG,CAAE,EAAE+M,cAAc,EAAEC,SAAS,CAAC;EACjE,CAAC;EAODjS,MAAA,CAAAC,cAAA,CAAWK,SAAA,CAAAJ,SAAA,aAAS;IALpB;;;;;SAKA,SAAAC,CAAA;MACC,IAAI,CAAC,IAAI,CAACsF,YAAY,EAAE;QACvB,OAAOxG,KAAK,CAAC6F,GAAG,CAAC,IAAI,CAACD,GAAG,EAAE,IAAI,CAACnC,UAAU,CAAC;OAC3C,MACI;QACJ,OAAO,IAAI,CAACA,UAAU;;IAExB,CAAC;;;;EAMD1C,MAAA,CAAAC,cAAA,CAAWK,SAAA,CAAAJ,SAAA,aAAS;IAJpB;;;;SAIA,SAAAC,CAAA;MACC,IAAI,CAAC,IAAI,CAACsF,YAAY,EAAE;QACvB,OAAOxG,KAAK,CAAC4F,GAAG,CAAC,IAAI,CAACC,GAAG,EAAE,IAAI,CAACtC,UAAU,CAAC;OAC3C,MACI;QACJ,OAAO,IAAI,CAACA,UAAU;;IAExB,CAAC;;;;EAED;;;;;EAKOlC,SAAA,CAAAJ,SAAA,CAAAmE,aAAa,GAApB;IAAA,IAAA5E,KAAA;IAECF,MAAA,CAAAW,SAAA,CAAMmE,aAAa,CAAA3E,IAAA,MAAE;IACrB,IAAIoI,UAAU,GAAG,IAAI,CAACC,WAAW;IACjC,IAAID,UAAU,IAAIA,UAAU,CAAC3E,MAAM,GAAG,CAAC,EAAE;MACxC;MACA2E,UAAU,CAACrE,IAAI,CAAC,UAACkD,SAAS;QACzB,IAAIwE,UAAU,GAAWxE,SAAS,CAAC+B,kBAAkB;QACrD,IAAI5I,QAAQ,GAAW6G,SAAS,CAACgC,gBAAgB;QAEjD;QACA,IAAIuJ,YAAY,GAAWpS,QAAQ,GAAGqL,UAAU;QAChD,IAAIgH,kBAAkB,GAAWpQ,IAAI,CAACqN,IAAI,CAAC8C,YAAY,GAAGvL,SAAS,CAACuB,SAAS,CAAC,GAAGzI,KAAI,CAAC6F,UAAU,IAAI7F,KAAI,CAACqF,GAAG,GAAGrF,KAAI,CAACoF,GAAG,CAAC;QAExH;QACA,IAAIuN,eAAe,GAAG3S,KAAI,CAAC4F,YAAY,CAAC8F,UAAU,EAAErL,QAAQ,EAAEoS,YAAY,EAAEC,kBAAkB,EAAE,IAAI,CAAC;QAErGxL,SAAS,CAACiC,YAAY,GAAGwJ,eAAe,CAACtQ,IAAI;QAC7C6E,SAAS,CAAC6B,WAAW,GAAG4J,eAAe,CAACvN,GAAG;QAC3C8B,SAAS,CAAC8B,WAAW,GAAG2J,eAAe,CAACtN,GAAG;MAC5C,CAAC,CAAC;;IAGH,IAAI,CAACmG,WAAW,GAAG,IAAI,CAAC9F,gBAAgB,CAAC,IAAI,CAACN,GAAG,EAAE,IAAI,CAACC,GAAG,CAAC;EAC7D,CAAC;EAED;;;;;;;;;;;;EAYOxE,SAAA,CAAAJ,SAAA,CAAAmS,gBAAgB,GAAvB,UAAwBtJ,QAAgB;IACvC,IAAIlJ,KAAK,GAAW,IAAI,CAACkF,eAAe,CAACgE,QAAQ,CAAC;IAClD,OAAO,IAAI,CAACkB,eAAe,CAACC,MAAM,CAACrK,KAAK,CAAC;EAC1C,CAAC;EAED;;;;;EAKOS,SAAA,CAAAJ,SAAA,CAAAoS,aAAa,GAApB,UAAqBzS,KAAa;IACjC,IAAI,CAAC0S,qBAAqB,CAAC,IAAI,CAACvJ,eAAe,CAACnJ,KAAK,CAAC,CAAC;EACxD,CAAC;EAED;;;;;EAKOS,SAAA,CAAAJ,SAAA,CAAAsS,QAAQ,GAAf,UAAgBC,MAAY;IAC3BlT,MAAA,CAAAW,SAAA,CAAMsS,QAAQ,CAAA9S,IAAA,OAAC+S,MAAM,CAAC;IACtB,IAAI,CAAC5N,GAAG,GAAG4N,MAAM,CAAC5N,GAAG;IACrB,IAAI,CAACC,GAAG,GAAG2N,MAAM,CAAC3N,GAAG;IACrB,IAAI,CAAC9D,eAAe,GAAGyR,MAAM,CAACzR,eAAe;IAC7C,IAAI,CAACN,UAAU,GAAG+R,MAAM,CAACtI,SAAS;EACnC,CAAC;EAyBDnK,MAAA,CAAAC,cAAA,CAAWK,SAAA,CAAAJ,SAAA,gBAAY;IAiBvB;;;SAGA,SAAAC,CAAA;MACC,OAAO,IAAI,CAACuP,gBAAgB,CAAC,cAAc,CAAC;IAC7C,CAAC;IA7CD;;;;;;;;;;;;;;;;;;;;;;;SAuBA,SAAAtP,CAAwBqB,IAAe;MAAvC,IAAAhC,KAAA;MACC,IAAI,IAAI,CAACyB,gBAAgB,CAAC,cAAc,EAAEO,IAAI,EAAE,IAAI,CAAC,EAAE;QACtD,IAAIA,IAAI,EAAE;UACT,IAAI,CAACiR,UAAU,CAACC,IAAI,CAAClR,IAAI,CAACgN,MAAM,CAACC,EAAE,CAAC,iBAAiB,EAAE,IAAI,CAACE,6BAA6B,EAAE,IAAI,EAAE,KAAK,CAAC,CAAC;UACxG,IAAI,CAAC8D,UAAU,CAACC,IAAI,CAAClR,IAAI,CAACgN,MAAM,CAACC,EAAE,CAAC,0BAA0B,EAAE,IAAI,CAACE,6BAA6B,EAAE,IAAI,EAAE,KAAK,CAAC,CAAC;UACjH,IAAI,CAAC8D,UAAU,CAACC,IAAI,CAAClR,IAAI,CAACgN,MAAM,CAACC,EAAE,CAAC,iBAAiB,EAAE,IAAI,CAACE,6BAA6B,EAAE,IAAI,EAAE,KAAK,CAAC,CAAC;UACxG,IAAI,CAACH,MAAM,CAACC,EAAE,CAAC,OAAO,EAAE,IAAI,CAACE,6BAA6B,EAAE,IAAI,EAAE,KAAK,CAAC;UACxE,IAAI,CAACH,MAAM,CAACC,EAAE,CAAC,gBAAgB,EAAE;YAChCjP,KAAI,CAAC2C,UAAU,EAAE;YACjB3C,KAAI,CAACiT,UAAU,CAACC,IAAI,CAAC5T,QAAQ,CAAC0P,MAAM,CAACmE,IAAI,CAAC,WAAW,EAAE;cACtDnT,KAAI,CAACmP,6BAA6B,EAAE;YACrC,CAAC,CAAC,CAAC;UACJ,CAAC,EAAE,IAAI,EAAE,KAAK,CAAC;;;IAGlB,CAAC;;;;EAkBD5O,MAAA,CAAAC,cAAA,CAAWK,SAAA,CAAAJ,SAAA,eAAW;IAItB;;;SAGA,SAAAC,CAAA;MACC,OAAO,IAAI,CAACuP,gBAAgB,CAAC,aAAa,CAAC;IAC5C,CAAC;IAlBD;;;;;;;;;SASA,SAAAtP,CAAuBP,KAAa;MACnC,IAAI,CAACqB,gBAAgB,CAAC,aAAa,EAAErB,KAAK,EAAE,IAAI,CAAC;IAClD,CAAC;;;;EASD;;;;;;;EAOUS,SAAA,CAAAJ,SAAA,CAAAsQ,QAAQ,GAAlB,UAAmB3L,GAAW,EAAEC,GAAW,EAAEhD,IAAY;IACxD,IAAIL,IAAI,GAAG,IAAI,CAACgE,YAAY;IAC5B,IAAIhE,IAAI,EAAE;MAET,IAAI,CAACrC,KAAK,CAAC0E,QAAQ,CAACe,GAAG,CAAC,EAAE;QACzBA,GAAG,GAAG,IAAI,CAACA,GAAG;;MAEf,IAAI,CAACzF,KAAK,CAAC0E,QAAQ,CAACgB,GAAG,CAAC,EAAE;QACzBA,GAAG,GAAG,IAAI,CAACA,GAAG;;MAGf,IAAI,CAAC1F,KAAK,CAAC0E,QAAQ,CAAChC,IAAI,CAAC,EAAE;QAC1BA,IAAI,GAAG,IAAI,CAAC8D,KAAK;;MAGlB,IAAIiN,KAAK,GAAW9Q,IAAI,CAACF,KAAK,CAAC,CAACJ,IAAI,CAAC6E,SAAS,GAAG7E,IAAI,CAACsE,SAAS,IAAItE,IAAI,CAACK,IAAI,CAAC;MAC7E,IAAIgR,YAAY,GAAG/Q,IAAI,CAACF,KAAK,CAAC,CAACiD,GAAG,GAAGD,GAAG,IAAI/C,IAAI,CAAC;MAEjD,IAAI1C,KAAK,CAAC0E,QAAQ,CAAC+O,KAAK,CAAC,IAAIzT,KAAK,CAAC0E,QAAQ,CAACgP,YAAY,CAAC,EAAE;QAC1D,IAAIC,MAAM,GAAG,KAAK;QAClB,IAAIC,CAAC,GAAG,CAAC;QACT,IAAIC,IAAI,GAAG,CAACnO,GAAG,GAAGD,GAAG,IAAI,IAAI;QAC7B,IAAIqO,IAAI,GAAGrO,GAAG;QACd,IAAIsO,IAAI,GAAGrO,GAAG;QACd,IAAIsO,KAAK,GAAGtR,IAAI;QAEhB,OAAOiR,MAAM,IAAI,IAAI,EAAE;UACtBA,MAAM,GAAG,IAAI,CAACM,SAAS,CAACH,IAAI,EAAEC,IAAI,EAAEC,KAAK,EAAEP,KAAK,CAAC;UACjDG,CAAC,EAAE;UACH,IAAIA,CAAC,GAAG,IAAI,EAAE;YACbD,MAAM,GAAG,IAAI;;UAEd,IAAI,CAACA,MAAM,EAAE;YACZ;YAEA,IAAIC,CAAC,GAAG,CAAC,IAAIjR,IAAI,CAACF,KAAK,CAACmR,CAAC,GAAG,CAAC,CAAC,EAAE;cAC/BE,IAAI,GAAGrO,GAAG,GAAGoO,IAAI,GAAGD,CAAC;cACrB,IAAInO,GAAG,IAAI,CAAC,IAAIqO,IAAI,GAAG,CAAC,EAAE;gBACzBA,IAAI,GAAG,CAAC;;aAET,MACI;cACJC,IAAI,GAAGrO,GAAG,GAAGmO,IAAI,GAAGD,CAAC;cACrB,IAAIG,IAAI,IAAI,CAAC,IAAIA,IAAI,GAAG,CAAC,EAAE;gBAC1BA,IAAI,GAAG,CAAC;;;YAIV,IAAI/N,UAAU,GAAG,IAAI,CAACC,YAAY,CAAC6N,IAAI,EAAEC,IAAI,EAAEA,IAAI,GAAGD,IAAI,EAAE,IAAI,CAAC5N,UAAU,EAAE,IAAI,CAAC;YAClF4N,IAAI,GAAG9N,UAAU,CAACP,GAAG;YACrBsO,IAAI,GAAG/N,UAAU,CAACN,GAAG;YACrBsO,KAAK,GAAGhO,UAAU,CAACtD,IAAI;WACvB,MACI;YACJ+C,GAAG,GAAGqO,IAAI;YACVpO,GAAG,GAAGqO,IAAI;YACVrR,IAAI,GAAGsR,KAAK;;;;;IAOhB,OAAO;MAAEvO,GAAG,EAAEA,GAAG;MAAEC,GAAG,EAAEA,GAAG;MAAEhD,IAAI,EAAEA;IAAI,CAAE;EAC1C,CAAC;EAED;;;EAGUxB,SAAA,CAAAJ,SAAA,CAAAmT,SAAS,GAAnB,UAAoBxO,GAAW,EAAEC,GAAW,EAAEhD,IAAY,EAAE+Q,KAAa;IACxE,IAAIC,YAAY,GAAG,CAAChO,GAAG,GAAGD,GAAG,IAAI/C,IAAI;IACrC,KAAK,IAAIuB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGwP,KAAK,EAAExP,CAAC,EAAE,EAAE;MAC/B,IAAIpE,KAAK,CAAC4C,KAAK,CAACiR,YAAY,GAAGzP,CAAC,EAAE,CAAC,CAAC,IAAIwP,KAAK,IAAIC,YAAY,GAAGzP,CAAC,IAAIwP,KAAK,EAAE;QAC3E,OAAO,IAAI;;;IAGb,OAAO,KAAK;EACb,CAAC;EAED;;;;;;EAMOvS,SAAA,CAAAJ,SAAA,CAAAoT,aAAa,GAApB,UAAqBC,MAAiC;IAErD,IAAIA,MAAM,EAAE;MAEX;MACA,IAAInU,KAAK,CAAC+R,QAAQ,CAACoC,MAAM,CAAC9N,YAAY,CAAC,IAAIrG,KAAK,CAACoU,QAAQ,CAACD,MAAM,CAAC9N,YAAY,CAAC,EAAE;QAC/E,IAAI,IAAI,CAACgO,GAAG,CAACC,MAAM,CAACH,MAAM,CAAC9N,YAAY,CAAC,EAAE;UACzC8N,MAAM,CAAC9N,YAAY,GAAG,IAAI,CAACgO,GAAG,CAACE,MAAM,CAACJ,MAAM,CAAC9N,YAAY,CAAC;SAC1D,MACI;UACJ,IAAI,CAACmO,gBAAgB,CAACjB,IAAI,CAAC,gCAAgC,GAAGY,MAAM,CAAC9N,YAAY,GAAG,6BAA6B,CAAC;UAClH,OAAO8N,MAAM,CAACM,KAAK;;;;IAMtBtU,MAAA,CAAAW,SAAA,CAAMoT,aAAa,CAAA5T,IAAA,OAAC6T,MAAM,CAAC;EAE5B,CAAC;EAESjT,SAAA,CAAAJ,SAAA,CAAA4O,WAAW,GAArB,UAAsBgF,IAAY,EAAEC,IAAY,GAEhD,CAAC;EACF,OAAAzT,SAAC;AAAD,CAAC,CA74EqE3B,IAAI;;AA+4E1E;;;;;;AAMAI,QAAQ,CAACiV,iBAAiB,CAAC,WAAW,CAAC,GAAG1T,SAAS;AACnDvB,QAAQ,CAACiV,iBAAiB,CAAC,mBAAmB,CAAC,GAAG1U,iBAAiB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}