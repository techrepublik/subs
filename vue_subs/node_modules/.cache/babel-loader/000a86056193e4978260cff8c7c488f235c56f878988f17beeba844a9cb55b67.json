{"ast":null,"code":"import { geoProjectionMutator as projectionMutator, geoAzimuthalEquidistantRaw as azimuthalEquidistantRaw } from \"d3-geo\";\nimport { abs, acos, asin, atan, atan2, cos, degrees, halfPi, pi, radians, round, sin, sqrt, tan } from \"./math.js\";\nexport function berghausRaw(lobes) {\n  var k = 2 * pi / lobes;\n  function forward(lambda, phi) {\n    var p = azimuthalEquidistantRaw(lambda, phi);\n    if (abs(lambda) > halfPi) {\n      // back hemisphere\n      var theta = atan2(p[1], p[0]),\n        r = sqrt(p[0] * p[0] + p[1] * p[1]),\n        theta0 = k * round((theta - halfPi) / k) + halfPi,\n        alpha = atan2(sin(theta -= theta0), 2 - cos(theta)); // angle relative to lobe end\n      theta = theta0 + asin(pi / r * sin(alpha)) - alpha;\n      p[0] = r * cos(theta);\n      p[1] = r * sin(theta);\n    }\n    return p;\n  }\n  forward.invert = function (x, y) {\n    var r = sqrt(x * x + y * y);\n    if (r > halfPi) {\n      var theta = atan2(y, x),\n        theta0 = k * round((theta - halfPi) / k) + halfPi,\n        s = theta > theta0 ? -1 : 1,\n        A = r * cos(theta0 - theta),\n        cotAlpha = 1 / tan(s * acos((A - pi) / sqrt(pi * (pi - 2 * A) + r * r)));\n      theta = theta0 + 2 * atan((cotAlpha + s * sqrt(cotAlpha * cotAlpha - 3)) / 3);\n      x = r * cos(theta), y = r * sin(theta);\n    }\n    return azimuthalEquidistantRaw.invert(x, y);\n  };\n  return forward;\n}\nexport default function () {\n  var lobes = 5,\n    m = projectionMutator(berghausRaw),\n    p = m(lobes),\n    projectionStream = p.stream,\n    epsilon = 1e-2,\n    cr = -cos(epsilon * radians),\n    sr = sin(epsilon * radians);\n  p.lobes = function (_) {\n    return arguments.length ? m(lobes = +_) : lobes;\n  };\n  p.stream = function (stream) {\n    var rotate = p.rotate(),\n      rotateStream = projectionStream(stream),\n      sphereStream = (p.rotate([0, 0]), projectionStream(stream));\n    p.rotate(rotate);\n    rotateStream.sphere = function () {\n      sphereStream.polygonStart(), sphereStream.lineStart();\n      for (var i = 0, delta = 360 / lobes, delta0 = 2 * pi / lobes, phi = 90 - 180 / lobes, phi0 = halfPi; i < lobes; ++i, phi -= delta, phi0 -= delta0) {\n        sphereStream.point(atan2(sr * cos(phi0), cr) * degrees, asin(sr * sin(phi0)) * degrees);\n        if (phi < -90) {\n          sphereStream.point(-90, -180 - phi - epsilon);\n          sphereStream.point(-90, -180 - phi + epsilon);\n        } else {\n          sphereStream.point(90, phi + epsilon);\n          sphereStream.point(90, phi - epsilon);\n        }\n      }\n      sphereStream.lineEnd(), sphereStream.polygonEnd();\n    };\n    return rotateStream;\n  };\n  return p.scale(87.8076).center([0, 17.1875]).clipAngle(180 - 1e-3);\n}","map":{"version":3,"names":["geoProjectionMutator","projectionMutator","geoAzimuthalEquidistantRaw","azimuthalEquidistantRaw","abs","acos","asin","atan","atan2","cos","degrees","halfPi","pi","radians","round","sin","sqrt","tan","berghausRaw","lobes","k","forward","lambda","phi","p","theta","r","theta0","alpha","invert","x","y","s","A","cotAlpha","m","projectionStream","stream","epsilon","cr","sr","_","arguments","length","rotate","rotateStream","sphereStream","sphere","polygonStart","lineStart","i","delta","delta0","phi0","point","lineEnd","polygonEnd","scale","center","clipAngle"],"sources":["/home/josh/Documents/projects/subs/vue_subs/node_modules/d3-geo-projection/src/berghaus.js"],"sourcesContent":["import {geoProjectionMutator as projectionMutator, geoAzimuthalEquidistantRaw as azimuthalEquidistantRaw} from \"d3-geo\";\nimport {abs, acos, asin, atan, atan2, cos, degrees, halfPi, pi, radians, round, sin, sqrt, tan} from \"./math.js\";\n\nexport function berghausRaw(lobes) {\n  var k = 2 * pi / lobes;\n\n  function forward(lambda, phi) {\n    var p = azimuthalEquidistantRaw(lambda, phi);\n    if (abs(lambda) > halfPi) { // back hemisphere\n      var theta = atan2(p[1], p[0]),\n          r = sqrt(p[0] * p[0] + p[1] * p[1]),\n          theta0 = k * round((theta - halfPi) / k) + halfPi,\n          alpha = atan2(sin(theta -= theta0), 2 - cos(theta)); // angle relative to lobe end\n      theta = theta0 + asin(pi / r * sin(alpha)) - alpha;\n      p[0] = r * cos(theta);\n      p[1] = r * sin(theta);\n    }\n    return p;\n  }\n\n  forward.invert = function(x, y) {\n    var r = sqrt(x * x + y * y);\n    if (r > halfPi) {\n      var theta = atan2(y, x),\n          theta0 = k * round((theta - halfPi) / k) + halfPi,\n          s = theta > theta0 ? -1 : 1,\n          A = r * cos(theta0 - theta),\n          cotAlpha = 1 / tan(s * acos((A - pi) / sqrt(pi * (pi - 2 * A) + r * r)));\n      theta = theta0 + 2 * atan((cotAlpha + s * sqrt(cotAlpha * cotAlpha - 3)) / 3);\n      x = r * cos(theta), y = r * sin(theta);\n    }\n    return azimuthalEquidistantRaw.invert(x, y);\n  };\n\n  return forward;\n}\n\nexport default function() {\n  var lobes = 5,\n      m = projectionMutator(berghausRaw),\n      p = m(lobes),\n      projectionStream = p.stream,\n      epsilon = 1e-2,\n      cr = -cos(epsilon * radians),\n      sr = sin(epsilon * radians);\n\n  p.lobes = function(_) {\n    return arguments.length ? m(lobes = +_) : lobes;\n  };\n\n  p.stream = function(stream) {\n    var rotate = p.rotate(),\n        rotateStream = projectionStream(stream),\n        sphereStream = (p.rotate([0, 0]), projectionStream(stream));\n    p.rotate(rotate);\n    rotateStream.sphere = function() {\n      sphereStream.polygonStart(), sphereStream.lineStart();\n      for (var i = 0, delta = 360 / lobes, delta0 = 2 * pi / lobes, phi = 90 - 180 / lobes, phi0 = halfPi; i < lobes; ++i, phi -= delta, phi0 -= delta0) {\n        sphereStream.point(atan2(sr * cos(phi0), cr) * degrees, asin(sr * sin(phi0)) * degrees);\n        if (phi < -90) {\n          sphereStream.point(-90, -180 - phi - epsilon);\n          sphereStream.point(-90, -180 - phi + epsilon);\n        } else {\n          sphereStream.point(90, phi + epsilon);\n          sphereStream.point(90, phi - epsilon);\n        }\n      }\n      sphereStream.lineEnd(), sphereStream.polygonEnd();\n    };\n    return rotateStream;\n  };\n\n  return p\n      .scale(87.8076)\n      .center([0, 17.1875])\n      .clipAngle(180 - 1e-3);\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}