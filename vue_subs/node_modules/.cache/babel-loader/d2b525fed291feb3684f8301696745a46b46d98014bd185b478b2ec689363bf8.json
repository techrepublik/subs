{"ast":null,"code":"import { geoProjection as projection } from \"d3-geo\";\nimport { abs, epsilon } from \"./math.js\";\nexport function ginzburg8Raw(lambda, phi) {\n  var lambda2 = lambda * lambda,\n    phi2 = phi * phi;\n  return [lambda * (1 - 0.162388 * phi2) * (0.87 - 0.000952426 * lambda2 * lambda2), phi * (1 + phi2 / 12)];\n}\nginzburg8Raw.invert = function (x, y) {\n  var lambda = x,\n    phi = y,\n    i = 50,\n    delta;\n  do {\n    var phi2 = phi * phi;\n    phi -= delta = (phi * (1 + phi2 / 12) - y) / (1 + phi2 / 4);\n  } while (abs(delta) > epsilon && --i > 0);\n  i = 50;\n  x /= 1 - 0.162388 * phi2;\n  do {\n    var lambda4 = (lambda4 = lambda * lambda) * lambda4;\n    lambda -= delta = (lambda * (0.87 - 0.000952426 * lambda4) - x) / (0.87 - 0.00476213 * lambda4);\n  } while (abs(delta) > epsilon && --i > 0);\n  return [lambda, phi];\n};\nexport default function () {\n  return projection(ginzburg8Raw).scale(131.747);\n}","map":{"version":3,"names":["geoProjection","projection","abs","epsilon","ginzburg8Raw","lambda","phi","lambda2","phi2","invert","x","y","i","delta","lambda4","scale"],"sources":["/home/josh/Documents/projects/subs/vue_subs/node_modules/d3-geo-projection/src/ginzburg8.js"],"sourcesContent":["import {geoProjection as projection} from \"d3-geo\";\nimport {abs, epsilon} from \"./math.js\";\n\nexport function ginzburg8Raw(lambda, phi) {\n  var lambda2 = lambda * lambda,\n      phi2 = phi * phi;\n  return [\n    lambda * (1 - 0.162388 * phi2) * (0.87 - 0.000952426 * lambda2 * lambda2),\n    phi * (1 + phi2 / 12)\n  ];\n}\n\nginzburg8Raw.invert = function(x, y) {\n  var lambda = x,\n      phi = y,\n      i = 50, delta;\n  do {\n    var phi2 = phi * phi;\n    phi -= delta = (phi * (1 + phi2 / 12) - y) / (1 + phi2 / 4);\n  } while (abs(delta) > epsilon && --i > 0);\n  i = 50;\n  x /= 1 -0.162388 * phi2;\n  do {\n    var lambda4 = (lambda4 = lambda * lambda) * lambda4;\n    lambda -= delta = (lambda * (0.87 - 0.000952426 * lambda4) - x) / (0.87 - 0.00476213 * lambda4);\n  } while (abs(delta) > epsilon && --i > 0);\n  return [lambda, phi];\n};\n\nexport default function() {\n  return projection(ginzburg8Raw)\n      .scale(131.747);\n}\n"],"mappings":"AAAA,SAAQA,aAAa,IAAIC,UAAU,QAAO,QAAQ;AAClD,SAAQC,GAAG,EAAEC,OAAO,QAAO,WAAW;AAEtC,OAAO,SAASC,YAAYA,CAACC,MAAM,EAAEC,GAAG,EAAE;EACxC,IAAIC,OAAO,GAAGF,MAAM,GAAGA,MAAM;IACzBG,IAAI,GAAGF,GAAG,GAAGA,GAAG;EACpB,OAAO,CACLD,MAAM,IAAI,CAAC,GAAG,QAAQ,GAAGG,IAAI,CAAC,IAAI,IAAI,GAAG,WAAW,GAAGD,OAAO,GAAGA,OAAO,CAAC,EACzED,GAAG,IAAI,CAAC,GAAGE,IAAI,GAAG,EAAE,CAAC,CACtB;AACH;AAEAJ,YAAY,CAACK,MAAM,GAAG,UAASC,CAAC,EAAEC,CAAC,EAAE;EACnC,IAAIN,MAAM,GAAGK,CAAC;IACVJ,GAAG,GAAGK,CAAC;IACPC,CAAC,GAAG,EAAE;IAAEC,KAAK;EACjB,GAAG;IACD,IAAIL,IAAI,GAAGF,GAAG,GAAGA,GAAG;IACpBA,GAAG,IAAIO,KAAK,GAAG,CAACP,GAAG,IAAI,CAAC,GAAGE,IAAI,GAAG,EAAE,CAAC,GAAGG,CAAC,KAAK,CAAC,GAAGH,IAAI,GAAG,CAAC,CAAC;EAC7D,CAAC,QAAQN,GAAG,CAACW,KAAK,CAAC,GAAGV,OAAO,IAAI,EAAES,CAAC,GAAG,CAAC;EACxCA,CAAC,GAAG,EAAE;EACNF,CAAC,IAAI,CAAC,GAAE,QAAQ,GAAGF,IAAI;EACvB,GAAG;IACD,IAAIM,OAAO,GAAG,CAACA,OAAO,GAAGT,MAAM,GAAGA,MAAM,IAAIS,OAAO;IACnDT,MAAM,IAAIQ,KAAK,GAAG,CAACR,MAAM,IAAI,IAAI,GAAG,WAAW,GAAGS,OAAO,CAAC,GAAGJ,CAAC,KAAK,IAAI,GAAG,UAAU,GAAGI,OAAO,CAAC;EACjG,CAAC,QAAQZ,GAAG,CAACW,KAAK,CAAC,GAAGV,OAAO,IAAI,EAAES,CAAC,GAAG,CAAC;EACxC,OAAO,CAACP,MAAM,EAAEC,GAAG,CAAC;AACtB,CAAC;AAED,eAAe,YAAW;EACxB,OAAOL,UAAU,CAACG,YAAY,CAAC,CAC1BW,KAAK,CAAC,OAAO,CAAC;AACrB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}