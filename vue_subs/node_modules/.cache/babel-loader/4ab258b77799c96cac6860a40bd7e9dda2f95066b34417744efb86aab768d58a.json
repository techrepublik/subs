{"ast":null,"code":"/**\r\n * Functionality for drawing circles.\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\nimport { Sprite } from \"../Sprite\";\nimport { percent } from \"../utils/Percent\";\nimport { registry } from \"../Registry\";\nimport * as $utils from \"../utils/Utils\";\nimport * as $math from \"../utils/Math\";\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n/**\r\n * Used to create a circle\r\n * @see {@link ICircleEvents} for a list of available events\r\n * @see {@link ICircleAdapters} for a list of available Adapters\r\n */\nvar Circle = /** @class */function (_super) {\n  __extends(Circle, _super);\n  /**\r\n   * Constructor\r\n   */\n  function Circle() {\n    var _this = _super.call(this) || this;\n    _this.className = \"Circle\";\n    _this.element = _this.paper.add(\"circle\");\n    _this.setPercentProperty(\"radius\", percent(100));\n    _this.setPropertyValue(\"horizontalCenter\", \"middle\");\n    _this.setPropertyValue(\"verticalCenter\", \"middle\");\n    _this.applyTheme();\n    return _this;\n  }\n  /**\r\n   * Draws the circle.\r\n   */\n  Circle.prototype.draw = function () {\n    _super.prototype.draw.call(this);\n    this.element.attr({\n      \"r\": this.pixelRadius\n    });\n  };\n  Object.defineProperty(Circle.prototype, \"radius\", {\n    /**\r\n     * @return Radius\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"radius\");\n    },\n    /**\r\n     * Radius of the circle.\r\n     *\r\n     * Can be either absolute (pixels) or relative ([Percent]).\r\n     *\r\n     * @param value  Radius\r\n     */\n    set: function (value) {\n      this.setPercentProperty(\"radius\", value, true, false, 10, false);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Circle.prototype, \"pixelRadius\", {\n    /**\r\n     * Radius of the circle in pixels.\r\n     *\r\n     * This is a read-only property. To set radius in pixels, use `radius`\r\n     * property.\r\n     *\r\n     * @readonly\r\n     * @return Radius (px)\r\n     */\n    get: function () {\n      return $utils.relativeToValue(this.radius, $math.min(this.innerWidth / 2, this.innerHeight / 2));\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Updates bounding box.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  Circle.prototype.measureElement = function () {\n    var pixelRadius = this.pixelRadius;\n    this._bbox = {\n      x: -pixelRadius,\n      y: -pixelRadius,\n      width: pixelRadius * 2,\n      height: pixelRadius * 2\n    };\n  };\n  return Circle;\n}(Sprite);\nexport { Circle };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\nregistry.registeredClasses[\"Circle\"] = Circle;","map":{"version":3,"names":["Sprite","percent","registry","$utils","$math","Circle","_super","__extends","_this","call","className","element","paper","add","setPercentProperty","setPropertyValue","applyTheme","prototype","draw","attr","pixelRadius","Object","defineProperty","get","getPropertyValue","set","value","relativeToValue","radius","min","innerWidth","innerHeight","measureElement","_bbox","x","y","width","height","registeredClasses"],"sources":["../../../../../src/.internal/core/elements/Circle.ts"],"sourcesContent":["/**\r\n * Functionality for drawing circles.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Sprite, ISpriteProperties, ISpriteAdapters, ISpriteEvents } from \"../Sprite\";\r\nimport { percent, Percent } from \"../utils/Percent\";\r\nimport { registry } from \"../Registry\";\r\nimport * as $utils from \"../utils/Utils\";\r\nimport * as $math from \"../utils/Math\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[Circle]].\r\n */\r\nexport interface ICircleProperties extends ISpriteProperties {\r\n\r\n\t/**\r\n\t * Radius of the circle.\r\n\t *\r\n\t * Can be either absolute (pixels) or relative ([Percent]).\r\n\t */\r\n\tradius?: number | Percent;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[Circle]].\r\n */\r\nexport interface ICircleEvents extends ISpriteEvents { }\r\n\r\n/**\r\n * Defines adapters for [[Circle]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ICircleAdapters extends ISpriteAdapters, ICircleProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Used to create a circle\r\n * @see {@link ICircleEvents} for a list of available events\r\n * @see {@link ICircleAdapters} for a list of available Adapters\r\n */\r\nexport class Circle extends Sprite {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: ICircleProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: ICircleAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: ICircleEvents;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"Circle\";\r\n\t\tthis.element = this.paper.add(\"circle\");\r\n\r\n\t\tthis.setPercentProperty(\"radius\", percent(100));\r\n\t\tthis.setPropertyValue(\"horizontalCenter\", \"middle\");\r\n\t\tthis.setPropertyValue(\"verticalCenter\", \"middle\");\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Draws the circle.\r\n\t */\r\n\tprotected draw(): void {\r\n\t\tsuper.draw();\r\n\t\tthis.element.attr({ \"r\": this.pixelRadius });\r\n\t}\r\n\r\n\t/**\r\n\t * Radius of the circle.\r\n\t *\r\n\t * Can be either absolute (pixels) or relative ([Percent]).\r\n\t *\r\n\t * @param value  Radius\r\n\t */\r\n\tpublic set radius(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"radius\", value, true, false, 10, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Radius\r\n\t */\r\n\tpublic get radius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Radius of the circle in pixels.\r\n\t *\r\n\t * This is a read-only property. To set radius in pixels, use `radius`\r\n\t * property.\r\n\t *\r\n\t * @readonly\r\n\t * @return Radius (px)\r\n\t */\r\n\tpublic get pixelRadius(): number {\r\n\t\treturn $utils.relativeToValue(this.radius, $math.min(this.innerWidth / 2, this.innerHeight / 2));\r\n\t}\r\n\r\n\t/**\r\n\t * Updates bounding box.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic measureElement(): void {\r\n\t\tlet pixelRadius = this.pixelRadius;\r\n\t\tthis._bbox = {\r\n\t\t\tx: -pixelRadius,\r\n\t\t\ty: -pixelRadius,\r\n\t\t\twidth: pixelRadius * 2,\r\n\t\t\theight: pixelRadius * 2\r\n\t\t};\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Circle\"] = Circle;\r\n"],"mappings":"AAAA;;;;AAIA;;;;;;AAMA,SAASA,MAAM,QAA2D,WAAW;AACrF,SAASC,OAAO,QAAiB,kBAAkB;AACnD,SAASC,QAAQ,QAAQ,aAAa;AACtC,OAAO,KAAKC,MAAM,MAAM,gBAAgB;AACxC,OAAO,KAAKC,KAAK,MAAM,eAAe;AAqCtC;;;;;;AAOA;;;;;AAKA,IAAAC,MAAA,0BAAAC,MAAA;EAA4BC,SAAA,CAAAF,MAAA,EAAAC,MAAA;EAiB3B;;;EAGA,SAAAD,OAAA;IAAA,IAAAG,KAAA,GACCF,MAAA,CAAAG,IAAA,MAAO;IAEPD,KAAI,CAACE,SAAS,GAAG,QAAQ;IACzBF,KAAI,CAACG,OAAO,GAAGH,KAAI,CAACI,KAAK,CAACC,GAAG,CAAC,QAAQ,CAAC;IAEvCL,KAAI,CAACM,kBAAkB,CAAC,QAAQ,EAAEb,OAAO,CAAC,GAAG,CAAC,CAAC;IAC/CO,KAAI,CAACO,gBAAgB,CAAC,kBAAkB,EAAE,QAAQ,CAAC;IACnDP,KAAI,CAACO,gBAAgB,CAAC,gBAAgB,EAAE,QAAQ,CAAC;IACjDP,KAAI,CAACQ,UAAU,EAAE;;EAClB;EAEA;;;EAGUX,MAAA,CAAAY,SAAA,CAAAC,IAAI,GAAd;IACCZ,MAAA,CAAAW,SAAA,CAAMC,IAAI,CAAAT,IAAA,MAAE;IACZ,IAAI,CAACE,OAAO,CAACQ,IAAI,CAAC;MAAE,GAAG,EAAE,IAAI,CAACC;IAAW,CAAE,CAAC;EAC7C,CAAC;EASDC,MAAA,CAAAC,cAAA,CAAWjB,MAAA,CAAAY,SAAA,UAAM;IAIjB;;;SAGA,SAAAM,CAAA;MACC,OAAO,IAAI,CAACC,gBAAgB,CAAC,QAAQ,CAAC;IACvC,CAAC;IAhBD;;;;;;;SAOA,SAAAC,CAAkBC,KAAuB;MACxC,IAAI,CAACZ,kBAAkB,CAAC,QAAQ,EAAEY,KAAK,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE,EAAE,KAAK,CAAC;IACjE,CAAC;;;;EAkBDL,MAAA,CAAAC,cAAA,CAAWjB,MAAA,CAAAY,SAAA,eAAW;IATtB;;;;;;;;;SASA,SAAAM,CAAA;MACC,OAAOpB,MAAM,CAACwB,eAAe,CAAC,IAAI,CAACC,MAAM,EAAExB,KAAK,CAACyB,GAAG,CAAC,IAAI,CAACC,UAAU,GAAG,CAAC,EAAE,IAAI,CAACC,WAAW,GAAG,CAAC,CAAC,CAAC;IACjG,CAAC;;;;EAED;;;;;EAKO1B,MAAA,CAAAY,SAAA,CAAAe,cAAc,GAArB;IACC,IAAIZ,WAAW,GAAG,IAAI,CAACA,WAAW;IAClC,IAAI,CAACa,KAAK,GAAG;MACZC,CAAC,EAAE,CAACd,WAAW;MACfe,CAAC,EAAE,CAACf,WAAW;MACfgB,KAAK,EAAEhB,WAAW,GAAG,CAAC;MACtBiB,MAAM,EAAEjB,WAAW,GAAG;KACtB;EACF,CAAC;EAEF,OAAAf,MAAC;AAAD,CAAC,CAtF2BL,MAAM;;AAwFlC;;;;;;AAMAE,QAAQ,CAACoC,iBAAiB,CAAC,QAAQ,CAAC,GAAGjC,MAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}