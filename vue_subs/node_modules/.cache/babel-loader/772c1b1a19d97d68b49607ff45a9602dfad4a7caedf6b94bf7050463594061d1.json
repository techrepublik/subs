{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n/**\r\n * Module, defining base Axis Renderer.\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\nimport { Container } from \"../../core/Container\";\nimport { MutableValueDisposer } from \"../../core/utils/Disposer\";\nimport { AxisDataItem } from \"./Axis\";\nimport { AxisLine } from \"./AxisLine\";\nimport { AxisFill } from \"./AxisFill\";\nimport { Grid } from \"./Grid\";\nimport { AxisLabel } from \"./AxisLabel\";\nimport { AxisTick } from \"./AxisTick\";\nimport { ListTemplate, ListDisposer } from \"../../core/utils/List\";\nimport { registry } from \"../../core/Registry\";\nimport { percent } from \"../../core/utils/Percent\";\nimport * as $math from \"../../core/utils/Math\";\nimport * as $type from \"../../core/utils/Type\";\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n/**\r\n * A base class for all axis renderers.\r\n *\r\n * @see {@link IAxisRendererEvents} for a list of available events\r\n * @see {@link IAxisRendererAdapters} for a list of available Adapters\r\n */\nvar AxisRenderer = /** @class */function (_super) {\n  __extends(AxisRenderer, _super);\n  /**\r\n   * Constructor.\r\n   *\r\n   * @param axis Related axis\r\n   */\n  function AxisRenderer() {\n    var _this =\n    // Init\n    _super.call(this) || this;\n    /**\r\n     * A related chart.\r\n     */\n    _this._chart = new MutableValueDisposer();\n    _this.className = \"AxisRenderer\";\n    // Set defaults\n    _this.minGridDistance = 50;\n    _this.inside = false;\n    _this.inversed = false;\n    _this.tooltipLocation = 0.5;\n    _this.fullWidthTooltip = false;\n    _this.cellStartLocation = 0;\n    _this.cellEndLocation = 1;\n    _this.minLabelPosition = 0;\n    _this.maxLabelPosition = 1;\n    _this.shouldClone = false;\n    var gridContainer = _this.createChild(Container);\n    gridContainer.shouldClone = false;\n    gridContainer.layout = \"none\";\n    //\tgridContainer.isMeasured = false;\n    gridContainer.virtualParent = _this;\n    gridContainer.width = percent(100);\n    gridContainer.height = percent(100);\n    _this.gridContainer = gridContainer;\n    // not good without this\n    gridContainer.events.on(\"maxsizechanged\", function () {\n      if (_this.inited) {\n        _this.invalidateAxisItems();\n      }\n    }, _this, false);\n    var breakContainer = _this.createChild(Container);\n    breakContainer.shouldClone = false;\n    breakContainer.isMeasured = false;\n    breakContainer.layout = \"none\";\n    breakContainer.width = percent(100);\n    breakContainer.height = percent(100);\n    _this.breakContainer = breakContainer;\n    var bulletsContainer = _this.createChild(Container);\n    bulletsContainer.shouldClone = false;\n    bulletsContainer.isMeasured = false;\n    bulletsContainer.layout = \"none\";\n    bulletsContainer.width = percent(100);\n    bulletsContainer.height = percent(100);\n    _this.bulletsContainer = bulletsContainer;\n    _this.line = _this.createChild(AxisLine);\n    _this.line.shouldClone = false;\n    _this.line.strokeOpacity = 0;\n    var baseGrid = _this.createChild(Grid);\n    baseGrid.shouldClone = false;\n    _this.baseGrid = baseGrid;\n    // Make elements disposable\n    var disposers = _this._disposers;\n    disposers.push(baseGrid);\n    disposers.push(_this.line);\n    disposers.push(gridContainer);\n    disposers.push(breakContainer);\n    disposers.push(bulletsContainer);\n    disposers.push(_this._chart);\n    _this.ticks.template.disabled = true;\n    _this.axisFills.template.disabled = true;\n    _this.axisFills.template.interactionsEnabled = false;\n    // Apply theme\n    _this.applyTheme();\n    return _this;\n  }\n  Object.defineProperty(AxisRenderer.prototype, \"axis\", {\n    /**\r\n     * Axis of a renderer\r\n     * @return axis Axis\r\n     */\n    get: function () {\n      return this._axis;\n    },\n    /**\r\n     * Axis of a renderer\r\n     * @param axis Axis\r\n     */\n    set: function (axis) {\n      this.setAxis(axis);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n  * @ignore\r\n  */\n  AxisRenderer.prototype.setAxis = function (axis) {\n    this._axis = axis;\n    this.baseGrid.parent = axis;\n    this.line.parent = axis;\n    this.gridContainer.bind(\"opacity\", axis);\n  };\n  /**\r\n   * Called when rendered is attached to an Axis, as well as a property of\r\n   * Axis that might affect the appearance is updated.\r\n   *\r\n   * E.g. `axis.opposite`, `axis.inside`, etc.\r\n   *\r\n   * This method is called **before** draw, so that any related setting\r\n   * changed in this method can be changed.\r\n   *\r\n   * @todo Description (review)\r\n   * @ignore Exclude from docs\r\n   */\n  AxisRenderer.prototype.processRenderer = function () {\n    this.events.on(\"sizechanged\", this.updateTooltip, this, false);\n    this.events.on(\"positionchanged\", this.updateTooltip, this, false);\n    this.labels.template.inside = this.inside;\n    this.ticks.template.inside = this.inside;\n  };\n  /**\r\n   * Updates Axis' tooltip.\r\n   *\r\n   * @todo Description (review)\r\n   * @ignore Exclude from docs\r\n   */\n  AxisRenderer.prototype.updateTooltip = function () {\n    // This is a placeholder method for extending classes to override.\n  };\n  Object.defineProperty(AxisRenderer.prototype, \"axisLength\", {\n    /**\r\n     * Returns actual length of the Axis, in pixels.\r\n     *\r\n     * @return Length (px)\r\n     */\n    get: function () {\n      // This is a placeholder method for extending classes to override.\n      return 0;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Re-positions an element to new coordinates.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param item   A target element\r\n   * @param point  New coordinates\r\n   */\n  AxisRenderer.prototype.positionItem = function (item, point) {\n    if (item) {\n      item.moveTo(point);\n    }\n  };\n  /**\r\n   * Converts relative position on axis to point coordinates.\r\n   *\r\n   * @param position  Position (0-1)\r\n   * @return Point\r\n   */\n  AxisRenderer.prototype.positionToPoint = function (position, position2) {\n    // This is a placeholder method for extending classes to override.\n    return {\n      x: 0,\n      y: 0\n    };\n  };\n  /**\r\n   * Converts relative position on axis to angle.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @todo Description (review / units)\r\n   * @param position  Position (0-1)\r\n   * @return Angle\r\n   */\n  AxisRenderer.prototype.positionToAngle = function (position) {\n    // This is a placeholder method for extending classes to override.\n    return 0;\n  };\n  /**\r\n   * Converts relative position (0-1) on axis to a pixel coordinate.\r\n   *\r\n   * @param position  Position (0-1)\r\n   * @return Coordinate (px)\r\n   */\n  AxisRenderer.prototype.positionToCoordinate = function (position) {\n    var coordinate;\n    var axis = this.axis;\n    var axisFullLength = axis.axisFullLength;\n    if (axis.renderer.inversed) {\n      coordinate = (axis.end - position) * axisFullLength;\n    } else {\n      coordinate = (position - axis.start) * axisFullLength;\n    }\n    return coordinate;\n  };\n  AxisRenderer.prototype.updateGridContainer = function () {};\n  AxisRenderer.prototype.getHeight = function () {\n    var gridContainer = this.gridContainer;\n    if (gridContainer.parent) {\n      return gridContainer.parent.pixelHeight;\n    }\n    return this.gridContainer.pixelHeight || 0;\n  };\n  AxisRenderer.prototype.getWidth = function () {\n    var gridContainer = this.gridContainer;\n    if (gridContainer.parent) {\n      return gridContainer.parent.pixelWidth;\n    }\n    return this.gridContainer.pixelWidth || 0;\n  };\n  /**\r\n   * Converts a coordinate in pixels to a relative position. (0-1)\r\n   *\r\n   * @param coordinate  Coordinate (px)\r\n   * @param coordinate2  Coordinate of a second axis, only needed for complex axes systems, like timeline (px)\r\n   * @return Position (0-1)\r\n   */\n  AxisRenderer.prototype.coordinateToPosition = function (coordinate, coordinate2) {\n    var position;\n    var axis = this.axis;\n    var axisFullLength = axis.axisFullLength;\n    if (axis.renderer.inversed) {\n      position = axis.end - coordinate / axisFullLength;\n    } else {\n      position = coordinate / axisFullLength + axis.start;\n    }\n    return $math.round(position, 5);\n  };\n  /**\r\n   * Converts a point at specific coordinates to a relative position (0-1)\r\n   * on the axis.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param point  Point\r\n   * @return Position (0-1)\r\n   */\n  AxisRenderer.prototype.pointToPosition = function (point) {\n    // This is a placeholder method for extending classes to override.\n    return 0;\n  };\n  /**\r\n   * [getPositionRangePath description]\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @todo Description\r\n   * @param startPosition  Starting position\r\n   * @param endPosition    End position\r\n   * @return SVG path\r\n   */\n  AxisRenderer.prototype.getPositionRangePath = function (startPosition, endPosition) {\n    return \"\";\n  };\n  /**\r\n   * Invalidates all axis data items, effectively causing them re-evaluated.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @todo Description (review)\r\n   */\n  AxisRenderer.prototype.invalidateAxisItems = function () {\n    var axis = this.axis;\n    if (axis) {\n      axis.invalidateDataItems();\n    }\n  };\n  /**\r\n   * Updates and positions a grid element.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param grid         Grid element\r\n   * @param position     Starting position\r\n   * @param endPosition  End position\r\n   */\n  AxisRenderer.prototype.updateGridElement = function (grid, position, endPosition) {\n    // This is a placeholder method for extending classes to override.\n  };\n  /**\r\n   * Updates and positions a tick element.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param tick         Tick element\r\n   * @param position     Starting position\r\n   * @param endPosition  End position\r\n   */\n  AxisRenderer.prototype.updateTickElement = function (tick, position, endPosition) {\n    // This is a placeholder method for extending classes to override.\n  };\n  /**\r\n   * Updates and positions axis bullet.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param bullet       AxisBullet element\r\n   * @param position     Starting position\r\n   * @param endPosition  End position\r\n   */\n  AxisRenderer.prototype.updateBullet = function (bullet, position, endPosition) {\n    // This is a placeholder method for extending classes to override.\n  };\n  /**\r\n   * Updates and positions a label element.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param label        Label element\r\n   * @param position     Starting position\r\n   * @param endPosition  Ending position\r\n   */\n  AxisRenderer.prototype.updateLabelElement = function (label, position, endPosition, location) {\n    // This is a placeholder method for extending classes to override.\n  };\n  /**\r\n   * Updates and positions the axis fill element.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param fill         Fill element\r\n   * @param position     Starting position\r\n   * @param endPosition  Ending position\r\n   */\n  AxisRenderer.prototype.updateFillElement = function (fill, position, endPosition) {\n    fill.startPosition = position;\n    fill.endPosition = endPosition;\n  };\n  /**\r\n   * Updates and positions the axis line element.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  AxisRenderer.prototype.updateAxisLine = function () {\n    // This is a placeholder method for extending classes to override.\n  };\n  /**\r\n   * Updates and positions the base grid element.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  AxisRenderer.prototype.updateBaseGridElement = function () {\n    // This is a placeholder method for extending classes to override.\n  };\n  /**\r\n   * Updates and positions an axis break element.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param axisBreak Break element\r\n   */\n  AxisRenderer.prototype.updateBreakElement = function (axisBreak) {\n    this.positionItem(axisBreak.startLine, axisBreak.startPoint);\n    this.toggleVisibility(axisBreak.startLine, axisBreak.startPosition, 0, 1);\n    this.positionItem(axisBreak.endLine, axisBreak.endPoint);\n    this.toggleVisibility(axisBreak.endLine, axisBreak.endPosition, 0, 1);\n  };\n  Object.defineProperty(AxisRenderer.prototype, \"minGridDistance\", {\n    /**\r\n     * @return Min distance (px)\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"minGridDistance\");\n    },\n    /**\r\n     * Minimum distance in pixels between grid elements.\r\n     *\r\n     * Use it to control density of the grid/labels on the axis.element.\r\n     *\r\n     * @see {@link https://www.amcharts.com/docs/v4/concepts/axes/positioning-axis-elements/#Setting_the_density_of_the_the_grid_labels} for more info\r\n     * @param value  Min distance (px)\r\n     */\n    set: function (value) {\n      if (this.setPropertyValue(\"minGridDistance\", value)) {\n        if (this.axis) {\n          this.axis.invalidateDataItems();\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(AxisRenderer.prototype, \"chart\", {\n    /**\r\n     * @ignore Exclude from docs\r\n     * @return Chart\r\n     */\n    get: function () {\n      return this._chart.get();\n    },\n    /**\r\n     * A chart, associated with the Axis.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param value  Chart\r\n     */\n    set: function (value) {\n      this._chart.set(value, null);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Toggles visibility of an element, based on its current position and\r\n   * min/max position settings.\r\n   *\r\n   * E.g. labels based on `minLabelPosition` and `maxLabelPosition`.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param sprite       An element to toggle\r\n   * @param position     Elements current position\r\n   * @param minPosition  Min position setting\r\n   * @param maxPosition  Max position setting\r\n   */\n  AxisRenderer.prototype.toggleVisibility = function (sprite, position, minPosition, maxPosition) {\n    var axis = this.axis;\n    var dataItem = sprite.dataItem;\n    if (dataItem && dataItem instanceof AxisDataItem) {\n      if ($type.isNumber(dataItem.minPosition)) {\n        minPosition = dataItem.minPosition;\n      }\n      if ($type.isNumber(dataItem.maxPosition)) {\n        maxPosition = dataItem.maxPosition;\n      }\n    }\n    var updatedStart = axis.start + (axis.end - axis.start) * (minPosition - 0.0001);\n    var updatedEnd = axis.start + (axis.end - axis.start) * (maxPosition + 0.0001);\n    if (!sprite.disabled) {\n      if (position < updatedStart || position > updatedEnd) {\n        sprite.__disabled = true;\n      } else {\n        sprite.__disabled = false;\n      }\n    }\n  };\n  /**\r\n   * Creates visual elements for and axis break.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param axisBreak Axis break\r\n   */\n  AxisRenderer.prototype.createBreakSprites = function (axisBreak) {\n    // This is a placeholder method for extending classes to override.\n  };\n  Object.defineProperty(AxisRenderer.prototype, \"axisFills\", {\n    /**\r\n     * A list of Axis' Fill elements.\r\n     *\r\n     * Those are fill elements that cover the space between every second set\r\n     * of grid lines, and can be configured to create striped charts.\r\n     *\r\n     * Please note that these are disabled by default. To enable them, set\r\n     * template to true.\r\n     *\r\n     * ```TypeScript\r\n     * categoryAxis.renderer.axisFills.template.disabled = false;\r\n     * ```\r\n     * ```JavaScript\r\n     * categoryAxis.renderer.axisFills.template.disabled = false;\r\n     * ```\r\n     * ```JSON\r\n     * {\r\n     *   // ...\r\n     *   \"xAxes\": [{\r\n     *     // ...\r\n     *     \"renderer\": {\r\n     *       \"axisFills\": {\r\n     *         \"disabled\": false\r\n     *       }\r\n     *     }\r\n     *   }]\r\n     * }\r\n     * ```\r\n     *\r\n     * @see {@link https://www.amcharts.com/docs/v4/tutorials/alternated-axis-fills/} this tutorial for more info.\r\n     * @return Fill elements\r\n     */\n    get: function () {\n      if (!this._axisFills) {\n        var fill = this.createFill(this.axis);\n        this._axisFills = new ListTemplate(fill);\n        fill.applyOnClones = true;\n        fill.events.on(\"enabled\", this.invalidateAxisItems, this, false);\n        this._disposers.push(new ListDisposer(this._axisFills));\n        this._disposers.push(this._axisFills.template);\n      }\n      return this._axisFills;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Returns a new fill element, suitable for this Axis Renderer type.\r\n   *\r\n   * @return Fill element\r\n   */\n  AxisRenderer.prototype.createFill = function (axis) {\n    return new AxisFill(axis);\n  };\n  Object.defineProperty(AxisRenderer.prototype, \"grid\", {\n    /**\r\n     * A list of Axis' Grid elements.\r\n     *\r\n     * @return Grid elements\r\n     */\n    get: function () {\n      if (!this._grid) {\n        var grid = this.createGrid();\n        this._grid = new ListTemplate(grid);\n        grid.applyOnClones = true;\n        grid.events.on(\"enabled\", this.invalidateAxisItems, this, false);\n        this._disposers.push(new ListDisposer(this._grid));\n        this._disposers.push(this._grid.template);\n      }\n      return this._grid;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Returns a new grid element, suitable for this Axis Renderer type.\r\n   *\r\n   * @return Grid element\r\n   */\n  AxisRenderer.prototype.createGrid = function () {\n    return new Grid();\n  };\n  Object.defineProperty(AxisRenderer.prototype, \"ticks\", {\n    /**\r\n     * A list of Axis' Tick elements.\r\n     *\r\n     * Please note that these are disabled by default. To enable ticks, you'll\r\n     * need to set `disabled` and `strokeOpacity` properties of the tick template.\r\n     *\r\n     * ```TypeScript\r\n     * categoryAxis.renderer.ticks.template.disabled = false;\r\n     * categoryAxis.renderer.ticks.template.strokeOpacity = 0.5;\r\n     * ```\r\n     * ```JavaScript\r\n     * categoryAxis.renderer.ticks.template.disabled = false;\r\n     * categoryAxis.renderer.ticks.template.strokeOpacity = 0.5;\r\n     * ```\r\n     * ```JSON\r\n     * {\r\n     *   // ...\r\n     *   \"xAxes\": [{\r\n     *     // ...\r\n     *     \"renderer\": {\r\n     *       \"ticks\": {\r\n     *         \"disabled\": false,\r\n     *         \"strokeOpacity\": 0.5\r\n     *       }\r\n     *     }\r\n     *   }]\r\n     * }\r\n     * ```\r\n     *\r\n     * @return Tick elements\r\n     */\n    get: function () {\n      if (!this._ticks) {\n        var tick = this.createTick();\n        tick.applyOnClones = true;\n        tick.isMeasured = false;\n        tick.events.on(\"enabled\", this.invalidateAxisItems, this, false);\n        this._ticks = new ListTemplate(tick);\n        this._disposers.push(new ListDisposer(this._ticks));\n        this._disposers.push(this._ticks.template);\n      }\n      return this._ticks;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Returns a new tick element, suitable for this Axis Renderer type.\r\n   *\r\n   * @return Tick element\r\n   */\n  AxisRenderer.prototype.createTick = function () {\n    return new AxisTick();\n  };\n  Object.defineProperty(AxisRenderer.prototype, \"labels\", {\n    /**\r\n     * A list of Axis' Label elements.\r\n     *\r\n     * @return Label elements\r\n     */\n    get: function () {\n      if (!this._labels) {\n        var label = this.createLabel();\n        this._labels = new ListTemplate(label);\n        label.applyOnClones = true;\n        label.events.on(\"enabled\", this.invalidateAxisItems, this, false);\n        this._disposers.push(new ListDisposer(this._labels));\n        this._disposers.push(this._labels.template);\n      }\n      return this._labels;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Returns a new label element, suitable for this Axis Renderer type.\r\n   *\r\n   * @return Label element\r\n   */\n  AxisRenderer.prototype.createLabel = function () {\n    return new AxisLabel();\n  };\n  Object.defineProperty(AxisRenderer.prototype, \"inside\", {\n    /**\r\n     * @return Labels inside?\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"inside\");\n    },\n    /**\r\n     * Indicates whether Axis' labels and ticks should be drawn inside Plot area.\r\n     *\r\n     * Does not work with all renderers, like AxisRendererRadial.\r\n     *\r\n     * @param value  Labels inside?\r\n     */\n    set: function (value) {\n      if (this.setPropertyValue(\"inside\", value)) {\n        if (this.axis) {\n          this.axis.invalidate();\n        }\n      }\n      if (value) {\n        this.width = 0;\n        this.height = 0;\n      } else {\n        this.width = undefined;\n        this.height = undefined;\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(AxisRenderer.prototype, \"opposite\", {\n    /**\r\n     * @return Draw axis on opposite side?\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"opposite\");\n    },\n    /**\r\n     * Indicates whether Axis should be drawn on the opposite side of the plot\r\n     * area than it would normally be drawn based on chart's settings.\r\n     *\r\n     * Does not work with all renderers, like [[AxisRendererRadial]] and\r\n     * [[AxisRenderer Circular].\r\n     *\r\n     * @param value  Draw axis on opposite side?\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"opposite\", value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(AxisRenderer.prototype, \"fullWidthTooltip\", {\n    /**\r\n     * @return Full width tooltip?\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"fullWidthTooltip\");\n    },\n    /**\r\n     * Indicates if Axis tooltip should take the whole width of the axis cell.\r\n     * (between two grid lines)\r\n     *\r\n     * NOTE: this setting is ignored on circular axis types.\r\n     *\r\n     * @param value Full width tooltip?\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"fullWidthTooltip\", value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(AxisRenderer.prototype, \"tooltipLocation\", {\n    /**\r\n     * @return Tooltip location\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"tooltipLocation\");\n    },\n    /**\r\n     * Location within axis cell to show tooltip on. (0-1)\r\n     *\r\n     * 0 - show at the start\r\n     * 0.5 - show right in the middle\r\n     * 1 - show at the end\r\n     *\r\n     * @param value Tooltip location\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"tooltipLocation\", value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(AxisRenderer.prototype, \"tooltipLocation2\", {\n    /**\r\n     * @return Tooltip location\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"tooltipLocation2\");\n    },\n    /**\r\n     * Location within secondary axis cell to show tooltip on. (0-1)\r\n     *\r\n     * 0 - show at the start\r\n     * 0.5 - show right in the middle\r\n     * 1 - show at the end\r\n     *\r\n     * @param value Tooltip location\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"tooltipLocation2\", value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(AxisRenderer.prototype, \"cellStartLocation\", {\n    /**\r\n     * @return Cell start (0-1)\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"cellStartLocation\");\n    },\n    /**\r\n     * Location for the cell start.\r\n     *\r\n     * Normally a \"cell\" is the whole available width in a category.\r\n     *\r\n     * If there are several clustered column-like series available, the whole\r\n     * space is divided between each clustered column, or column stacks.\r\n     *\r\n     * `cellStartLocation` identifies where, within available space, the actual\r\n     * cell starts.\r\n     *\r\n     * This, together with column series' `width` will affect actual width of\r\n     * columns, and thus gaps between them.\r\n     *\r\n     * This will affect category-like axes only, like [[DateAxis]], or\r\n     * [[CategoryAxis]].\r\n     *\r\n     * This is used to limit a space occupied by series like column.\r\n     *\r\n     * @see {@link https://www.amcharts.com/docs/v4/concepts/axes/positioning-axis-elements/} for more info.\r\n     * @param value Cell start (0-1)\r\n     */\n    set: function (value) {\n      if (this.setPropertyValue(\"cellStartLocation\", value)) {\n        if (this.axis) {\n          this.axis.invalidateSeries();\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(AxisRenderer.prototype, \"cellEndLocation\", {\n    /**\r\n     * @return Cell end (0-1)\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"cellEndLocation\");\n    },\n    /**\r\n     * Location for the cell end.\r\n     *\r\n     * Normally a \"cell\" is the whole available width in a category.\r\n     *\r\n     * If there are several clustered column-like series available, the whole\r\n     * space is divided between each clustered column, or column stacks.\r\n     *\r\n     * `cellEndLocation` identifies where, within available space, the actual\r\n     * cell ends.\r\n     *\r\n     * This, together with column series' `width` will affect actual width of\r\n     * columns, and thus gaps between them.\r\n     *\r\n     * This will affect category-like axes only, like [[DateAxis]], or\r\n     * [[CategoryAxis]].\r\n     *\r\n     * This is used to limit a space occupied by series like column.\r\n     *\r\n     * @see {@link https://www.amcharts.com/docs/v4/concepts/axes/positioning-axis-elements/} for more info.\r\n     * @param value Cell end (0-1)\r\n     */\n    set: function (value) {\n      if (this.setPropertyValue(\"cellEndLocation\", value)) {\n        if (this.axis) {\n          this.axis.invalidateSeries();\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(AxisRenderer.prototype, \"inversed\", {\n    /**\r\n     * @return Flip axis?\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"inversed\");\n    },\n    /**\r\n     * Indicates if the scale of the axis should be flipped.\r\n     *\r\n     * @param value Flip axis?\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"inversed\", value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(AxisRenderer.prototype, \"minLabelPosition\", {\n    /**\r\n     * @return Min label position (0-1)\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"minLabelPosition\");\n    },\n    /**\r\n     * Minimum position along the Axis, for labels.\r\n     *\r\n     * Labels, which have their position closer to the start of the Axis, will be\r\n     * automatically hidden.\r\n     *\r\n     * E.g., setting this to 0.05 (5% of total axis length) would hide labels,\r\n     * that would otherwise be drawn very near start of the Axis.\r\n     *\r\n     * This is especially usefull with `inside = true`, or if the chart hasn't\r\n     * got any extra margins.\r\n     *\r\n     * @see {@link https://www.amcharts.com/docs/v4/concepts/axes/positioning-axis-elements/} for more info.\r\n     * @param value  Min label position (0-1)\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"minLabelPosition\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(AxisRenderer.prototype, \"maxLabelPosition\", {\n    /**\r\n     * @return Max label position (0-1)\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"maxLabelPosition\");\n    },\n    /**\r\n     * Maximum position along the Axis, for labels.\r\n     *\r\n     * Labels, which have their position closer to the and of the Axis, will be\r\n     * automatically hidden.\r\n     *\r\n     * E.g., setting this to 0.95 (95% of total axis length) would hide labels,\r\n     * that would otherwise be drawn very near end of the Axis.\r\n     *\r\n     * This is especially usefull with `inside = true`, or if the chart hasn't\r\n     * got any extra margins.\r\n     *\r\n     * @see {@link https://www.amcharts.com/docs/v4/concepts/axes/positioning-axis-elements/} for more info.\r\n     * @param value  Max label position (0-1)\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"maxLabelPosition\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Copies all settings and related items from another object of the same\r\n   * type.\r\n   *\r\n   * @param source  Source object\r\n   */\n  AxisRenderer.prototype.copyFrom = function (source) {\n    _super.prototype.copyFrom.call(this, source);\n    this.grid.template.copyFrom(source.grid.template);\n    this.ticks.template.copyFrom(source.ticks.template);\n    this.labels.template.copyFrom(source.labels.template);\n    this.axisFills.template.copyFrom(source.axisFills.template);\n    this.line.copyFrom(source.line);\n    this.baseGrid.copyFrom(source.baseGrid);\n  };\n  /**\r\n   * @ignore\r\n   */\n  AxisRenderer.prototype.toAxisPosition = function (value) {\n    return value;\n  };\n  /**\r\n   * Sets `visibility` property:\r\n   *\r\n   * * `true` - visible\r\n   * * `false` - hidden\r\n   *\r\n   * @param value  true - visible, false - hidden\r\n   * @return Current visibility\r\n   */\n  AxisRenderer.prototype.setVisibility = function (value) {\n    _super.prototype.setVisibility.call(this, value);\n    this.bulletsContainer.visible = value;\n  };\n  return AxisRenderer;\n}(Container);\nexport { AxisRenderer };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\nregistry.registeredClasses[\"AxisRenderer\"] = AxisRenderer;","map":{"version":3,"names":["Container","MutableValueDisposer","AxisDataItem","AxisLine","AxisFill","Grid","AxisLabel","AxisTick","ListTemplate","ListDisposer","registry","percent","$math","$type","AxisRenderer","_super","__extends","_this","call","_chart","className","minGridDistance","inside","inversed","tooltipLocation","fullWidthTooltip","cellStartLocation","cellEndLocation","minLabelPosition","maxLabelPosition","shouldClone","gridContainer","createChild","layout","virtualParent","width","height","events","on","inited","invalidateAxisItems","breakContainer","isMeasured","bulletsContainer","line","strokeOpacity","baseGrid","disposers","_disposers","push","ticks","template","disabled","axisFills","interactionsEnabled","applyTheme","Object","defineProperty","prototype","get","_axis","set","axis","setAxis","parent","bind","processRenderer","updateTooltip","labels","positionItem","item","point","moveTo","positionToPoint","position","position2","x","y","positionToAngle","positionToCoordinate","coordinate","axisFullLength","renderer","end","start","updateGridContainer","getHeight","pixelHeight","getWidth","pixelWidth","coordinateToPosition","coordinate2","round","pointToPosition","getPositionRangePath","startPosition","endPosition","invalidateDataItems","updateGridElement","grid","updateTickElement","tick","updateBullet","bullet","updateLabelElement","label","location","updateFillElement","fill","updateAxisLine","updateBaseGridElement","updateBreakElement","axisBreak","startLine","startPoint","toggleVisibility","endLine","endPoint","getPropertyValue","value","setPropertyValue","sprite","minPosition","maxPosition","dataItem","isNumber","updatedStart","updatedEnd","__disabled","createBreakSprites","_axisFills","createFill","applyOnClones","_grid","createGrid","_ticks","createTick","_labels","createLabel","invalidate","undefined","invalidateSeries","copyFrom","source","toAxisPosition","setVisibility","visible","registeredClasses"],"sources":["../../../../../src/.internal/charts/axes/AxisRenderer.ts"],"sourcesContent":["/**\r\n * Module, defining base Axis Renderer.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Container, IContainerProperties, IContainerAdapters, IContainerEvents } from \"../../core/Container\";\r\nimport { Sprite } from \"../../core/Sprite\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { MutableValueDisposer } from \"../../core/utils/Disposer\";\r\nimport { Axis, AxisDataItem } from \"./Axis\";\r\nimport { AxisLine } from \"./AxisLine\";\r\nimport { AxisFill } from \"./AxisFill\";\r\nimport { Grid } from \"./Grid\";\r\nimport { AxisLabel } from \"./AxisLabel\";\r\nimport { AxisTick } from \"./AxisTick\";\r\nimport { AxisBreak } from \"./AxisBreak\";\r\nimport { Chart } from \"../Chart\";\r\nimport { ListTemplate, ListDisposer } from \"../../core/utils/List\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { percent } from \"../../core/utils/Percent\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[AxisRenderer]].\r\n */\r\nexport interface IAxisRendererProperties extends IContainerProperties {\r\n\r\n\t/**\r\n\t * Minimum distance in pixels between grid elements.\r\n\t */\r\n\tminGridDistance?: number;\r\n\r\n\t/**\r\n\t * Draw axis labels inside axis.\r\n\t */\r\n\tinside?: boolean;\r\n\r\n\t/**\r\n\t * Draw axis on opposite side of the plot area?\r\n\t */\r\n\topposite?: boolean;\r\n\r\n\t/**\r\n\t * Inverse the order of the scale for the Axis.\r\n\t */\r\n\tinversed?: boolean;\r\n\r\n\t/**\r\n\t * Location of the cell start. (0-1)\r\n\t */\r\n\tcellStartLocation?: number;\r\n\r\n\t/**\r\n\t * Location of the cell end. (0-1)\r\n\t */\r\n\tcellEndLocation?: number;\r\n\r\n\t/**\r\n\t * Location of the axis tooltip. (0-1)\r\n\t */\r\n\ttooltipLocation?: number;\r\n\r\n\t/**\r\n\t * Location of the tooltip relative secondary axis cell. (0-1)\r\n\t */\r\n\ttooltipLocation2?: number;\t\r\n\r\n\t/**\r\n\t * Resize axis tooltip to the full width of the cell.\r\n\t */\r\n\tfullWidthTooltip?: boolean;\r\n\r\n\t/**\r\n\t * Labels with position less than this will be hidden.\r\n\t */\r\n\tminLabelPosition?: number;\r\n\r\n\t/**\r\n\t * Labels with position bigger than this will be hidden.\r\n\t */\r\n\tmaxLabelPosition?: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[AxisRenderer]].\r\n */\r\nexport interface IAxisRendererEvents extends IContainerEvents { }\r\n\r\n/**\r\n * Defines adapters for [[AxisRenderer]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IAxisRendererAdapters extends IContainerAdapters, IAxisRendererProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * A base class for all axis renderers.\r\n *\r\n * @see {@link IAxisRendererEvents} for a list of available events\r\n * @see {@link IAxisRendererAdapters} for a list of available Adapters\r\n */\r\nexport class AxisRenderer extends Container {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IAxisRendererProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IAxisRendererAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IAxisRendererEvents;\r\n\r\n\t/**\r\n\t * A related Axis.\r\n\t */\r\n\tprotected _axis: Axis;\r\n\r\n\t/**\r\n\t * A line object of the related axis.\r\n\t */\r\n\tpublic line: AxisLine;\r\n\r\n\t/**\r\n\t * Base grid element. ([[Sprite]])\r\n\t *\r\n\t * For value axes base grid is at value 0.\r\n\t *\r\n\t * For category/date axis it is added at the end of the last item/date.\r\n\t *\r\n\t */\r\n\tpublic baseGrid: Sprite;\r\n\r\n\t/**\r\n\t * A [[Container]] holding all of the [[Grid]] elements.\r\n\t */\r\n\tpublic gridContainer: Container;\r\n\r\n\t/**\r\n\t * A [[Container]] holding all of the axis bullets.\r\n\t */\r\n\tpublic bulletsContainer: Container;\r\n\r\n\t/**\r\n\t * A [[Container]] holding all of the [[AxisBreak]] elements.\r\n\t */\r\n\tpublic breakContainer: Container;\r\n\r\n\t/**\r\n\t * A related chart.\r\n\t */\r\n\tprotected _chart = new MutableValueDisposer<Chart>();\r\n\r\n\t/**\r\n\t * Defines type of the grid elements.\r\n\t */\r\n\tpublic _gridType: Grid;\r\n\r\n\t/**\r\n\t * Defines type for the fill elements.\r\n\t */\r\n\tpublic _fillType: AxisFill;\r\n\r\n\t/**\r\n\t * Defines type for tick elements.\r\n\t */\r\n\tpublic _tickType: AxisTick;\r\n\r\n\t/**\r\n\t * Defines type for the label elements.\r\n\t */\r\n\tpublic _labelType: AxisLabel;\r\n\r\n\t/**\r\n\t * A list of grid elements.\r\n\t */\r\n\tprotected _grid: ListTemplate<this[\"_gridType\"]>;\r\n\r\n\t/**\r\n\t * A list of tick elements.\r\n\t */\r\n\tprotected _ticks: ListTemplate<this[\"_tickType\"]>;\r\n\r\n\t/**\r\n\t * A list of label elements.\r\n\t */\r\n\tprotected _labels: ListTemplate<this[\"_labelType\"]>;\r\n\r\n\t/**\r\n\t * A list of fill elements.\r\n\t */\r\n\tprotected _axisFills: ListTemplate<this[\"_fillType\"]>;\r\n\r\n\r\n\t/**\r\n\t * Constructor.\r\n\t *\r\n\t * @param axis Related axis\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"AxisRenderer\";\r\n\r\n\t\t// Set defaults\r\n\t\tthis.minGridDistance = 50;\r\n\t\tthis.inside = false;\r\n\t\tthis.inversed = false;\r\n\t\tthis.tooltipLocation = 0.5;\r\n\t\tthis.fullWidthTooltip = false;\r\n\t\tthis.cellStartLocation = 0;\r\n\t\tthis.cellEndLocation = 1;\r\n\r\n\t\tthis.minLabelPosition = 0;\r\n\t\tthis.maxLabelPosition = 1;\r\n\t\tthis.shouldClone = false;\r\n\r\n\t\tlet gridContainer = this.createChild(Container);\r\n\t\tgridContainer.shouldClone = false;\r\n\t\tgridContainer.layout = \"none\";\r\n\t\t//\tgridContainer.isMeasured = false;\r\n\t\tgridContainer.virtualParent = this;\r\n\t\tgridContainer.width = percent(100);\r\n\t\tgridContainer.height = percent(100);\r\n\r\n\t\tthis.gridContainer = gridContainer;\r\n\t\t// not good without this\r\n\t\tgridContainer.events.on(\"maxsizechanged\", () => {\r\n\t\t\tif (this.inited) {\r\n\t\t\t\tthis.invalidateAxisItems();\r\n\t\t\t}\r\n\t\t}, this, false);\r\n\r\n\t\tlet breakContainer = this.createChild(Container);\r\n\t\tbreakContainer.shouldClone = false;\r\n\t\tbreakContainer.isMeasured = false;\r\n\t\tbreakContainer.layout = \"none\";\r\n\t\tbreakContainer.width = percent(100);\r\n\t\tbreakContainer.height = percent(100);\r\n\t\tthis.breakContainer = breakContainer;\r\n\r\n\t\tlet bulletsContainer = this.createChild(Container);\r\n\t\tbulletsContainer.shouldClone = false;\r\n\t\tbulletsContainer.isMeasured = false;\r\n\t\tbulletsContainer.layout = \"none\";\r\n\t\tbulletsContainer.width = percent(100);\r\n\t\tbulletsContainer.height = percent(100);\r\n\t\tthis.bulletsContainer = bulletsContainer;\r\n\r\n\t\tthis.line = this.createChild(AxisLine);\r\n\t\tthis.line.shouldClone = false;\r\n\t\tthis.line.strokeOpacity = 0;\r\n\r\n\t\tlet baseGrid: Grid = this.createChild(Grid);\r\n\t\tbaseGrid.shouldClone = false;\r\n\t\tthis.baseGrid = baseGrid;\r\n\r\n\t\t// Make elements disposable\r\n\t\tlet disposers = this._disposers;\r\n\t\tdisposers.push(baseGrid);\r\n\t\tdisposers.push(this.line);\r\n\t\tdisposers.push(gridContainer);\r\n\t\tdisposers.push(breakContainer);\r\n\t\tdisposers.push(bulletsContainer);\r\n\t\tdisposers.push(this._chart);\r\n\r\n\t\tthis.ticks.template.disabled = true;\r\n\t\tthis.axisFills.template.disabled = true;\r\n\t\tthis.axisFills.template.interactionsEnabled = false;\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Axis of a renderer\r\n\t * @param axis Axis\r\n\t */\r\n\tset axis(axis: Axis) {\r\n\t\tthis.setAxis(axis);\r\n\t}\r\n\r\n\t/**\r\n\t * Axis of a renderer\r\n\t * @return axis Axis\r\n\t */\r\n\tget axis(): Axis {\r\n\t\treturn this._axis;\r\n\t}\r\n\r\n\t/**\r\n\t* @ignore\r\n\t*/\r\n\tpublic setAxis(axis: Axis) {\r\n\t\tthis._axis = axis;\r\n\t\tthis.baseGrid.parent = axis;\r\n\t\tthis.line.parent = axis;\r\n\t\tthis.gridContainer.bind(\"opacity\", axis);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Called when rendered is attached to an Axis, as well as a property of\r\n\t * Axis that might affect the appearance is updated.\r\n\t *\r\n\t * E.g. `axis.opposite`, `axis.inside`, etc.\r\n\t *\r\n\t * This method is called **before** draw, so that any related setting\r\n\t * changed in this method can be changed.\r\n\t *\r\n\t * @todo Description (review)\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic processRenderer(): void {\r\n\t\tthis.events.on(\"sizechanged\", this.updateTooltip, this, false);\r\n\t\tthis.events.on(\"positionchanged\", this.updateTooltip, this, false);\r\n\t\tthis.labels.template.inside = this.inside;\r\n\t\tthis.ticks.template.inside = this.inside;\r\n\t}\r\n\r\n\t/**\r\n\t * Updates Axis' tooltip.\r\n\t *\r\n\t * @todo Description (review)\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateTooltip(): void {\r\n\t\t// This is a placeholder method for extending classes to override.\r\n\t}\r\n\r\n\t/**\r\n\t * Returns actual length of the Axis, in pixels.\r\n\t *\r\n\t * @return Length (px)\r\n\t */\r\n\tpublic get axisLength(): number {\r\n\t\t// This is a placeholder method for extending classes to override.\r\n\t\treturn 0;\r\n\t}\r\n\r\n\t/**\r\n\t * Re-positions an element to new coordinates.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param item   A target element\r\n\t * @param point  New coordinates\r\n\t */\r\n\tpublic positionItem(item: Sprite, point: IPoint): void {\r\n\t\tif (item) {\r\n\t\t\titem.moveTo(point);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Converts relative position on axis to point coordinates.\r\n\t *\r\n\t * @param position  Position (0-1)\r\n\t * @return Point\r\n\t */\r\n\tpublic positionToPoint(position: number, position2?:number): IPoint {\r\n\t\t// This is a placeholder method for extending classes to override.\r\n\t\treturn { x: 0, y: 0 };\r\n\t}\r\n\r\n\t/**\r\n\t * Converts relative position on axis to angle.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review / units)\r\n\t * @param position  Position (0-1)\r\n\t * @return Angle\r\n\t */\r\n\tpublic positionToAngle(position: number): number {\r\n\t\t// This is a placeholder method for extending classes to override.\r\n\t\treturn 0;\r\n\t}\r\n\r\n\t/**\r\n\t * Converts relative position (0-1) on axis to a pixel coordinate.\r\n\t *\r\n\t * @param position  Position (0-1)\r\n\t * @return Coordinate (px)\r\n\t */\r\n\tpublic positionToCoordinate(position: number): number {\r\n\t\tlet coordinate: number;\r\n\t\tlet axis: Axis = this.axis;\r\n\t\tlet axisFullLength = axis.axisFullLength;\r\n\r\n\t\tif (axis.renderer.inversed) {\r\n\t\t\tcoordinate = (axis.end - position) * axisFullLength;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tcoordinate = (position - axis.start) * axisFullLength;\r\n\t\t}\r\n\r\n\t\treturn coordinate;\r\n\t}\r\n\r\n\tpublic updateGridContainer() {\r\n\r\n\t}\r\n\r\n\r\n\tprotected getHeight(): number {\r\n\t\tlet gridContainer = this.gridContainer;\r\n\t\tif(gridContainer.parent){\r\n\t\t\treturn gridContainer.parent.pixelHeight;\r\n\t\t}\r\n\t\treturn this.gridContainer.pixelHeight || 0;\r\n\t}\r\n\r\n\tprotected getWidth(): number {\r\n\t\tlet gridContainer = this.gridContainer;\r\n\t\tif(gridContainer.parent){\r\n\t\t\treturn gridContainer.parent.pixelWidth;\r\n\t\t}\r\n\t\treturn this.gridContainer.pixelWidth || 0;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Converts a coordinate in pixels to a relative position. (0-1)\r\n\t *\r\n\t * @param coordinate  Coordinate (px)\r\n\t * @param coordinate2  Coordinate of a second axis, only needed for complex axes systems, like timeline (px)\r\n\t * @return Position (0-1)\r\n\t */\r\n\tpublic coordinateToPosition(coordinate: number, coordinate2?:number): number {\r\n\t\tlet position: number;\r\n\t\tlet axis: Axis = this.axis;\r\n\t\tlet axisFullLength = axis.axisFullLength;\r\n\r\n\t\tif (axis.renderer.inversed) {\r\n\t\t\tposition = axis.end - coordinate / axisFullLength;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tposition = coordinate / axisFullLength + axis.start;\r\n\t\t}\r\n\r\n\t\treturn $math.round(position, 5);\r\n\t}\r\n\r\n\t/**\r\n\t * Converts a point at specific coordinates to a relative position (0-1)\r\n\t * on the axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param point  Point\r\n\t * @return Position (0-1)\r\n\t */\r\n\tpublic pointToPosition(point: IPoint): number {\r\n\t\t// This is a placeholder method for extending classes to override.\r\n\t\treturn 0;\r\n\t}\r\n\r\n\t/**\r\n\t * [getPositionRangePath description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param startPosition  Starting position\r\n\t * @param endPosition    End position\r\n\t * @return SVG path\r\n\t */\r\n\tpublic getPositionRangePath(startPosition: number, endPosition: number): string {\r\n\t\treturn \"\";\r\n\t}\r\n\r\n\t/**\r\n\t * Invalidates all axis data items, effectively causing them re-evaluated.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t */\r\n\tpublic invalidateAxisItems(): void {\r\n\t\tlet axis: Axis = this.axis;\r\n\t\tif (axis) {\r\n\t\t\taxis.invalidateDataItems();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions a grid element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param grid         Grid element\r\n\t * @param position     Starting position\r\n\t * @param endPosition  End position\r\n\t */\r\n\tpublic updateGridElement(grid: Sprite, position: number, endPosition: number): void {\r\n\t\t// This is a placeholder method for extending classes to override.\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions a tick element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param tick         Tick element\r\n\t * @param position     Starting position\r\n\t * @param endPosition  End position\r\n\t */\r\n\tpublic updateTickElement(tick: AxisTick, position: number, endPosition: number): void {\r\n\t\t// This is a placeholder method for extending classes to override.\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions axis bullet.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param bullet       AxisBullet element\r\n\t * @param position     Starting position\r\n\t * @param endPosition  End position\r\n\t */\r\n\tpublic updateBullet(bullet: Sprite, position: number, endPosition: number): void {\r\n\t\t// This is a placeholder method for extending classes to override.\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions a label element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param label        Label element\r\n\t * @param position     Starting position\r\n\t * @param endPosition  Ending position\r\n\t */\r\n\tpublic updateLabelElement(label: AxisLabel, position: number, endPosition: number, location?: number): void {\r\n\t\t// This is a placeholder method for extending classes to override.\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions the axis fill element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param fill         Fill element\r\n\t * @param position     Starting position\r\n\t * @param endPosition  Ending position\r\n\t */\r\n\tpublic updateFillElement(fill: AxisFill, position: number, endPosition: number): void {\r\n\t\tfill.startPosition = position;\r\n\t\tfill.endPosition = endPosition;\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions the axis line element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateAxisLine(): void {\r\n\t\t// This is a placeholder method for extending classes to override.\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions the base grid element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateBaseGridElement(): void {\r\n\t\t// This is a placeholder method for extending classes to override.\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions an axis break element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param axisBreak Break element\r\n\t */\r\n\tpublic updateBreakElement(axisBreak: AxisBreak): void {\r\n\t\tthis.positionItem(axisBreak.startLine, axisBreak.startPoint);\r\n\t\tthis.toggleVisibility(axisBreak.startLine, axisBreak.startPosition, 0, 1);\r\n\t\tthis.positionItem(axisBreak.endLine, axisBreak.endPoint);\r\n\t\tthis.toggleVisibility(axisBreak.endLine, axisBreak.endPosition, 0, 1);\r\n\t}\r\n\r\n\t/**\r\n\t * Minimum distance in pixels between grid elements.\r\n\t *\r\n\t * Use it to control density of the grid/labels on the axis.element.\r\n\t *\r\n\t * @see {@link https://www.amcharts.com/docs/v4/concepts/axes/positioning-axis-elements/#Setting_the_density_of_the_the_grid_labels} for more info\r\n\t * @param value  Min distance (px)\r\n\t */\r\n\tpublic set minGridDistance(value: number) {\r\n\t\tif (this.setPropertyValue(\"minGridDistance\", value)) {\r\n\t\t\tif (this.axis) {\r\n\t\t\t\tthis.axis.invalidateDataItems();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Min distance (px)\r\n\t */\r\n\tpublic get minGridDistance(): number {\r\n\t\treturn this.getPropertyValue(\"minGridDistance\");\r\n\t}\r\n\r\n\t/**\r\n\t * A chart, associated with the Axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param value  Chart\r\n\t */\r\n\tpublic set chart(value: Chart) {\r\n\t\tthis._chart.set(value, null);\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @return Chart\r\n\t */\r\n\tpublic get chart(): Chart {\r\n\t\treturn this._chart.get();\r\n\t}\r\n\r\n\t/**\r\n\t * Toggles visibility of an element, based on its current position and\r\n\t * min/max position settings.\r\n\t *\r\n\t * E.g. labels based on `minLabelPosition` and `maxLabelPosition`.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param sprite       An element to toggle\r\n\t * @param position     Elements current position\r\n\t * @param minPosition  Min position setting\r\n\t * @param maxPosition  Max position setting\r\n\t */\r\n\tprotected toggleVisibility(sprite: Sprite, position: number, minPosition: number, maxPosition: number): void {\r\n\t\tlet axis = this.axis;\r\n\r\n\t\tlet dataItem = sprite.dataItem;\r\n\t\tif(dataItem && dataItem instanceof AxisDataItem){\r\n\t\t\tif($type.isNumber(dataItem.minPosition)){\r\n\t\t\t\tminPosition = dataItem.minPosition;\r\n\t\t\t}\r\n\t\t\tif($type.isNumber(dataItem.maxPosition)){\r\n\t\t\t\tmaxPosition = dataItem.maxPosition;\r\n\t\t\t}\t\t\t\r\n\t\t}\r\n\r\n\t\tlet updatedStart = axis.start + (axis.end - axis.start) * (minPosition - 0.0001);\r\n\t\tlet updatedEnd = axis.start + (axis.end - axis.start) * (maxPosition + 0.0001);\r\n\r\n\t\tif (!sprite.disabled) {\r\n\t\t\tif (position < updatedStart || position > updatedEnd) {\r\n\t\t\t\tsprite.__disabled = true;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tsprite.__disabled = false;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Creates visual elements for and axis break.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param axisBreak Axis break\r\n\t */\r\n\tpublic createBreakSprites(axisBreak: AxisBreak) {\r\n\t\t// This is a placeholder method for extending classes to override.\r\n\t}\r\n\r\n\t/**\r\n\t * A list of Axis' Fill elements.\r\n\t *\r\n\t * Those are fill elements that cover the space between every second set\r\n\t * of grid lines, and can be configured to create striped charts.\r\n\t *\r\n\t * Please note that these are disabled by default. To enable them, set\r\n\t * template to true.\r\n\t *\r\n\t * ```TypeScript\r\n\t * categoryAxis.renderer.axisFills.template.disabled = false;\r\n\t * ```\r\n\t * ```JavaScript\r\n\t * categoryAxis.renderer.axisFills.template.disabled = false;\r\n\t * ```\r\n\t * ```JSON\r\n\t * {\r\n\t *   // ...\r\n\t *   \"xAxes\": [{\r\n\t *     // ...\r\n\t *     \"renderer\": {\r\n\t *       \"axisFills\": {\r\n\t *         \"disabled\": false\r\n\t *       }\r\n\t *     }\r\n\t *   }]\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * @see {@link https://www.amcharts.com/docs/v4/tutorials/alternated-axis-fills/} this tutorial for more info.\r\n\t * @return Fill elements\r\n\t */\r\n\tpublic get axisFills(): ListTemplate<this[\"_fillType\"]> {\r\n\t\tif (!this._axisFills) {\r\n\t\t\tlet fill = this.createFill(this.axis);\r\n\t\t\tthis._axisFills = new ListTemplate<AxisFill>(fill);\r\n\t\t\tfill.applyOnClones = true;\r\n\t\t\tfill.events.on(\"enabled\", this.invalidateAxisItems, this, false);\r\n\t\t\tthis._disposers.push(new ListDisposer(this._axisFills));\r\n\t\t\tthis._disposers.push(this._axisFills.template);\r\n\t\t}\r\n\t\treturn this._axisFills;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new fill element, suitable for this Axis Renderer type.\r\n\t *\r\n\t * @return Fill element\r\n\t */\r\n\tpublic createFill(axis: Axis): this[\"_fillType\"] {\r\n\t\treturn new AxisFill(axis);\r\n\t}\r\n\r\n\t/**\r\n\t * A list of Axis' Grid elements.\r\n\t *\r\n\t * @return Grid elements\r\n\t */\r\n\tpublic get grid(): ListTemplate<this[\"_gridType\"]> {\r\n\t\tif (!this._grid) {\r\n\t\t\tlet grid = this.createGrid();\r\n\t\t\tthis._grid = new ListTemplate<Grid>(grid);\r\n\t\t\tgrid.applyOnClones = true;\r\n\t\t\tgrid.events.on(\"enabled\", this.invalidateAxisItems, this, false);\r\n\t\t\tthis._disposers.push(new ListDisposer(this._grid));\r\n\t\t\tthis._disposers.push(this._grid.template);\r\n\t\t}\r\n\t\treturn this._grid;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new grid element, suitable for this Axis Renderer type.\r\n\t *\r\n\t * @return Grid element\r\n\t */\r\n\tpublic createGrid(): this[\"_gridType\"] {\r\n\t\treturn new Grid();\r\n\t}\r\n\r\n\t/**\r\n\t * A list of Axis' Tick elements.\r\n\t *\r\n\t * Please note that these are disabled by default. To enable ticks, you'll\r\n\t * need to set `disabled` and `strokeOpacity` properties of the tick template.\r\n\t *\r\n\t * ```TypeScript\r\n\t * categoryAxis.renderer.ticks.template.disabled = false;\r\n\t * categoryAxis.renderer.ticks.template.strokeOpacity = 0.5;\r\n\t * ```\r\n\t * ```JavaScript\r\n\t * categoryAxis.renderer.ticks.template.disabled = false;\r\n\t * categoryAxis.renderer.ticks.template.strokeOpacity = 0.5;\r\n\t * ```\r\n\t * ```JSON\r\n\t * {\r\n\t *   // ...\r\n\t *   \"xAxes\": [{\r\n\t *     // ...\r\n\t *     \"renderer\": {\r\n\t *       \"ticks\": {\r\n\t *         \"disabled\": false,\r\n\t *         \"strokeOpacity\": 0.5\r\n\t *       }\r\n\t *     }\r\n\t *   }]\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * @return Tick elements\r\n\t */\r\n\tpublic get ticks(): ListTemplate<this[\"_tickType\"]> {\r\n\t\tif (!this._ticks) {\r\n\t\t\tlet tick: AxisTick = this.createTick();\r\n\t\t\ttick.applyOnClones = true;\r\n\t\t\ttick.isMeasured = false;\r\n\t\t\ttick.events.on(\"enabled\", this.invalidateAxisItems, this, false);\r\n\t\t\tthis._ticks = new ListTemplate<AxisTick>(tick);\r\n\t\t\tthis._disposers.push(new ListDisposer(this._ticks));\r\n\t\t\tthis._disposers.push(this._ticks.template);\r\n\t\t}\r\n\t\treturn this._ticks;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new tick element, suitable for this Axis Renderer type.\r\n\t *\r\n\t * @return Tick element\r\n\t */\r\n\tpublic createTick(): this[\"_tickType\"] {\r\n\t\treturn new AxisTick();\r\n\t}\r\n\r\n\t/**\r\n\t * A list of Axis' Label elements.\r\n\t *\r\n\t * @return Label elements\r\n\t */\r\n\tpublic get labels(): ListTemplate<this[\"_labelType\"]> {\r\n\t\tif (!this._labels) {\r\n\t\t\tlet label = this.createLabel();\r\n\t\t\tthis._labels = new ListTemplate<AxisLabel>(label);\r\n\t\t\tlabel.applyOnClones = true;\r\n\t\t\tlabel.events.on(\"enabled\", this.invalidateAxisItems, this, false);\r\n\t\t\tthis._disposers.push(new ListDisposer(this._labels));\r\n\t\t\tthis._disposers.push(this._labels.template);\r\n\t\t}\r\n\t\treturn this._labels;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new label element, suitable for this Axis Renderer type.\r\n\t *\r\n\t * @return Label element\r\n\t */\r\n\tpublic createLabel(): this[\"_labelType\"] {\r\n\t\treturn new AxisLabel();\r\n\t}\r\n\r\n\t/**\r\n\t * Indicates whether Axis' labels and ticks should be drawn inside Plot area.\r\n\t *\r\n\t * Does not work with all renderers, like AxisRendererRadial.\r\n\t *\r\n\t * @param value  Labels inside?\r\n\t */\r\n\tpublic set inside(value: boolean) {\r\n\r\n\t\tif (this.setPropertyValue(\"inside\", value)) {\r\n\t\t\tif (this.axis) {\r\n\t\t\t\tthis.axis.invalidate();\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (value) {\r\n\t\t\tthis.width = 0;\r\n\t\t\tthis.height = 0;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.width = undefined;\r\n\t\t\tthis.height = undefined;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Labels inside?\r\n\t */\r\n\tpublic get inside(): boolean {\r\n\t\treturn this.getPropertyValue(\"inside\");\r\n\t}\r\n\r\n\t/**\r\n\t * Indicates whether Axis should be drawn on the opposite side of the plot\r\n\t * area than it would normally be drawn based on chart's settings.\r\n\t *\r\n\t * Does not work with all renderers, like [[AxisRendererRadial]] and\r\n\t * [[AxisRenderer Circular].\r\n\t *\r\n\t * @param value  Draw axis on opposite side?\r\n\t */\r\n\tpublic set opposite(value: boolean) {\r\n\t\tthis.setPropertyValue(\"opposite\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Draw axis on opposite side?\r\n\t */\r\n\tpublic get opposite(): boolean {\r\n\t\treturn this.getPropertyValue(\"opposite\");\r\n\t}\r\n\r\n\t/**\r\n\t * Indicates if Axis tooltip should take the whole width of the axis cell.\r\n\t * (between two grid lines)\r\n\t *\r\n\t * NOTE: this setting is ignored on circular axis types.\r\n\t *\r\n\t * @param value Full width tooltip?\r\n\t */\r\n\tpublic set fullWidthTooltip(value: boolean) {\r\n\t\tthis.setPropertyValue(\"fullWidthTooltip\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Full width tooltip?\r\n\t */\r\n\tpublic get fullWidthTooltip(): boolean {\r\n\t\treturn this.getPropertyValue(\"fullWidthTooltip\");\r\n\t}\r\n\r\n\t/**\r\n\t * Location within axis cell to show tooltip on. (0-1)\r\n\t *\r\n\t * 0 - show at the start\r\n\t * 0.5 - show right in the middle\r\n\t * 1 - show at the end\r\n\t *\r\n\t * @param value Tooltip location\r\n\t */\r\n\tpublic set tooltipLocation(value: number) {\r\n\t\tthis.setPropertyValue(\"tooltipLocation\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Tooltip location\r\n\t */\r\n\tpublic get tooltipLocation(): number {\r\n\t\treturn this.getPropertyValue(\"tooltipLocation\");\r\n\t}\r\n\r\n\t/**\r\n\t * Location within secondary axis cell to show tooltip on. (0-1)\r\n\t *\r\n\t * 0 - show at the start\r\n\t * 0.5 - show right in the middle\r\n\t * 1 - show at the end\r\n\t *\r\n\t * @param value Tooltip location\r\n\t */\r\n\tpublic set tooltipLocation2(value: number) {\r\n\t\tthis.setPropertyValue(\"tooltipLocation2\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Tooltip location\r\n\t */\r\n\tpublic get tooltipLocation2(): number {\r\n\t\treturn this.getPropertyValue(\"tooltipLocation2\");\r\n\t}\t\r\n\r\n\t/**\r\n\t * Location for the cell start.\r\n\t *\r\n\t * Normally a \"cell\" is the whole available width in a category.\r\n\t *\r\n\t * If there are several clustered column-like series available, the whole\r\n\t * space is divided between each clustered column, or column stacks.\r\n\t *\r\n\t * `cellStartLocation` identifies where, within available space, the actual\r\n\t * cell starts.\r\n\t *\r\n\t * This, together with column series' `width` will affect actual width of\r\n\t * columns, and thus gaps between them.\r\n\t *\r\n\t * This will affect category-like axes only, like [[DateAxis]], or\r\n\t * [[CategoryAxis]].\r\n\t *\r\n\t * This is used to limit a space occupied by series like column.\r\n\t *\r\n\t * @see {@link https://www.amcharts.com/docs/v4/concepts/axes/positioning-axis-elements/} for more info.\r\n\t * @param value Cell start (0-1)\r\n\t */\r\n\tpublic set cellStartLocation(value: number) {\r\n\t\tif (this.setPropertyValue(\"cellStartLocation\", value)) {\r\n\t\t\tif (this.axis) {\r\n\t\t\t\tthis.axis.invalidateSeries();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Cell start (0-1)\r\n\t */\r\n\tpublic get cellStartLocation(): number {\r\n\t\treturn this.getPropertyValue(\"cellStartLocation\");\r\n\t}\r\n\r\n\t/**\r\n\t * Location for the cell end.\r\n\t *\r\n\t * Normally a \"cell\" is the whole available width in a category.\r\n\t *\r\n\t * If there are several clustered column-like series available, the whole\r\n\t * space is divided between each clustered column, or column stacks.\r\n\t *\r\n\t * `cellEndLocation` identifies where, within available space, the actual\r\n\t * cell ends.\r\n\t *\r\n\t * This, together with column series' `width` will affect actual width of\r\n\t * columns, and thus gaps between them.\r\n\t *\r\n\t * This will affect category-like axes only, like [[DateAxis]], or\r\n\t * [[CategoryAxis]].\r\n\t *\r\n\t * This is used to limit a space occupied by series like column.\r\n\t *\r\n\t * @see {@link https://www.amcharts.com/docs/v4/concepts/axes/positioning-axis-elements/} for more info.\r\n\t * @param value Cell end (0-1)\r\n\t */\r\n\tpublic set cellEndLocation(value: number) {\r\n\t\tif (this.setPropertyValue(\"cellEndLocation\", value)) {\r\n\t\t\tif (this.axis) {\r\n\t\t\t\tthis.axis.invalidateSeries();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Cell end (0-1)\r\n\t */\r\n\tpublic get cellEndLocation(): number {\r\n\t\treturn this.getPropertyValue(\"cellEndLocation\");\r\n\t}\r\n\r\n\t/**\r\n\t * Indicates if the scale of the axis should be flipped.\r\n\t *\r\n\t * @param value Flip axis?\r\n\t */\r\n\tpublic set inversed(value: boolean) {\r\n\t\tthis.setPropertyValue(\"inversed\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Flip axis?\r\n\t */\r\n\tpublic get inversed(): boolean {\r\n\t\treturn this.getPropertyValue(\"inversed\");\r\n\t}\r\n\r\n\t/**\r\n\t * Minimum position along the Axis, for labels.\r\n\t *\r\n\t * Labels, which have their position closer to the start of the Axis, will be\r\n\t * automatically hidden.\r\n\t *\r\n\t * E.g., setting this to 0.05 (5% of total axis length) would hide labels,\r\n\t * that would otherwise be drawn very near start of the Axis.\r\n\t *\r\n\t * This is especially usefull with `inside = true`, or if the chart hasn't\r\n\t * got any extra margins.\r\n\t *\r\n\t * @see {@link https://www.amcharts.com/docs/v4/concepts/axes/positioning-axis-elements/} for more info.\r\n\t * @param value  Min label position (0-1)\r\n\t */\r\n\tpublic set minLabelPosition(value: number) {\r\n\t\tthis.setPropertyValue(\"minLabelPosition\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Min label position (0-1)\r\n\t */\r\n\tpublic get minLabelPosition(): number {\r\n\t\treturn this.getPropertyValue(\"minLabelPosition\");\r\n\t}\r\n\r\n\t/**\r\n\t * Maximum position along the Axis, for labels.\r\n\t *\r\n\t * Labels, which have their position closer to the and of the Axis, will be\r\n\t * automatically hidden.\r\n\t *\r\n\t * E.g., setting this to 0.95 (95% of total axis length) would hide labels,\r\n\t * that would otherwise be drawn very near end of the Axis.\r\n\t *\r\n\t * This is especially usefull with `inside = true`, or if the chart hasn't\r\n\t * got any extra margins.\r\n\t *\r\n\t * @see {@link https://www.amcharts.com/docs/v4/concepts/axes/positioning-axis-elements/} for more info.\r\n\t * @param value  Max label position (0-1)\r\n\t */\r\n\tpublic set maxLabelPosition(value: number) {\r\n\t\tthis.setPropertyValue(\"maxLabelPosition\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Max label position (0-1)\r\n\t */\r\n\tpublic get maxLabelPosition(): number {\r\n\t\treturn this.getPropertyValue(\"maxLabelPosition\");\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all settings and related items from another object of the same\r\n\t * type.\r\n\t *\r\n\t * @param source  Source object\r\n\t */\r\n\tpublic copyFrom(source: this) {\r\n\t\tsuper.copyFrom(source);\r\n\t\tthis.grid.template.copyFrom(source.grid.template);\r\n\t\tthis.ticks.template.copyFrom(source.ticks.template);\r\n\t\tthis.labels.template.copyFrom(source.labels.template);\r\n\t\tthis.axisFills.template.copyFrom(source.axisFills.template);\r\n\t\tthis.line.copyFrom(source.line);\r\n\t\tthis.baseGrid.copyFrom(source.baseGrid);\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic toAxisPosition(value: number): number {\r\n\t\treturn value;\r\n\t}\r\n\r\n\t/**\r\n\t * Sets `visibility` property:\r\n\t *\r\n\t * * `true` - visible\r\n\t * * `false` - hidden\r\n\t *\r\n\t * @param value  true - visible, false - hidden\r\n\t * @return Current visibility\r\n\t */\r\n\tpublic setVisibility(value: boolean) {\r\n\t\tsuper.setVisibility(value);\r\n\t\tthis.bulletsContainer.visible = value;\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"AxisRenderer\"] = AxisRenderer;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}