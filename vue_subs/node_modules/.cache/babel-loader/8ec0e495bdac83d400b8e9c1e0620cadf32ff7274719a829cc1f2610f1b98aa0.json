{"ast":null,"code":"/**\r\n * Functionality for adding images in SVG tree.\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\nimport { Sprite } from \"../Sprite\";\nimport { registry } from \"../Registry\";\nimport * as $dom from \"../utils/DOM\";\nimport * as $type from \"../utils/Type\";\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n/**\r\n * Used to add `<image>` elements to SVG.\r\n *\r\n * @see {@link IImageEvents} for a list of available events\r\n * @see {@link IImageAdapters} for a list of available Adapters\r\n */\nvar Image = /** @class */function (_super) {\n  __extends(Image, _super);\n  /**\r\n   * Constructor\r\n   */\n  function Image() {\n    var _this = _super.call(this) || this;\n    _this.className = \"Image\";\n    _this.element = _this.paper.add(\"image\");\n    _this.applyTheme();\n    _this.width = 50;\n    _this.height = 50;\n    return _this;\n  }\n  /**\r\n   * Draws an `<image>` element.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  Image.prototype.draw = function () {\n    _super.prototype.draw.call(this);\n    if (this.href) {\n      var width = this.innerWidth;\n      var height = this.innerHeight;\n      if ($type.isNumber(this.widthRatio)) {\n        width = height * this.widthRatio;\n        this.width = width;\n      }\n      if ($type.isNumber(this.heightRatio)) {\n        height = width * this.heightRatio;\n        this.height = height;\n      }\n      this.element.attr({\n        \"width\": width,\n        \"height\": height\n      });\n      this.element.attrNS($dom.XLINK, \"xlink:href\", this.href);\n    }\n  };\n  Object.defineProperty(Image.prototype, \"href\", {\n    /**\r\n     * @return Image URI\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"href\");\n    },\n    /**\r\n     * An image URI.\r\n     *\r\n     * @param value  Image URI\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"href\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Image.prototype, \"widthRatio\", {\n    /**\r\n     * @return Ratio\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"widthRatio\");\n    },\n    /**\r\n     * Sets image `width` relatively to its `height`.\r\n     *\r\n     * If image's `height = 100` and `widthRatio = 0.5` the actual width will be\r\n     * `50`.\r\n     *\r\n     * @param value  Ratio\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"widthRatio\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Image.prototype, \"heightRatio\", {\n    /**\r\n     * @return Ratio\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"heightRatio\");\n    },\n    /**\r\n     * Sets image `height` relatively to its `width`.\r\n     *\r\n     * If image's `width = 100` and `heightRatio = 0.5` the actual height will be\r\n     * `50`.\r\n     *\r\n     * @param value  Ratio\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"heightRatio\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Image.prototype, \"bbox\", {\n    /**\r\n     * Returns bounding box (square) for this element.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\n    get: function () {\n      return {\n        x: 0,\n        y: 0,\n        width: this.pixelWidth,\n        height: this.pixelHeight\n      };\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return Image;\n}(Sprite);\nexport { Image };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\nregistry.registeredClasses[\"Image\"] = Image;","map":{"version":3,"names":["Sprite","registry","$dom","$type","Image","_super","__extends","_this","call","className","element","paper","add","applyTheme","width","height","prototype","draw","href","innerWidth","innerHeight","isNumber","widthRatio","heightRatio","attr","attrNS","XLINK","Object","defineProperty","get","getPropertyValue","set","value","setPropertyValue","x","y","pixelWidth","pixelHeight","registeredClasses"],"sources":["../../../../../src/.internal/core/elements/Image.ts"],"sourcesContent":["/**\r\n * Functionality for adding images in SVG tree.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Sprite, ISpriteProperties, ISpriteAdapters, ISpriteEvents } from \"../Sprite\";\r\nimport { registry } from \"../Registry\";\r\nimport * as $dom from \"../utils/DOM\";\r\nimport * as $type from \"../utils/Type\";\r\nimport { IRectangle } from \"../defs/IRectangle\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[Image]].\r\n */\r\nexport interface IImageProperties extends ISpriteProperties {\r\n\r\n\t/**\r\n\t * A URI of the image.\r\n\t */\r\n\thref?: string;\r\n\r\n\t/**\r\n\t * Sets image `width` in relation to its `height`.\r\n\t */\r\n\twidthRatio?: number;\r\n\r\n\t/**\r\n\t * Sets image `height` in relation to its `width`.\r\n\t */\r\n\theightRatio?: number;\r\n}\r\n\r\n/**\r\n * Defines events for [[Image]].\r\n */\r\nexport interface IImageEvents extends ISpriteEvents { }\r\n\r\n/**\r\n * Defines adapters for [[Image]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IImageAdapters extends ISpriteAdapters, IImageProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Used to add `<image>` elements to SVG.\r\n *\r\n * @see {@link IImageEvents} for a list of available events\r\n * @see {@link IImageAdapters} for a list of available Adapters\r\n */\r\nexport class Image extends Sprite {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IImageProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IImageAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IImageEvents;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"Image\";\r\n\t\tthis.element = this.paper.add(\"image\");\r\n\t\tthis.applyTheme();\r\n\r\n\t\tthis.width = 50;\r\n\t\tthis.height = 50;\r\n\t}\r\n\r\n\t/**\r\n\t * Draws an `<image>` element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic draw(): void {\r\n\t\tsuper.draw();\r\n\t\tif (this.href) {\r\n\r\n\t\t\tlet width = this.innerWidth;\r\n\t\t\tlet height = this.innerHeight;\r\n\r\n\t\t\tif ($type.isNumber(this.widthRatio)) {\r\n\t\t\t\twidth = height * this.widthRatio;\r\n\t\t\t\tthis.width = width;\r\n\t\t\t}\r\n\r\n\t\t\tif ($type.isNumber(this.heightRatio)) {\r\n\t\t\t\theight = width * this.heightRatio;\r\n\t\t\t\tthis.height = height;\r\n\t\t\t}\r\n\r\n\r\n\t\t\tthis.element.attr({\r\n\t\t\t\t\"width\": width,\r\n\t\t\t\t\"height\": height\r\n\t\t\t});\r\n\t\t\tthis.element.attrNS($dom.XLINK, \"xlink:href\", this.href);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * An image URI.\r\n\t *\r\n\t * @param value  Image URI\r\n\t */\r\n\tpublic set href(value: string) {\r\n\t\tthis.setPropertyValue(\"href\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Image URI\r\n\t */\r\n\tpublic get href(): string {\r\n\t\treturn this.getPropertyValue(\"href\");\r\n\t}\r\n\r\n\t/**\r\n\t * Sets image `width` relatively to its `height`.\r\n\t *\r\n\t * If image's `height = 100` and `widthRatio = 0.5` the actual width will be\r\n\t * `50`.\r\n\t *\r\n\t * @param value  Ratio\r\n\t */\r\n\tpublic set widthRatio(value: number) {\r\n\t\tthis.setPropertyValue(\"widthRatio\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Ratio\r\n\t */\r\n\tpublic get widthRatio(): number {\r\n\t\treturn this.getPropertyValue(\"widthRatio\");\r\n\t}\r\n\r\n\t/**\r\n\t * Sets image `height` relatively to its `width`.\r\n\t *\r\n\t * If image's `width = 100` and `heightRatio = 0.5` the actual height will be\r\n\t * `50`.\r\n\t *\r\n\t * @param value  Ratio\r\n\t */\r\n\tpublic set heightRatio(value: number) {\r\n\t\tthis.setPropertyValue(\"heightRatio\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Ratio\r\n\t */\r\n\tpublic get heightRatio(): number {\r\n\t\treturn this.getPropertyValue(\"heightRatio\");\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Returns bounding box (square) for this element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic get bbox(): IRectangle {\r\n\t\treturn {\r\n\t\t\tx: 0,\r\n\t\t\ty: 0,\r\n\t\t\twidth: this.pixelWidth,\r\n\t\t\theight: this.pixelHeight\r\n\t\t};\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Image\"] = Image;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}