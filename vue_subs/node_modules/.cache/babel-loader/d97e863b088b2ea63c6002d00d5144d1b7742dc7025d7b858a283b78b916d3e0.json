{"ast":null,"code":"import { geoProjection as projection } from \"d3-geo\";\nimport { abs, atan, cos, epsilon2, exp, halfPi, log, quarterPi, sign, sin, sqrt, sqrt2, tan } from \"./math.js\";\nvar sqrt8 = sqrt(8),\n  phi0 = log(1 + sqrt2);\nexport function bakerRaw(lambda, phi) {\n  var phi0 = abs(phi);\n  return phi0 < quarterPi ? [lambda, log(tan(quarterPi + phi / 2))] : [lambda * cos(phi0) * (2 * sqrt2 - 1 / sin(phi0)), sign(phi) * (2 * sqrt2 * (phi0 - quarterPi) - log(tan(phi0 / 2)))];\n}\nbakerRaw.invert = function (x, y) {\n  if ((y0 = abs(y)) < phi0) return [x, 2 * atan(exp(y)) - halfPi];\n  var phi = quarterPi,\n    i = 25,\n    delta,\n    y0;\n  do {\n    var cosPhi_2 = cos(phi / 2),\n      tanPhi_2 = tan(phi / 2);\n    phi -= delta = (sqrt8 * (phi - quarterPi) - log(tanPhi_2) - y0) / (sqrt8 - cosPhi_2 * cosPhi_2 / (2 * tanPhi_2));\n  } while (abs(delta) > epsilon2 && --i > 0);\n  return [x / (cos(phi) * (sqrt8 - 1 / sin(phi))), sign(y) * phi];\n};\nexport default function () {\n  return projection(bakerRaw).scale(112.314);\n}","map":{"version":3,"names":["geoProjection","projection","abs","atan","cos","epsilon2","exp","halfPi","log","quarterPi","sign","sin","sqrt","sqrt2","tan","sqrt8","phi0","bakerRaw","lambda","phi","invert","x","y","y0","i","delta","cosPhi_2","tanPhi_2","scale"],"sources":["/Users/admin/Desktop/techrepublik/pro/subs/vue_subs/node_modules/d3-geo-projection/src/baker.js"],"sourcesContent":["import {geoProjection as projection} from \"d3-geo\";\nimport {abs, atan, cos, epsilon2, exp, halfPi, log, quarterPi, sign, sin, sqrt, sqrt2, tan} from \"./math.js\";\n\nvar sqrt8 = sqrt(8),\n    phi0 = log(1 + sqrt2);\n\nexport function bakerRaw(lambda, phi) {\n  var phi0 = abs(phi);\n  return phi0 < quarterPi\n      ? [lambda, log(tan(quarterPi + phi / 2))]\n      : [lambda * cos(phi0) * (2 * sqrt2 - 1 / sin(phi0)), sign(phi) * (2 * sqrt2 * (phi0 - quarterPi) - log(tan(phi0 / 2)))];\n}\n\nbakerRaw.invert = function(x, y) {\n  if ((y0 = abs(y)) < phi0) return [x, 2 * atan(exp(y)) - halfPi];\n  var phi = quarterPi, i = 25, delta, y0;\n  do {\n    var cosPhi_2 = cos(phi / 2), tanPhi_2 = tan(phi / 2);\n    phi -= delta = (sqrt8 * (phi - quarterPi) - log(tanPhi_2) - y0) / (sqrt8 - cosPhi_2 * cosPhi_2 / (2 * tanPhi_2));\n  } while (abs(delta) > epsilon2 && --i > 0);\n  return [x / (cos(phi) * (sqrt8 - 1 / sin(phi))), sign(y) * phi];\n};\n\nexport default function() {\n  return projection(bakerRaw)\n      .scale(112.314);\n}\n"],"mappings":"AAAA,SAAQA,aAAa,IAAIC,UAAU,QAAO,QAAQ;AAClD,SAAQC,GAAG,EAAEC,IAAI,EAAEC,GAAG,EAAEC,QAAQ,EAAEC,GAAG,EAAEC,MAAM,EAAEC,GAAG,EAAEC,SAAS,EAAEC,IAAI,EAAEC,GAAG,EAAEC,IAAI,EAAEC,KAAK,EAAEC,GAAG,QAAO,WAAW;AAE5G,IAAIC,KAAK,GAAGH,IAAI,CAAC,CAAC,CAAC;EACfI,IAAI,GAAGR,GAAG,CAAC,CAAC,GAAGK,KAAK,CAAC;AAEzB,OAAO,SAASI,QAAQA,CAACC,MAAM,EAAEC,GAAG,EAAE;EACpC,IAAIH,IAAI,GAAGd,GAAG,CAACiB,GAAG,CAAC;EACnB,OAAOH,IAAI,GAAGP,SAAS,GACjB,CAACS,MAAM,EAAEV,GAAG,CAACM,GAAG,CAACL,SAAS,GAAGU,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,GACvC,CAACD,MAAM,GAAGd,GAAG,CAACY,IAAI,CAAC,IAAI,CAAC,GAAGH,KAAK,GAAG,CAAC,GAAGF,GAAG,CAACK,IAAI,CAAC,CAAC,EAAEN,IAAI,CAACS,GAAG,CAAC,IAAI,CAAC,GAAGN,KAAK,IAAIG,IAAI,GAAGP,SAAS,CAAC,GAAGD,GAAG,CAACM,GAAG,CAACE,IAAI,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;AAC7H;AAEAC,QAAQ,CAACG,MAAM,GAAG,UAASC,CAAC,EAAEC,CAAC,EAAE;EAC/B,IAAI,CAACC,EAAE,GAAGrB,GAAG,CAACoB,CAAC,CAAC,IAAIN,IAAI,EAAE,OAAO,CAACK,CAAC,EAAE,CAAC,GAAGlB,IAAI,CAACG,GAAG,CAACgB,CAAC,CAAC,CAAC,GAAGf,MAAM,CAAC;EAC/D,IAAIY,GAAG,GAAGV,SAAS;IAAEe,CAAC,GAAG,EAAE;IAAEC,KAAK;IAAEF,EAAE;EACtC,GAAG;IACD,IAAIG,QAAQ,GAAGtB,GAAG,CAACe,GAAG,GAAG,CAAC,CAAC;MAAEQ,QAAQ,GAAGb,GAAG,CAACK,GAAG,GAAG,CAAC,CAAC;IACpDA,GAAG,IAAIM,KAAK,GAAG,CAACV,KAAK,IAAII,GAAG,GAAGV,SAAS,CAAC,GAAGD,GAAG,CAACmB,QAAQ,CAAC,GAAGJ,EAAE,KAAKR,KAAK,GAAGW,QAAQ,GAAGA,QAAQ,IAAI,CAAC,GAAGC,QAAQ,CAAC,CAAC;EAClH,CAAC,QAAQzB,GAAG,CAACuB,KAAK,CAAC,GAAGpB,QAAQ,IAAI,EAAEmB,CAAC,GAAG,CAAC;EACzC,OAAO,CAACH,CAAC,IAAIjB,GAAG,CAACe,GAAG,CAAC,IAAIJ,KAAK,GAAG,CAAC,GAAGJ,GAAG,CAACQ,GAAG,CAAC,CAAC,CAAC,EAAET,IAAI,CAACY,CAAC,CAAC,GAAGH,GAAG,CAAC;AACjE,CAAC;AAED,eAAe,YAAW;EACxB,OAAOlB,UAAU,CAACgB,QAAQ,CAAC,CACtBW,KAAK,CAAC,OAAO,CAAC;AACrB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}