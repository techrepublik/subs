{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n/**\r\n * A collection of universal utility functions.\r\n */\nimport { Percent } from \"./Percent\";\nimport { isSafari } from \"./Browser\";\nimport * as $math from \"../utils/Math\";\nimport * as $type from \"../utils/Type\";\nimport * as $string from \"./String\";\nimport * as $strings from \"./Strings\";\nimport * as $object from \"./Object\";\nimport * as $array from \"./Array\";\n/**\r\n * ============================================================================\r\n * MISC FUNCTIONS\r\n * ============================================================================\r\n * @hidden\r\n */\n/**\r\n * Marks a value as being used (e.g. because the value has side effects).\r\n */\nexport function used(value) {}\n/**\r\n * Copies all properties of one object to the other, omitting undefined.\r\n *\r\n * @param fromObject  Source object\r\n * @param toObject    Target object\r\n * @return Updated target object\r\n * @todo Maybe consolidate with utils.copy?\r\n */\nexport function copyProperties(source, target) {\n  $object.each(source, function (key, value) {\n    // only if value is set\n    if ($type.hasValue(value)) {\n      target[key] = value;\n    }\n  });\n  return target;\n}\n/**\r\n * Removes target from url\r\n */\nexport function stripHash(url) {\n  return /^[^#]*/.exec(url)[0];\n}\nexport function getBaseURI() {\n  var url = \"#\";\n  // Needed until https://bugs.webkit.org/show_bug.cgi?id=189499 is fixed\n  if (isSafari()) {\n    var baseURI = document.baseURI;\n    if (baseURI) {\n      baseURI = stripHash(baseURI);\n      var loc = stripHash(location.href);\n      if (baseURI !== loc) {\n        url = loc + url;\n      }\n    }\n  }\n  return url;\n}\n/**\r\n * Copies all properties of one object to the other, omitting undefined, but only if property in target object doesn't have a value set.\r\n *\r\n * @param fromObject  Source object\r\n * @param toObject    Target object\r\n * @return Updated target object\r\n * @todo Maybe consolidate with utils.copy?\r\n */\nexport function softCopyProperties(source, target) {\n  $object.each(source, function (key, value) {\n    // only if value is set\n    if ($type.hasValue(value) && !$type.hasValue(target[key])) {\n      target[key] = value;\n    }\n  });\n  return target;\n}\n/**\r\n * Copies all properties of one object to the other.\r\n *\r\n * @param source     Source object\r\n * @param recipient  Target object\r\n * @return Updated target object\r\n */\nexport function copy(source, target) {\n  $object.each(source, function (key, value) {\n    target[key] = value;\n  });\n  return target;\n}\n/**\r\n * Checks if value is not empty (undefined or zero-length string).\r\n *\r\n * @param value  Value to check\r\n * @return `true` if value is not \"empty\"\r\n */\nexport function isNotEmpty(value) {\n  return $type.hasValue(value) && value.toString() !== \"\";\n}\n/**\r\n * [relativeToValue description]\r\n *\r\n * @ignore Exclude from docs\r\n * @todo Description\r\n * @param percent  [description]\r\n * @param full     [description]\r\n * @return [description]\r\n */\nexport function relativeToValue(percent, full) {\n  if ($type.isNumber(percent)) {\n    return percent;\n  } else if (percent != null && $type.isNumber(percent.value) && $type.isNumber(full)) {\n    return full * percent.value;\n  } else {\n    return 0;\n  }\n}\n/**\r\n * [relativeRadiusToValue description]\r\n *\r\n * Differs from relativeToValue so that if a value is negative, it subtracts\r\n * it from full value.\r\n *\r\n * @ignore Exclude from docs\r\n * @todo Description\r\n * @param percent             [description]\r\n * @param full                [description]\r\n * @param subtractIfNegative  [description]\r\n * @return [description]\r\n */\nexport function relativeRadiusToValue(percent, full, subtractIfNegative) {\n  var value;\n  if ($type.isNumber(percent)) {\n    value = percent;\n    if (value < 0) {\n      if (subtractIfNegative) {\n        value = full + value;\n      } else {\n        value = full - value;\n      }\n    }\n  } else if (percent != null && $type.isNumber(percent.value)) {\n    value = full * percent.value;\n  }\n  return value;\n}\n/**\r\n * [valueToRelative description]\r\n *\r\n * @ignore Exclude from docs\r\n * @todo Description\r\n * @param value  [description]\r\n * @param full   [description]\r\n * @return [description]\r\n */\nexport function valueToRelative(value, full) {\n  if (value instanceof Percent) {\n    return value.value;\n  } else {\n    return value / full;\n  }\n}\n/**\r\n * Returns pixel ratio of the current screen (used on retina displays).\r\n *\r\n * @return Pixel ratio\r\n */\nexport function getPixelRatio() {\n  var ratio = window.devicePixelRatio || 1;\n  return ratio;\n}\n/**\r\n * ============================================================================\r\n * STRING FORMATTING FUNCTIONS\r\n * ============================================================================\r\n * @hidden\r\n */\n/**\r\n * Converts camelCased text to dashed version:\r\n * (\"thisIsString\" > \"this-is-string\")\r\n *\r\n * @param str  Input\r\n * @return Output\r\n */\nexport function camelToDashed(str) {\n  return str.replace(/\\W+/g, '-').replace(/([a-z\\d])([A-Z])/g, '$1-$2').toLowerCase();\n}\n/**\r\n * Converts tring to uppercase.\r\n *\r\n * @param str  String to convert\r\n * @return uppercased string\r\n * @todo Maybe make it better\r\n */\nexport function capitalize(str) {\n  var arr = str.split(\"\");\n  arr[0] = arr[0].toUpperCase();\n  return arr.join(\"\");\n}\n/**\r\n * Converts any value into its string representation.\r\n *\r\n * @param value  Value\r\n * @return String represantation of the value\r\n */\nexport function stringify(value) {\n  return JSON.stringify(value);\n}\n/**\r\n * Escapes string so it can safely be used in a Regex.\r\n *\r\n * @param value  Unsescaped string\r\n * @return Escaped string\r\n */\nexport function escapeForRgex(value) {\n  return value.replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g, '\\\\$&');\n}\n/**\r\n * Splits the text into multiple lines, respecting maximum character count.\r\n * Prioretizes splitting on spaces and punctuation. Falls back on splitting\r\n * mid-word if there's no other option.\r\n *\r\n * @param text      Text\r\n * @param maxChars  Maximum number of characters per line\r\n * @return An array of split text\r\n */\nexport function splitTextByCharCount(text, maxChars, fullWords, rtl, fullWordFallback) {\n  // Maybe the text fits?\n  if (text.length <= maxChars) {\n    return [text];\n  }\n  // Init result\n  var res = [];\n  // Split by words or by charts\n  if (fullWords) {\n    // Split by words first\n    // Split by spacing\n    var currentIndex = -1;\n    //let tmpText = text.replace(/([,;:!?\\\\\\/\\.]+[\\s]+|[\\s])/g, $strings.PLACEHOLDER + \"$1\" + $strings.PLACEHOLDER);\n    var tmpText = text.replace(/([,;:!?\\\\\\/]+|[\\s])/g, $strings.PLACEHOLDER + \"$1\" + $strings.PLACEHOLDER);\n    var words = tmpText.split($strings.PLACEHOLDER);\n    // Glue end-of-word punctuation to the word itself\n    for (var i = 1; i < words.length; i++) {\n      var word = words[i];\n      if ((word == \".\" || word == \",\") && words[i - 1].match(/[\\w]+$/)) {\n        words[i - 1] += word;\n        words[i] = \"\";\n      }\n    }\n    // Process each word\n    for (var i = 0; i < words.length; i++) {\n      // Get word and symbol count\n      var word = words[i];\n      var wordLength = word.length;\n      // Ignore empty words\n      if (wordLength === 0) {\n        continue;\n      }\n      // Check word length\n      if (wordLength > maxChars && (fullWords !== true || fullWordFallback != false)) {\n        //if (wordLength > maxChars) {\n        // A single word is longer than allowed symbol count\n        // Break it up\n        if (rtl) {\n          word = reverseString(word);\n        }\n        var parts = word.match(new RegExp(\".{1,\" + maxChars + \"}\", \"g\"));\n        // TODO is this correct ?\n        if (parts) {\n          if (rtl) {\n            for (var x = 0; x < parts.length; x++) {\n              parts[x] = reverseString(parts[x]);\n            }\n            //parts.reverse();\n          }\n          res = res.concat(parts);\n        }\n      } else {\n        // Init current line\n        if (currentIndex === -1) {\n          res.push(\"\");\n          currentIndex = 0;\n        }\n        // Check if we need to break into another line\n        if (res[currentIndex].length + wordLength + 1 > maxChars && res[currentIndex] !== \"\") {\n          res.push(\"\");\n          currentIndex++;\n        }\n        // Add word\n        res[currentIndex] += word;\n      }\n      // Update index\n      currentIndex = res.length - 1;\n    }\n  } else {\n    // Splitting by anywhere (living la vida facil)\n    var parts = text.match(new RegExp(\".{1,\" + maxChars + \"}\", \"g\"));\n    if (parts) {\n      if (rtl) {\n        for (var x = 0; x < parts.length; x++) {\n          if (!rtl) {\n            parts[x] = reverseString(parts[x]);\n          }\n        }\n      }\n      res = parts;\n    }\n  }\n  // Do we have only one word that does not fit?\n  // Since fullWords is set and we can't split the word, we end up with empty\n  // set.\n  if (res.length == 1 && fullWords && fullWordFallback && res[0].length > maxChars) {\n    res = [];\n  }\n  return res;\n}\n/**\r\n * Truncates the text to certain character count.\r\n *\r\n * Will add ellipsis if the string is truncated. Optionally, can truncate on\r\n * full words only.\r\n *\r\n * For RTL support, pass in the fifth parameter as `true`.\r\n *\r\n * @param text       Input text\r\n * @param maxChars   Maximum character count of output\r\n * @param ellipsis   Ellipsis string, i.e. \"...\"\r\n * @param fullWords  If `true`, will not break mid-word, unless there's a single word and it does not with into `maxChars`\r\n * @param rtl        Is this an RTL text?\r\n * @return Truncated text\r\n */\nexport function truncateWithEllipsis(text, maxChars, ellipsis, fullWords, rtl) {\n  if (text.length <= maxChars) {\n    return text;\n  }\n  // Calc max chars\n  maxChars -= ellipsis.length;\n  if (maxChars < 1) {\n    maxChars = 1;\n    //ellipsis = \"\";\n  }\n  // Get lines\n  var lines = splitTextByCharCount(text, maxChars, fullWords, rtl);\n  // Use first line\n  return (lines[0] || \"\") + ellipsis;\n}\n/**\r\n * Removes whitespace from beginning and end of the string.\r\n *\r\n * @param str  Input\r\n * @return Output\r\n */\nexport function trim(str) {\n  return str.replace(/^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g, \"\");\n}\n;\n/**\r\n * Removes whitespace from end of the string.\r\n *\r\n * @param str  Input\r\n * @return Output\r\n */\nexport function rtrim(str) {\n  return str.replace(/[\\s\\uFEFF\\xA0]+$/g, \"\");\n}\n;\n/**\r\n * Removes whitespace from beginning of the string.\r\n *\r\n * @param str  Input\r\n * @return Output\r\n */\nexport function ltrim(str) {\n  return str.replace(/^[\\s\\uFEFF\\xA0]+/g, \"\");\n}\n;\n/**\r\n * Reverses string.\r\n *\r\n * @param str  Input\r\n * @return Output\r\n */\nexport function reverseString(str) {\n  return str.split(\"\").reverse().join(\"\");\n}\n/**\r\n * Removes quotes from the string.\r\n *\r\n * @param str  Input\r\n * @return Output\r\n */\nexport function unquote(str) {\n  var res = str.trim();\n  res = str.replace(/^'(.*)'$/, \"$1\");\n  if (res == str) {\n    res = str.replace(/^\"(.*)\"$/, \"$1\");\n  }\n  return res;\n}\n/**\r\n * Pads a string with additional characters to certain length.\r\n *\r\n * @param value  A numeric value\r\n * @param len    Result string length in characters\r\n * @param char   A character to use for padding\r\n * @return Padded value as string\r\n */\nexport function padString(value, len, char) {\n  if (len === void 0) {\n    len = 0;\n  }\n  if (char === void 0) {\n    char = \"0\";\n  }\n  if (typeof value !== \"string\") {\n    value = value.toString();\n  }\n  return len > value.length ? Array(len - value.length + 1).join(char) + value : value;\n}\n/**\r\n * Tries to determine format type.\r\n *\r\n * @ignore Exclude from docs\r\n * @param format  Format string\r\n * @return Format type (\"string\" | \"number\" | \"date\" | \"duration\")\r\n */\nexport function getFormat(format) {\n  // Undefined?\n  if (typeof format === \"undefined\") {\n    return $strings.STRING;\n  }\n  // Cleanup and lowercase format\n  format = format.toLowerCase().replace(/^\\[[^\\]]*\\]/, \"\");\n  // Remove style tags\n  format = format.replace(/\\[[^\\]]+\\]/, \"\");\n  // Trim\n  format = format.trim();\n  // Check for any explicit format hints (i.e. /Date)\n  var hints = format.match(/\\/(date|number|duration)$/);\n  if (hints) {\n    return hints[1];\n  }\n  // Check for explicit hints\n  if (format === $strings.NUMBER) {\n    return $strings.NUMBER;\n  }\n  if (format === $strings.DATE) {\n    return $strings.DATE;\n  }\n  if (format === $strings.DURATION) {\n    return $strings.DURATION;\n  }\n  // Detect number formatting symbols\n  if (format.match(/[#0]/)) {\n    return $strings.NUMBER;\n  }\n  // Detect date formatting symbols\n  if (format.match(/[ymwdhnsqaxkzgtei]/)) {\n    return $strings.DATE;\n  }\n  // Nothing? Let's display as string\n  return $strings.STRING;\n}\n/**\r\n * Cleans up format:\r\n * * Strips out formatter hints\r\n *\r\n * @ignore Exclude from docs\r\n * @param format  Format\r\n * @return Cleaned format\r\n */\nexport function cleanFormat(format) {\n  return format.replace(/\\/(date|number|duration)$/i, \"\");\n}\n/**\r\n * Strips all tags from the string.\r\n *\r\n * @param text  Source string\r\n * @return String without tags\r\n */\nexport function stripTags(text) {\n  return text ? text.replace(/<[^>]*>/g, \"\") : text;\n}\n/**\r\n * Removes new lines and tags from a string.\r\n *\r\n * @param text  String to conver\r\n * @return Converted string\r\n */\nexport function plainText(text) {\n  return text ? stripTags((\"\" + text).replace(/[\\n\\r]+/g, \". \")) : text;\n}\n/**\r\n * ============================================================================\r\n * TYPE CONVERSION FUNCTIONS\r\n * ============================================================================\r\n * @hidden\r\n */\n/**\r\n * Converts numeric value into string. Deals with large or small numbers that\r\n * would otherwise use exponents.\r\n *\r\n * @param value  Numeric value\r\n * @return Numeric value as string\r\n */\nexport function numberToString(value) {\n  // TODO handle Infinity and -Infinity\n  if ($type.isNaN(value)) {\n    return \"NaN\";\n  }\n  if (value === Infinity) {\n    return \"Infinity\";\n  }\n  if (value === -Infinity) {\n    return \"-Infinity\";\n  }\n  // Negative 0\n  if (value === 0 && 1 / value === -Infinity) {\n    return \"-0\";\n  }\n  // Preserve negative and deal with absoute values\n  var negative = value < 0;\n  value = Math.abs(value);\n  // TODO test this\n  var parsed = $type.getValue(/^([0-9]+)(?:\\.([0-9]+))?(?:e[\\+\\-]([0-9]+))?$/.exec(\"\" + value));\n  var digits = parsed[1];\n  var decimals = parsed[2] || \"\";\n  var res;\n  // Leave the nummber as it is if it does not use exponents\n  if (parsed[3] == null) {\n    res = decimals === \"\" ? digits : digits + \".\" + decimals;\n  } else {\n    var exponent = +parsed[3];\n    // Deal with decimals\n    if (value < 1) {\n      var zeros = exponent - 1;\n      res = \"0.\" + $string.repeat(\"0\", zeros) + digits + decimals;\n      // Deal with integers\n    } else {\n      var zeros = exponent - decimals.length;\n      if (zeros === 0) {\n        res = digits + decimals;\n      } else if (zeros < 0) {\n        res = digits + decimals.slice(0, zeros) + \".\" + decimals.slice(zeros);\n      } else {\n        res = digits + decimals + $string.repeat(\"0\", zeros);\n      }\n    }\n  }\n  return negative ? \"-\" + res : res;\n}\n/**\r\n * Converts anything to Date object.\r\n *\r\n * @param value  A value of any type\r\n * @return Date object representing a value\r\n */\nexport function anyToDate(value) {\n  if ($type.isDate(value)) {\n    // TODO maybe don't create a new Date ?\n    var date = new Date(value);\n    // This is needed because IE does not copy over milliseconds\n    date.setMilliseconds(value.getMilliseconds());\n    return date;\n  } else if ($type.isNumber(value)) {\n    return new Date(value);\n  } else {\n    // Try converting to number (assuming timestamp)\n    var num = Number(value);\n    if (!$type.isNumber(num)) {\n      return new Date(value);\n    } else {\n      return new Date(num);\n    }\n  }\n}\n/**\r\n * Tries converting any value to a number.\r\n *\r\n * @param value  Source value\r\n * @return Number\r\n */\nexport function anyToNumber(value) {\n  if ($type.isDate(value)) {\n    return value.getTime();\n  } else if ($type.isNumber(value)) {\n    return value;\n  } else if ($type.isString(value)) {\n    // Try converting to number (assuming timestamp)\n    var num = Number(value);\n    if (!$type.isNumber(num)) {\n      // Failing\n      return undefined;\n    } else {\n      return num;\n    }\n  }\n}\n/**\r\n * ============================================================================\r\n * DATE-RELATED FUNCTIONS\r\n * ============================================================================\r\n * @hidden\r\n */\n/**\r\n * Returns a year day.\r\n *\r\n * @param date  Date\r\n * @param utc   Assume UTC dates?\r\n * @return Year day\r\n * @todo Account for UTC\r\n */\nexport function getYearDay(date, utc) {\n  if (utc === void 0) {\n    utc = false;\n  }\n  var start = new Date(date.getFullYear(), 0, 0);\n  var diff = date.getTime() - start.getTime() + (start.getTimezoneOffset() - date.getTimezoneOffset()) * 60 * 1000;\n  var oneDay = 1000 * 60 * 60 * 24;\n  return Math.floor(diff / oneDay);\n}\n/**\r\n * Returns week number for a given date.\r\n *\r\n * @param date  Date\r\n * @param utc   Assume UTC dates?\r\n * @return Week number\r\n * @todo Account for UTC\r\n */\nexport function getWeek(date, _utc) {\n  if (_utc === void 0) {\n    _utc = false;\n  }\n  var d = new Date(Date.UTC(date.getFullYear(), date.getMonth(), date.getDate()));\n  var day = d.getUTCDay() || 7;\n  d.setUTCDate(d.getUTCDate() + 4 - day);\n  var firstDay = new Date(Date.UTC(d.getUTCFullYear(), 0, 1));\n  return Math.ceil(((d.getTime() - firstDay.getTime()) / 86400000 + 1) / 7);\n}\n/**\r\n * Returns a week number in the month.\r\n *\r\n * @param date  Source Date\r\n * @param utc   Assume UTC dates?\r\n * @return Week number in month\r\n */\nexport function getMonthWeek(date, utc) {\n  if (utc === void 0) {\n    utc = false;\n  }\n  var firstWeek = getWeek(new Date(date.getFullYear(), date.getMonth(), 1), utc);\n  var currentWeek = getWeek(date, utc);\n  if (currentWeek == 1) {\n    currentWeek = 53;\n  }\n  return currentWeek - firstWeek + 1;\n}\n/**\r\n * Returns a year day out of the given week number.\r\n *\r\n * @param week     Week\r\n * @param year     Year\r\n * @param weekday  Weekday\r\n * @param utc      Assume UTC dates\r\n * @return Day in a year\r\n */\nexport function getDayFromWeek(week, year, weekday, utc) {\n  if (weekday === void 0) {\n    weekday = 1;\n  }\n  if (utc === void 0) {\n    utc = false;\n  }\n  var date = new Date(year, 0, 4, 0, 0, 0, 0);\n  if (utc) {\n    date.setUTCFullYear(year);\n  }\n  var day = week * 7 + weekday - ((date.getDay() || 7) + 3);\n  return day;\n}\n/**\r\n * Returns 12-hour representation out of the 24-hour hours.\r\n *\r\n * @param hours  24-hour number\r\n * @return 12-hour number\r\n */\nexport function get12Hours(hours, base) {\n  if (hours > 12) {\n    hours -= 12;\n  } else if (hours === 0) {\n    hours = 12;\n  }\n  return $type.hasValue(base) ? hours + (base - 1) : hours;\n}\n/**\r\n * Returns a string name of the tome zone.\r\n *\r\n * @param date     Date object\r\n * @param long     Should return long (\"Pacific Standard Time\") or short abbreviation (\"PST\")\r\n * @param savings  Include information if it's in daylight savings mode\r\n * @param utc      Assume UTC dates\r\n * @return Time zone name\r\n */\nexport function getTimeZone(date, long, savings, utc) {\n  if (long === void 0) {\n    long = false;\n  }\n  if (savings === void 0) {\n    savings = false;\n  }\n  if (utc === void 0) {\n    utc = false;\n  }\n  if (utc) {\n    return long ? \"Coordinated Universal Time\" : \"UTC\";\n  }\n  var wotz = date.toLocaleString(\"UTC\");\n  var wtz = date.toLocaleString(\"UTC\", {\n    timeZoneName: long ? \"long\" : \"short\"\n  }).substr(wotz.length);\n  //wtz = wtz.replace(/[+-]+[0-9]+$/, \"\");\n  if (savings === false) {\n    wtz = wtz.replace(/ (standard|daylight|summer|winter) /i, \" \");\n  }\n  return wtz;\n}\n/**\r\n * Returns a \"week year\" of the given date.\r\n *\r\n * @param date  Date\r\n * @param utc   Assume UTC dates?\r\n * @return Year of week\r\n */\nexport function getWeekYear(date, _utc) {\n  if (_utc === void 0) {\n    _utc = false;\n  }\n  var d = new Date(Date.UTC(date.getFullYear(), date.getMonth(), date.getDate()));\n  var day = d.getUTCDay() || 7;\n  d.setUTCDate(d.getUTCDate() + 4 - day);\n  var firstDay = new Date(Date.UTC(d.getUTCFullYear(), 0, 1));\n  return firstDay.getFullYear();\n}\n/**\r\n * ============================================================================\r\n * NUMBER-RELATED FUNCTIONS\r\n * ============================================================================\r\n * @hidden\r\n */\n/**\r\n * Returns a random number between `from` and `to`.\r\n *\r\n * @param from  From number\r\n * @param to    To number\r\n * @return Random number\r\n */\nexport function random(from, to) {\n  return Math.floor(Math.random() * (to - from)) + from;\n}\n/**\r\n * Fits the number into specific `min` and `max` bounds.\r\n *\r\n * @param value  Input value\r\n * @param min    Minimum value\r\n * @param max    Maximum value\r\n * @return Possibly adjusted value\r\n */\nexport function fitNumber(value, min, max) {\n  if (value > max) {\n    return max;\n  } else if (value < min) {\n    return min;\n  }\n  return value;\n}\n/**\r\n * Fits the number into specific `min` and `max` bounds.\r\n *\r\n * If the value is does not fit withing specified range, it \"wraps\" around the\r\n * values.\r\n *\r\n * For example, if we have input value 10 with min set at 1 and max set at 8,\r\n * the value will not fit. The remainder that does not fit (2) will be added\r\n * to `min`, resulting in 3.\r\n *\r\n * The output of regular `fitNumber()` would return 8 instead.\r\n *\r\n * @param value  Input value\r\n * @param min    Minimum value\r\n * @param max    Maximum value\r\n * @return Possibly adjusted value\r\n */\nexport function fitNumberRelative(value, min, max) {\n  var gap = max - min;\n  if (value > max) {\n    value = min + (value - gap * Math.floor(value / gap));\n  } else if (value < min) {\n    value = min + (value - gap * Math.floor(value / gap));\n  }\n  return value;\n}\n/**\r\n * ============================================================================\r\n * SPRITE-RELATED FUNCTIONS\r\n * ============================================================================\r\n * @hidden\r\n */\n/**\r\n * Converts SVG element coordinates to coordinates within specific [[Sprite]].\r\n *\r\n * @param point   SVG coordinates\r\n * @param sprite  Sprite\r\n * @return Sprite coordinates\r\n */\nexport function svgPointToSprite(point, sprite) {\n  var x = point.x;\n  var y = point.y;\n  var sprites = [];\n  if (sprite) {\n    while ($type.hasValue(sprite.parent)) {\n      sprites.push(sprite);\n      sprite = sprite.parent;\n    }\n    sprites.reverse();\n    for (var i = 0; i < sprites.length; i++) {\n      var sprite_1 = sprites[i];\n      var angle = sprite_1.rotation;\n      var relativeX = x - sprite_1.pixelX - sprite_1.ex;\n      var relativeY = y - sprite_1.pixelY - sprite_1.ey;\n      if (sprite_1.dx) {\n        x -= sprite_1.dx;\n      }\n      if (sprite_1.dy) {\n        y -= sprite_1.dy;\n      }\n      var scale = sprite_1.scale;\n      // this handles nonscaling\n      if (sprite_1.group) {\n        scale = sprite_1.group.scale;\n      }\n      x = ($math.cos(-angle) * relativeX - $math.sin(-angle) * relativeY) / scale - sprite_1.pixelPaddingLeft;\n      y = ($math.cos(-angle) * relativeY + $math.sin(-angle) * relativeX) / scale - sprite_1.pixelPaddingTop;\n    }\n  }\n  return {\n    x: x,\n    y: y\n  };\n}\n/**\r\n * Converts coordinates within [[Sprite]] to coordinates relative to the whole\r\n * SVG element.\r\n *\r\n * @param point   Sprite coordinates\r\n * @param sprite  Sprite\r\n * @return SVG coordinates\r\n */\nexport function spritePointToSvg(point, sprite) {\n  var x = point.x;\n  var y = point.y;\n  if (sprite) {\n    while ($type.hasValue(sprite.parent)) {\n      var angle = sprite.rotation;\n      x += sprite.pixelPaddingLeft + sprite.ex;\n      y += sprite.pixelPaddingTop + sprite.ey;\n      var scale = sprite.scale;\n      // this handles nonscaling\n      if (sprite.group) {\n        scale = sprite.group.scale;\n      }\n      var relativeX = sprite.pixelX + (x * $math.cos(angle) - y * $math.sin(angle)) * scale;\n      var relativeY = sprite.pixelY + (x * $math.sin(angle) + y * $math.cos(angle)) * scale;\n      if (sprite.dx) {\n        relativeX += sprite.dx;\n      }\n      if (sprite.dy) {\n        relativeY += sprite.dy;\n      }\n      x = relativeX;\n      y = relativeY;\n      sprite = sprite.parent;\n    }\n  }\n  return {\n    x: x,\n    y: y\n  };\n}\n/**\r\n * Converts coordinates of one sprite to another.\r\n *\r\n * @param point   Sprite coordinates\r\n * @param sprite  Sprite\r\n * @param toSprite  Sprite\r\n * @return converted coordinates\r\n */\nexport function spritePointToSprite(point, sprite, toSprite) {\n  return svgPointToSprite(spritePointToSvg(point, sprite), toSprite);\n}\n/**\r\n * Converts a rectangle expressed in SVG element coordinates to coordinates\r\n * within specific [[Sprite]].\r\n *\r\n * @param rect    SVG rectangle\r\n * @param sprite  Sprite\r\n * @return Sprite rectangle\r\n */\nexport function svgRectToSprite(rect, sprite) {\n  var p1 = svgPointToSprite(rect, sprite);\n  var p2 = svgPointToSprite({\n    x: rect.x + rect.width,\n    y: rect.y + rect.height\n  }, sprite);\n  return {\n    x: p1.x,\n    y: p1.y,\n    width: p2.x - p1.x,\n    height: p2.y - p1.y\n  };\n}\n/**\r\n * Converts a rectangle expressed in [[Sprite]] coordinates to SVG coordinates.\r\n *\r\n * @param rect    Sprite rectangle\r\n * @param sprite  Sprite\r\n * @return SVG rectangle\r\n */\nexport function spriteRectToSvg(rect, sprite) {\n  var p1 = spritePointToSvg(rect, sprite);\n  var p2 = spritePointToSvg({\n    x: rect.x + rect.width,\n    y: rect.y + rect.height\n  }, sprite);\n  return {\n    x: p1.x,\n    y: p1.y,\n    width: p2.x - p1.x,\n    height: p2.y - p1.y\n  };\n}\n/**\r\n * Converts global document-wide coordinates to coordinates within SVG element.\r\n *\r\n * @param point         Global coordinates\r\n * @param svgContainer  SVG element\r\n * @return SVG coordinates\r\n */\nexport function documentPointToSvg(point, svgContainer, cssScale) {\n  try {\n    var bbox = svgContainer.getBoundingClientRect();\n    if (!$type.isNumber(cssScale)) {\n      cssScale = 1;\n    }\n    return {\n      \"x\": (point.x - bbox.left) / cssScale,\n      \"y\": (point.y - bbox.top) / cssScale\n    };\n  } catch (e) {\n    return point;\n  }\n}\n/**\r\n * Converts SVG coordinates to global document-wide coordinates.\r\n *\r\n * @param point         SVG coordinates\r\n * @param svgContainer  SVG element\r\n * @return Global coordinates\r\n */\nexport function svgPointToDocument(point, svgContainer) {\n  try {\n    var bbox = svgContainer.getBoundingClientRect();\n    return {\n      \"x\": point.x + bbox.left,\n      \"y\": point.y + bbox.top\n    };\n  } catch (e) {\n    return point;\n  }\n}\n/**\r\n * Converts document-wide global coordinates to coordinates within specific\r\n * [[Sprite]].\r\n *\r\n * @param point   Global coordinates\r\n * @param sprite  Sprite\r\n * @return Sprite coordinates\r\n */\nexport function documentPointToSprite(point, sprite) {\n  if (sprite && sprite.htmlContainer) {\n    var svgPoint = documentPointToSvg(point, $type.getValue(sprite.htmlContainer), sprite.svgContainer.cssScale);\n    return svgPointToSprite(svgPoint, sprite);\n  } else {\n    return point;\n  }\n}\n/**\r\n * Converts coordinates within [[Sprite]] to global document coordinates.\r\n *\r\n * @param point   Sprite coordinates\r\n * @param sprite  Sprite\r\n * @return Global coordinates\r\n */\nexport function spritePointToDocument(point, sprite) {\n  if (sprite && sprite.htmlContainer) {\n    var svgPoint = spritePointToSvg(point, sprite);\n    return svgPointToDocument(svgPoint, $type.getValue(sprite.htmlContainer));\n  } else {\n    return point;\n  }\n}\n/**\r\n * ============================================================================\r\n * DEPRECATED FUNCTIONS\r\n * @todo Review and remove\r\n * ============================================================================\r\n * @hidden\r\n */\n/**\r\n * Returns element's width.\r\n *\r\n * @ignore Exclude from docs\r\n * @param element  Element\r\n * @return Width (px)\r\n * @deprecated Not used anywhere\r\n */\nexport function width(element) {\n  var cs = getComputedStyle(element);\n  var paddingX = parseFloat(cs.paddingLeft) + parseFloat(cs.paddingRight);\n  var borderX = parseFloat(cs.borderLeftWidth) + parseFloat(cs.borderRightWidth);\n  return element.clientWidth - paddingX - borderX;\n}\n/**\r\n * Returns element's height.\r\n *\r\n * @ignore Exclude from docs\r\n * @param element  Element\r\n * @return Height (px)\r\n * @deprecated Not used anywhere\r\n */\nexport function height(element) {\n  var cs = getComputedStyle(element);\n  var paddingY = parseFloat(cs.paddingTop) + parseFloat(cs.paddingBottom);\n  var borderY = parseFloat(cs.borderTopWidth) + parseFloat(cs.borderBottomWidth);\n  return element.clientHeight - paddingY - borderY;\n}\n/**\r\n * Returns number of decimals\r\n *\r\n * @ignore Exclude from docs\r\n * @param number  Input number\r\n * @return Number of decimals\r\n */\nexport function decimalPlaces(number) {\n  var match = ('' + number).match(/(?:\\.(\\d+))?(?:[eE]([+-]?\\d+))?$/);\n  if (!match) {\n    return 0;\n  }\n  return Math.max(0, (match[1] ? match[1].length : 0) - (match[2] ? +match[2] : 0));\n}\nvar urlRegexp = /^([a-zA-Z][a-zA-Z0-9\\+\\.\\-]*:)?(?:(\\/\\/)([^\\@]+\\@)?([^\\/\\?\\#\\:]*)(\\:[0-9]+)?)?([^\\?\\#]*)(\\?[^\\#]*)?(\\#.*)?$/;\n/**\r\n * Parses a URL\r\n *\r\n * @ignore Exclude from docs\r\n */\n// TODO test this\nexport function parseUrl(url) {\n  var match = urlRegexp.exec(url);\n  return {\n    protocol: match && match[1] || \"\",\n    separator: match && match[2] || \"\",\n    authority: match && match[3] || \"\",\n    domain: match && match[4] || \"\",\n    port: match && match[5] || \"\",\n    path: match && match[6] || \"\",\n    query: match && match[7] || \"\",\n    hash: match && match[8] || \"\"\n  };\n}\n/**\r\n * Serializes a Url into a string\r\n *\r\n * @ignore Exclude from docs\r\n */\nexport function serializeUrl(url) {\n  return url.protocol + url.separator + url.authority + url.domain + url.port + url.path + url.query + url.hash;\n}\n/**\r\n * Checks whether a Url is relative or not\r\n *\r\n * @ignore Exclude from docs\r\n */\n// TODO is this correct ?\nfunction isRelativeUrl(url) {\n  return url.protocol === \"\" && url.separator === \"\" && url.authority === \"\" && url.domain === \"\" && url.port === \"\";\n}\n/**\r\n * Joins together two URLs, resolving relative URLs correctly\r\n *\r\n * @ignore Exclude from docs\r\n */\n// TODO test this\nexport function joinUrl(left, right) {\n  var parsedLeft = parseUrl(left);\n  var parsedRight = parseUrl(right);\n  if (isRelativeUrl(parsedLeft)) {\n    throw new Error(\"Left URL is not absolute\");\n  }\n  if (isRelativeUrl(parsedRight)) {\n    // TODO is this correct ?\n    if (parsedRight.path !== \"\") {\n      if (parsedRight.path[0] === \"/\") {\n        parsedLeft.path = parsedRight.path;\n        // TODO is this correct ?\n      } else {\n        var leftPath = parsedLeft.path.split(/\\//);\n        var rightPath = parsedRight.path.split(/\\//);\n        // TODO is this correct ?\n        if (leftPath.length === 0) {\n          if (rightPath.length !== 0) {\n            leftPath.push(\"\");\n          }\n        } else if (leftPath.length > 1) {\n          leftPath.pop();\n        }\n        $array.pushAll(leftPath, rightPath);\n        parsedLeft.path = leftPath.join(\"/\");\n        if (parsedLeft.path !== \"\" && parsedLeft.path[0] !== \"/\") {\n          throw new Error(\"URL path must start with /\");\n        }\n      }\n    }\n    // TODO is this correct ?\n    parsedLeft.query = parsedRight.query;\n    parsedLeft.hash = parsedRight.hash;\n    return serializeUrl(parsedLeft);\n  } else {\n    return serializeUrl(parsedRight);\n  }\n}\n/**\r\n * Detects MSIE.\r\n *\r\n * @return Is IE?\r\n */\nexport function isIE() {\n  return !!window.MSInputMethodContext && !!document.documentMode;\n}","map":{"version":3,"names":["Percent","isSafari","$math","$type","$string","$strings","$object","$array","used","value","copyProperties","source","target","each","key","hasValue","stripHash","url","exec","getBaseURI","baseURI","document","loc","location","href","softCopyProperties","copy","isNotEmpty","toString","relativeToValue","percent","full","isNumber","relativeRadiusToValue","subtractIfNegative","valueToRelative","getPixelRatio","ratio","window","devicePixelRatio","camelToDashed","str","replace","toLowerCase","capitalize","arr","split","toUpperCase","join","stringify","JSON","escapeForRgex","splitTextByCharCount","text","maxChars","fullWords","rtl","fullWordFallback","length","res","currentIndex","tmpText","PLACEHOLDER","words","i","word","match","wordLength","reverseString","parts","RegExp","x","concat","push","truncateWithEllipsis","ellipsis","lines","trim","rtrim","ltrim","reverse","unquote","padString","len","char","Array","getFormat","format","STRING","hints","NUMBER","DATE","DURATION","cleanFormat","stripTags","plainText","numberToString","isNaN","Infinity","negative","Math","abs","parsed","getValue","digits","decimals","exponent","zeros","repeat","slice","anyToDate","isDate","date","Date","setMilliseconds","getMilliseconds","num","Number","anyToNumber","getTime","isString","undefined","getYearDay","utc","start","getFullYear","diff","getTimezoneOffset","oneDay","floor","getWeek","_utc","d","UTC","getMonth","getDate","day","getUTCDay","setUTCDate","getUTCDate","firstDay","getUTCFullYear","ceil","getMonthWeek","firstWeek","currentWeek","getDayFromWeek","week","year","weekday","setUTCFullYear","getDay","get12Hours","hours","base","getTimeZone","long","savings","wotz","toLocaleString","wtz","timeZoneName","substr","getWeekYear","random","from","to","fitNumber","min","max","fitNumberRelative","gap","svgPointToSprite","point","sprite","y","sprites","parent","sprite_1","angle","rotation","relativeX","pixelX","ex","relativeY","pixelY","ey","dx","dy","scale","group","cos","sin","pixelPaddingLeft","pixelPaddingTop","spritePointToSvg","spritePointToSprite","toSprite","svgRectToSprite","rect","p1","p2","width","height","spriteRectToSvg","documentPointToSvg","svgContainer","cssScale","bbox","getBoundingClientRect","left","top","e","svgPointToDocument","documentPointToSprite","htmlContainer","svgPoint","spritePointToDocument","element","cs","getComputedStyle","paddingX","parseFloat","paddingLeft","paddingRight","borderX","borderLeftWidth","borderRightWidth","clientWidth","paddingY","paddingTop","paddingBottom","borderY","borderTopWidth","borderBottomWidth","clientHeight","decimalPlaces","number","urlRegexp","parseUrl","protocol","separator","authority","domain","port","path","query","hash","serializeUrl","isRelativeUrl","joinUrl","right","parsedLeft","parsedRight","Error","leftPath","rightPath","pop","pushAll","isIE","MSInputMethodContext","documentMode"],"sources":["../../../../../src/.internal/core/utils/Utils.ts"],"sourcesContent":["/**\r\n * A collection of universal utility functions.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Sprite } from \"../Sprite\";\r\nimport { IPoint } from \"../defs/IPoint\";\r\nimport { IRectangle } from \"../defs/IRectangle\";\r\nimport { Percent } from \"./Percent\";\r\nimport { isSafari } from \"./Browser\";\r\nimport * as $math from \"../utils/Math\";\r\nimport * as $type from \"../utils/Type\";\r\nimport * as $string from \"./String\";\r\nimport * as $strings from \"./Strings\";\r\nimport * as $object from \"./Object\";\r\nimport * as $array from \"./Array\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MISC FUNCTIONS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n\r\n/**\r\n * Marks a value as being used (e.g. because the value has side effects).\r\n */\r\nexport function used<A>(value: A) { }\r\n\r\n/**\r\n * Copies all properties of one object to the other, omitting undefined.\r\n *\r\n * @param fromObject  Source object\r\n * @param toObject    Target object\r\n * @return Updated target object\r\n * @todo Maybe consolidate with utils.copy?\r\n */\r\nexport function copyProperties(source: Object, target: Object): Object {\r\n\t$object.each(source, (key, value) => {\r\n\t\t// only if value is set\r\n\t\tif ($type.hasValue(value)) {\r\n\t\t\t(<any>target)[key] = value;\r\n\t\t}\r\n\t});\r\n\r\n\treturn target;\r\n}\r\n\r\n/**\r\n * Removes target from url\r\n */\r\nexport function stripHash(url: string): string {\r\n\treturn /^[^#]*/.exec(url)[0];\r\n}\r\n\r\nexport function getBaseURI() {\r\n\tlet url = \"#\";\r\n\r\n\t// Needed until https://bugs.webkit.org/show_bug.cgi?id=189499 is fixed\r\n\tif (isSafari()) {\r\n\t\tlet baseURI = document.baseURI;\r\n\t\tif (baseURI) {\r\n\t\t\tbaseURI = stripHash(baseURI);\r\n\t\t\tlet loc = stripHash(location.href);\r\n\t\t\tif (baseURI !== loc) {\r\n\t\t\t\turl = loc + url;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\treturn url;\r\n}\r\n\r\n/**\r\n * Copies all properties of one object to the other, omitting undefined, but only if property in target object doesn't have a value set.\r\n *\r\n * @param fromObject  Source object\r\n * @param toObject    Target object\r\n * @return Updated target object\r\n * @todo Maybe consolidate with utils.copy?\r\n */\r\nexport function softCopyProperties(source: Object, target: Object): Object {\r\n\t$object.each(source, (key, value) => {\r\n\t\t// only if value is set\r\n\t\tif ($type.hasValue(value) && !($type.hasValue((<any>target)[key]))) {\r\n\t\t\t(<any>target)[key] = value;\r\n\t\t}\r\n\t});\r\n\treturn target;\r\n}\r\n\r\n/**\r\n * Copies all properties of one object to the other.\r\n *\r\n * @param source     Source object\r\n * @param recipient  Target object\r\n * @return Updated target object\r\n */\r\nexport function copy(source: Object, target: Object): Object {\r\n\t$object.each(source, (key, value) => {\r\n\t\t(<any>target)[key] = value;\r\n\t});\r\n\treturn target;\r\n}\r\n\r\n/**\r\n * Checks if value is not empty (undefined or zero-length string).\r\n *\r\n * @param value  Value to check\r\n * @return `true` if value is not \"empty\"\r\n */\r\nexport function isNotEmpty(value: $type.Optional<string>): value is string {\r\n\treturn $type.hasValue(value) && (value.toString() !== \"\");\r\n}\r\n\r\n/**\r\n * [relativeToValue description]\r\n *\r\n * @ignore Exclude from docs\r\n * @todo Description\r\n * @param percent  [description]\r\n * @param full     [description]\r\n * @return [description]\r\n */\r\nexport function relativeToValue(percent: $type.Optional<number | Percent>, full: number): number {\r\n\tif ($type.isNumber(percent)) {\r\n\t\treturn percent;\r\n\t} else if (percent != null && $type.isNumber(percent.value) && $type.isNumber(full)) {\r\n\t\treturn full * percent.value;\r\n\r\n\t} else {\r\n\t\treturn 0;\r\n\t}\r\n}\r\n\r\n/**\r\n * [relativeRadiusToValue description]\r\n *\r\n * Differs from relativeToValue so that if a value is negative, it subtracts\r\n * it from full value.\r\n *\r\n * @ignore Exclude from docs\r\n * @todo Description\r\n * @param percent             [description]\r\n * @param full                [description]\r\n * @param subtractIfNegative  [description]\r\n * @return [description]\r\n */\r\nexport function relativeRadiusToValue(percent: $type.Optional<number | Percent>, full: number, subtractIfNegative?: boolean): $type.Optional<number> {\r\n\tlet value: $type.Optional<number>;\r\n\r\n\tif ($type.isNumber(percent)) {\r\n\t\tvalue = percent;\r\n\r\n\t\tif (value < 0) {\r\n\t\t\tif (subtractIfNegative) {\r\n\t\t\t\tvalue = full + value;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tvalue = full - value;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t} else if (percent != null && $type.isNumber(percent.value)) {\r\n\t\tvalue = full * percent.value;\r\n\t}\r\n\r\n\treturn value;\r\n}\r\n\r\n/**\r\n * [valueToRelative description]\r\n *\r\n * @ignore Exclude from docs\r\n * @todo Description\r\n * @param value  [description]\r\n * @param full   [description]\r\n * @return [description]\r\n */\r\nexport function valueToRelative(value: number | Percent, full: number): number {\r\n\tif (value instanceof Percent) {\r\n\t\treturn value.value;\r\n\t}\r\n\telse {\r\n\t\treturn value / full;\r\n\t}\r\n}\r\n\r\n/**\r\n * Returns pixel ratio of the current screen (used on retina displays).\r\n *\r\n * @return Pixel ratio\r\n */\r\nexport function getPixelRatio(): number {\r\n\tlet ratio = window.devicePixelRatio || 1;\r\n\treturn ratio;\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * STRING FORMATTING FUNCTIONS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Converts camelCased text to dashed version:\r\n * (\"thisIsString\" > \"this-is-string\")\r\n *\r\n * @param str  Input\r\n * @return Output\r\n */\r\nexport function camelToDashed(str: string): string {\r\n\treturn str.replace(/\\W+/g, '-').replace(/([a-z\\d])([A-Z])/g, '$1-$2').toLowerCase();\r\n}\r\n\r\n/**\r\n * Converts tring to uppercase.\r\n *\r\n * @param str  String to convert\r\n * @return uppercased string\r\n * @todo Maybe make it better\r\n */\r\nexport function capitalize(str: string): string {\r\n\tlet arr: string[] = str.split(\"\");\r\n\tarr[0] = arr[0].toUpperCase();\r\n\treturn arr.join(\"\");\r\n}\r\n\r\n/**\r\n * Converts any value into its string representation.\r\n *\r\n * @param value  Value\r\n * @return String represantation of the value\r\n */\r\nexport function stringify(value: any): string {\r\n\treturn JSON.stringify(value);\r\n}\r\n\r\n/**\r\n * Escapes string so it can safely be used in a Regex.\r\n *\r\n * @param value  Unsescaped string\r\n * @return Escaped string\r\n */\r\nexport function escapeForRgex(value: string): string {\r\n\treturn value.replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g, '\\\\$&');\r\n}\r\n\r\n/**\r\n * Splits the text into multiple lines, respecting maximum character count.\r\n * Prioretizes splitting on spaces and punctuation. Falls back on splitting\r\n * mid-word if there's no other option.\r\n *\r\n * @param text      Text\r\n * @param maxChars  Maximum number of characters per line\r\n * @return An array of split text\r\n */\r\nexport function splitTextByCharCount(text: string, maxChars: number, fullWords?: boolean, rtl?: boolean, fullWordFallback?: boolean): string[] {\r\n\r\n\t// Maybe the text fits?\r\n\tif (text.length <= maxChars) {\r\n\t\treturn [text];\r\n\t}\r\n\r\n\t// Init result\r\n\tlet res: string[] = [];\r\n\r\n\r\n\t// Split by words or by charts\r\n\tif (fullWords) {\r\n\r\n\t\t// Split by words first\r\n\r\n\t\t// Split by spacing\r\n\t\tlet currentIndex: number = -1;\r\n\t\t//let tmpText = text.replace(/([,;:!?\\\\\\/\\.]+[\\s]+|[\\s])/g, $strings.PLACEHOLDER + \"$1\" + $strings.PLACEHOLDER);\r\n\t\tlet tmpText = text.replace(/([,;:!?\\\\\\/]+|[\\s])/g, $strings.PLACEHOLDER + \"$1\" + $strings.PLACEHOLDER);\r\n\t\tlet words = tmpText.split($strings.PLACEHOLDER);\r\n\r\n\t\t// Glue end-of-word punctuation to the word itself\r\n\t\tfor (let i = 1; i < words.length; i++) {\r\n\t\t\tlet word = words[i];\r\n\t\t\tif ((word == \".\" || word == \",\") && words[i - 1].match(/[\\w]+$/)) {\r\n\t\t\t\twords[i - 1] += word;\r\n\t\t\t\twords[i] = \"\";\r\n\t\t\t}\r\n\t\t}\r\n\r\n\r\n\t\t// Process each word\r\n\t\tfor (let i = 0; i < words.length; i++) {\r\n\r\n\t\t\t// Get word and symbol count\r\n\t\t\tlet word: string = words[i];\r\n\t\t\tlet wordLength: number = word.length;\r\n\r\n\t\t\t// Ignore empty words\r\n\t\t\tif (wordLength === 0) {\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\r\n\t\t\t// Check word length\r\n\t\t\tif ((wordLength > maxChars) && (fullWords !== true || fullWordFallback != false)) {\r\n\t\t\t//if (wordLength > maxChars) {\r\n\t\t\t\t// A single word is longer than allowed symbol count\r\n\t\t\t\t// Break it up\r\n\t\t\t\tif (rtl) {\r\n\t\t\t\t\tword = reverseString(word);\r\n\t\t\t\t}\r\n\t\t\t\tlet parts: RegExpMatchArray | null = word.match(new RegExp(\".{1,\" + maxChars + \"}\", \"g\"));\r\n\r\n\t\t\t\t// TODO is this correct ?\r\n\t\t\t\tif (parts) {\r\n\t\t\t\t\tif (rtl) {\r\n\t\t\t\t\t\tfor (let x = 0; x < parts.length; x++) {\r\n\t\t\t\t\t\t\tparts[x] = reverseString(parts[x]);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t//parts.reverse();\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tres = res.concat(parts);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\r\n\t\t\t\t// Init current line\r\n\t\t\t\tif (currentIndex === -1) {\r\n\t\t\t\t\tres.push(\"\");\r\n\t\t\t\t\tcurrentIndex = 0;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Check if we need to break into another line\r\n\t\t\t\tif (((res[currentIndex].length + wordLength + 1) > maxChars) && res[currentIndex] !== \"\") {\r\n\t\t\t\t\tres.push(\"\");\r\n\t\t\t\t\tcurrentIndex++;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Add word\r\n\t\t\t\tres[currentIndex] += word;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// Update index\r\n\t\t\tcurrentIndex = res.length - 1;\r\n\t\t}\r\n\t}\r\n\telse {\r\n\r\n\t\t// Splitting by anywhere (living la vida facil)\r\n\t\tlet parts: RegExpMatchArray | null = text.match(new RegExp(\".{1,\" + maxChars + \"}\", \"g\"));\r\n\r\n\t\tif (parts) {\r\n\t\t\tif (rtl) {\r\n\t\t\t\tfor (let x = 0; x < parts.length; x++) {\r\n\t\t\t\t\tif (!rtl) {\r\n\t\t\t\t\t\tparts[x] = reverseString(parts[x]);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tres = parts;\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t// Do we have only one word that does not fit?\r\n\t// Since fullWords is set and we can't split the word, we end up with empty\r\n\t// set.\r\n\tif (res.length == 1 && fullWords && fullWordFallback && (res[0].length > maxChars)) {\r\n\t\tres = [];\r\n\t}\r\n\r\n\treturn res;\r\n}\r\n\r\n/**\r\n * Truncates the text to certain character count.\r\n *\r\n * Will add ellipsis if the string is truncated. Optionally, can truncate on\r\n * full words only.\r\n *\r\n * For RTL support, pass in the fifth parameter as `true`.\r\n *\r\n * @param text       Input text\r\n * @param maxChars   Maximum character count of output\r\n * @param ellipsis   Ellipsis string, i.e. \"...\"\r\n * @param fullWords  If `true`, will not break mid-word, unless there's a single word and it does not with into `maxChars`\r\n * @param rtl        Is this an RTL text?\r\n * @return Truncated text\r\n */\r\nexport function truncateWithEllipsis(text: string, maxChars: number, ellipsis: string, fullWords?: boolean, rtl?: boolean): string {\r\n\r\n\tif (text.length <= maxChars) {\r\n\t\treturn text;\r\n\t}\r\n\r\n\t// Calc max chars\r\n\tmaxChars -= ellipsis.length;\r\n\tif (maxChars < 1) {\r\n\t\tmaxChars = 1;\r\n\t\t//ellipsis = \"\";\r\n\t}\r\n\r\n\t// Get lines\r\n\tlet lines = splitTextByCharCount(text, maxChars, fullWords, rtl);\r\n\r\n\t// Use first line\r\n\treturn (lines[0] || \"\") + ellipsis;\r\n}\r\n\r\n/**\r\n * Removes whitespace from beginning and end of the string.\r\n *\r\n * @param str  Input\r\n * @return Output\r\n */\r\nexport function trim(str: string): string {\r\n\treturn str.replace(/^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g, \"\");\r\n};\r\n\r\n/**\r\n * Removes whitespace from end of the string.\r\n *\r\n * @param str  Input\r\n * @return Output\r\n */\r\nexport function rtrim(str: string): string {\r\n\treturn str.replace(/[\\s\\uFEFF\\xA0]+$/g, \"\");\r\n};\r\n\r\n/**\r\n * Removes whitespace from beginning of the string.\r\n *\r\n * @param str  Input\r\n * @return Output\r\n */\r\nexport function ltrim(str: string): string {\r\n\treturn str.replace(/^[\\s\\uFEFF\\xA0]+/g, \"\");\r\n};\r\n\r\n/**\r\n * Reverses string.\r\n *\r\n * @param str  Input\r\n * @return Output\r\n */\r\nexport function reverseString(str: string): string {\r\n\treturn str.split(\"\").reverse().join(\"\");\r\n}\r\n\r\n/**\r\n * Removes quotes from the string.\r\n *\r\n * @param str  Input\r\n * @return Output\r\n */\r\nexport function unquote(str: string): string {\r\n\tlet res = str.trim();\r\n\tres = str.replace(/^'(.*)'$/, \"$1\");\r\n\tif (res == str) {\r\n\t\tres = str.replace(/^\"(.*)\"$/, \"$1\");\r\n\t}\r\n\treturn res;\r\n}\r\n\r\n/**\r\n * Pads a string with additional characters to certain length.\r\n *\r\n * @param value  A numeric value\r\n * @param len    Result string length in characters\r\n * @param char   A character to use for padding\r\n * @return Padded value as string\r\n */\r\nexport function padString(value: any, len: number = 0, char: string = \"0\"): string {\r\n\tif (typeof value !== \"string\") {\r\n\t\tvalue = value.toString();\r\n\t}\r\n\r\n\treturn len > value.length ? Array(len - value.length + 1).join(char) + value : value;\r\n}\r\n\r\n/**\r\n * Tries to determine format type.\r\n *\r\n * @ignore Exclude from docs\r\n * @param format  Format string\r\n * @return Format type (\"string\" | \"number\" | \"date\" | \"duration\")\r\n */\r\nexport function getFormat(format: string): string {\r\n\r\n\t// Undefined?\r\n\tif (typeof format === \"undefined\") {\r\n\t\treturn $strings.STRING;\r\n\t}\r\n\r\n\t// Cleanup and lowercase format\r\n\tformat = format.toLowerCase().replace(/^\\[[^\\]]*\\]/, \"\");\r\n\r\n\t// Remove style tags\r\n\tformat = format.replace(/\\[[^\\]]+\\]/, \"\");\r\n\r\n\t// Trim\r\n\tformat = format.trim();\r\n\r\n\t// Check for any explicit format hints (i.e. /Date)\r\n\tlet hints: RegExpMatchArray | null = format.match(/\\/(date|number|duration)$/);\r\n\r\n\tif (hints) {\r\n\t\treturn hints[1];\r\n\t}\r\n\r\n\t// Check for explicit hints\r\n\tif (format === $strings.NUMBER) {\r\n\t\treturn $strings.NUMBER;\r\n\t}\r\n\r\n\tif (format === $strings.DATE) {\r\n\t\treturn $strings.DATE;\r\n\t}\r\n\r\n\tif (format === $strings.DURATION) {\r\n\t\treturn $strings.DURATION;\r\n\t}\r\n\r\n\t// Detect number formatting symbols\r\n\tif (format.match(/[#0]/)) {\r\n\t\treturn $strings.NUMBER;\r\n\t}\r\n\r\n\t// Detect date formatting symbols\r\n\tif (format.match(/[ymwdhnsqaxkzgtei]/)) {\r\n\t\treturn $strings.DATE;\r\n\t}\r\n\r\n\t// Nothing? Let's display as string\r\n\treturn $strings.STRING;\r\n}\r\n\r\n/**\r\n * Cleans up format:\r\n * * Strips out formatter hints\r\n *\r\n * @ignore Exclude from docs\r\n * @param format  Format\r\n * @return Cleaned format\r\n */\r\nexport function cleanFormat(format: string): string {\r\n\treturn format.replace(/\\/(date|number|duration)$/i, \"\");\r\n}\r\n\r\n/**\r\n * Strips all tags from the string.\r\n *\r\n * @param text  Source string\r\n * @return String without tags\r\n */\r\nexport function stripTags(text: string): string {\r\n\treturn text ? text.replace(/<[^>]*>/g, \"\") : text;\r\n}\r\n\r\n/**\r\n * Removes new lines and tags from a string.\r\n *\r\n * @param text  String to conver\r\n * @return Converted string\r\n */\r\nexport function plainText(text: string): string {\r\n\treturn text ? stripTags((\"\" + text).replace(/[\\n\\r]+/g, \". \")) : text;\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * TYPE CONVERSION FUNCTIONS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Converts numeric value into string. Deals with large or small numbers that\r\n * would otherwise use exponents.\r\n *\r\n * @param value  Numeric value\r\n * @return Numeric value as string\r\n */\r\nexport function numberToString(value: number): string {\r\n\t// TODO handle Infinity and -Infinity\r\n\tif ($type.isNaN(value)) {\r\n\t\treturn \"NaN\";\r\n\t}\r\n\r\n\tif (value === Infinity) {\r\n\t\treturn \"Infinity\";\r\n\t}\r\n\r\n\tif (value === -Infinity) {\r\n\t\treturn \"-Infinity\";\r\n\t}\r\n\r\n\t// Negative 0\r\n\tif ((value === 0) && (1 / value === -Infinity)) {\r\n\t\treturn \"-0\";\r\n\t}\r\n\r\n\t// Preserve negative and deal with absoute values\r\n\tlet negative = value < 0;\r\n\r\n\tvalue = Math.abs(value);\r\n\r\n\t// TODO test this\r\n\tlet parsed = $type.getValue(/^([0-9]+)(?:\\.([0-9]+))?(?:e[\\+\\-]([0-9]+))?$/.exec(\"\" + value));\r\n\tlet digits = parsed[1];\r\n\tlet decimals = parsed[2] || \"\";\r\n\r\n\tlet res: string;\r\n\r\n\t// Leave the nummber as it is if it does not use exponents\r\n\tif (parsed[3] == null) {\r\n\t\tres = (decimals === \"\" ? digits : digits + \".\" + decimals);\r\n\r\n\t} else {\r\n\t\tlet exponent = +parsed[3];\r\n\r\n\t\t// Deal with decimals\r\n\t\tif (value < 1) {\r\n\t\t\tlet zeros = exponent - 1;\r\n\r\n\t\t\tres = \"0.\" + $string.repeat(\"0\", zeros) + digits + decimals;\r\n\r\n\t\t\t// Deal with integers\r\n\t\t} else {\r\n\t\t\tlet zeros = exponent - decimals.length;\r\n\r\n\t\t\tif (zeros === 0) {\r\n\t\t\t\tres = digits + decimals;\r\n\r\n\t\t\t} else if (zeros < 0) {\r\n\t\t\t\tres = digits + decimals.slice(0, zeros) + \".\" + decimals.slice(zeros);\r\n\r\n\t\t\t} else {\r\n\t\t\t\tres = digits + decimals + $string.repeat(\"0\", zeros);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\treturn negative ? \"-\" + res : res;\r\n}\r\n\r\n/**\r\n * Converts anything to Date object.\r\n *\r\n * @param value  A value of any type\r\n * @return Date object representing a value\r\n */\r\nexport function anyToDate(value: Date | number | string): Date {\r\n\tif ($type.isDate(value)) {\r\n\t\t// TODO maybe don't create a new Date ?\r\n\t\tconst date = new Date(value);\r\n\t\t// This is needed because IE does not copy over milliseconds\r\n\t\tdate.setMilliseconds(value.getMilliseconds());\r\n\t\treturn date;\r\n\t}\r\n\r\n\telse if ($type.isNumber(value)) {\r\n\t\treturn new Date(value);\r\n\t}\r\n\r\n\telse {\r\n\t\t// Try converting to number (assuming timestamp)\r\n\t\tlet num = Number(value);\r\n\r\n\t\tif (!$type.isNumber(num)) {\r\n\t\t\treturn new Date(value);\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn new Date(num);\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * Tries converting any value to a number.\r\n *\r\n * @param value  Source value\r\n * @return Number\r\n */\r\nexport function anyToNumber(value: Date | number | string): $type.Optional<number> {\r\n\tif ($type.isDate(value)) {\r\n\t\treturn value.getTime();\r\n\t}\r\n\r\n\telse if ($type.isNumber(value)) {\r\n\t\treturn value;\r\n\t}\r\n\r\n\telse if ($type.isString(value)) {\r\n\t\t// Try converting to number (assuming timestamp)\r\n\t\tlet num = Number(value);\r\n\r\n\t\tif (!$type.isNumber(num)) {\r\n\t\t\t// Failing\r\n\t\t\treturn undefined;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn num;\r\n\t\t}\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATE-RELATED FUNCTIONS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Returns a year day.\r\n *\r\n * @param date  Date\r\n * @param utc   Assume UTC dates?\r\n * @return Year day\r\n * @todo Account for UTC\r\n */\r\nexport function getYearDay(date: Date, utc: boolean = false): number {\r\n\tconst start = new Date(date.getFullYear(), 0, 0);\r\n\tconst diff = (date.getTime() - start.getTime()) + ((start.getTimezoneOffset() - date.getTimezoneOffset()) * 60 * 1000);\r\n\tconst oneDay = 1000 * 60 * 60 * 24;\r\n\treturn Math.floor(diff / oneDay);\r\n}\r\n\r\n/**\r\n * Returns week number for a given date.\r\n *\r\n * @param date  Date\r\n * @param utc   Assume UTC dates?\r\n * @return Week number\r\n * @todo Account for UTC\r\n */\r\nexport function getWeek(date: Date, _utc: boolean = false): number {\r\n\tconst d = new Date(Date.UTC(date.getFullYear(), date.getMonth(), date.getDate()));\r\n\tconst day = d.getUTCDay() || 7;\r\n\td.setUTCDate(d.getUTCDate() + 4 - day);\r\n\tconst firstDay = new Date(Date.UTC(d.getUTCFullYear(), 0, 1));\r\n\treturn Math.ceil((((d.getTime() - firstDay.getTime()) / 86400000) + 1) / 7);\r\n}\r\n\r\n/**\r\n * Returns a week number in the month.\r\n *\r\n * @param date  Source Date\r\n * @param utc   Assume UTC dates?\r\n * @return Week number in month\r\n */\r\nexport function getMonthWeek(date: Date, utc: boolean = false): number {\r\n\tconst firstWeek = getWeek(new Date(date.getFullYear(), date.getMonth(), 1), utc);\r\n\tlet currentWeek = getWeek(date, utc);\r\n\tif (currentWeek == 1) {\r\n\t\tcurrentWeek = 53;\r\n\t}\r\n\treturn currentWeek - firstWeek + 1;\r\n}\r\n\r\n/**\r\n * Returns a year day out of the given week number.\r\n *\r\n * @param week     Week\r\n * @param year     Year\r\n * @param weekday  Weekday\r\n * @param utc      Assume UTC dates\r\n * @return Day in a year\r\n */\r\nexport function getDayFromWeek(week: number, year: number, weekday: number = 1, utc: boolean = false): number {\r\n\tlet date = new Date(year, 0, 4, 0, 0, 0, 0);\r\n\tif (utc) {\r\n\t\tdate.setUTCFullYear(year);\r\n\t}\r\n\tlet day = week * 7 + weekday - ((date.getDay() || 7) + 3);\r\n\treturn day;\r\n}\r\n\r\n/**\r\n * Returns 12-hour representation out of the 24-hour hours.\r\n *\r\n * @param hours  24-hour number\r\n * @return 12-hour number\r\n */\r\nexport function get12Hours(hours: number, base?: number): number {\r\n\tif (hours > 12) {\r\n\t\thours -= 12;\r\n\t}\r\n\telse if (hours === 0) {\r\n\t\thours = 12;\r\n\t}\r\n\treturn $type.hasValue(base) ? hours + (base - 1) : hours;\r\n}\r\n\r\n/**\r\n * Returns a string name of the tome zone.\r\n *\r\n * @param date     Date object\r\n * @param long     Should return long (\"Pacific Standard Time\") or short abbreviation (\"PST\")\r\n * @param savings  Include information if it's in daylight savings mode\r\n * @param utc      Assume UTC dates\r\n * @return Time zone name\r\n */\r\nexport function getTimeZone(date: Date, long: boolean = false, savings: boolean = false, utc: boolean = false): string {\r\n\tif (utc) {\r\n\t\treturn long ? \"Coordinated Universal Time\" : \"UTC\";\r\n\t}\r\n\tlet wotz = date.toLocaleString(\"UTC\");\r\n\tlet wtz = date.toLocaleString(\"UTC\", { timeZoneName: long ? \"long\" : \"short\" }).substr(wotz.length);\r\n\t//wtz = wtz.replace(/[+-]+[0-9]+$/, \"\");\r\n\tif (savings === false) {\r\n\t\twtz = wtz.replace(/ (standard|daylight|summer|winter) /i, \" \");\r\n\t}\r\n\treturn wtz;\r\n}\r\n\r\n/**\r\n * Returns a \"week year\" of the given date.\r\n *\r\n * @param date  Date\r\n * @param utc   Assume UTC dates?\r\n * @return Year of week\r\n */\r\nexport function getWeekYear(date: Date, _utc: boolean = false): number {\r\n\tconst d = new Date(Date.UTC(date.getFullYear(), date.getMonth(), date.getDate()));\r\n\tconst day = d.getUTCDay() || 7;\r\n\td.setUTCDate(d.getUTCDate() + 4 - day);\r\n\tconst firstDay = new Date(Date.UTC(d.getUTCFullYear(), 0, 1));\r\n\treturn firstDay.getFullYear();\r\n}\r\n\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * NUMBER-RELATED FUNCTIONS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Returns a random number between `from` and `to`.\r\n *\r\n * @param from  From number\r\n * @param to    To number\r\n * @return Random number\r\n */\r\nexport function random(from: number, to: number): number {\r\n\treturn Math.floor(Math.random() * (to - from)) + from;\r\n}\r\n\r\n/**\r\n * Fits the number into specific `min` and `max` bounds.\r\n *\r\n * @param value  Input value\r\n * @param min    Minimum value\r\n * @param max    Maximum value\r\n * @return Possibly adjusted value\r\n */\r\nexport function fitNumber(value: number, min: number, max: number): number {\r\n\tif (value > max) {\r\n\t\treturn max;\r\n\t}\r\n\telse if (value < min) {\r\n\t\treturn min;\r\n\t}\r\n\treturn value;\r\n}\r\n\r\n/**\r\n * Fits the number into specific `min` and `max` bounds.\r\n *\r\n * If the value is does not fit withing specified range, it \"wraps\" around the\r\n * values.\r\n *\r\n * For example, if we have input value 10 with min set at 1 and max set at 8,\r\n * the value will not fit. The remainder that does not fit (2) will be added\r\n * to `min`, resulting in 3.\r\n *\r\n * The output of regular `fitNumber()` would return 8 instead.\r\n *\r\n * @param value  Input value\r\n * @param min    Minimum value\r\n * @param max    Maximum value\r\n * @return Possibly adjusted value\r\n */\r\nexport function fitNumberRelative(value: number, min: number, max: number): number {\r\n\tlet gap = max - min;\r\n\tif (value > max) {\r\n\t\tvalue = min + (value - gap * Math.floor(value / gap));\r\n\t}\r\n\telse if (value < min) {\r\n\t\tvalue = min + (value - gap * Math.floor(value / gap));\r\n\t}\r\n\treturn value;\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * SPRITE-RELATED FUNCTIONS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Converts SVG element coordinates to coordinates within specific [[Sprite]].\r\n *\r\n * @param point   SVG coordinates\r\n * @param sprite  Sprite\r\n * @return Sprite coordinates\r\n */\r\nexport function svgPointToSprite(point: IPoint, sprite: Sprite): IPoint {\r\n\tlet x: number = point.x;\r\n\tlet y: number = point.y;\r\n\tlet sprites: Sprite[] = [];\r\n\tif (sprite) {\r\n\t\twhile ($type.hasValue(sprite.parent)) {\r\n\t\t\tsprites.push(sprite);\r\n\t\t\tsprite = sprite.parent as any;\r\n\t\t}\r\n\r\n\t\tsprites.reverse();\r\n\r\n\t\tfor (let i = 0; i < sprites.length; i++) {\r\n\t\t\tlet sprite: Sprite = sprites[i];\r\n\t\t\tlet angle: number = sprite.rotation;\r\n\r\n\t\t\tlet relativeX = x - sprite.pixelX - sprite.ex;\r\n\t\t\tlet relativeY = y - sprite.pixelY - sprite.ey;\r\n\r\n\t\t\tif (sprite.dx) {\r\n\t\t\t\tx -= sprite.dx;\r\n\t\t\t}\r\n\t\t\tif (sprite.dy) {\r\n\t\t\t\ty -= sprite.dy;\r\n\t\t\t}\r\n\r\n\t\t\tlet scale = sprite.scale;\r\n\r\n\t\t\t// this handles nonscaling\r\n\t\t\tif(sprite.group){\r\n\t\t\t\tscale = sprite.group.scale; \r\n\t\t\t}\r\n\r\n\t\t\tx = ($math.cos(-angle) * relativeX - $math.sin(-angle) * relativeY) / scale - sprite.pixelPaddingLeft;\r\n\t\t\ty = ($math.cos(-angle) * relativeY + $math.sin(-angle) * relativeX) / scale - sprite.pixelPaddingTop;\r\n\t\t}\r\n\t}\r\n\r\n\treturn { x: x, y: y };\r\n}\r\n\r\n/**\r\n * Converts coordinates within [[Sprite]] to coordinates relative to the whole\r\n * SVG element.\r\n *\r\n * @param point   Sprite coordinates\r\n * @param sprite  Sprite\r\n * @return SVG coordinates\r\n */\r\nexport function spritePointToSvg(point: IPoint, sprite: Sprite): IPoint {\r\n\tlet x: number = point.x;\r\n\tlet y: number = point.y;\r\n\r\n\tif (sprite) {\r\n\t\twhile ($type.hasValue(sprite.parent)) {\r\n\t\t\tlet angle: number = sprite.rotation;\r\n\r\n\t\t\tx += sprite.pixelPaddingLeft + sprite.ex;\r\n\t\t\ty += sprite.pixelPaddingTop + sprite.ey;\r\n\r\n\t\t\tlet scale = sprite.scale;\r\n\r\n\t\t\t// this handles nonscaling\r\n\t\t\tif(sprite.group){\r\n\t\t\t\tscale = sprite.group.scale; \r\n\t\t\t}\r\n\r\n\t\t\tlet relativeX = sprite.pixelX + ((x * $math.cos(angle) - y * $math.sin(angle))) * scale;\r\n\t\t\tlet relativeY = sprite.pixelY + ((x * $math.sin(angle) + y * $math.cos(angle))) * scale;\r\n\r\n\t\t\tif (sprite.dx) {\r\n\t\t\t\trelativeX += sprite.dx;\r\n\t\t\t}\r\n\t\t\tif (sprite.dy) {\r\n\t\t\t\trelativeY += sprite.dy;\r\n\t\t\t}\r\n\r\n\t\t\tx = relativeX;\r\n\t\t\ty = relativeY;\r\n\r\n\t\t\tsprite = sprite.parent as any;\r\n\t\t}\r\n\t}\r\n\treturn { x: x, y: y };\r\n}\r\n\r\n\r\n/**\r\n * Converts coordinates of one sprite to another.\r\n *\r\n * @param point   Sprite coordinates\r\n * @param sprite  Sprite\r\n * @param toSprite  Sprite\r\n * @return converted coordinates\r\n */\r\nexport function spritePointToSprite(point: IPoint, sprite: Sprite, toSprite: Sprite): IPoint {\r\n\treturn svgPointToSprite(spritePointToSvg(point, sprite), toSprite);\r\n}\r\n\r\n\r\n/**\r\n * Converts a rectangle expressed in SVG element coordinates to coordinates\r\n * within specific [[Sprite]].\r\n *\r\n * @param rect    SVG rectangle\r\n * @param sprite  Sprite\r\n * @return Sprite rectangle\r\n */\r\nexport function svgRectToSprite(rect: IRectangle, sprite: Sprite): IRectangle {\r\n\tlet p1: IPoint = svgPointToSprite(rect, sprite);\r\n\tlet p2: IPoint = svgPointToSprite({ x: rect.x + rect.width, y: rect.y + rect.height }, sprite);\r\n\treturn { x: p1.x, y: p1.y, width: p2.x - p1.x, height: p2.y - p1.y };\r\n}\r\n\r\n/**\r\n * Converts a rectangle expressed in [[Sprite]] coordinates to SVG coordinates.\r\n *\r\n * @param rect    Sprite rectangle\r\n * @param sprite  Sprite\r\n * @return SVG rectangle\r\n */\r\nexport function spriteRectToSvg(rect: IRectangle, sprite: Sprite): IRectangle {\r\n\tlet p1: IPoint = spritePointToSvg(rect, sprite);\r\n\tlet p2: IPoint = spritePointToSvg({ x: rect.x + rect.width, y: rect.y + rect.height }, sprite);\r\n\treturn { x: p1.x, y: p1.y, width: p2.x - p1.x, height: p2.y - p1.y };\r\n}\r\n\r\n/**\r\n * Converts global document-wide coordinates to coordinates within SVG element.\r\n *\r\n * @param point         Global coordinates\r\n * @param svgContainer  SVG element\r\n * @return SVG coordinates\r\n */\r\nexport function documentPointToSvg(point: IPoint, svgContainer: HTMLElement, cssScale?: number): IPoint {\r\n\ttry {\r\n\t\tlet bbox = svgContainer.getBoundingClientRect();\r\n\r\n\t\tif (!$type.isNumber(cssScale)) {\r\n\t\t\tcssScale = 1;\r\n\t\t}\r\n\r\n\t\treturn {\r\n\t\t\t\"x\": (point.x - bbox.left) / cssScale,\r\n\t\t\t\"y\": (point.y - bbox.top) / cssScale\r\n\t\t};\r\n\t}\r\n\tcatch (e) {\r\n\t\treturn point;\r\n\t}\r\n}\r\n\r\n/**\r\n * Converts SVG coordinates to global document-wide coordinates.\r\n *\r\n * @param point         SVG coordinates\r\n * @param svgContainer  SVG element\r\n * @return Global coordinates\r\n */\r\nexport function svgPointToDocument(point: IPoint, svgContainer: HTMLElement): IPoint {\r\n\ttry {\r\n\t\tlet bbox = svgContainer.getBoundingClientRect();\r\n\r\n\t\treturn {\r\n\t\t\t\"x\": point.x + bbox.left,\r\n\t\t\t\"y\": point.y + bbox.top\r\n\t\t};\r\n\t}\r\n\tcatch (e) {\r\n\t\treturn point;\r\n\t}\r\n}\r\n\r\n/**\r\n * Converts document-wide global coordinates to coordinates within specific\r\n * [[Sprite]].\r\n *\r\n * @param point   Global coordinates\r\n * @param sprite  Sprite\r\n * @return Sprite coordinates\r\n */\r\nexport function documentPointToSprite(point: IPoint, sprite: Sprite): IPoint {\r\n\tif (sprite && sprite.htmlContainer) {\r\n\t\tlet svgPoint: IPoint = documentPointToSvg(point, $type.getValue(sprite.htmlContainer), sprite.svgContainer.cssScale);\r\n\t\treturn svgPointToSprite(svgPoint, sprite);\r\n\t}\r\n\telse {\r\n\t\treturn point;\r\n\t}\r\n}\r\n\r\n/**\r\n * Converts coordinates within [[Sprite]] to global document coordinates.\r\n *\r\n * @param point   Sprite coordinates\r\n * @param sprite  Sprite\r\n * @return Global coordinates\r\n */\r\nexport function spritePointToDocument(point: IPoint, sprite: Sprite): IPoint {\r\n\tif (sprite && sprite.htmlContainer) {\r\n\t\tlet svgPoint: IPoint = spritePointToSvg(point, sprite);\r\n\t\treturn svgPointToDocument(svgPoint, $type.getValue(sprite.htmlContainer));\r\n\t}\r\n\telse {\r\n\t\treturn point;\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DEPRECATED FUNCTIONS\r\n * @todo Review and remove\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Returns element's width.\r\n *\r\n * @ignore Exclude from docs\r\n * @param element  Element\r\n * @return Width (px)\r\n * @deprecated Not used anywhere\r\n */\r\nexport function width(element: HTMLElement): number {\r\n\r\n\tlet cs = getComputedStyle(element);\r\n\r\n\tlet paddingX = parseFloat(cs.paddingLeft) + parseFloat(cs.paddingRight);\r\n\tlet borderX = parseFloat(cs.borderLeftWidth) + parseFloat(cs.borderRightWidth);\r\n\r\n\treturn element.clientWidth - paddingX - borderX;\r\n}\r\n\r\n/**\r\n * Returns element's height.\r\n *\r\n * @ignore Exclude from docs\r\n * @param element  Element\r\n * @return Height (px)\r\n * @deprecated Not used anywhere\r\n */\r\nexport function height(element: HTMLElement): number {\r\n\r\n\tlet cs = getComputedStyle(element);\r\n\r\n\tlet paddingY = parseFloat(cs.paddingTop) + parseFloat(cs.paddingBottom);\r\n\tlet borderY = parseFloat(cs.borderTopWidth) + parseFloat(cs.borderBottomWidth);\r\n\r\n\treturn element.clientHeight - paddingY - borderY;\r\n}\r\n\r\n/**\r\n * Returns number of decimals\r\n *\r\n * @ignore Exclude from docs\r\n * @param number  Input number\r\n * @return Number of decimals\r\n */\r\nexport function decimalPlaces(number: number): number {\r\n\tlet match = ('' + number).match(/(?:\\.(\\d+))?(?:[eE]([+-]?\\d+))?$/);\r\n\tif (!match) { return 0; }\r\n\treturn Math.max(0, (match[1] ? match[1].length : 0) - (match[2] ? +match[2] : 0));\r\n}\r\n\r\n\r\n/**\r\n * A parsed URL\r\n *\r\n * @ignore Exclude from docs\r\n */\r\nexport interface Url {\r\n\tprotocol: string;\r\n\tseparator: string;\r\n\tauthority: string;\r\n\tdomain: string;\r\n\tport: string;\r\n\tpath: string;\r\n\tquery: string;\r\n\thash: string;\r\n}\r\n\r\nconst urlRegexp = /^([a-zA-Z][a-zA-Z0-9\\+\\.\\-]*:)?(?:(\\/\\/)([^\\@]+\\@)?([^\\/\\?\\#\\:]*)(\\:[0-9]+)?)?([^\\?\\#]*)(\\?[^\\#]*)?(\\#.*)?$/;\r\n\r\n/**\r\n * Parses a URL\r\n *\r\n * @ignore Exclude from docs\r\n */\r\n// TODO test this\r\nexport function parseUrl(url: string): Url {\r\n\tconst match = urlRegexp.exec(url);\r\n\r\n\treturn {\r\n\t\tprotocol: (match && match[1]) || \"\",\r\n\t\tseparator: (match && match[2]) || \"\",\r\n\t\tauthority: (match && match[3]) || \"\",\r\n\t\tdomain: (match && match[4]) || \"\",\r\n\t\tport: (match && match[5]) || \"\",\r\n\t\tpath: (match && match[6]) || \"\",\r\n\t\tquery: (match && match[7]) || \"\",\r\n\t\thash: (match && match[8]) || \"\"\r\n\t};\r\n}\r\n\r\n/**\r\n * Serializes a Url into a string\r\n *\r\n * @ignore Exclude from docs\r\n */\r\nexport function serializeUrl(url: Url): string {\r\n\treturn url.protocol + url.separator + url.authority + url.domain + url.port + url.path + url.query + url.hash;\r\n}\r\n\r\n/**\r\n * Checks whether a Url is relative or not\r\n *\r\n * @ignore Exclude from docs\r\n */\r\n// TODO is this correct ?\r\nfunction isRelativeUrl(url: Url): boolean {\r\n\treturn url.protocol === \"\" &&\r\n\t\turl.separator === \"\" &&\r\n\t\turl.authority === \"\" &&\r\n\t\turl.domain === \"\" &&\r\n\t\turl.port === \"\";\r\n}\r\n\r\n/**\r\n * Joins together two URLs, resolving relative URLs correctly\r\n *\r\n * @ignore Exclude from docs\r\n */\r\n// TODO test this\r\nexport function joinUrl(left: string, right: string): string {\r\n\tconst parsedLeft = parseUrl(left);\r\n\tconst parsedRight = parseUrl(right);\r\n\r\n\tif (isRelativeUrl(parsedLeft)) {\r\n\t\tthrow new Error(\"Left URL is not absolute\");\r\n\t}\r\n\r\n\tif (isRelativeUrl(parsedRight)) {\r\n\t\t// TODO is this correct ?\r\n\t\tif (parsedRight.path !== \"\") {\r\n\t\t\tif (parsedRight.path[0] === \"/\") {\r\n\t\t\t\tparsedLeft.path = parsedRight.path;\r\n\r\n\t\t\t\t// TODO is this correct ?\r\n\t\t\t} else {\r\n\t\t\t\tconst leftPath = parsedLeft.path.split(/\\//);\r\n\t\t\t\tconst rightPath = parsedRight.path.split(/\\//);\r\n\r\n\t\t\t\t// TODO is this correct ?\r\n\t\t\t\tif (leftPath.length === 0) {\r\n\t\t\t\t\tif (rightPath.length !== 0) {\r\n\t\t\t\t\t\tleftPath.push(\"\");\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} else if (leftPath.length > 1) {\r\n\t\t\t\t\tleftPath.pop();\r\n\t\t\t\t}\r\n\r\n\t\t\t\t$array.pushAll(leftPath, rightPath);\r\n\r\n\t\t\t\tparsedLeft.path = leftPath.join(\"/\");\r\n\r\n\t\t\t\tif (parsedLeft.path !== \"\" && parsedLeft.path[0] !== \"/\") {\r\n\t\t\t\t\tthrow new Error(\"URL path must start with /\");\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// TODO is this correct ?\r\n\t\tparsedLeft.query = parsedRight.query;\r\n\t\tparsedLeft.hash = parsedRight.hash;\r\n\r\n\t\treturn serializeUrl(parsedLeft);\r\n\r\n\t} else {\r\n\t\treturn serializeUrl(parsedRight);\r\n\t}\r\n}\r\n\r\n/**\r\n * Detects MSIE.\r\n *\r\n * @return Is IE?\r\n */\r\nexport function isIE(): boolean {\r\n\treturn !!(<any>window).MSInputMethodContext && !!(<any>document).documentMode;\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}