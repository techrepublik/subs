{"ast":null,"code":"/**\r\n * Graticule (map grid) series functionality.\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\nimport { MapLineSeries, MapLineSeriesDataItem } from \"./MapLineSeries\";\nimport { Graticule } from \"./Graticule\";\nimport { registry } from \"../../core/Registry\";\nimport * as d3geo from \"d3-geo\";\nimport * as $array from \"../../core/utils/Array\";\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\n/**\r\n * Defines a [[DataItem]] for [[GraticuleSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\nvar GraticuleSeriesDataItem = /** @class */function (_super) {\n  __extends(GraticuleSeriesDataItem, _super);\n  /**\r\n   * Constructor\r\n   */\n  function GraticuleSeriesDataItem() {\n    var _this = _super.call(this) || this;\n    _this.className = \"GraticuleSeriesDataItem\";\n    _this.applyTheme();\n    return _this;\n  }\n  return GraticuleSeriesDataItem;\n}(MapLineSeriesDataItem);\nexport { GraticuleSeriesDataItem };\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n/**\r\n * This class is used to create a set of graticules (map grid).\r\n *\r\n * To enable, create like you would create any regular map series:\r\n *\r\n * ```TypeScript\r\n * let graticule = chart.series.push(new am4maps.GraticuleSeries())\r\n * graticule.mapLines.template.line.stroke = am4core.color(\"#000000\");\r\n * graticule.mapLines.template.line.strokeOpacity = 0.1;\r\n * ```\r\n * ```JavaScript\r\n * var graticule = chart.series.push(new am4maps.GraticuleSeries())\r\n * graticule.mapLines.template.line.stroke = am4core.color(\"#000000\");\r\n * graticule.mapLines.template.line.strokeOpacity = 0.1;\r\n * ```\r\n * ```JSON\r\n * {\r\n *   // ...\r\n *   \"series\": [{\r\n *     \"type\": \"GraticuleSeries\",\r\n *     \"mapLines\": {\r\n *       \"line\": {\r\n *         \"stroke\": \"#000000\",\r\n *         \"strokeOpacity\": 0.1\r\n *       }\r\n *     }\r\n *   }]\r\n * }\r\n * ```\r\n *\r\n * @since 4.3.0\r\n * @see {@link IGraticuleSeriesEvents} for a list of available Events\r\n * @see {@link IGraticuleSeriesAdapters} for a list of available Adapters\r\n * @important\r\n */\nvar GraticuleSeries = /** @class */function (_super) {\n  __extends(GraticuleSeries, _super);\n  /**\r\n   * Constructor\r\n   */\n  function GraticuleSeries() {\n    var _this = _super.call(this) || this;\n    _this.className = \"GraticuleSeries\";\n    _this.longitudeStep = 10;\n    _this.latitudeStep = 10;\n    _this.north = 90;\n    _this.south = -90;\n    _this.east = -180;\n    _this.west = 180;\n    //this.majorLatitudeStep = 90;\n    //this.majorLongitudeStep = 360;\n    _this.fitExtent = true;\n    _this.singleSprite = true;\n    _this.events.disableType(\"geoBoundsChanged\");\n    _this.mapLines.template.line.strokeOpacity = 0.08;\n    _this.ignoreBounds = false;\n    _this.hiddenInLegend = true;\n    _this.applyTheme();\n    return _this;\n  }\n  /**\r\n   * Returns a new/empty DataItem of the type appropriate for this object.\r\n   *\r\n   * @see {@link DataItem}\r\n   * @return Data Item\r\n   */\n  GraticuleSeries.prototype.createDataItem = function () {\n    return new GraticuleSeriesDataItem();\n  };\n  GraticuleSeries.prototype.validateData = function () {\n    var _this = this;\n    _super.prototype.validateData.call(this);\n    this.mapLines.clear();\n    var graticule = d3geo.geoGraticule();\n    if (graticule) {\n      graticule.stepMinor([this.longitudeStep, this.latitudeStep]);\n      graticule.stepMajor([360, 360]);\n      var chart = this.chart;\n      if (this.fitExtent) {\n        graticule.extent([[chart.east, chart.north], [chart.west, chart.south]]);\n      } else {\n        graticule.extent([[this.east, this.north], [this.west, this.south]]);\n      }\n      if (this.singleSprite) {\n        var mapLine = this.mapLines.create();\n        mapLine.multiLine = graticule().coordinates;\n      } else {\n        var lineStrings = graticule.lines();\n        $array.each(lineStrings, function (lineString) {\n          var mapLine = _this.mapLines.create();\n          mapLine.multiLine = [lineString.coordinates];\n        });\n      }\n    }\n  };\n  /**\r\n   * Returns a new line instance of suitable type.\r\n   *\r\n   * @return New line\r\n   */\n  GraticuleSeries.prototype.createLine = function () {\n    return new Graticule();\n  };\n  Object.defineProperty(GraticuleSeries.prototype, \"latitudeStep\", {\n    /**\r\n     * @return Step\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"latitudeStep\");\n    },\n    /**\r\n     * Draw a graticule (grid) every X degrees of latitude.\r\n     *\r\n     * @default 10\r\n     * @param  value Step\r\n     */\n    set: function (value) {\n      if (this.setPropertyValue(\"latitudeStep\", value)) {\n        this.invalidateData();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(GraticuleSeries.prototype, \"longitudeStep\", {\n    /**\r\n     * @return Step\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"longitudeStep\");\n    },\n    /**\r\n     * Draw a graticule (grid) every X degrees of longitude.\r\n     *\r\n     * @default 10\r\n     * @param  value  Step\r\n     */\n    set: function (value) {\n      if (this.setPropertyValue(\"longitudeStep\", value)) {\n        this.invalidateData();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(GraticuleSeries.prototype, \"fitExtent\", {\n    /**\r\n     * @return Fit?\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"fitExtent\");\n    },\n    /**\r\n     * Draw a thicker (major) graticule every X degrees of latitude.\r\n     *\r\n     * @default 90\r\n     * @param  value  Step\r\n     */\n    // public set majorLatitudeStep(value: number) {\n    // \tif (this.setPropertyValue(\"majorLatitudeStep\", value)) {\n    // \t\tthis.invalidateData();\n    // \t}\n    // }\n    /**\r\n     * @return Step\r\n     */\n    // public get majorLatitudeStep(): number {\n    // \treturn this.getPropertyValue(\"majorLatitudeStep\");\n    // }\n    /**\r\n     * Draw a thicker (major) graticule every X degrees of longitude.\r\n     *\r\n     * @default 360\r\n     * @param  value  Step\r\n     */\n    // public set majorLongitudeStep(value: number) {\n    // \tif (this.setPropertyValue(\"majorLongitudeStep\", value)) {\n    // \t\tthis.invalidateData();\n    // \t}\n    // }\n    /**\r\n     * @return Step\r\n     */\n    // public get majorLongitudeStep(): number {\n    // \treturn this.getPropertyValue(\"majorLongitudeStep\");\n    // }\n    /**\r\n     * Whether to cap graticules (grid) to actual span of the map (`true`), e.g.\r\n     * where there are polygons, or draw full-world grid (`false`).\r\n     *\r\n     * For world maps, using `false` makes sense. For smaller maps - not so much.\r\n     *\r\n     * If set to `false`, the grid will be drawn from this series `east` to\r\n     * `west`, and from `south` to `north` (default values: `east = -180`;\r\n     * `west = 180`; `south =-90`; `north =90`).\r\n     *\r\n     * These can be overridden by setting `GraticuleSeries`' respective\r\n     * properties.\r\n     *\r\n     * @default true\r\n     * @param  value  Fit?\r\n     */\n    set: function (value) {\n      if (this.setPropertyValue(\"fitExtent\", value)) {\n        this.invalidateData();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(GraticuleSeries.prototype, \"singleSprite\", {\n    /**\r\n     * @return Use single sprite?\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"singleSprite\");\n    },\n    /**\r\n     * Whether to draw all the grid as a single element or as separate lines.\r\n     *\r\n     * Setting `true` (default) will result in better performance, whereas\r\n     * `false` allows setting visual properties of each line individually.\r\n     *\r\n     * @default true\r\n     * @param  value  Use single sprite?\r\n     */\n    set: function (value) {\n      if (this.setPropertyValue(\"singleSprite\", value)) {\n        this.invalidateData();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return GraticuleSeries;\n}(MapLineSeries);\nexport { GraticuleSeries };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\nregistry.registeredClasses[\"GraticuleSeries\"] = GraticuleSeries;\nregistry.registeredClasses[\"GraticuleSeriesDataItem\"] = GraticuleSeriesDataItem;","map":{"version":3,"names":["MapLineSeries","MapLineSeriesDataItem","Graticule","registry","d3geo","$array","GraticuleSeriesDataItem","_super","__extends","_this","call","className","applyTheme","GraticuleSeries","longitudeStep","latitudeStep","north","south","east","west","fitExtent","singleSprite","events","disableType","mapLines","template","line","strokeOpacity","ignoreBounds","hiddenInLegend","prototype","createDataItem","validateData","clear","graticule","geoGraticule","stepMinor","stepMajor","chart","extent","mapLine","create","multiLine","coordinates","lineStrings","lines","each","lineString","createLine","Object","defineProperty","get","getPropertyValue","set","value","setPropertyValue","invalidateData","registeredClasses"],"sources":["../../../../../src/.internal/charts/map/GraticuleSeries.ts"],"sourcesContent":["/**\r\n * Graticule (map grid) series functionality.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { MapLineSeries, MapLineSeriesDataItem, IMapLineSeriesProperties, IMapLineSeriesDataFields, IMapLineSeriesAdapters, IMapLineSeriesEvents } from \"./MapLineSeries\";\r\nimport { Graticule } from \"./Graticule\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as d3geo from \"d3-geo\";\r\nimport * as $array from \"../../core/utils/Array\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[GraticuleSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class GraticuleSeriesDataItem extends MapLineSeriesDataItem {\r\n\r\n\t/**\r\n\t * A [[Graticule]] element related to this data item.\r\n\t */\r\n\tpublic _mapLine: Graticule;\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: GraticuleSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"GraticuleSeriesDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[GraticuleSeries]].\r\n */\r\nexport interface IGraticuleSeriesDataFields extends IMapLineSeriesDataFields { }\r\n\r\n/**\r\n * Defines properties for [[GraticuleSeries]].\r\n */\r\nexport interface IGraticuleSeriesProperties extends IMapLineSeriesProperties {\r\n\t/**\r\n\t * Draw a graticule (grid) every X degrees of latitude.\r\n\t *\r\n\t * @default 10\r\n\t */\r\n\tlatitudeStep?: number;\r\n\r\n\t/**\r\n\t * Draw a graticule (grid) every X degrees of longitude.\r\n\t *\r\n\t * @default 10\r\n\t */\r\n\tlongitudeStep?: number;\r\n\r\n\t/**\r\n\t * Draw a thicker (major) graticule every X degrees of latitude.\r\n\t *\r\n\t * @default 90\r\n\t */\r\n\t// majorLatitudeStep?: number;\r\n\r\n\t/**\r\n\t * Draw a thicker (major) graticule every X degrees of longitude.\r\n\t *\r\n\t * @default 360\r\n\t */\r\n\t// majorLongitudeStep?: number;\r\n\r\n\t/**\r\n\t * Whether to cap graticules (grid) to actual span of the map (`true`), e.g.\r\n\t * where there are polygons, or draw full-world grid (`false`).\r\n\t *\r\n\t * For world maps, using `false` makes sense. For smaller maps - not so much.\r\n\t *\r\n\t * If set to `false`, the grid will be drawn from this series `east` to\r\n\t * `west`, and from `south` to `north` (default values: `east = -180`;\r\n\t * `west = 180`; `south =-90`; `north =90`).\r\n\t *\r\n\t * These can be overridden by setting `GraticuleSeries`' respective\r\n\t * properties.\r\n\t *\r\n\t * @default true\r\n\t */\r\n\tfitExtent?: boolean;\r\n\r\n\t/**\r\n\t * Whether to draw all the grid as a single element or as separate lines.\r\n\t *\r\n\t * Setting `true` (default) will result in better performance, whereas\r\n\t * `false` allows setting visual properties of each line individually.\r\n\t *\r\n\t * @default true\r\n\t */\r\n\tsingleSprite?: boolean;\r\n}\r\n\r\n/**\r\n * Defines events for [[GraticuleSeries]].\r\n */\r\nexport interface IGraticuleSeriesEvents extends IMapLineSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[GraticuleSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IGraticuleSeriesAdapters extends IMapLineSeriesAdapters, IGraticuleSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * This class is used to create a set of graticules (map grid).\r\n *\r\n * To enable, create like you would create any regular map series:\r\n *\r\n * ```TypeScript\r\n * let graticule = chart.series.push(new am4maps.GraticuleSeries())\r\n * graticule.mapLines.template.line.stroke = am4core.color(\"#000000\");\r\n * graticule.mapLines.template.line.strokeOpacity = 0.1;\r\n * ```\r\n * ```JavaScript\r\n * var graticule = chart.series.push(new am4maps.GraticuleSeries())\r\n * graticule.mapLines.template.line.stroke = am4core.color(\"#000000\");\r\n * graticule.mapLines.template.line.strokeOpacity = 0.1;\r\n * ```\r\n * ```JSON\r\n * {\r\n *   // ...\r\n *   \"series\": [{\r\n *     \"type\": \"GraticuleSeries\",\r\n *     \"mapLines\": {\r\n *       \"line\": {\r\n *         \"stroke\": \"#000000\",\r\n *         \"strokeOpacity\": 0.1\r\n *       }\r\n *     }\r\n *   }]\r\n * }\r\n * ```\r\n *\r\n * @since 4.3.0\r\n * @see {@link IGraticuleSeriesEvents} for a list of available Events\r\n * @see {@link IGraticuleSeriesAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class GraticuleSeries extends MapLineSeries {\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t */\r\n\tpublic _dataFields: IGraticuleSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IGraticuleSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IGraticuleSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IGraticuleSeriesEvents;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t */\r\n\tpublic _dataItem: GraticuleSeriesDataItem;\r\n\r\n\t/**\r\n\t * Defines the type of the line items in this series.\r\n\t */\r\n\tpublic _mapLine: Graticule;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"GraticuleSeries\";\r\n\r\n\t\tthis.longitudeStep = 10;\r\n\r\n\t\tthis.latitudeStep = 10;\r\n\r\n\t\tthis.north = 90;\r\n\t\tthis.south = -90;\r\n\t\tthis.east = -180;\r\n\t\tthis.west = 180;\r\n\r\n\t\t//this.majorLatitudeStep = 90;\r\n\t\t//this.majorLongitudeStep = 360;\r\n\r\n\t\tthis.fitExtent = true;\r\n\r\n\t\tthis.singleSprite = true;\r\n\r\n\t\tthis.events.disableType(\"geoBoundsChanged\");\r\n\r\n\t\tthis.mapLines.template.line.strokeOpacity = 0.08;\r\n\r\n\t\tthis.ignoreBounds = false;\r\n\r\n\t\tthis.hiddenInLegend = true;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new GraticuleSeriesDataItem();\r\n\t}\r\n\r\n\tpublic validateData() {\r\n\t\tsuper.validateData();\r\n\r\n\t\tthis.mapLines.clear();\r\n\r\n\t\tlet graticule = d3geo.geoGraticule();\r\n\r\n\t\tif (graticule) {\r\n\t\t\tgraticule.stepMinor([this.longitudeStep, this.latitudeStep]);\r\n\t\t\tgraticule.stepMajor([360, 360]);\r\n\r\n\t\t\tlet chart = this.chart;\r\n\t\t\tif (this.fitExtent) {\r\n\t\t\t\tgraticule.extent([[chart.east, chart.north], [chart.west, chart.south]]);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tgraticule.extent([[this.east, this.north], [this.west, this.south]]);\r\n\t\t\t}\r\n\r\n\t\t\tif (this.singleSprite) {\r\n\t\t\t\tlet mapLine = this.mapLines.create();\r\n\t\t\t\tmapLine.multiLine = graticule().coordinates as Array<Array<[number, number]>>;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tlet lineStrings = graticule.lines();\r\n\r\n\t\t\t\t$array.each(lineStrings, (lineString) => {\r\n\t\t\t\t\tlet mapLine = this.mapLines.create();\r\n\t\t\t\t\tmapLine.multiLine = [lineString.coordinates as Array<[number, number]>];\r\n\t\t\t\t})\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new line instance of suitable type.\r\n\t *\r\n\t * @return New line\r\n\t */\r\n\tprotected createLine(): this[\"_mapLine\"] {\r\n\t\treturn new Graticule();\r\n\t}\r\n\r\n\t/**\r\n\t * Draw a graticule (grid) every X degrees of latitude.\r\n\t *\r\n\t * @default 10\r\n\t * @param  value Step\r\n\t */\r\n\tpublic set latitudeStep(value: number) {\r\n\t\tif (this.setPropertyValue(\"latitudeStep\", value)) {\r\n\t\t\tthis.invalidateData();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Step\r\n\t */\r\n\tpublic get latitudeStep(): number {\r\n\t\treturn this.getPropertyValue(\"latitudeStep\");\r\n\t}\r\n\r\n\t/**\r\n\t * Draw a graticule (grid) every X degrees of longitude.\r\n\t *\r\n\t * @default 10\r\n\t * @param  value  Step\r\n\t */\r\n\tpublic set longitudeStep(value: number) {\r\n\t\tif (this.setPropertyValue(\"longitudeStep\", value)) {\r\n\t\t\tthis.invalidateData();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Step\r\n\t */\r\n\tpublic get longitudeStep(): number {\r\n\t\treturn this.getPropertyValue(\"longitudeStep\");\r\n\t}\r\n\r\n\t/**\r\n\t * Draw a thicker (major) graticule every X degrees of latitude.\r\n\t *\r\n\t * @default 90\r\n\t * @param  value  Step\r\n\t */\r\n\t// public set majorLatitudeStep(value: number) {\r\n\t// \tif (this.setPropertyValue(\"majorLatitudeStep\", value)) {\r\n\t// \t\tthis.invalidateData();\r\n\t// \t}\r\n\t// }\r\n\r\n\t/**\r\n\t * @return Step\r\n\t */\r\n\t// public get majorLatitudeStep(): number {\r\n\t// \treturn this.getPropertyValue(\"majorLatitudeStep\");\r\n\t// }\r\n\r\n\t/**\r\n\t * Draw a thicker (major) graticule every X degrees of longitude.\r\n\t *\r\n\t * @default 360\r\n\t * @param  value  Step\r\n\t */\r\n\t// public set majorLongitudeStep(value: number) {\r\n\t// \tif (this.setPropertyValue(\"majorLongitudeStep\", value)) {\r\n\t// \t\tthis.invalidateData();\r\n\t// \t}\r\n\t// }\r\n\r\n\t/**\r\n\t * @return Step\r\n\t */\r\n\t// public get majorLongitudeStep(): number {\r\n\t// \treturn this.getPropertyValue(\"majorLongitudeStep\");\r\n\t// }\r\n\r\n\t/**\r\n\t * Whether to cap graticules (grid) to actual span of the map (`true`), e.g.\r\n\t * where there are polygons, or draw full-world grid (`false`).\r\n\t *\r\n\t * For world maps, using `false` makes sense. For smaller maps - not so much.\r\n\t *\r\n\t * If set to `false`, the grid will be drawn from this series `east` to\r\n\t * `west`, and from `south` to `north` (default values: `east = -180`;\r\n\t * `west = 180`; `south =-90`; `north =90`).\r\n\t *\r\n\t * These can be overridden by setting `GraticuleSeries`' respective\r\n\t * properties.\r\n\t *\r\n\t * @default true\r\n\t * @param  value  Fit?\r\n\t */\r\n\tpublic set fitExtent(value: boolean) {\r\n\t\tif (this.setPropertyValue(\"fitExtent\", value)) {\r\n\t\t\tthis.invalidateData();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Fit?\r\n\t */\r\n\tpublic get fitExtent(): boolean {\r\n\t\treturn this.getPropertyValue(\"fitExtent\");\r\n\t}\r\n\r\n\t/**\r\n\t * Whether to draw all the grid as a single element or as separate lines.\r\n\t *\r\n\t * Setting `true` (default) will result in better performance, whereas\r\n\t * `false` allows setting visual properties of each line individually.\r\n\t *\r\n\t * @default true\r\n\t * @param  value  Use single sprite?\r\n\t */\r\n\tpublic set singleSprite(value: boolean) {\r\n\t\tif (this.setPropertyValue(\"singleSprite\", value)) {\r\n\t\t\tthis.invalidateData();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Use single sprite?\r\n\t */\r\n\tpublic get singleSprite(): boolean {\r\n\t\treturn this.getPropertyValue(\"singleSprite\");\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"GraticuleSeries\"] = GraticuleSeries;\r\nregistry.registeredClasses[\"GraticuleSeriesDataItem\"] = GraticuleSeriesDataItem;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}