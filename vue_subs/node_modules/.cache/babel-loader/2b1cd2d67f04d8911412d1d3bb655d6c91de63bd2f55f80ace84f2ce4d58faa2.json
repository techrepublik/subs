{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { __extends } from \"tslib\";\nimport { TargetedEventDispatcher } from \"../utils/EventDispatcher\";\nimport { MultiDisposer, CounterDisposer } from \"../utils/Disposer\";\n/**\r\n * Represents an Event Dispatcher for [[InteractionObject]].\r\n *\r\n * Besides regular [[EventDispatcher]] functionality it adds new events with\r\n * direct application to DOM nodes. Primarily used to handle keyboard events,\r\n * but can turn into something else moving forward.\r\n */\nvar InteractionObjectEventDispatcher = /** @class */function (_super) {\n  __extends(InteractionObjectEventDispatcher, _super);\n  function InteractionObjectEventDispatcher() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    /**\r\n     * Holds a list of Disposers for DOM events added.\r\n     */\n    _this._domEvents = {};\n    return _this;\n  }\n  /**\r\n   * Adds a DOM event and returns Disposer.\r\n   *\r\n   * @return Disposer\r\n   */\n  InteractionObjectEventDispatcher.prototype._addDOMEvent = function (type, key, listener, context) {\n    var _this = this;\n    if (!this._domEvents[type]) {\n      var callback_1 = function (e) {\n        listener.call(context, key, e);\n      };\n      this.target.element.addEventListener(type, callback_1, false);\n      this._domEvents[type] = new CounterDisposer(function () {\n        delete _this._domEvents[type];\n        _this.target.element.removeEventListener(type, callback_1, false);\n      });\n    }\n    return this._domEvents[type].increment();\n  };\n  InteractionObjectEventDispatcher.prototype._dispatchKeyboardEvent = function (key, ev) {\n    // TODO use this.dispatchImmediately ?\n    if (this.target.events.isEnabled(key)) {\n      this.target.events.dispatchImmediately(key, {\n        type: key,\n        target: this.target,\n        event: ev\n      });\n    }\n  };\n  InteractionObjectEventDispatcher.prototype._on = function (once, type, callback, context, shouldClone, dispatch) {\n    var info = _super.prototype._on.call(this, once, type, callback, context, shouldClone, dispatch);\n    var disposers = [info.disposer];\n    switch (type) {\n      case \"hit\":\n      case \"doublehit\":\n      case \"rightclick\":\n      case \"down\":\n      case \"up\":\n        this.target.clickable = true;\n        break;\n      case \"drag\":\n      case \"dragstart\":\n      case \"dragstop\":\n        this.target.draggable = true;\n        break;\n      case \"track\":\n        this.target.trackable = true;\n        break;\n      case \"resize\":\n        this.target.resizable = true;\n        break;\n      case \"swipe\":\n      case \"swipeleft\":\n      case \"swiperight\":\n        this.target.swipeable = true;\n        break;\n      case \"wheel\":\n      case \"wheelup\":\n      case \"wheeldown\":\n      case \"wheelleft\":\n      case \"wheelright\":\n        this.target.wheelable = true;\n        break;\n      case \"over\":\n      case \"out\":\n        this.target.hoverable = true;\n        break;\n      case \"focus\":\n      case \"blur\":\n      case \"focusin\":\n      case \"focusout\":\n        this.target.focusable = true;\n        break;\n      case \"keydown\":\n        disposers.push(this._addDOMEvent(type, type, this._dispatchKeyboardEvent, this));\n        break;\n      case \"keyup\":\n        disposers.push(this._addDOMEvent(type, type, this._dispatchKeyboardEvent, this));\n        break;\n      case \"keypress\":\n        disposers.push(this._addDOMEvent(type, type, this._dispatchKeyboardEvent, this));\n        break;\n      case \"input\":\n        disposers.push(this._addDOMEvent(type, type, this._dispatchKeyboardEvent, this));\n        break;\n    }\n    info.disposer = new MultiDisposer(disposers);\n    return info;\n  };\n  return InteractionObjectEventDispatcher;\n}(TargetedEventDispatcher);\nexport { InteractionObjectEventDispatcher };","map":{"version":3,"names":["TargetedEventDispatcher","MultiDisposer","CounterDisposer","InteractionObjectEventDispatcher","_super","__extends","_this","apply","arguments","_domEvents","prototype","_addDOMEvent","type","key","listener","context","callback_1","e","call","target","element","addEventListener","removeEventListener","increment","_dispatchKeyboardEvent","ev","events","isEnabled","dispatchImmediately","event","_on","once","callback","shouldClone","dispatch","info","disposers","disposer","clickable","draggable","trackable","resizable","swipeable","wheelable","hoverable","focusable","push"],"sources":["../../../../../src/.internal/core/interaction/InteractionObjectEvents.ts"],"sourcesContent":["/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { IBaseObjectEvents } from \"../Base\";\r\nimport { IPoint } from \"../defs/IPoint\";\r\nimport { IPointer } from \"../interaction/Pointer\";\r\nimport { InteractionObject } from \"../interaction/InteractionObject\";\r\nimport { EventListener, TargetedEventDispatcher, AMEvent } from \"../utils/EventDispatcher\";\r\nimport { MultiDisposer, IDisposer, CounterDisposer } from \"../utils/Disposer\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a type of event that has a single point of reference.\r\n */\r\nexport type PointerTypeEvent = {\r\n\r\n\t/**\r\n\t * Is event originated by touch pointer?\r\n\t */\r\n\ttouch: boolean;\r\n\r\n};\r\n\r\n/**\r\n * Defines a type of event that has a single point of reference.\r\n */\r\nexport type PointEvent = {\r\n\r\n\t/**\r\n\t * Event point in global (document) coordinates.\r\n\t */\r\n\tpoint: IPoint;\r\n\r\n};\r\n\r\n/**\r\n * Defines a type of event that has a related Pointer.\r\n */\r\nexport type PointerEvent = {\r\n\r\n\t/**\r\n\t * Coordinates of the primary cursor position.\r\n\t */\r\n\tpointer: IPointer;\r\n\r\n};\r\n\r\n/**\r\n * Defines a type of event that represents some kind of shift in coordinates,\r\n * like draging an element.\r\n */\r\nexport type ShiftEvent = {\r\n\r\n\t/**\r\n\t * Shift in coordinates after dragging.\r\n\t */\r\n\tshift: IPoint;\r\n\r\n};\r\n\r\n/**\r\n * Defines a type of event that represents change in angle, like rotation.\r\n */\r\nexport type AngleEvent = {\r\n\r\n\t/**\r\n\t * Angle to apply to the element.\r\n\t */\r\n\tangle: number;\r\n};\r\n\r\n\r\n/**\r\n * Defines a type of event that represents change in element's scale, like\r\n * resize.\r\n */\r\nexport type ScaleEvent = {\r\n\r\n\t/**\r\n\t * Scale to apply to the element.\r\n\t */\r\n\tscale: number;\r\n\r\n};\r\n\r\n/**\r\n * Defines an event that contains event center coordindates.\r\n */\r\nexport type CenterEvent = {\r\n\r\n\t/**\r\n\t * A center point for specific operation.\r\n\t */\r\n\tcenter?: IPoint;\r\n\r\n};\r\n\r\n/**\r\n * Defines an event that can be triggered either by touch device or mouse.\r\n */\r\nexport type MouseTouchEvent = {\r\n\r\n\t/**\r\n\t * An original mouse or touch event.\r\n\t */\r\n\tevent: MouseEvent | TouchEvent;\r\n\r\n};\r\n\r\n/**\r\n * Defines an event that was not generated by keyboard directly, but rather\r\n * was simulated to trigger require keyboard-related handlers.\r\n */\r\nexport type SimulatedKeyboardEvent = {\r\n\r\n\t/**\r\n\t * A keyboard event.\r\n\t */\r\n\tevent: KeyboardEvent;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[InteractionObject]].\r\n */\r\nexport interface IInteractionObjectEvents extends IBaseObjectEvents {\r\n\r\n\t/**\r\n\t * Invoked when object is clicked or touched.\r\n\t */\r\n\thit: PointerTypeEvent & PointEvent & MouseTouchEvent;\r\n\r\n\t/**\r\n\t * Invoked when object is clicked or touched twice in rapid succession.\r\n\t *\r\n\t * Check [[IHitOptions]] for settings about double hit.\r\n\t */\r\n\tdoublehit: PointerTypeEvent & PointEvent & MouseTouchEvent;\r\n\r\n\t/**\r\n\t * Invoked when right mouse button is clicked on the object.\r\n\t */\r\n\trightclick: MouseTouchEvent;\r\n\r\n\t/**\r\n\t * Invoked when mouse or touch pointer is held down over object for some time.\r\n\t * @ignore\r\n\t * @deprecated\r\n\t */\r\n\thold: PointerTypeEvent & PointerEvent & MouseTouchEvent;\r\n\r\n\t/**\r\n\t * Invoked when the mouse button is pressed or touch starts.\r\n\t */\r\n\tdown: PointerTypeEvent & PointerEvent & MouseTouchEvent;\r\n\r\n\t/**\r\n\t * Invoked when the mouse button is released or touch ends.\r\n\t */\r\n\tup: PointerTypeEvent & PointerEvent & MouseTouchEvent;\r\n\r\n\t/**\r\n\t * Invoked when `draggable` object is being dragged. (using mouse, touch or\r\n\t * keyboard)\r\n\t */\r\n\tdrag: PointerTypeEvent & ShiftEvent & PointEvent & {\r\n\r\n\t\t/**\r\n\t\t * Original coordinates of the pointer's position when the dragging started.\r\n\t\t */\r\n\t\tstartPoint: IPoint,\r\n\r\n\t\t/**\r\n\t\t * An original JavaScript event that triggered dragging.\r\n\t\t */\r\n\t\tevent?: MouseEvent | TouchEvent | KeyboardEvent\r\n\r\n\t};\r\n\r\n\t/**\r\n\t * Invoked when `draggable` object dragging starts. This event is not\r\n\t * invoked immediatelly after `down`, but only if there's a movement of the\r\n\t * pointer.\r\n\t */\r\n\tdragstart: PointerTypeEvent & {\r\n\r\n\t\t/**\r\n\t\t * An original JavaScript event that triggered dragging.\r\n\t\t */\r\n\t\tevent?: MouseEvent | TouchEvent | KeyboardEvent\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Invoked when `draggable` object is released. This event will not fire if\r\n\t * position of the object did not change.\r\n\t */\r\n\tdragstop: PointerTypeEvent & {\r\n\r\n\t\t/**\r\n\t\t * An original JavaScript event that triggered dragging.\r\n\t\t */\r\n\t\tevent?: MouseTouchEvent | KeyboardEvent\r\n\r\n\t};\r\n\r\n\t/**\r\n\t * Invoked when pointer (mouse cursor or touch point) moves over `trackable`\r\n\t * object.\r\n\t */\r\n\ttrack: PointerTypeEvent & PointEvent & PointerEvent & MouseTouchEvent;\r\n\r\n\t/**\r\n\t * Invoked when `resizable` object is being resized either by mouse or touch\r\n\t * pinch gesture.\r\n\t */\r\n\tresize: PointerTypeEvent & ScaleEvent & MouseTouchEvent & {\r\n\r\n\t\t/**\r\n\t\t * The starting coordinates of the first reference point.\r\n\t\t */\r\n\t\tstartPoint1: IPoint,\r\n\r\n\t\t/**\r\n\t\t * Current coordinates of the first reference point.\r\n\t\t */\r\n\t\tpoint1: IPoint,\r\n\r\n\t\t/**\r\n\t\t * The starting coordinates of the second reference point.\r\n\t\t */\r\n\t\tstartPoint2: IPoint,\r\n\r\n\t\t/**\r\n\t\t * Current coordinates of the second reference point.\r\n\t\t */\r\n\t\tpoint2: IPoint\r\n\t};\r\n\r\n\t/**\r\n\t * Invoked when user performs \"swiping\" gesture (quick horizontal movement)\r\n\t * on the object, either using mouse or touch.\r\n\t */\r\n\tswipe: PointerTypeEvent & MouseTouchEvent;\r\n\r\n\t/**\r\n\t * Invoked when user performs \"swiping\" gesture towards left.\r\n\t */\r\n\tswipeleft: PointerTypeEvent & MouseTouchEvent;\r\n\r\n\t/**\r\n\t * Invoked when user performs \"swiping\" gesture towards right.\r\n\t */\r\n\tswiperight: PointerTypeEvent & MouseTouchEvent;\r\n\r\n\t/**\r\n\t * Invoked when user turns mouse wheel while over the object.\r\n\t */\r\n\twheel: PointEvent & ShiftEvent & {\r\n\r\n\t\t/**\r\n\t\t * Original JavaScript event.\r\n\t\t */\r\n\t\tevent: WheelEvent\r\n\r\n\t};\r\n\r\n\t/**\r\n\t * Invoked when user turns mouse wheel upwards while over the object.\r\n\t */\r\n\twheelup: PointEvent & ShiftEvent & {\r\n\r\n\t\t/**\r\n\t\t * Original JavaScript event.\r\n\t\t */\r\n\t\tevent: WheelEvent\r\n\r\n\t};\r\n\r\n\t/**\r\n\t * Invoked when user turns mouse wheel downwards while over the object.\r\n\t */\r\n\twheeldown: PointEvent & ShiftEvent & {\r\n\r\n\t\t/**\r\n\t\t * Original JavaScript event.\r\n\t\t */\r\n\t\tevent: WheelEvent\r\n\r\n\t};\r\n\r\n\t/**\r\n\t * Invoked when user turns mouse wheel leftwards while over the object.\r\n\t */\r\n\twheelleft: PointEvent & ShiftEvent & {\r\n\r\n\t\t/**\r\n\t\t * Original JavaScript event.\r\n\t\t */\r\n\t\tevent: WheelEvent\r\n\r\n\t};\r\n\r\n\t/**\r\n\t * Invoked when user turns mouse wheel rightwards while over the object.\r\n\t */\r\n\twheelright: PointEvent & ShiftEvent & {\r\n\r\n\t\t/**\r\n\t\t * Original JavaScript event.\r\n\t\t */\r\n\t\tevent: WheelEvent\r\n\r\n\t};\r\n\r\n\t/**\r\n\t * Invoked when mouse cursor moves over `hoverable` object or it is touched.\r\n\t *\r\n\t * NOTE: this event might not always contains `pointer` parameter as\r\n\t * event might be triggered by API?\r\n\t */\r\n\tover: PointerTypeEvent & MouseTouchEvent & PointerEvent;\r\n\r\n\t/**\r\n\t * Invoked when mouse cursor moves out of `hoverable` object or it is no\r\n\t * longer touched.\r\n\t *\r\n\t * NOTE: this event might not always contains `pointer` parameter as\r\n\t * event might be triggered by API?\r\n\t */\r\n\tout: PointerTypeEvent & MouseTouchEvent & PointerEvent;\r\n\r\n\t/**\r\n\t * Invoked when `focusable` object gains focus, e.g. by using TAB button.\r\n\t */\r\n\tfocus: {\r\n\r\n\t\t/**\r\n\t\t * Original JavaScript `FocusEvent`.\r\n\t\t */\r\n\t\tevent: FocusEvent\r\n\r\n\t};\r\n\r\n\t/**\r\n\t * Invoked when `focusable` object loses focus, e.g. by clicking outside\r\n\t * it or pressing TAB button to focus on the next focusable object.\r\n\t */\r\n\tblur: {\r\n\r\n\t\t/**\r\n\t\t * Original JavaScript `FocusEvent`.\r\n\t\t */\r\n\t\tevent: FocusEvent\r\n\r\n\t};\r\n\r\n\t/**\r\n\t * Invoked when the key is pressed on the keyboard.\r\n\t */\r\n\tkeydown: {\r\n\r\n\t\t/**\r\n\t\t * Orginal JavaScript `KeyboardEvent`.\r\n\t\t */\r\n\t\tevent: KeyboardEvent\r\n\r\n\t};\r\n\r\n\t/**\r\n\t * Invoked when the key is released on the keyboard.\r\n\t */\r\n\tkeyup: {\r\n\r\n\t\t/**\r\n\t\t * Orginal JavaScript `KeyboardEvent`.\r\n\t\t */\r\n\t\tevent: KeyboardEvent\r\n\r\n\t};\r\n\r\n\t/**\r\n\t * Invoked when the key generates a \"press\", e.g. pressing and holding a\r\n\t * letter key will generate repeated \"keypress\" events.\r\n\t */\r\n\tkeypress: {\r\n\r\n\t\t/**\r\n\t\t * Orginal JavaScript `KeyboardEvent`.\r\n\t\t */\r\n\t\tevent: KeyboardEvent\r\n\r\n\t};\r\n\r\n\t/**\r\n\t * Invoked whenever information changes in the textual input elements, like\r\n\t * `<input>`, `<textarea>`, etc.\r\n\t */\r\n\tinput: {\r\n\r\n\t\t/**\r\n\t\t * Orginal JavaScript `KeyboardEvent`.\r\n\t\t */\r\n\t\tevent: KeyboardEvent\r\n\r\n\t};\r\n}\r\n\r\n/**\r\n * Represents an Event Dispatcher for [[InteractionObject]].\r\n *\r\n * Besides regular [[EventDispatcher]] functionality it adds new events with\r\n * direct application to DOM nodes. Primarily used to handle keyboard events,\r\n * but can turn into something else moving forward.\r\n */\r\nexport class InteractionObjectEventDispatcher<T extends AMEvent<InteractionObject, IInteractionObjectEvents>> extends TargetedEventDispatcher<InteractionObject, T> {\r\n\r\n\t/**\r\n\t * Holds a list of Disposers for DOM events added.\r\n\t */\r\n\tprivate _domEvents: { [key: string]: CounterDisposer } = {};\r\n\r\n\t/**\r\n\t * Adds a DOM event and returns Disposer.\r\n\t *\r\n\t * @return Disposer\r\n\t */\r\n\tprivate _addDOMEvent<E extends Event, Key extends keyof IInteractionObjectEvents, C>(\r\n\t\ttype: string,\r\n\t\tkey: Key,\r\n\t\tlistener: (this: C, key: Key, evt: E) => void,\r\n\t\tcontext: C\r\n\t): IDisposer {\r\n\t\tif (!this._domEvents[type]) {\r\n\t\t\tconst callback = function (e: Event): void {\r\n\t\t\t\tlistener.call(context, key, e as any);\r\n\t\t\t};\r\n\r\n\t\t\tthis.target.element.addEventListener(type, callback, false);\r\n\r\n\t\t\tthis._domEvents[type] = new CounterDisposer(() => {\r\n\t\t\t\tdelete this._domEvents[type];\r\n\r\n\t\t\t\tthis.target.element.removeEventListener(type, callback, false);\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\treturn this._domEvents[type].increment();\r\n\t}\r\n\r\n\tprivate _dispatchKeyboardEvent<Key extends \"keydown\" | \"keyup\" | \"keypress\" | \"input\">(key: Key, ev: KeyboardEvent): void {\r\n\t\t// TODO use this.dispatchImmediately ?\r\n\t\tif (this.target.events.isEnabled(key)) {\r\n\t\t\tthis.target.events.dispatchImmediately(key, {\r\n\t\t\t\ttype: key as any,\r\n\t\t\t\ttarget: this.target,\r\n\t\t\t\tevent: ev\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\tprotected _on<A, B, Key extends keyof T>(once: boolean, type: Key | null, callback: A, context: B, shouldClone: boolean, dispatch: (type: Key, event: T[Key]) => void): EventListener<T> {\r\n\t\tconst info = super._on(once, type, callback, context, shouldClone, dispatch);\r\n\r\n\t\tconst disposers = [info.disposer];\r\n\r\n\t\tswitch (type) {\r\n\t\t\tcase \"hit\":\r\n\t\t\tcase \"doublehit\":\r\n\t\t\tcase \"rightclick\":\r\n\t\t\tcase \"down\":\r\n\t\t\tcase \"up\":\r\n\t\t\t\tthis.target.clickable = true;\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"drag\":\r\n\t\t\tcase \"dragstart\":\r\n\t\t\tcase \"dragstop\":\r\n\t\t\t\tthis.target.draggable = true;\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"track\":\r\n\t\t\t\tthis.target.trackable = true;\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"resize\":\r\n\t\t\t\tthis.target.resizable = true;\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"swipe\":\r\n\t\t\tcase \"swipeleft\":\r\n\t\t\tcase \"swiperight\":\r\n\t\t\t\tthis.target.swipeable = true;\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"wheel\":\r\n\t\t\tcase \"wheelup\":\r\n\t\t\tcase \"wheeldown\":\r\n\t\t\tcase \"wheelleft\":\r\n\t\t\tcase \"wheelright\":\r\n\t\t\t\tthis.target.wheelable = true;\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"over\":\r\n\t\t\tcase \"out\":\r\n\t\t\t\tthis.target.hoverable = true;\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"focus\":\r\n\t\t\tcase \"blur\":\r\n\t\t\tcase \"focusin\":\r\n\t\t\tcase \"focusout\":\r\n\t\t\t\tthis.target.focusable = true;\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"keydown\":\r\n\t\t\t\tdisposers.push(this._addDOMEvent<KeyboardEvent, \"keydown\", this>(<any>type, <any>type, this._dispatchKeyboardEvent, this));\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"keyup\":\r\n\t\t\t\tdisposers.push(this._addDOMEvent<KeyboardEvent, \"keyup\", this>(<any>type, <any>type, this._dispatchKeyboardEvent, this));\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"keypress\":\r\n\t\t\t\tdisposers.push(this._addDOMEvent<KeyboardEvent, \"keypress\", this>(<any>type, <any>type, this._dispatchKeyboardEvent, this));\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"input\":\r\n\t\t\t\tdisposers.push(this._addDOMEvent<KeyboardEvent, \"input\", this>(<any>type, <any>type, this._dispatchKeyboardEvent, this));\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\r\n\t\tinfo.disposer = new MultiDisposer(disposers);\r\n\r\n\t\treturn info;\r\n\t}\r\n\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}