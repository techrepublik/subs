{"ast":null,"code":"import { geoProjection as projection } from \"d3-geo\";\nimport { abs, asin, cos, epsilon, sin, sqrt, sqrt1_2, sqrt2 } from \"./math.js\";\nexport function mtFlatPolarQuarticRaw(lambda, phi) {\n  var k = (1 + sqrt1_2) * sin(phi),\n    theta = phi;\n  for (var i = 0, delta; i < 25; i++) {\n    theta -= delta = (sin(theta / 2) + sin(theta) - k) / (0.5 * cos(theta / 2) + cos(theta));\n    if (abs(delta) < epsilon) break;\n  }\n  return [lambda * (1 + 2 * cos(theta) / cos(theta / 2)) / (3 * sqrt2), 2 * sqrt(3) * sin(theta / 2) / sqrt(2 + sqrt2)];\n}\nmtFlatPolarQuarticRaw.invert = function (x, y) {\n  var sinTheta_2 = y * sqrt(2 + sqrt2) / (2 * sqrt(3)),\n    theta = 2 * asin(sinTheta_2);\n  return [3 * sqrt2 * x / (1 + 2 * cos(theta) / cos(theta / 2)), asin((sinTheta_2 + sin(theta)) / (1 + sqrt1_2))];\n};\nexport default function () {\n  return projection(mtFlatPolarQuarticRaw).scale(188.209);\n}","map":{"version":3,"names":["geoProjection","projection","abs","asin","cos","epsilon","sin","sqrt","sqrt1_2","sqrt2","mtFlatPolarQuarticRaw","lambda","phi","k","theta","i","delta","invert","x","y","sinTheta_2","scale"],"sources":["/Users/admin/Desktop/techrepublik/pro/subs/vue_subs/node_modules/d3-geo-projection/src/mtFlatPolarQuartic.js"],"sourcesContent":["import {geoProjection as projection} from \"d3-geo\";\nimport {abs, asin, cos, epsilon, sin, sqrt, sqrt1_2, sqrt2} from \"./math.js\";\n\nexport function mtFlatPolarQuarticRaw(lambda, phi) {\n  var k = (1 + sqrt1_2) * sin(phi),\n      theta = phi;\n  for (var i = 0, delta; i < 25; i++) {\n    theta -= delta = (sin(theta / 2) + sin(theta) - k) / (0.5 * cos(theta / 2) + cos(theta));\n    if (abs(delta) < epsilon) break;\n  }\n  return [\n    lambda * (1 + 2 * cos(theta) / cos(theta / 2)) / (3 * sqrt2),\n    2 * sqrt(3) * sin(theta / 2) / sqrt(2 + sqrt2)\n  ];\n}\n\nmtFlatPolarQuarticRaw.invert = function(x, y) {\n  var sinTheta_2 = y * sqrt(2 + sqrt2) / (2 * sqrt(3)),\n      theta = 2 * asin(sinTheta_2);\n  return [\n    3 * sqrt2 * x / (1 + 2 * cos(theta) / cos(theta / 2)),\n    asin((sinTheta_2 + sin(theta)) / (1 + sqrt1_2))\n  ];\n};\n\nexport default function() {\n  return projection(mtFlatPolarQuarticRaw)\n      .scale(188.209);\n}\n"],"mappings":"AAAA,SAAQA,aAAa,IAAIC,UAAU,QAAO,QAAQ;AAClD,SAAQC,GAAG,EAAEC,IAAI,EAAEC,GAAG,EAAEC,OAAO,EAAEC,GAAG,EAAEC,IAAI,EAAEC,OAAO,EAAEC,KAAK,QAAO,WAAW;AAE5E,OAAO,SAASC,qBAAqBA,CAACC,MAAM,EAAEC,GAAG,EAAE;EACjD,IAAIC,CAAC,GAAG,CAAC,CAAC,GAAGL,OAAO,IAAIF,GAAG,CAACM,GAAG,CAAC;IAC5BE,KAAK,GAAGF,GAAG;EACf,KAAK,IAAIG,CAAC,GAAG,CAAC,EAAEC,KAAK,EAAED,CAAC,GAAG,EAAE,EAAEA,CAAC,EAAE,EAAE;IAClCD,KAAK,IAAIE,KAAK,GAAG,CAACV,GAAG,CAACQ,KAAK,GAAG,CAAC,CAAC,GAAGR,GAAG,CAACQ,KAAK,CAAC,GAAGD,CAAC,KAAK,GAAG,GAAGT,GAAG,CAACU,KAAK,GAAG,CAAC,CAAC,GAAGV,GAAG,CAACU,KAAK,CAAC,CAAC;IACxF,IAAIZ,GAAG,CAACc,KAAK,CAAC,GAAGX,OAAO,EAAE;EAC5B;EACA,OAAO,CACLM,MAAM,IAAI,CAAC,GAAG,CAAC,GAAGP,GAAG,CAACU,KAAK,CAAC,GAAGV,GAAG,CAACU,KAAK,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,GAAGL,KAAK,CAAC,EAC5D,CAAC,GAAGF,IAAI,CAAC,CAAC,CAAC,GAAGD,GAAG,CAACQ,KAAK,GAAG,CAAC,CAAC,GAAGP,IAAI,CAAC,CAAC,GAAGE,KAAK,CAAC,CAC/C;AACH;AAEAC,qBAAqB,CAACO,MAAM,GAAG,UAASC,CAAC,EAAEC,CAAC,EAAE;EAC5C,IAAIC,UAAU,GAAGD,CAAC,GAAGZ,IAAI,CAAC,CAAC,GAAGE,KAAK,CAAC,IAAI,CAAC,GAAGF,IAAI,CAAC,CAAC,CAAC,CAAC;IAChDO,KAAK,GAAG,CAAC,GAAGX,IAAI,CAACiB,UAAU,CAAC;EAChC,OAAO,CACL,CAAC,GAAGX,KAAK,GAAGS,CAAC,IAAI,CAAC,GAAG,CAAC,GAAGd,GAAG,CAACU,KAAK,CAAC,GAAGV,GAAG,CAACU,KAAK,GAAG,CAAC,CAAC,CAAC,EACrDX,IAAI,CAAC,CAACiB,UAAU,GAAGd,GAAG,CAACQ,KAAK,CAAC,KAAK,CAAC,GAAGN,OAAO,CAAC,CAAC,CAChD;AACH,CAAC;AAED,eAAe,YAAW;EACxB,OAAOP,UAAU,CAACS,qBAAqB,CAAC,CACnCW,KAAK,CAAC,OAAO,CAAC;AACrB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}