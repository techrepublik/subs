{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n/**\r\n * Module for a multi-part arched line.\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\nimport { Polyline } from \"./Polyline\";\nimport { registry } from \"../Registry\";\nimport * as $math from \"../../core/utils/Math\";\nimport * as $path from \"../../core/rendering/Path\";\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n/**\r\n * Draws a multi-part arched line.\r\n *\r\n * @see {@link IPolyarcEvents} for a list of available events\r\n * @see {@link IPolyarcAdapters} for a list of available Adapters\r\n */\nvar Polyarc = /** @class */function (_super) {\n  __extends(Polyarc, _super);\n  /**\r\n   * Constructor\r\n   */\n  function Polyarc() {\n    var _this = _super.call(this) || this;\n    _this.className = \"Polyarc\";\n    _this.controlPointDistance = 0.5;\n    _this.controlPointPosition = 0.5;\n    _this.applyTheme();\n    return _this;\n  }\n  /**\r\n   * Creats and adds an SVG path for the arc.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  Polyarc.prototype.makePath = function () {\n    this._distance = 0;\n    var segments = this.segments;\n    if (segments && segments.length > 0) {\n      var path = \"\";\n      this._realSegments = [];\n      for (var i = 0, len = segments.length; i < len; i++) {\n        var points = segments[i];\n        var realPoints = [];\n        this._realSegments.push(realPoints);\n        if (points.length > 0) {\n          path += $path.moveTo(points[0]);\n          for (var p = 1; p < points.length; p++) {\n            var pointA = points[p - 1];\n            var pointB = points[p];\n            var distanceAB = $math.getDistance(pointB, pointA);\n            var cpDistance = distanceAB * this.controlPointDistance;\n            var controlPointPosition = this.controlPointPosition;\n            var angle = -$math.getAngle(pointA, pointB);\n            var cpx = pointA.x + (pointB.x - pointA.x) * controlPointPosition * 0.5 - cpDistance * $math.sin(angle);\n            var cpy = pointA.y + (pointB.y - pointA.y) * controlPointPosition * 0.5 - cpDistance * $math.cos(angle);\n            var controlPoint1 = {\n              x: cpx,\n              y: cpy\n            };\n            var cpx2 = pointA.x + (pointB.x - pointA.x) * controlPointPosition * 1.5 - cpDistance * $math.sin(angle);\n            var cpy2 = pointA.y + (pointB.y - pointA.y) * controlPointPosition * 1.5 - cpDistance * $math.cos(angle);\n            var controlPoint2 = {\n              x: cpx2,\n              y: cpy2\n            };\n            path += $path.cubicCurveTo(pointB, controlPoint1, controlPoint2);\n            // we add a lot of points in order to get the position/angle later\n            var stepCount = Math.ceil(distanceAB);\n            var prevPoint = pointA;\n            if (stepCount > 0) {\n              for (var i_1 = 0; i_1 <= stepCount; i_1++) {\n                var point = $math.getPointOnCubicCurve(pointA, pointB, controlPoint1, controlPoint2, i_1 / stepCount);\n                realPoints.push(point);\n                this._distance += $math.getDistance(prevPoint, point);\n                prevPoint = point;\n              }\n            } else {\n              realPoints.push(pointA);\n            }\n          }\n        }\n      }\n      this.path = path;\n    }\n  };\n  Object.defineProperty(Polyarc.prototype, \"controlPointPosition\", {\n    /**\r\n     * @return Position (0-1)\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"controlPointPosition\");\n    },\n    /**\r\n     * Relative position along the line the control point is. (0-1)\r\n     *\r\n     * @default 0.5\r\n     * @param value  Position (0-1)\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"controlPointPosition\", value);\n      this.makePath();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Polyarc.prototype, \"controlPointDistance\", {\n    /**\r\n     * @return Distance (0-1)\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"controlPointDistance\");\n    },\n    /**\r\n     * Relative distance of the control point. (0-1)\r\n     *\r\n     * Default is half the length of the line. (0.5)\r\n     *\r\n     * @default 0.5\r\n     * @param value  Distance (0-1)\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"controlPointDistance\", value);\n      this.makePath();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return Polyarc;\n}(Polyline);\nexport { Polyarc };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\nregistry.registeredClasses[\"Polyarc\"] = Polyarc;","map":{"version":3,"names":["Polyline","registry","$math","$path","Polyarc","_super","__extends","_this","call","className","controlPointDistance","controlPointPosition","applyTheme","prototype","makePath","_distance","segments","length","path","_realSegments","i","len","points","realPoints","push","moveTo","p","pointA","pointB","distanceAB","getDistance","cpDistance","angle","getAngle","cpx","x","sin","cpy","y","cos","controlPoint1","cpx2","cpy2","controlPoint2","cubicCurveTo","stepCount","Math","ceil","prevPoint","i_1","point","getPointOnCubicCurve","Object","defineProperty","get","getPropertyValue","set","value","setPropertyValue","registeredClasses"],"sources":["../../../../../src/.internal/core/elements/Polyarc.ts"],"sourcesContent":["/**\r\n * Module for a multi-part arched line.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Polyline, IPolylineProperties, IPolylineAdapters, IPolylineEvents } from \"./Polyline\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { registry } from \"../Registry\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[Polyarc]].\r\n */\r\nexport interface IPolyarcProperties extends IPolylineProperties {\r\n\r\n\t/**\r\n\t * Relative position along the line the control point is. (0-1)\r\n\t *\r\n\t * @default 0.5\r\n\t */\r\n\tcontrolPointPosition: number;\r\n\r\n\t/**\r\n\t * Relative distance of the control point. (0-1)\r\n\t *\r\n\t * Default is half the length of the line. (0.5)\r\n\t *\r\n\t * @default 0.5\r\n\t */\r\n\tcontrolPointDistance: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[Polyarc]].\r\n */\r\nexport interface IPolyarcEvents extends IPolylineEvents { }\r\n\r\n/**\r\n * Defines adapters for [[Polyarc]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IPolyarcAdapters extends IPolylineAdapters, IPolyarcProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Draws a multi-part arched line.\r\n *\r\n * @see {@link IPolyarcEvents} for a list of available events\r\n * @see {@link IPolyarcAdapters} for a list of available Adapters\r\n */\r\nexport class Polyarc extends Polyline {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IPolyarcProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IPolyarcAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IPolyarcEvents;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"Polyarc\";\r\n\r\n\t\tthis.controlPointDistance = 0.5;\r\n\t\tthis.controlPointPosition = 0.5;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Creats and adds an SVG path for the arc.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic makePath(): void {\r\n\t\tthis._distance = 0;\r\n\t\tlet segments = this.segments;\r\n\r\n\t\tif (segments && segments.length > 0) {\r\n\t\t\tlet path: string = \"\";\r\n\t\t\tthis._realSegments = [];\r\n\r\n\t\t\tfor (let i = 0, len = segments.length; i < len; i++) {\r\n\t\t\t\tlet points: IPoint[] = segments[i];\r\n\t\t\t\tlet realPoints: IPoint[] = [];\r\n\t\t\t\tthis._realSegments.push(realPoints);\r\n\t\t\t\tif (points.length > 0) {\r\n\t\t\t\t\tpath += $path.moveTo(points[0]);\r\n\r\n\t\t\t\t\tfor (let p = 1; p < points.length; p++) {\r\n\t\t\t\t\t\tlet pointA: IPoint = points[p - 1];\r\n\t\t\t\t\t\tlet pointB: IPoint = points[p];\r\n\r\n\t\t\t\t\t\tlet distanceAB: number = $math.getDistance(pointB, pointA);\r\n\t\t\t\t\t\tlet cpDistance: number = distanceAB * this.controlPointDistance;\r\n\t\t\t\t\t\tlet controlPointPosition: number = this.controlPointPosition;\r\n\t\t\t\t\t\tlet angle: number = -$math.getAngle(pointA, pointB);\r\n\r\n\t\t\t\t\t\tlet cpx: number = pointA.x + (pointB.x - pointA.x) * controlPointPosition * 0.5 - cpDistance * $math.sin(angle);\r\n\t\t\t\t\t\tlet cpy: number = pointA.y + (pointB.y - pointA.y) * controlPointPosition * 0.5 - cpDistance * $math.cos(angle);\r\n\t\t\t\t\t\tlet controlPoint1: IPoint = { x: cpx, y: cpy };\r\n\r\n\t\t\t\t\t\tlet cpx2: number = pointA.x + (pointB.x - pointA.x) * controlPointPosition * 1.5 - cpDistance * $math.sin(angle);\r\n\t\t\t\t\t\tlet cpy2: number = pointA.y + (pointB.y - pointA.y) * controlPointPosition * 1.5 - cpDistance * $math.cos(angle);\r\n\t\t\t\t\t\tlet controlPoint2: IPoint = { x: cpx2, y: cpy2 };\r\n\r\n\t\t\t\t\t\tpath += $path.cubicCurveTo(pointB, controlPoint1, controlPoint2);\r\n\r\n\t\t\t\t\t\t// we add a lot of points in order to get the position/angle later\r\n\t\t\t\t\t\tlet stepCount: number = Math.ceil(distanceAB);\r\n\t\t\t\t\t\tlet prevPoint: IPoint = pointA;\r\n\t\t\t\t\t\tif (stepCount > 0) {\r\n\t\t\t\t\t\t\tfor (let i: number = 0; i <= stepCount; i++) {\r\n\t\t\t\t\t\t\t\tlet point: IPoint = $math.getPointOnCubicCurve(pointA, pointB, controlPoint1, controlPoint2, i / stepCount);\r\n\t\t\t\t\t\t\t\trealPoints.push(point);\r\n\t\t\t\t\t\t\t\tthis._distance += $math.getDistance(prevPoint, point);\r\n\t\t\t\t\t\t\t\tprevPoint = point;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\trealPoints.push(pointA);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tthis.path = path;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Relative position along the line the control point is. (0-1)\r\n\t *\r\n\t * @default 0.5\r\n\t * @param value  Position (0-1)\r\n\t */\r\n\tpublic set controlPointPosition(value: number) {\r\n\t\tthis.setPropertyValue(\"controlPointPosition\", value);\r\n\t\tthis.makePath();\r\n\t}\r\n\r\n\t/**\r\n\t * @return Position (0-1)\r\n\t */\r\n\tpublic get controlPointPosition(): number {\r\n\t\treturn this.getPropertyValue(\"controlPointPosition\");\r\n\t}\r\n\r\n\t/**\r\n\t * Relative distance of the control point. (0-1)\r\n\t *\r\n\t * Default is half the length of the line. (0.5)\r\n\t *\r\n\t * @default 0.5\r\n\t * @param value  Distance (0-1)\r\n\t */\r\n\tpublic set controlPointDistance(value: number) {\r\n\t\tthis.setPropertyValue(\"controlPointDistance\", value);\r\n\t\tthis.makePath();\r\n\t}\r\n\r\n\t/**\r\n\t * @return Distance (0-1)\r\n\t */\r\n\tpublic get controlPointDistance(): number {\r\n\t\treturn this.getPropertyValue(\"controlPointDistance\");\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Polyarc\"] = Polyarc;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}