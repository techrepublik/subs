{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n/**\r\n * This functionality is related to the HTML wrapper that houses `<svg>` tag.\r\n */\nimport { Popup } from \"../elements/Popup\";\nimport { Modal } from \"../elements/Modal\";\nimport { ListTemplate, ListDisposer } from \"../utils/List\";\nimport * as $utils from \"../utils/Utils\";\nimport * as $dom from \"../utils/DOM\";\nimport * as $array from \"../utils/Array\";\nimport * as $type from \"../utils/Type\";\nimport { ResizeSensor } from \"../utils/ResizeSensor\";\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n/**\r\n * A array of all SVG Containers (one SVG container per chart instance).\r\n *\r\n * @ignore Exclude from docs\r\n */\nexport var svgContainers = [];\n/**\r\n * A class used to create an HTML wrapper for the SVG contents.\r\n */\nvar SVGContainer = /** @class */function () {\n  /**\r\n   * Constructor\r\n   *\r\n   * * Creates an HTML wrapper for SVG\r\n   */\n  function SVGContainer(htmlElement, ghost) {\n    var _this = this;\n    /**\r\n     * Indicates if this object has already been deleted. Any\r\n     * destruction/disposal code should take this into account when deciding\r\n     * wheter to run potentially costly disposal operations if they already have\r\n     * been run.\r\n     */\n    this._disposed = false;\n    /**\r\n     * If this component is in a separate HTML container, `autoResize` means the\r\n     * module will constantly measure container's size and adopt contents to it.\r\n     */\n    this.autoResize = true;\n    /**\r\n     * Holds list of references to [[Sprite]] objects that should not be exported\r\n     * when exporting chart to an image.\r\n     *\r\n     * @ignore\r\n     */\n    this.nonExportableSprites = [];\n    /**\r\n     * List of objects that need to be disposed when this one is disposed.\r\n     */\n    this._disposers = [];\n    this.cssScale = 1;\n    // This is needed so that it won't resize while printing, so that way printing works correctly.\n    this._printing = false;\n    // Log parent HTML element\n    this.htmlElement = htmlElement;\n    if (!ghost) {\n      this._printing = false;\n      this.initSensor();\n      this._disposers.push($dom.addEventListener(window, \"beforeprint\", function () {\n        _this._printing = true;\n      }));\n      this._disposers.push($dom.addEventListener(window, \"afterprint\", function () {\n        _this._printing = false;\n      }));\n    }\n    // Adds to containers array\n    svgContainers.push(this);\n    /**\r\n     * Create child div for the container - it will have svg node\r\n     * It might seem that this container is not necessay, however having it solves\r\n     * a problems with mouse position detection and some other.\r\n     */\n    var svgContainer = document.createElement(\"div\");\n    var style = svgContainer.style;\n    style.width = \"100%\";\n    style.height = \"100%\";\n    style.position = \"relative\";\n    htmlElement.appendChild(svgContainer);\n    this.SVGContainer = svgContainer;\n  }\n  /**\r\n   * (Re)Initializes a resize sensor.\r\n   */\n  SVGContainer.prototype.initSensor = function () {\n    var _this = this;\n    if (this.resizeSensor) {\n      this.resizeSensor.dispose();\n    }\n    var callback = function () {\n      if (_this.autoResize && !_this._printing) {\n        _this.measure();\n      }\n    };\n    this.resizeSensor = new ResizeSensor(this.htmlElement, callback);\n    this._disposers.push(this.resizeSensor);\n  };\n  /**\r\n   * Measures size of parent HTML element.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  SVGContainer.prototype.measure = function () {\n    var width = $utils.width(this.htmlElement);\n    var height = $utils.height(this.htmlElement);\n    var container = this.container;\n    if (container) {\n      if (this.width != width || this.height != height) {\n        this.width = width;\n        this.height = height;\n        if (width > 0) {\n          container.maxWidth = width;\n        }\n        if (height > 0) {\n          container.maxHeight = height;\n        }\n        $dom.fixPixelPerfect(this.SVGContainer);\n      }\n      if (!container.maxWidth) {\n        container.maxWidth = 0;\n      }\n      if (!container.maxHeight) {\n        container.maxHeight = 0;\n      }\n      this.cssScale = 1;\n      this.checkTransform(this.htmlElement);\n    }\n  };\n  Object.defineProperty(SVGContainer.prototype, \"container\", {\n    /**\r\n     * @return Container\r\n     */\n    get: function () {\n      return this._container;\n    },\n    /**\r\n     * A [[Container]] element which is placed into container.\r\n     *\r\n     * @param container  Container\r\n     */\n    set: function (container) {\n      this._container = container;\n      this.measure();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Returns if this object has been already been disposed.\r\n   *\r\n   * @return Is disposed?\r\n   */\n  SVGContainer.prototype.isDisposed = function () {\n    return this._disposed;\n  };\n  /**\r\n   * Removes this container from SVG container list in system, which\r\n   * effectively disables size change monitoring for it.\r\n   */\n  SVGContainer.prototype.dispose = function () {\n    if (!this._disposed) {\n      $array.remove(svgContainers, this);\n    }\n    $array.each(this._disposers, function (item) {\n      item.dispose();\n    });\n  };\n  Object.defineProperty(SVGContainer.prototype, \"hideOverflow\", {\n    /**\r\n     * Indicates if chart container should have its style set\r\n     * to `overflow: hidden`.\r\n     *\r\n     * Normally, we don't want that, so that certain elements, such as tooltips,\r\n     * would be able to go outside chart area.\r\n     *\r\n     * There is one issue though. Some browsers ignore SVG masks and would\r\n     * display scrollbars if chart elements, that go outside chart area extend\r\n     * outside window.\r\n     *\r\n     * This is especially true for [[MapChart]], which can have its elements\r\n     * extend very widely when zoomed in. Even if those parts are not visible\r\n     * because of SVG masks, some browsers might still display window scrollbars.\r\n     *\r\n     * This is why we set this setting to `true` in [[MapChart]].\r\n     *\r\n     * Other charts use default of `false`.\r\n     */\n    set: function (value) {\n      if (value) {\n        this.SVGContainer.style.overflow = \"hidden\";\n      } else {\n        this.SVGContainer.style.overflow = \"\";\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(SVGContainer.prototype, \"modal\", {\n    /**\r\n     * ==========================================================================\r\n     * MODAL/POPUP RELATED STUFF\r\n     * ==========================================================================\r\n     * @hidden\r\n     */\n    /**\r\n     * Returns a [[Modal]] instance, associated with this chart.\r\n     * (elements top parent)\r\n     *\r\n     * Accessing modal does not make it appear. To make a modal appear, use\r\n     * `showModal()` method.\r\n     *\r\n     * @see {@link Modal} for more information about using Modal windows\r\n     * @return Modal instance\r\n     */\n    get: function () {\n      if (!$type.hasValue(this._modal)) {\n        // Create new modal\n        this._modal = new Modal();\n        this._modal.container = this.SVGContainer;\n        // Add to disposers\n        this._disposers.push(this._modal);\n      }\n      return this._modal;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Opens a modal window with specific content (`text` parameter) and,\r\n   * optionally, `title`.\r\n   *\r\n   * The `text` parameter can contain HTML content.\r\n   *\r\n   * @see {@link Modal} for more information about using Modal windows\r\n   * @param text   Modal contents\r\n   * @param title  Title for the modal window\r\n   */\n  SVGContainer.prototype.openModal = function (text, title) {\n    // Hide previous modal\n    this.closeModal();\n    // Create modal\n    var modal = this.modal;\n    modal.content = text;\n    modal.readerTitle = title || \"\";\n    modal.title = title || \"\";\n    modal.open();\n    return modal;\n  };\n  /**\r\n   * Hides modal window if there is one currently open.\r\n   */\n  SVGContainer.prototype.closeModal = function () {\n    if (this._modal) {\n      this.modal.close();\n    }\n  };\n  Object.defineProperty(SVGContainer.prototype, \"popups\", {\n    /**\r\n     * A list of popups for this chart.\r\n     *\r\n     * @return Popups\r\n     */\n    get: function () {\n      if (!$type.hasValue(this._popups)) {\n        // Create popup template\n        var popupTemplate = new Popup();\n        popupTemplate.container = this.SVGContainer;\n        // Create the list\n        this._popups = new ListTemplate(popupTemplate);\n        // Add to disposers\n        this._disposers.push(new ListDisposer(this._popups));\n        this._disposers.push(this._popups.template);\n      }\n      return this._popups;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Creates, opens, and returns a new [[Popup]] window.\r\n   *\r\n   * `text` can be any valid HTML.\r\n   *\r\n   * `title` is currently not supported.\r\n   *\r\n   * @param text   Popup contents\r\n   * @param title  Popup title\r\n   * @return Popup instance\r\n   */\n  SVGContainer.prototype.openPopup = function (text, title) {\n    var popup = this.popups.create();\n    popup.content = text;\n    if ($type.hasValue(title)) {\n      popup.title = title;\n    }\n    popup.open();\n    return popup;\n  };\n  /**\r\n   * Closes all currently open popup windows\r\n   */\n  SVGContainer.prototype.closeAllPopups = function () {\n    this.popups.each(function (popup) {\n      popup.close();\n    });\n  };\n  Object.defineProperty(SVGContainer.prototype, \"readerAlertElement\", {\n    /**\r\n     * ==========================================================================\r\n     * ACCESSIBILITY STUFF\r\n     * ==========================================================================\r\n     * @hidden\r\n     */\n    /**\r\n     * A `<div>` element used as as placeholder to trigger screen alerts.\r\n     *\r\n     * @sunce 4.9.2\r\n     * @return Element\r\n     */\n    get: function () {\n      if (!$type.hasValue(this._readerAlertElement)) {\n        // Create element\n        var div = document.createElement(\"div\");\n        div.setAttribute(\"role\", \"alert\");\n        div.style.zIndex = \"-100000\";\n        div.style.opacity = \"0\";\n        div.style.position = \"absolute\";\n        div.style.top = \"0\";\n        this.SVGContainer.appendChild(div);\n        this._readerAlertElement = div;\n      }\n      return this._readerAlertElement;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Triggers screen reader read out a message.\r\n   *\r\n   * @since 4.9.2\r\n   * @param  text  Alert text\r\n   */\n  SVGContainer.prototype.readerAlert = function (text) {\n    this.readerAlertElement.innerHTML = text;\n  };\n  /**\r\n   * ==========================================================================\r\n   * OTHER STUFF\r\n   * ==========================================================================\r\n   * @hidden\r\n   */\n  SVGContainer.prototype.checkTransform = function (div) {\n    if (window.getComputedStyle) {\n      if (div && div.style) {\n        var style = window.getComputedStyle(div, null);\n        if (style) {\n          var matrix = style.getPropertyValue(\"-webkit-transform\") || style.getPropertyValue(\"-moz-transform\") || style.getPropertyValue(\"-ms-transform\") || style.getPropertyValue(\"-o-transform\") || style.getPropertyValue(\"transform\");\n          if (matrix && matrix !== \"none\") {\n            var values = matrix.split('(')[1].split(')')[0].split(',');\n            var a = Number(values[0]);\n            var b = Number(values[1]);\n            var scale = Math.sqrt(a * a + b * b);\n            if (!isNaN(scale)) {\n              this.cssScale *= scale;\n            }\n          }\n        }\n      }\n      if (div.parentNode && div.parentNode instanceof HTMLElement) {\n        this.checkTransform(div.parentNode);\n      }\n    }\n  };\n  return SVGContainer;\n}();\nexport { SVGContainer };","map":{"version":3,"names":["Popup","Modal","ListTemplate","ListDisposer","$utils","$dom","$array","$type","ResizeSensor","svgContainers","SVGContainer","htmlElement","ghost","_this","_disposed","autoResize","nonExportableSprites","_disposers","cssScale","_printing","initSensor","push","addEventListener","window","svgContainer","document","createElement","style","width","height","position","appendChild","prototype","resizeSensor","dispose","callback","measure","container","maxWidth","maxHeight","fixPixelPerfect","checkTransform","Object","defineProperty","get","_container","set","isDisposed","remove","each","item","value","overflow","hasValue","_modal","openModal","text","title","closeModal","modal","content","readerTitle","open","close","_popups","popupTemplate","template","openPopup","popup","popups","create","closeAllPopups","_readerAlertElement","div","setAttribute","zIndex","opacity","top","readerAlert","readerAlertElement","innerHTML","getComputedStyle","matrix","getPropertyValue","values","split","a","Number","b","scale","Math","sqrt","isNaN","parentNode","HTMLElement"],"sources":["../../../../../src/.internal/core/rendering/SVGContainer.ts"],"sourcesContent":["/**\r\n * This functionality is related to the HTML wrapper that houses `<svg>` tag.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Container } from \"../Container\";\r\nimport { Sprite } from \"../Sprite\";\r\nimport { IDisposer } from \"../utils/Disposer\";\r\nimport { Popup } from \"../elements/Popup\";\r\nimport { Modal } from \"../elements/Modal\";\r\nimport { ListTemplate, ListDisposer } from \"../utils/List\";\r\nimport * as $utils from \"../utils/Utils\";\r\nimport * as $dom from \"../utils/DOM\";\r\nimport * as $array from \"../utils/Array\";\r\nimport * as $type from \"../utils/Type\";\r\nimport { ResizeSensor } from \"../utils/ResizeSensor\";\r\n\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n\r\n/**\r\n * A array of all SVG Containers (one SVG container per chart instance).\r\n *\r\n * @ignore Exclude from docs\r\n */\r\nexport const svgContainers: Array<SVGContainer> = [];\r\n\r\n/**\r\n * A class used to create an HTML wrapper for the SVG contents.\r\n */\r\nexport class SVGContainer implements IDisposer {\r\n\r\n\t/**\r\n\t * Indicates if this object has already been deleted. Any\r\n\t * destruction/disposal code should take this into account when deciding\r\n\t * wheter to run potentially costly disposal operations if they already have\r\n\t * been run.\r\n\t */\r\n\tprotected _disposed: boolean = false;\r\n\r\n\t/**\r\n\t * Width of HTML element.\r\n\t */\r\n\tpublic width: $type.Optional<number>;\r\n\r\n\t/**\r\n\t * Height of HTML element.\r\n\t */\r\n\tpublic height: $type.Optional<number>;\r\n\r\n\t/**\r\n\t * A [[Container]] element which is placed into container.\r\n\t */\r\n\tprotected _container: $type.Optional<Container>;\r\n\r\n\t/**\r\n\t * A parent HTML container that SVG wrapper element is placed in.\r\n\t */\r\n\tpublic htmlElement: HTMLElement;\r\n\r\n\t/**\r\n\t * If this component is in a separate HTML container, `autoResize` means the\r\n\t * module will constantly measure container's size and adopt contents to it.\r\n\t */\r\n\tpublic autoResize: Boolean = true;\r\n\r\n\t/**\r\n\t * A `<div>` element which acts as a wrapper/holder for the SVG element.\r\n\t */\r\n\tpublic SVGContainer: HTMLDivElement;\r\n\r\n\t/**\r\n\t * A `<div>` element which acts as a placeholder for accesibility reader\r\n\t * alert.\r\n\t */\r\n\tprivate _readerAlertElement: HTMLDivElement;\r\n\r\n\t/**\r\n\t * A reference to ResizeSensor object which monitors changes of div size.\r\n\t *\r\n\t * @deprecated\r\n\t * @ignore\r\n\t */\r\n\tpublic resizeSensor: ResizeSensor;\r\n\r\n\t/**\r\n\t * Holds list of references to [[Sprite]] objects that should not be exported\r\n\t * when exporting chart to an image.\r\n\t *\r\n\t * @ignore\r\n\t */\r\n\tpublic nonExportableSprites: Sprite[] = [];\r\n\r\n\t/**\r\n\t * Holds [[Modal]] object.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected _modal: $type.Optional<Modal>;\r\n\r\n\t/**\r\n\t * Holds [[Popup]] objects.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected _popups: $type.Optional<ListTemplate<Popup>>;\r\n\r\n\t/**\r\n\t * List of objects that need to be disposed when this one is disposed.\r\n\t */\r\n\tprotected _disposers: Array<IDisposer> = [];\r\n\r\n\tpublic cssScale: number = 1;\r\n\r\n\t// This is needed so that it won't resize while printing, so that way printing works correctly.\r\n\tprotected _printing: boolean = false;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t *\r\n\t * * Creates an HTML wrapper for SVG\r\n\t */\r\n\tconstructor(htmlElement: HTMLElement, ghost?: boolean) {\r\n\r\n\t\t// Log parent HTML element\r\n\t\tthis.htmlElement = htmlElement;\r\n\r\n\t\tif (!ghost) {\r\n\t\t\tthis._printing = false;\r\n\r\n\t\t\tthis.initSensor();\r\n\r\n\t\t\tthis._disposers.push($dom.addEventListener(window, \"beforeprint\", () => {\r\n\t\t\t\tthis._printing = true;\r\n\t\t\t}));\r\n\r\n\t\t\tthis._disposers.push($dom.addEventListener(window, \"afterprint\", () => {\r\n\t\t\t\tthis._printing = false;\r\n\t\t\t}));\r\n\t\t}\r\n\r\n\t\t// Adds to containers array\r\n\t\tsvgContainers.push(this);\r\n\r\n\t\t/**\r\n\t\t * Create child div for the container - it will have svg node\r\n\t\t * It might seem that this container is not necessay, however having it solves\r\n\t\t * a problems with mouse position detection and some other.\r\n\t\t */\r\n\t\tlet svgContainer = document.createElement(\"div\");\r\n\t\tlet style = svgContainer.style;\r\n\t\tstyle.width = \"100%\";\r\n\t\tstyle.height = \"100%\";\r\n\t\tstyle.position = \"relative\";\r\n\t\thtmlElement.appendChild(svgContainer);\r\n\r\n\t\tthis.SVGContainer = svgContainer;\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)Initializes a resize sensor.\r\n\t */\r\n\tpublic initSensor(): void {\r\n\t\tif (this.resizeSensor) {\r\n\t\t\tthis.resizeSensor.dispose();\r\n\t\t}\r\n\t\tconst callback = () => {\r\n\t\t\tif (this.autoResize && !this._printing) {\r\n\t\t\t\tthis.measure();\r\n\t\t\t}\r\n\t\t};\r\n\t\tthis.resizeSensor = new ResizeSensor(this.htmlElement, callback);\r\n\t\tthis._disposers.push(this.resizeSensor);\r\n\t}\r\n\r\n\t/**\r\n\t * Measures size of parent HTML element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic measure(): void {\r\n\t\tlet width: number = $utils.width(this.htmlElement);\r\n\t\tlet height: number = $utils.height(this.htmlElement);\r\n\t\tlet container = this.container;\r\n\t\tif (container) {\r\n\t\t\tif (this.width != width || this.height != height) {\r\n\t\t\t\tthis.width = width;\r\n\t\t\t\tthis.height = height;\r\n\r\n\t\t\t\tif (width > 0) {\r\n\t\t\t\t\tcontainer.maxWidth = width;\r\n\t\t\t\t}\r\n\t\t\t\tif (height > 0) {\r\n\t\t\t\t\tcontainer.maxHeight = height;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t$dom.fixPixelPerfect(this.SVGContainer);\r\n\t\t\t}\r\n\r\n\t\t\tif (!container.maxWidth) {\r\n\t\t\t\tcontainer.maxWidth = 0;\r\n\t\t\t}\r\n\t\t\tif (!container.maxHeight) {\r\n\t\t\t\tcontainer.maxHeight = 0;\r\n\t\t\t}\r\n\t\t\tthis.cssScale = 1;\r\n\t\t\tthis.checkTransform(this.htmlElement);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A [[Container]] element which is placed into container.\r\n\t *\r\n\t * @param container  Container\r\n\t */\r\n\tpublic set container(container: $type.Optional<Container>) {\r\n\t\tthis._container = container;\r\n\t\tthis.measure();\r\n\t}\r\n\r\n\t/**\r\n\t * @return Container\r\n\t */\r\n\tpublic get container(): $type.Optional<Container> {\r\n\t\treturn this._container;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns if this object has been already been disposed.\r\n\t *\r\n\t * @return Is disposed?\r\n\t */\r\n\tpublic isDisposed(): boolean {\r\n\t\treturn this._disposed;\r\n\t}\r\n\r\n\t/**\r\n\t * Removes this container from SVG container list in system, which\r\n\t * effectively disables size change monitoring for it.\r\n\t */\r\n\tpublic dispose(): void {\r\n\t\tif (!this._disposed) {\r\n\t\t\t$array.remove(svgContainers, this);\r\n\t\t}\r\n\r\n\t\t$array.each(this._disposers, (item) => {\r\n\t\t\titem.dispose();\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Indicates if chart container should have its style set\r\n\t * to `overflow: hidden`.\r\n\t *\r\n\t * Normally, we don't want that, so that certain elements, such as tooltips,\r\n\t * would be able to go outside chart area.\r\n\t *\r\n\t * There is one issue though. Some browsers ignore SVG masks and would\r\n\t * display scrollbars if chart elements, that go outside chart area extend\r\n\t * outside window.\r\n\t *\r\n\t * This is especially true for [[MapChart]], which can have its elements\r\n\t * extend very widely when zoomed in. Even if those parts are not visible\r\n\t * because of SVG masks, some browsers might still display window scrollbars.\r\n\t *\r\n\t * This is why we set this setting to `true` in [[MapChart]].\r\n\t *\r\n\t * Other charts use default of `false`.\r\n\t */\r\n\tpublic set hideOverflow(value: boolean) {\r\n\t\tif (value) {\r\n\t\t\tthis.SVGContainer.style.overflow = \"hidden\";\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.SVGContainer.style.overflow = \"\";\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * ==========================================================================\r\n\t * MODAL/POPUP RELATED STUFF\r\n\t * ==========================================================================\r\n\t * @hidden\r\n\t */\r\n\r\n\t/**\r\n\t * Returns a [[Modal]] instance, associated with this chart.\r\n\t * (elements top parent)\r\n\t *\r\n\t * Accessing modal does not make it appear. To make a modal appear, use\r\n\t * `showModal()` method.\r\n\t *\r\n\t * @see {@link Modal} for more information about using Modal windows\r\n\t * @return Modal instance\r\n\t */\r\n\tpublic get modal(): Modal {\r\n\r\n\t\tif (!$type.hasValue(this._modal)) {\r\n\r\n\t\t\t// Create new modal\r\n\t\t\tthis._modal = new Modal();\r\n\t\t\tthis._modal.container = this.SVGContainer;\r\n\r\n\t\t\t// Add to disposers\r\n\t\t\tthis._disposers.push(this._modal);\r\n\t\t}\r\n\t\treturn this._modal;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Opens a modal window with specific content (`text` parameter) and,\r\n\t * optionally, `title`.\r\n\t *\r\n\t * The `text` parameter can contain HTML content.\r\n\t *\r\n\t * @see {@link Modal} for more information about using Modal windows\r\n\t * @param text   Modal contents\r\n\t * @param title  Title for the modal window\r\n\t */\r\n\tpublic openModal(text: string, title?: string): Modal {\r\n\r\n\t\t// Hide previous modal\r\n\t\tthis.closeModal();\r\n\r\n\t\t// Create modal\r\n\t\tlet modal = this.modal;\r\n\t\tmodal.content = text;\r\n\t\tmodal.readerTitle = title || \"\";\r\n\t\tmodal.title = title || \"\";\r\n\t\tmodal.open();\r\n\r\n\t\treturn modal;\r\n\t}\r\n\r\n\t/**\r\n\t * Hides modal window if there is one currently open.\r\n\t */\r\n\tpublic closeModal(): void {\r\n\t\tif (this._modal) {\r\n\t\t\tthis.modal.close();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A list of popups for this chart.\r\n\t *\r\n\t * @return Popups\r\n\t */\r\n\tpublic get popups(): ListTemplate<Popup> {\r\n\r\n\t\tif (!$type.hasValue(this._popups)) {\r\n\r\n\t\t\t// Create popup template\r\n\t\t\tlet popupTemplate = new Popup();\r\n\t\t\tpopupTemplate.container = this.SVGContainer;\r\n\r\n\t\t\t// Create the list\r\n\t\t\tthis._popups = new ListTemplate(popupTemplate);\r\n\r\n\t\t\t// Add to disposers\r\n\t\t\tthis._disposers.push(new ListDisposer(this._popups));\r\n\t\t\tthis._disposers.push(this._popups.template);\r\n\t\t}\r\n\t\treturn this._popups;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Creates, opens, and returns a new [[Popup]] window.\r\n\t *\r\n\t * `text` can be any valid HTML.\r\n\t *\r\n\t * `title` is currently not supported.\r\n\t *\r\n\t * @param text   Popup contents\r\n\t * @param title  Popup title\r\n\t * @return Popup instance\r\n\t */\r\n\tpublic openPopup(text: string, title?: string): Popup {\r\n\t\tlet popup = this.popups.create();\r\n\t\tpopup.content = text;\r\n\t\tif ($type.hasValue(title)) {\r\n\t\t\tpopup.title = title;\r\n\t\t}\r\n\t\tpopup.open();\r\n\t\treturn popup;\r\n\t}\r\n\r\n\t/**\r\n\t * Closes all currently open popup windows\r\n\t */\r\n\tpublic closeAllPopups(): void {\r\n\t\tthis.popups.each((popup) => {\r\n\t\t\tpopup.close();\r\n\t\t});\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * ==========================================================================\r\n\t * ACCESSIBILITY STUFF\r\n\t * ==========================================================================\r\n\t * @hidden\r\n\t */\r\n\r\n\t/**\r\n\t * A `<div>` element used as as placeholder to trigger screen alerts.\r\n\t *\r\n\t * @sunce 4.9.2\r\n\t * @return Element\r\n\t */\r\n\tpublic get readerAlertElement(): HTMLDivElement {\r\n\t\tif (!$type.hasValue(this._readerAlertElement)) {\r\n\t\t\t// Create element\r\n\t\t\tconst div = document.createElement(\"div\");\r\n\t\t\tdiv.setAttribute(\"role\", \"alert\");\r\n\t\t\tdiv.style.zIndex = \"-100000\";\r\n\t\t\tdiv.style.opacity = \"0\";\r\n\t\t\tdiv.style.position = \"absolute\";\r\n\t\t\tdiv.style.top = \"0\";\r\n\t\t\tthis.SVGContainer.appendChild(div);\r\n\t\t\tthis._readerAlertElement = div;\r\n\t\t}\r\n\t\treturn this._readerAlertElement;\r\n\t}\r\n\r\n\t/**\r\n\t * Triggers screen reader read out a message.\r\n\t *\r\n\t * @since 4.9.2\r\n\t * @param  text  Alert text\r\n\t */\r\n\tpublic readerAlert(text: string): void {\r\n\t\tthis.readerAlertElement.innerHTML = text;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * ==========================================================================\r\n\t * OTHER STUFF\r\n\t * ==========================================================================\r\n\t * @hidden\r\n\t */\r\n\r\n\tprotected checkTransform(div: HTMLElement) {\r\n\t\tif (window.getComputedStyle) {\r\n\t\t\tif (div && div.style) {\r\n\t\t\t\tlet style = window.getComputedStyle(div, null);\r\n\t\t\t\tif (style) {\r\n\t\t\t\t\tlet matrix = style.getPropertyValue(\"-webkit-transform\") ||\r\n\t\t\t\t\t\tstyle.getPropertyValue(\"-moz-transform\") ||\r\n\t\t\t\t\t\tstyle.getPropertyValue(\"-ms-transform\") ||\r\n\t\t\t\t\t\tstyle.getPropertyValue(\"-o-transform\") ||\r\n\t\t\t\t\t\tstyle.getPropertyValue(\"transform\");\r\n\r\n\t\t\t\t\tif (matrix && matrix !== \"none\") {\r\n\t\t\t\t\t\tlet values = matrix.split('(')[1].split(')')[0].split(',');\r\n\t\t\t\t\t\tlet a = Number(values[0]);\r\n\t\t\t\t\t\tlet b = Number(values[1]);\r\n\r\n\t\t\t\t\t\tlet scale = Math.sqrt(a * a + b * b);\r\n\r\n\t\t\t\t\t\tif (!isNaN(scale)) {\r\n\t\t\t\t\t\t\tthis.cssScale *= scale;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (div.parentNode && div.parentNode instanceof HTMLElement) {\r\n\t\t\t\tthis.checkTransform(div.parentNode);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}