{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n/**\r\n * CSV parser.\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\nimport { DataParser } from \"./DataParser\";\nimport * as $type from \"../utils/Type\";\nimport * as $array from \"../utils/Array\";\n/**\r\n * Define possible separators.\r\n */\nvar separators = [\",\", \";\", \"\\t\"];\n/**\r\n * A parser for CSV format.\r\n *\r\n * @important\r\n */\nvar CSVParser = /** @class */function (_super) {\n  __extends(CSVParser, _super);\n  function CSVParser() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    /**\r\n     * Content-type suitable for CSV format.\r\n     */\n    _this.contentType = \"text/csv\";\n    /**\r\n     * Parser options.\r\n     *\r\n     * @see {@link ICSVOptions} for description of each option\r\n     */\n    _this.options = {\n      delimiter: \"\",\n      reverse: false,\n      skipRows: 0,\n      skipEmpty: true,\n      useColumnNames: false\n    };\n    return _this;\n  }\n  /**\r\n   * Tests if the format is CSV.\r\n   *\r\n   * @param data  Source data\r\n   * @return Is it CSV?\r\n   */\n  CSVParser.isCSV = function (data) {\n    return CSVParser.getDelimiterFromData(data) ? true : false;\n  };\n  /**\r\n   * Tries to determine a column separator.\r\n   *\r\n   * @param data  Source data\r\n   * @return Separator\r\n   */\n  CSVParser.getDelimiterFromData = function (data) {\n    // We're going to take first few lines of the CSV with different\n    // possible separators and check if it results in same number of columns.\n    // If it does, we're going to assume it's a CSV\n    var lines = data.split(\"\\n\");\n    var len = lines.length;\n    var separator;\n    $array.each(separators, function (sep) {\n      var columns = 0,\n        lineColums = 0;\n      // TODO replace with iterators\n      for (var i = 0; i < len; ++i) {\n        // Get number of columns in a line\n        columns = lines[i].split(sep).length;\n        if (columns > 1) {\n          // More than one column - possible candidate\n          if (lineColums === 0) {\n            // First line\n            lineColums = columns;\n          } else if (columns != lineColums) {\n            // Incorrect number of columns, give up on this separator\n            lineColums = 0;\n            break;\n          }\n        } else {\n          // Not this separator\n          // Not point in continuing\n          lineColums = 0;\n          break;\n        }\n      }\n      // Check if we have a winner\n      if (lineColums) {\n        separator = sep;\n      }\n    });\n    return separator;\n  };\n  /**\r\n   * Parses and returns data.\r\n   *\r\n   * @param data  Unparsed data\r\n   * @return Parsed data\r\n   */\n  CSVParser.prototype.parse = function (csv) {\n    // Check if we have delimiter set\n    if (!this.options.delimiter) {\n      this.options.delimiter = CSVParser.getDelimiterFromData(csv);\n    }\n    // Get CSV data as array\n    var data = this.CSVToArray(csv, this.options.delimiter);\n    // Do we need to cast some fields to numbers?\n    var empty = $type.hasValue(this.options.emptyAs);\n    var numbers = this.parsableNumbers;\n    var dates = this.parsableDates;\n    // Init resuling array\n    var res = [],\n      cols = [],\n      col,\n      i;\n    // Skip rows\n    for (i = 0; i < this.options.skipRows; i++) {\n      data.shift();\n    }\n    // First row holds column names?\n    if (this.options.useColumnNames) {\n      cols = data.shift();\n      // Normalize column names\n      for (var x = 0; x < cols.length; x++) {\n        // trim\n        col = $type.hasValue(cols[x]) ? cols[x].replace(/^\\s+|\\s+$/gm, \"\") : \"\";\n        // Check for empty\n        if (\"\" === col) {\n          col = \"col\" + x;\n        }\n        cols[x] = col;\n      }\n    }\n    // Iterate through the result set\n    var row;\n    while (true) {\n      row = this.options.reverse ? data.pop() : data.shift();\n      if (!row) {\n        break;\n      }\n      if (this.options.skipEmpty && row.length === 1 && row[0] === \"\") {\n        continue;\n      }\n      var dataPoint = {};\n      for (i = 0; i < row.length; i++) {\n        col = undefined === cols[i] ? \"col\" + i : cols[i];\n        dataPoint[col] = row[i] === \"\" ? this.options.emptyAs : row[i];\n        // Convert\n        if (empty) {\n          dataPoint[col] = this.maybeToEmpty(dataPoint[col]);\n        }\n        if (numbers) {\n          dataPoint[col] = this.maybeToNumber(col, dataPoint[col]);\n        }\n        if (dates) {\n          dataPoint[col] = this.maybeToDate(col, dataPoint[col]);\n        }\n      }\n      res.push(dataPoint);\n    }\n    return res;\n  };\n  /**\r\n   * Converts CSV into array.\r\n   *\r\n   * The functionality of this function is taken from here:\r\n   * http://www.bennadel.com/blog/1504-ask-ben-parsing-csv-strings-with-javascript-exec-regular-expression-command.htm\r\n   *\r\n   * @param data       Source data\r\n   * @param delimiter  Column delimiter\r\n   * @return Parsed array\r\n   */\n  CSVParser.prototype.CSVToArray = function (data, delimiter) {\n    // Check to see if the delimiter is defined. If not,\n    // then default to comma.\n    delimiter = delimiter || ',';\n    // Create a regular expression to parse the CSV values.\n    var objPattern = new RegExp(\n    // Delimiters.\n    \"(\\\\\" + delimiter + \"|\\\\r?\\\\n|\\\\r|^)\" +\n    // Quoted fields.\n    \"(?:\\\"([^\\\"]*(?:\\\"\\\"[^\\\"]*)*)\\\"|\" +\n    // Standard fields.\n    \"([^\\\"\\\\\" + delimiter + \"\\\\r\\\\n]*))\", \"gi\");\n    // Create an array to hold our data. Give the array\n    // a default empty first row.\n    var arrData = [[]];\n    // Create an array to hold our individual pattern\n    // matching groups.\n    var arrMatches = null;\n    // Keep looping over the regular expression matches\n    // until we can no longer find a match.\n    while (true) {\n      arrMatches = objPattern.exec(data);\n      if (!arrMatches) {\n        break;\n      }\n      // Get the delimiter that was found.\n      var strMatchedDelimiter = arrMatches[1];\n      // Check to see if the given delimiter has a length\n      // (is not the start of string) and if it matches\n      // field delimiter. If id does not, then we know\n      // that this delimiter is a row delimiter.\n      if (strMatchedDelimiter.length && strMatchedDelimiter !== delimiter) {\n        // Since we have reached a new row of data,\n        // add an empty row to our data array.\n        arrData.push([]);\n      }\n      // Now that we have our delimiter out of the way,\n      // let's check to see which kind of value we\n      // captured (quoted or unquoted).\n      var strMatchedValue = void 0;\n      if (arrMatches[2]) {\n        // We found a quoted value. When we capture\n        // this value, unescape any double quotes.\n        strMatchedValue = arrMatches[2].replace(new RegExp(\"\\\"\\\"\", \"g\"), \"\\\"\");\n      } else {\n        // We found a non-quoted value.\n        strMatchedValue = arrMatches[3];\n      }\n      // Now that we have our value string, let's add\n      // it to the data array.\n      arrData[arrData.length - 1].push(strMatchedValue);\n    }\n    // Return the parsed data.\n    return arrData;\n  };\n  return CSVParser;\n}(DataParser);\nexport { CSVParser };","map":{"version":3,"names":["DataParser","$type","$array","separators","CSVParser","_super","__extends","_this","apply","arguments","contentType","options","delimiter","reverse","skipRows","skipEmpty","useColumnNames","isCSV","data","getDelimiterFromData","lines","split","len","length","separator","each","sep","columns","lineColums","i","prototype","parse","csv","CSVToArray","empty","hasValue","emptyAs","numbers","parsableNumbers","dates","parsableDates","res","cols","col","shift","x","replace","row","pop","dataPoint","undefined","maybeToEmpty","maybeToNumber","maybeToDate","push","objPattern","RegExp","arrData","arrMatches","exec","strMatchedDelimiter","strMatchedValue"],"sources":["../../../../../src/.internal/core/data/CSVParser.ts"],"sourcesContent":["/**\r\n * CSV parser.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { DataParser, IDataParserOptions } from \"./DataParser\";\r\nimport { DateFormatter } from \"../formatters/DateFormatter\";\r\nimport * as $type from \"../utils/Type\";\r\nimport * as $array from \"../utils/Array\";\r\n\r\n/**\r\n * Defines options for CSV format parser\r\n */\r\nexport interface ICSVOptions extends IDataParserOptions {\r\n\r\n\t/**\r\n\t * A delimiter character for columns.\r\n\t *\r\n\t * @default ','\r\n\t */\r\n\tdelimiter?: string;\r\n\r\n\t/**\r\n\t * The data is in reverse order.\r\n\t *\r\n\t * If iset to `true`, parser will invert the order of the data items before\r\n\t * passing back the data.\r\n\t *\r\n\t * @default false\r\n\t */\r\n\treverse?: boolean;\r\n\r\n\t/**\r\n\t * Skip a number of rows from the beginning of the data.\r\n\t *\r\n\t * Useful if your data contains non-data headers, such as column names or\r\n\t * empty rows.\r\n\t *\r\n\t * @default 0\r\n\t */\r\n\tskipRows?: number;\r\n\r\n\t/**\r\n\t * Skip empty rows.\r\n\t *\r\n\t * If set to `false`, parser will generate empty data points for empty rows\r\n\t * in data.\r\n\t *\r\n\t * @default true\r\n\t */\r\n\tskipEmpty?: boolean;\r\n\r\n\t/**\r\n\t * Use the first row in data to generte column names.\r\n\t *\r\n\t * Normally, parser will name each column `col0`, `col1`, etc.\r\n\t *\r\n\t * Setting this to `true` will make the parser look at the first row, for\r\n\t * actual column names.\r\n\t *\r\n\t * Please note that if you use it with `skipRows`, the specified number of\r\n\t * rows will be removed, then the parser will look for column names in the\r\n\t * first row of what's left.\r\n\t *\r\n\t * @default false\r\n\t */\r\n\tuseColumnNames?: boolean;\r\n\r\n\t/**\r\n\t * A list of fields that should be treaded as numeric.\r\n\t *\r\n\t * Any information container in such fields will be converted to `number`.\r\n\t */\r\n\tnumberFields?: string[];\r\n\r\n\t/**\r\n\t * A list of fields that hold date/time infromation.\r\n\t *\r\n\t * Parser will try to convert such fields into `Date` objects.\r\n\t */\r\n\tdateFields?: string[];\r\n\r\n\t/**\r\n\t * A date formatted to be used when parsing dates.\r\n\t */\r\n\tdateFormatter?: DateFormatter;\r\n}\r\n\r\n/**\r\n * Define possible separators.\r\n */\r\nlet separators = [\",\", \";\", \"\\t\"];\r\n\r\n/**\r\n * A parser for CSV format.\r\n *\r\n * @important\r\n */\r\nexport class CSVParser extends DataParser {\r\n\r\n\t/**\r\n\t * Tests if the format is CSV.\r\n\t *\r\n\t * @param data  Source data\r\n\t * @return Is it CSV?\r\n\t */\r\n\tstatic isCSV(data: string): boolean {\r\n\t\treturn CSVParser.getDelimiterFromData(data) ? true : false;\r\n\t}\r\n\r\n\t/**\r\n\t * Tries to determine a column separator.\r\n\t *\r\n\t * @param data  Source data\r\n\t * @return Separator\r\n\t */\r\n\tstatic getDelimiterFromData(data: string): string {\r\n\r\n\t\t// We're going to take first few lines of the CSV with different\r\n\t\t// possible separators and check if it results in same number of columns.\r\n\t\t// If it does, we're going to assume it's a CSV\r\n\t\tlet lines = data.split(\"\\n\");\r\n\t\tlet len = lines.length;\r\n\t\tlet separator: string;\r\n\r\n\t\t$array.each(separators, (sep) => {\r\n\t\t\tlet columns = 0,\r\n\t\t\t\tlineColums = 0;\r\n\r\n\t\t\t// TODO replace with iterators\r\n\t\t\tfor (let i = 0; i < len; ++i) {\r\n\r\n\t\t\t\t// Get number of columns in a line\r\n\t\t\t\tcolumns = lines[i].split(sep).length;\r\n\r\n\t\t\t\tif (columns > 1) {\r\n\r\n\t\t\t\t\t// More than one column - possible candidate\r\n\t\t\t\t\tif (lineColums === 0) {\r\n\t\t\t\t\t\t// First line\r\n\t\t\t\t\t\tlineColums = columns;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if (columns != lineColums) {\r\n\t\t\t\t\t\t// Incorrect number of columns, give up on this separator\r\n\t\t\t\t\t\tlineColums = 0;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\r\n\t\t\t\t\t// Not this separator\r\n\t\t\t\t\t// Not point in continuing\r\n\t\t\t\t\tlineColums = 0;\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// Check if we have a winner\r\n\t\t\tif (lineColums) {\r\n\t\t\t\tseparator = sep;\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\treturn separator;\r\n\t}\r\n\r\n\t/**\r\n\t * Content-type suitable for CSV format.\r\n\t */\r\n\tpublic contentType: string = \"text/csv\";\r\n\r\n\t/**\r\n\t * Parser options.\r\n\t *\r\n\t * @see {@link ICSVOptions} for description of each option\r\n\t */\r\n\tpublic options: ICSVOptions = {\r\n\t\tdelimiter: \"\",\r\n\t\treverse: false,\r\n\t\tskipRows: 0,\r\n\t\tskipEmpty: true,\r\n\t\tuseColumnNames: false\r\n\t};\r\n\r\n\t/**\r\n\t * Parses and returns data.\r\n\t *\r\n\t * @param data  Unparsed data\r\n\t * @return Parsed data\r\n\t */\r\n\tpublic parse(csv: string): any[] {\r\n\r\n\t\t// Check if we have delimiter set\r\n\t\tif (!this.options.delimiter) {\r\n\t\t\tthis.options.delimiter = CSVParser.getDelimiterFromData(csv);\r\n\t\t}\r\n\r\n\t\t// Get CSV data as array\r\n\t\tlet data = this.CSVToArray(csv, this.options.delimiter);\r\n\r\n\t\t// Do we need to cast some fields to numbers?\r\n\t\tlet empty = $type.hasValue(this.options.emptyAs);\r\n\t\tlet numbers = this.parsableNumbers;\r\n\t\tlet dates = this.parsableDates;\r\n\r\n\t\t// Init resuling array\r\n\t\tlet res: any[] = [],\r\n\t\t\tcols: string[] = [],\r\n\t\t\tcol: string,\r\n\t\t\ti: number;\r\n\r\n\t\t// Skip rows\r\n\t\tfor (i = 0; i < this.options.skipRows; i++) {\r\n\t\t\tdata.shift();\r\n\t\t}\r\n\r\n\t\t// First row holds column names?\r\n\t\tif (this.options.useColumnNames) {\r\n\t\t\tcols = data.shift();\r\n\r\n\t\t\t// Normalize column names\r\n\t\t\tfor (let x = 0; x < cols.length; x++) {\r\n\t\t\t\t// trim\r\n\t\t\t\tcol = $type.hasValue(cols[x]) ? cols[x].replace(/^\\s+|\\s+$/gm, \"\") : \"\";\r\n\r\n\t\t\t\t// Check for empty\r\n\t\t\t\tif (\"\" === col) {\r\n\t\t\t\t\tcol = \"col\" + x;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tcols[x] = col;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Iterate through the result set\r\n\t\tlet row;\r\n\t\twhile (true) {\r\n\t\t\trow = this.options.reverse ? data.pop() : data.shift();\r\n\r\n\t\t\tif (!row) {\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\r\n\t\t\tif (this.options.skipEmpty && row.length === 1 && row[0] === \"\") {\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\r\n\t\t\tlet dataPoint: any = {};\r\n\t\t\tfor (i = 0; i < row.length; i++) {\r\n\t\t\t\tcol = undefined === cols[i] ? \"col\" + i : cols[i];\r\n\t\t\t\tdataPoint[col] = row[i] === \"\" ? this.options.emptyAs : row[i];\r\n\r\n\t\t\t\t// Convert\r\n\t\t\t\tif (empty) {\r\n\t\t\t\t\tdataPoint[col] = this.maybeToEmpty(dataPoint[col]);\r\n\t\t\t\t}\r\n\t\t\t\tif (numbers) {\r\n\t\t\t\t\tdataPoint[col] = this.maybeToNumber(col, dataPoint[col]);\r\n\t\t\t\t}\r\n\t\t\t\tif (dates) {\r\n\t\t\t\t\tdataPoint[col] = this.maybeToDate(col, dataPoint[col]);\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\t\t\tres.push(dataPoint);\r\n\t\t}\r\n\r\n\t\treturn res;\r\n\t}\r\n\r\n\t/**\r\n \t * Converts CSV into array.\r\n \t *\r\n \t * The functionality of this function is taken from here:\r\n \t * http://www.bennadel.com/blog/1504-ask-ben-parsing-csv-strings-with-javascript-exec-regular-expression-command.htm\r\n \t *\r\n \t * @param data       Source data\r\n \t * @param delimiter  Column delimiter\r\n \t * @return Parsed array\r\n \t */\r\n\tpublic CSVToArray(data: string, delimiter: string): any[] {\r\n\r\n\t\t// Check to see if the delimiter is defined. If not,\r\n\t\t// then default to comma.\r\n\t\tdelimiter = (delimiter || ',');\r\n\r\n\t\t// Create a regular expression to parse the CSV values.\r\n\t\tlet objPattern = new RegExp(\r\n\t\t\t(\r\n\t\t\t\t// Delimiters.\r\n\t\t\t\t\"(\\\\\" + delimiter + \"|\\\\r?\\\\n|\\\\r|^)\" +\r\n\r\n\t\t\t\t// Quoted fields.\r\n\t\t\t\t\"(?:\\\"([^\\\"]*(?:\\\"\\\"[^\\\"]*)*)\\\"|\" +\r\n\r\n\t\t\t\t// Standard fields.\r\n\t\t\t\t\"([^\\\"\\\\\" + delimiter + \"\\\\r\\\\n]*))\"\r\n\t\t\t),\r\n\t\t\t\"gi\"\r\n\t\t);\r\n\r\n\r\n\t\t// Create an array to hold our data. Give the array\r\n\t\t// a default empty first row.\r\n\t\tlet arrData: any[] = [\r\n\t\t\t[]\r\n\t\t];\r\n\r\n\t\t// Create an array to hold our individual pattern\r\n\t\t// matching groups.\r\n\t\tlet arrMatches = null;\r\n\r\n\t\t// Keep looping over the regular expression matches\r\n\t\t// until we can no longer find a match.\r\n\t\twhile (true) {\r\n\t\t\tarrMatches = objPattern.exec(data);\r\n\r\n\t\t\tif (!arrMatches) {\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\r\n\t\t\t// Get the delimiter that was found.\r\n\t\t\tlet strMatchedDelimiter = arrMatches[1];\r\n\r\n\t\t\t// Check to see if the given delimiter has a length\r\n\t\t\t// (is not the start of string) and if it matches\r\n\t\t\t// field delimiter. If id does not, then we know\r\n\t\t\t// that this delimiter is a row delimiter.\r\n\t\t\tif (\r\n\t\t\t\tstrMatchedDelimiter.length &&\r\n\t\t\t\t(strMatchedDelimiter !== delimiter)\r\n\t\t\t) {\r\n\r\n\t\t\t\t// Since we have reached a new row of data,\r\n\t\t\t\t// add an empty row to our data array.\r\n\t\t\t\tarrData.push([]);\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// Now that we have our delimiter out of the way,\r\n\t\t\t// let's check to see which kind of value we\r\n\t\t\t// captured (quoted or unquoted).\r\n\t\t\tlet strMatchedValue;\r\n\t\t\tif (arrMatches[2]) {\r\n\r\n\t\t\t\t// We found a quoted value. When we capture\r\n\t\t\t\t// this value, unescape any double quotes.\r\n\t\t\t\tstrMatchedValue = arrMatches[2].replace(\r\n\t\t\t\t\tnew RegExp(\"\\\"\\\"\", \"g\"),\r\n\t\t\t\t\t\"\\\"\"\r\n\t\t\t\t);\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t// We found a non-quoted value.\r\n\t\t\t\tstrMatchedValue = arrMatches[3];\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// Now that we have our value string, let's add\r\n\t\t\t// it to the data array.\r\n\t\t\tarrData[arrData.length - 1].push(strMatchedValue);\r\n\t\t}\r\n\r\n\t\t// Return the parsed data.\r\n\t\treturn (arrData);\r\n\t}\r\n\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}