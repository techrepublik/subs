{"ast":null,"code":"import { geoProjection as projection } from \"d3-geo\";\nimport { abs, asin, atan, cos, epsilon, halfPi, pi, sign, sin, sqrt, tan } from \"./math.js\";\nexport function vanDerGrinten3Raw(lambda, phi) {\n  if (abs(phi) < epsilon) return [lambda, 0];\n  var sinTheta = phi / halfPi,\n    theta = asin(sinTheta);\n  if (abs(lambda) < epsilon || abs(abs(phi) - halfPi) < epsilon) return [0, pi * tan(theta / 2)];\n  var A = (pi / lambda - lambda / pi) / 2,\n    y1 = sinTheta / (1 + cos(theta));\n  return [pi * (sign(lambda) * sqrt(A * A + 1 - y1 * y1) - A), pi * y1];\n}\nvanDerGrinten3Raw.invert = function (x, y) {\n  if (!y) return [x, 0];\n  var y1 = y / pi,\n    A = (pi * pi * (1 - y1 * y1) - x * x) / (2 * pi * x);\n  return [x ? pi * (sign(x) * sqrt(A * A + 1) - A) : 0, halfPi * sin(2 * atan(y1))];\n};\nexport default function () {\n  return projection(vanDerGrinten3Raw).scale(79.4183);\n}","map":{"version":3,"names":["geoProjection","projection","abs","asin","atan","cos","epsilon","halfPi","pi","sign","sin","sqrt","tan","vanDerGrinten3Raw","lambda","phi","sinTheta","theta","A","y1","invert","x","y","scale"],"sources":["/home/josh/Documents/projects/subs/vue_subs/node_modules/d3-geo-projection/src/vanDerGrinten3.js"],"sourcesContent":["import {geoProjection as projection} from \"d3-geo\";\nimport {abs, asin, atan, cos, epsilon, halfPi, pi, sign, sin, sqrt, tan} from \"./math.js\";\n\nexport function vanDerGrinten3Raw(lambda, phi) {\n  if (abs(phi) < epsilon) return [lambda, 0];\n  var sinTheta = phi / halfPi,\n      theta = asin(sinTheta);\n  if (abs(lambda) < epsilon || abs(abs(phi) - halfPi) < epsilon) return [0, pi * tan(theta / 2)];\n  var A = (pi / lambda - lambda / pi) / 2,\n      y1 = sinTheta / (1 + cos(theta));\n  return [\n    pi * (sign(lambda) * sqrt(A * A + 1 - y1 * y1) - A),\n    pi * y1\n  ];\n}\n\nvanDerGrinten3Raw.invert = function(x, y) {\n  if (!y) return [x, 0];\n  var y1 = y / pi,\n      A = (pi * pi * (1 - y1 * y1) - x * x) / (2 * pi * x);\n  return [\n    x ? pi * (sign(x) * sqrt(A * A + 1) - A) : 0,\n    halfPi * sin(2 * atan(y1))\n  ];\n};\n\nexport default function() {\n  return projection(vanDerGrinten3Raw)\n        .scale(79.4183);\n}\n"],"mappings":"AAAA,SAAQA,aAAa,IAAIC,UAAU,QAAO,QAAQ;AAClD,SAAQC,GAAG,EAAEC,IAAI,EAAEC,IAAI,EAAEC,GAAG,EAAEC,OAAO,EAAEC,MAAM,EAAEC,EAAE,EAAEC,IAAI,EAAEC,GAAG,EAAEC,IAAI,EAAEC,GAAG,QAAO,WAAW;AAEzF,OAAO,SAASC,iBAAiBA,CAACC,MAAM,EAAEC,GAAG,EAAE;EAC7C,IAAIb,GAAG,CAACa,GAAG,CAAC,GAAGT,OAAO,EAAE,OAAO,CAACQ,MAAM,EAAE,CAAC,CAAC;EAC1C,IAAIE,QAAQ,GAAGD,GAAG,GAAGR,MAAM;IACvBU,KAAK,GAAGd,IAAI,CAACa,QAAQ,CAAC;EAC1B,IAAId,GAAG,CAACY,MAAM,CAAC,GAAGR,OAAO,IAAIJ,GAAG,CAACA,GAAG,CAACa,GAAG,CAAC,GAAGR,MAAM,CAAC,GAAGD,OAAO,EAAE,OAAO,CAAC,CAAC,EAAEE,EAAE,GAAGI,GAAG,CAACK,KAAK,GAAG,CAAC,CAAC,CAAC;EAC9F,IAAIC,CAAC,GAAG,CAACV,EAAE,GAAGM,MAAM,GAAGA,MAAM,GAAGN,EAAE,IAAI,CAAC;IACnCW,EAAE,GAAGH,QAAQ,IAAI,CAAC,GAAGX,GAAG,CAACY,KAAK,CAAC,CAAC;EACpC,OAAO,CACLT,EAAE,IAAIC,IAAI,CAACK,MAAM,CAAC,GAAGH,IAAI,CAACO,CAAC,GAAGA,CAAC,GAAG,CAAC,GAAGC,EAAE,GAAGA,EAAE,CAAC,GAAGD,CAAC,CAAC,EACnDV,EAAE,GAAGW,EAAE,CACR;AACH;AAEAN,iBAAiB,CAACO,MAAM,GAAG,UAASC,CAAC,EAAEC,CAAC,EAAE;EACxC,IAAI,CAACA,CAAC,EAAE,OAAO,CAACD,CAAC,EAAE,CAAC,CAAC;EACrB,IAAIF,EAAE,GAAGG,CAAC,GAAGd,EAAE;IACXU,CAAC,GAAG,CAACV,EAAE,GAAGA,EAAE,IAAI,CAAC,GAAGW,EAAE,GAAGA,EAAE,CAAC,GAAGE,CAAC,GAAGA,CAAC,KAAK,CAAC,GAAGb,EAAE,GAAGa,CAAC,CAAC;EACxD,OAAO,CACLA,CAAC,GAAGb,EAAE,IAAIC,IAAI,CAACY,CAAC,CAAC,GAAGV,IAAI,CAACO,CAAC,GAAGA,CAAC,GAAG,CAAC,CAAC,GAAGA,CAAC,CAAC,GAAG,CAAC,EAC5CX,MAAM,GAAGG,GAAG,CAAC,CAAC,GAAGN,IAAI,CAACe,EAAE,CAAC,CAAC,CAC3B;AACH,CAAC;AAED,eAAe,YAAW;EACxB,OAAOlB,UAAU,CAACY,iBAAiB,CAAC,CAC7BU,KAAK,CAAC,OAAO,CAAC;AACvB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}