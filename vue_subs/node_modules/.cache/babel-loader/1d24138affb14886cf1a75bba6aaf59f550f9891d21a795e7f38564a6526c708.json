{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n/**\r\n * Functionality for drawing simple SwitchButtons.\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\nimport { Container } from \"../Container\";\nimport { Label } from \"./Label\";\nimport { Button } from \"../elements/Button\";\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\nimport { Circle } from \"../../core/elements/Circle\";\nimport { percent } from \"../../core/utils/Percent\";\nimport { registry } from \"../Registry\";\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n/**\r\n * SwitchButton class is capable of drawing a simple rectangular SwitchButton with\r\n * optionally rounded corners and an icon in it.\r\n *\r\n * @see {@link ISwitchButtonEvents} for a list of available events\r\n * @see {@link ISwitchButtonAdapters} for a list of available Adapters\r\n */\nvar SwitchButton = /** @class */function (_super) {\n  __extends(SwitchButton, _super);\n  /**\r\n   * Constructor\r\n   */\n  function SwitchButton() {\n    var _this =\n    // Init\n    _super.call(this) || this;\n    _this.className = \"SwitchButton\";\n    _this.tooltipY = 0;\n    // Set defaults\n    _this.layout = \"horizontal\";\n    _this.contentAlign = \"center\";\n    _this.contentValign = \"middle\";\n    _this.padding(8, 16, 8, 16);\n    _this.setStateOnChildren = true;\n    _this.states.create(\"active\");\n    var interfaceColors = new InterfaceColorSet();\n    // Create the label element\n    var leftLabel = new Label();\n    leftLabel.fillOpacity = 0.3;\n    var llas = leftLabel.states.create(\"active\");\n    llas.properties.fillOpacity = 1;\n    leftLabel.isActive = true;\n    _this.leftLabel = leftLabel;\n    var button = new Button();\n    var circle = new Circle();\n    button.contentValign = \"none\";\n    button.padding(0, 0, 0, 0);\n    circle.radius = 10;\n    button.icon = circle;\n    button.icon.valign = \"middle\";\n    button.label = undefined;\n    var p100 = percent(100);\n    button.background.cornerRadius(p100, p100, p100, p100);\n    button.width = circle.radius * 3.5;\n    button.height = circle.radius * 2.1;\n    button.marginLeft = 8;\n    button.marginRight = 8;\n    button.togglable = true;\n    circle.dx = -circle.radius * 0.7;\n    circle.fill = interfaceColors.getFor(\"primaryButton\");\n    var hs = circle.states.create(\"hover\");\n    hs.properties.fill = interfaceColors.getFor(\"primaryButtonHover\");\n    var as = circle.states.create(\"active\");\n    as.properties.fill = interfaceColors.getFor(\"primaryButtonActive\");\n    as.properties.dx = circle.radius * 0.7;\n    _this.switchButton = button;\n    _this.events.on(\"toggled\", function () {\n      _this.leftLabel.isActive = !_this.isActive;\n      _this.rightLabel.isActive = _this.isActive;\n    });\n    // Create the label element\n    var rightLabel = new Label();\n    rightLabel.fillOpacity = 0.3;\n    var rlas = rightLabel.states.create(\"active\");\n    rlas.properties.fillOpacity = 1;\n    _this.rightLabel = rightLabel;\n    // Set up accessibility\n    // A Button should be always focusable\n    _this.role = \"button\";\n    _this.focusable = true;\n    rightLabel.valign = \"middle\";\n    leftLabel.valign = \"middle\";\n    button.valign = \"middle\";\n    // Apply theme\n    _this.applyTheme();\n    return _this;\n  }\n  Object.defineProperty(SwitchButton.prototype, \"leftLabel\", {\n    /**\r\n     * @return Left label element\r\n     */\n    get: function () {\n      return this._leftLabel;\n    },\n    /**\r\n     * [[Label]] element to be used for left text.\r\n     *\r\n     * @param left label element\r\n     */\n    set: function (label) {\n      if (this._leftLabel) {\n        this.removeDispose(this._leftLabel);\n      }\n      this._leftLabel = label;\n      if (label) {\n        label.parent = this;\n        label.interactionsEnabled = false;\n        label.shouldClone = false;\n        this._disposers.push(this._leftLabel);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(SwitchButton.prototype, \"rightLabel\", {\n    /**\r\n     * @return Rigth label element\r\n     */\n    get: function () {\n      return this._rightLabel;\n    },\n    /**\r\n     * [[Label]] element to be used for left text.\r\n     *\r\n     * @param rigth label element\r\n     */\n    set: function (label) {\n      if (this._rightLabel) {\n        this.removeDispose(this._rightLabel);\n      }\n      this._rightLabel = label;\n      if (label) {\n        label.parent = this;\n        label.interactionsEnabled = false;\n        label.shouldClone = false;\n        this._disposers.push(this._rightLabel);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(SwitchButton.prototype, \"switch\", {\n    /**\r\n     * @ignore\r\n     * @deprecated Use `switchButton` instead\r\n     */\n    get: function () {\n      return this._switchButton;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(SwitchButton.prototype, \"switchButton\", {\n    /**\r\n     * @return Button\r\n     */\n    get: function () {\n      return this._switchButton;\n    },\n    /**\r\n     * A [[Button]] element for switch.\r\n     *\r\n     * @param Button\r\n     */\n    set: function (button) {\n      if (this._switchButton) {\n        this.removeDispose(this._switchButton);\n      }\n      this._switchButton = button;\n      if (button) {\n        button.parent = this;\n        button.shouldClone = false;\n        this._disposers.push(this._switchButton);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Copies properties and other attributes.\r\n   *\r\n   * @param source  Source\r\n   */\n  SwitchButton.prototype.copyFrom = function (source) {\n    _super.prototype.copyFrom.call(this, source);\n    if (source.leftLabel) {\n      this.leftLabel.copyFrom(source.leftLabel);\n    }\n    if (source.rightLabel) {\n      this.rightLabel.copyFrom(source.rightLabel);\n    }\n    if (source.switchButton) {\n      this.switchButton.copyFrom(source.switchButton);\n    }\n  };\n  return SwitchButton;\n}(Container);\nexport { SwitchButton };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\nregistry.registeredClasses[\"SwitchButton\"] = SwitchButton;","map":{"version":3,"names":["Container","Label","Button","InterfaceColorSet","Circle","percent","registry","SwitchButton","_super","__extends","_this","call","className","tooltipY","layout","contentAlign","contentValign","padding","setStateOnChildren","states","create","interfaceColors","leftLabel","fillOpacity","llas","properties","isActive","button","circle","radius","icon","valign","label","undefined","p100","background","cornerRadius","width","height","marginLeft","marginRight","togglable","dx","fill","getFor","hs","as","switchButton","events","on","rightLabel","rlas","role","focusable","applyTheme","Object","defineProperty","prototype","get","_leftLabel","set","removeDispose","parent","interactionsEnabled","shouldClone","_disposers","push","_rightLabel","_switchButton","copyFrom","source","registeredClasses"],"sources":["../../../../../src/.internal/core/elements/SwitchButton.ts"],"sourcesContent":["/**\r\n * Functionality for drawing simple SwitchButtons.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Container, IContainerProperties, IContainerAdapters, IContainerEvents } from \"../Container\";\r\nimport { Sprite } from \"../Sprite\";\r\nimport { Label } from \"./Label\";\r\nimport { RoundedRectangle } from \"../elements/RoundedRectangle\";\r\nimport { Button } from \"../elements/Button\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport { Circle } from \"../../core/elements/Circle\";\r\nimport { percent } from \"../../core/utils/Percent\";\r\nimport { registry } from \"../Registry\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[SwitchButton]].\r\n */\r\nexport interface ISwitchButtonProperties extends IContainerProperties { }\r\n\r\n/**\r\n * Defines events for [[SwitchButton]].\r\n */\r\nexport interface ISwitchButtonEvents extends IContainerEvents { }\r\n\r\n/**\r\n * Defines adapters for [[SwitchButton]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ISwitchButtonAdapters extends IContainerAdapters, ISwitchButtonProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * SwitchButton class is capable of drawing a simple rectangular SwitchButton with\r\n * optionally rounded corners and an icon in it.\r\n *\r\n * @see {@link ISwitchButtonEvents} for a list of available events\r\n * @see {@link ISwitchButtonAdapters} for a list of available Adapters\r\n */\r\nexport class SwitchButton extends Container {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: ISwitchButtonProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: ISwitchButtonAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: ISwitchButtonEvents;\r\n\r\n\t/**\r\n\t * Icon reference.\r\n\t */\r\n\tprotected _icon: Sprite;\r\n\r\n\t/**\r\n\t * [[Label]] element for SwitchButton content.\r\n\t */\r\n\tprotected _leftLabel: $type.Optional<Label>;\r\n\r\n\t/**\r\n\t * [[Label]] element for SwitchButton content.\r\n\t */\r\n\tprotected _rightLabel: $type.Optional<Label>;\r\n\r\n\t/**\r\n\t * A type for background.\r\n\t */\r\n\tpublic _background: RoundedRectangle;\r\n\r\n\tprotected _switchButton: Button;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"SwitchButton\";\r\n\r\n\t\tthis.tooltipY = 0;\r\n\r\n\t\t// Set defaults\r\n\t\tthis.layout = \"horizontal\";\r\n\t\tthis.contentAlign = \"center\";\r\n\t\tthis.contentValign = \"middle\";\r\n\t\tthis.padding(8, 16, 8, 16);\r\n\t\tthis.setStateOnChildren = true;\r\n\t\tthis.states.create(\"active\");\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\r\n\t\t// Create the label element\r\n\t\tlet leftLabel = new Label();\r\n\t\tleftLabel.fillOpacity = 0.3;\r\n\t\tlet llas = leftLabel.states.create(\"active\");\r\n\t\tllas.properties.fillOpacity = 1;\r\n\t\tleftLabel.isActive = true;\r\n\t\tthis.leftLabel = leftLabel;\r\n\r\n\t\tlet button = new Button();\r\n\t\tlet circle = new Circle();\r\n\t\tbutton.contentValign = \"none\";\r\n\t\tbutton.padding(0, 0, 0, 0);\r\n\t\tcircle.radius = 10;\r\n\t\tbutton.icon = circle;\r\n\t\tbutton.icon.valign = \"middle\";\r\n\t\tbutton.label = undefined;\r\n\t\tlet p100 = percent(100);\r\n\t\tbutton.background.cornerRadius(p100, p100, p100, p100);\r\n\t\tbutton.width = circle.radius * 3.5;\r\n\t\tbutton.height = circle.radius * 2.1;\r\n\t\tbutton.marginLeft = 8;\r\n\t\tbutton.marginRight = 8;\r\n\t\tbutton.togglable = true;\r\n\t\tcircle.dx = -circle.radius * 0.7;\r\n\t\tcircle.fill = interfaceColors.getFor(\"primaryButton\");\r\n\r\n\t\tlet hs = circle.states.create(\"hover\");\r\n\t\ths.properties.fill = interfaceColors.getFor(\"primaryButtonHover\");\r\n\r\n\t\tlet as = circle.states.create(\"active\");\r\n\t\tas.properties.fill = interfaceColors.getFor(\"primaryButtonActive\");\r\n\t\tas.properties.dx = circle.radius * 0.7;\r\n\r\n\t\tthis.switchButton = button;\r\n\r\n\t\tthis.events.on(\"toggled\", () => {\r\n\t\t\tthis.leftLabel.isActive = !this.isActive;\r\n\t\t\tthis.rightLabel.isActive = this.isActive;\r\n\t\t})\r\n\r\n\t\t// Create the label element\r\n\t\tlet rightLabel = new Label();\r\n\t\trightLabel.fillOpacity = 0.3;\r\n\r\n\t\tlet rlas = rightLabel.states.create(\"active\");\r\n\t\trlas.properties.fillOpacity = 1;\r\n\t\tthis.rightLabel = rightLabel;\r\n\r\n\t\t// Set up accessibility\r\n\t\t// A Button should be always focusable\r\n\t\tthis.role = \"button\";\r\n\t\tthis.focusable = true;\r\n\r\n\t\trightLabel.valign = \"middle\";\r\n\t\tleftLabel.valign = \"middle\";\r\n\t\tbutton.valign = \"middle\"\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * [[Label]] element to be used for left text.\r\n\t *\r\n\t * @param left label element\r\n\t */\r\n\tpublic set leftLabel(label: $type.Optional<Label>) {\r\n\t\tif (this._leftLabel) {\r\n\t\t\tthis.removeDispose(this._leftLabel);\r\n\t\t}\r\n\t\tthis._leftLabel = label;\r\n\t\tif (label) {\r\n\t\t\tlabel.parent = this;\r\n\t\t\tlabel.interactionsEnabled = false;\r\n\t\t\tlabel.shouldClone = false;\r\n\t\t\tthis._disposers.push(this._leftLabel);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Left label element\r\n\t */\r\n\tpublic get leftLabel(): $type.Optional<Label> {\r\n\t\treturn this._leftLabel;\r\n\t}\r\n\r\n\t/**\r\n\t * [[Label]] element to be used for left text.\r\n\t *\r\n\t * @param rigth label element\r\n\t */\r\n\tpublic set rightLabel(label: $type.Optional<Label>) {\r\n\t\tif (this._rightLabel) {\r\n\t\t\tthis.removeDispose(this._rightLabel);\r\n\t\t}\r\n\t\tthis._rightLabel = label;\r\n\t\tif (label) {\r\n\t\t\tlabel.parent = this;\r\n\t\t\tlabel.interactionsEnabled = false;\r\n\t\t\tlabel.shouldClone = false;\r\n\t\t\tthis._disposers.push(this._rightLabel);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Rigth label element\r\n\t */\r\n\tpublic get rightLabel(): $type.Optional<Label> {\r\n\t\treturn this._rightLabel;\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t * @deprecated Use `switchButton` instead\r\n\t */\r\n\tpublic get switch(): $type.Optional<Button> {\r\n\t\treturn this._switchButton;\r\n\t}\r\n\r\n\t/**\r\n\t * A [[Button]] element for switch.\r\n\t *\r\n\t * @param Button\r\n\t */\r\n\tpublic set switchButton(button: $type.Optional<Button>) {\r\n\t\tif (this._switchButton) {\r\n\t\t\tthis.removeDispose(this._switchButton);\r\n\t\t}\r\n\t\tthis._switchButton = button;\r\n\t\tif (button) {\r\n\t\t\tbutton.parent = this;\r\n\t\t\tbutton.shouldClone = false;\r\n\t\t\tthis._disposers.push(this._switchButton);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Button\r\n\t */\r\n\tpublic get switchButton(): $type.Optional<Button> {\r\n\t\treturn this._switchButton;\r\n\t}\r\n\r\n\t/**\r\n\t * Copies properties and other attributes.\r\n\t *\r\n\t * @param source  Source\r\n\t */\r\n\tpublic copyFrom(source: this): void {\r\n\t\tsuper.copyFrom(source);\r\n\t\tif (source.leftLabel) {\r\n\t\t\tthis.leftLabel.copyFrom(source.leftLabel)\r\n\t\t}\r\n\t\tif (source.rightLabel) {\r\n\t\t\tthis.rightLabel.copyFrom(source.rightLabel)\r\n\t\t}\r\n\t\tif (source.switchButton) {\r\n\t\t\tthis.switchButton.copyFrom(source.switchButton)\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"SwitchButton\"] = SwitchButton;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}