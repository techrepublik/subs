{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n/**\r\n * Provides functionality used to creating and showing tooltips (balloons).\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\nimport { Container } from \"../Container\";\nimport { registry } from \"../../core/Registry\";\nimport { PointedRectangle } from \"./PointedRectangle\";\nimport { Label } from \"../elements/Label\";\nimport { Animation } from \"../utils/Animation\";\nimport { color } from \"../utils/Color\";\nimport { DropShadowFilter } from \"../rendering/filters/DropShadowFilter\";\nimport * as $math from \"../utils/Math\";\nimport * as $ease from \"../utils/Ease\";\nimport * as $utils from \"../utils/Utils\";\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n/**\r\n * Tooltip displays text and/or multimedia information in a balloon over chart\r\n * area.\r\n * @see {@link ITooltipEvents} for a list of available events\r\n * @see {@link ITooltipAdapters} for a list of available Adapters\r\n */\nvar Tooltip = /** @class */function (_super) {\n  __extends(Tooltip, _super);\n  /**\r\n   * Constructor\r\n   */\n  function Tooltip() {\n    var _this =\n    // Init\n    _super.call(this) || this;\n    /**\r\n     * Holds numeric boundary values. Calculated from the `boundingContainer`.\r\n     * @ignore\r\n     */\n    _this._boundingRect = {\n      x: -40000,\n      y: -40000,\n      width: 80000,\n      height: 80000\n    };\n    /**\r\n     * Coordinates tooltip's pointer (stem) should point to.\r\n     */\n    _this._pointTo = {\n      x: 0,\n      y: 0\n    };\n    /**\r\n     * If set to `true` the pointer/stem of the Tooltip will not go outside\r\n     * Tooltip's width or height depending on pointer's orientation.\r\n     *\r\n     * @default false\r\n     */\n    _this.fitPointerToBounds = false;\n    /**\r\n     * If `tooltipOrientation` is vertical, it can be drawn below or above point\r\n     * We need to know this when solving overlapping.\r\n     */\n    _this._verticalOrientation = \"up\";\n    /**\r\n     * @ignore\r\n     */\n    _this.fixDoc = true;\n    _this.className = \"Tooltip\";\n    _this.isMeasured = false;\n    _this.getFillFromObject = true;\n    _this.margin(5, 5, 5, 5);\n    _this.defaultState.transitionDuration = 1;\n    _this.hiddenState.transitionDuration = 1;\n    // Create chrome/background\n    var background = _this.background;\n    background.interactionsEnabled = false;\n    background.fillOpacity = 0.9;\n    background.strokeWidth = 1;\n    background.strokeOpacity = 1;\n    background.stroke = color(\"#ffffff\");\n    background.cornerRadius = 3;\n    background.pointerLength = 6;\n    background.pointerBaseWidth = 10;\n    var dropShadow = new DropShadowFilter();\n    dropShadow.dy = 1;\n    dropShadow.dx = 1;\n    dropShadow.opacity = 0.5;\n    background.filters.push(dropShadow);\n    _this.autoTextColor = true;\n    // Create text element\n    var label = _this.createChild(Label);\n    label.shouldClone = false;\n    _this.label = label;\n    label.padding(7, 12, 4, 12);\n    label.interactionsEnabled = false;\n    label.horizontalCenter = \"middle\";\n    label.fill = color(\"#ffffff\");\n    _this._disposers.push(label);\n    _this.label.events.on(\"sizechanged\", _this.drawBackground, _this);\n    _this.label.zIndex = 1; // @todo remove this line when bg sorting is solved\n    // Set defaults\n    _this.pointerOrientation = \"vertical\";\n    _this.animationDuration = 0;\n    _this.animationEasing = $ease.cubicOut;\n    _this.setPropertyValue(\"showInViewport\", false);\n    // Set accessibility options\n    _this.role = \"tooltip\";\n    _this.visible = false;\n    _this.opacity = 0;\n    _this.x = 0;\n    _this.y = 0;\n    _this.events.on(\"visibilitychanged\", _this.handleVisibility, _this);\n    // Apply theme\n    _this.applyTheme();\n    return _this;\n  }\n  Tooltip.prototype.handleVisibility = function () {\n    if (this.visible) {\n      this.label.invalidate();\n    }\n  };\n  Object.defineProperty(Tooltip.prototype, \"getStrokeFromObject\", {\n    /**\r\n     * Specifies if tooltip background should get stroke color from the sprite it is pointing to.\r\n     *\r\n     * @return {boolean}\r\n     * @default false\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"getStrokeFromObject\");\n    },\n    /**\r\n     * Specifies if tooltip background should get stroke color from the sprite it is pointing to.\r\n     *\r\n     * @param value boolean\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"getStrokeFromObject\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Tooltip.prototype, \"autoTextColor\", {\n    /**\r\n     * @return {boolean}\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"autoTextColor\");\n    },\n    /**\r\n     * Specifies if text color should be chosen automatically for a better\r\n     * readability.\r\n     *\r\n     * IMPORTANT: this feature is generally ignored, if `getFillFromObject = false`.\r\n     *\r\n     * If inheriting of `fill` color from object tooltip is displayed for is\r\n     * disabled, this feature will not work. If you are explicitly setting a\r\n     * color for tooltip background, you may set a color for its label as well\r\n     * using `tooltip.label.fill` property.\r\n     *\r\n     *\r\n     * @param value boolean\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"autoTextColor\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Tooltip.prototype, \"keepTargetHover\", {\n    /**\r\n     * @return Keep target hovered?\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"keepTargetHover\");\n    },\n    /**\r\n     * If this tooltip is displayed on hover on some other object, keep that\r\n     * element hovered if hovering on the tooltip.\r\n     *\r\n     * @default false\r\n     * @since 4.1.13\r\n     * @param  value  Keep target hovered?\r\n     */\n    set: function (value) {\n      var _this = this;\n      if (this.setPropertyValue(\"keepTargetHover\", value, true)) {\n        if (value) {\n          this.hoverable = true;\n          this.background.interactionsEnabled = true;\n          this._disposers.push(this.events.on(\"over\", function (ev) {\n            if (_this.targetSprite && _this.targetSprite.hoverable) {\n              _this.targetSprite.isHover = true;\n            }\n          }));\n          this._disposers.push(this.events.on(\"out\", function (ev) {\n            if (_this.targetSprite && _this.targetSprite.hoverable) {\n              //this.hideTooltip();\n              //this.targetSprite.handleOut();\n              _this.targetSprite.isHover = false;\n            }\n          }));\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Tooltip.prototype, \"showInViewport\", {\n    /**\r\n     * @return Force showing tooltip?\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"showInViewport\");\n    },\n    /**\r\n     * Normally, a tooltip will hide itself if it is pointing to a coordinate\r\n     * that is outside viewport.\r\n     *\r\n     * Setting this setting to `true` will override that and make tooltip\r\n     * appear next to the viewport edge closest to the target point.\r\n     *\r\n     * @default false\r\n     * @since 4.5.7\r\n     * @param  value  Force showing tooltip?\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"showInViewport\", value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Tooltip.prototype, \"getFillFromObject\", {\n    /**\r\n     * Specifies if tooltip background should get fill color from the sprite it is pointing to.\r\n     *\r\n     * @return {boolean}\r\n     * @default true\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"getFillFromObject\");\n    },\n    /**\r\n     * @param value boolean\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"getFillFromObject\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Creates and returns a background element.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @return Background\r\n   */\n  Tooltip.prototype.createBackground = function () {\n    return new PointedRectangle();\n  };\n  Object.defineProperty(Tooltip.prototype, \"pointerOrientation\", {\n    /**\r\n     * @return Orientation\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"pointerOrientation\");\n    },\n    /**\r\n     * Pointer orientation: `\"horizontal\"`, `\"vertical\"`, `\"up\"`, `\"down\"`,\r\n     * `\"right\"`, or `\"left\"`.\r\n     *\r\n     * Options`\"horizontal\"` or `\"vertical\"` are location-aware, meaning they\r\n     * will change position of the Tooltip based on the target point's position\r\n     * in relation to chart center.\r\n     *\r\n     * Options `\"up\"`, `\"down\"`, `\"right\"`, `\"left\"` are static and will point\r\n     * in the specified direction regardless of the position, even if that means\r\n     * going out of chart/screen bounds.\r\n     *\r\n     * IMPORTANT: in some situations, like having multiple tooltips stacked for\r\n     * multiple series, the `\"up\"` and `\"down\"` values might be ignored in order\r\n     * to make tooltip overlap algorithm work.\r\n     *\r\n     * @default \"vertical\"\r\n     * @param  value  Orientation\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"pointerOrientation\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Tooltip.prototype, \"animationDuration\", {\n    /**\r\n     * @return Orientation\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"animationDuration\");\n    },\n    /**\r\n     * Duration in milliseconds for the animation to take place when the tooltip\r\n     * is moving from one place to another.\r\n     *\r\n     * @default 0\r\n     * @param value  number\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"animationDuration\", value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Tooltip.prototype, \"animationEasing\", {\n    /**\r\n     * @return {Function}\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"animationEasing\");\n    },\n    /**\r\n     * Tooltip animation (moving from one place to another) easing function.\r\n     *\r\n     * @default $ease.cubicOut\r\n     * @param value (value: number) => number\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"animationEasing\", value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Tooltip.prototype, \"html\", {\n    /**\r\n     * @return HTML content\r\n     */\n    get: function () {\n      return this.label.html;\n    },\n    /**\r\n     * HTML content for the Tooltip.\r\n     *\r\n     * Provided value will be used as is, without applying any further\r\n     * formatting to it.\r\n     *\r\n     * @param value  HTML content\r\n     */\n    set: function (value) {\n      if (this.label.html != value) {\n        this.label.html = value;\n        this.invalidate();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Tooltip.prototype, \"text\", {\n    /**\r\n     * @return SVG text\r\n     */\n    get: function () {\n      return this.label.text;\n    },\n    /**\r\n     * SVG text content for the Tooltip.\r\n     *\r\n     * Text can have a number of formatting options supported by\r\n     * [[TextFormatter]].\r\n     *\r\n     * @param value  SVG text\r\n     */\n    set: function (value) {\n      if (this.label.text != value) {\n        this.label.text = value;\n        this.invalidate();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Creates the Tooltip.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  Tooltip.prototype.draw = function () {\n    _super.prototype.draw.call(this);\n    var label = this.label;\n    if (label.invalid) {\n      label.validate();\n    }\n    var x = this._pointTo.x;\n    var y = this._pointTo.y;\n    var boundingRect = this._boundingRect;\n    var textW = label.measuredWidth;\n    var textH = label.measuredHeight;\n    var pointerLength = this.background.pointerLength;\n    var textX;\n    var textY;\n    if (this.ignoreBounds) {\n      boundingRect = undefined;\n    }\n    // try to handle if text is wider than br\n    if (boundingRect && this.fixDoc && textW > boundingRect.width) {\n      // TODO maybe this isn't needed ?\n      $utils.spritePointToDocument({\n        x: boundingRect.x,\n        y: boundingRect.y\n      }, this.parent);\n      var p1 = $utils.spritePointToDocument({\n        x: boundingRect.x + boundingRect.width,\n        y: boundingRect.y + boundingRect.height\n      }, this.parent);\n      var documentWidth = document.body.offsetWidth;\n      // TODO maybe this isn't needed ?\n      $utils.used(document.body.offsetHeight);\n      if (p1.x > documentWidth / 2) {\n        boundingRect.x = boundingRect.width - textW;\n      } else {\n        boundingRect.width = boundingRect.x + textW;\n      }\n    }\n    var pointerOrientation = this.pointerOrientation;\n    // horizontal\n    if (pointerOrientation == \"horizontal\" || pointerOrientation == \"left\" || pointerOrientation == \"right\") {\n      textY = -textH / 2;\n      if (pointerOrientation == \"horizontal\") {\n        if (boundingRect && x > boundingRect.x + boundingRect.width / 2) {\n          textX = -textW / 2 - pointerLength;\n        } else {\n          textX = textW / 2 + pointerLength;\n        }\n      } else if (pointerOrientation == \"left\") {\n        textX = textW / 2 + pointerLength;\n      } else {\n        textX = -textW / 2 - pointerLength;\n      }\n    }\n    // vertical pointer\n    else {\n      if (boundingRect) {\n        textX = $math.fitToRange(0, boundingRect.x - x + textW / 2, boundingRect.x - x + boundingRect.width - textW / 2);\n      }\n      if (pointerOrientation == \"vertical\") {\n        if (boundingRect && y > boundingRect.y + textH + pointerLength) {\n          textY = -textH - pointerLength;\n          this._verticalOrientation = \"up\";\n        } else {\n          textY = pointerLength;\n          this._verticalOrientation = \"down\";\n        }\n      } else if (pointerOrientation == \"down\") {\n        textY = -textH - pointerLength;\n        this._verticalOrientation = \"up\";\n      } else {\n        textY = pointerLength;\n        this._verticalOrientation = \"down\";\n      }\n    }\n    if (boundingRect) {\n      textY = $math.fitToRange(textY, boundingRect.y - y, boundingRect.y + boundingRect.height - textH - y);\n    }\n    label.x = textX;\n    label.y = textY;\n    this.drawBackground();\n  };\n  /**\r\n   * Overrides functionality from the superclass.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  Tooltip.prototype.updateBackground = function () {\n    this.group.addToBack(this.background.group);\n  };\n  /**\r\n   * Draws Tooltip background (chrome, background and pointer/stem).\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  Tooltip.prototype.drawBackground = function () {\n    var label = this.label;\n    var background = this.background;\n    var textWidth = label.measuredWidth;\n    var textHeight = label.measuredHeight;\n    var boundingRect = this._boundingRect;\n    var bgWidth = textWidth;\n    var bgX = label.pixelX - textWidth / 2;\n    var bgHeight = textHeight;\n    var bgY = label.pixelY;\n    var x = this._pointTo.x;\n    var y = this._pointTo.y;\n    var boundX1 = boundingRect.x - x;\n    var boundX2 = boundX1 + boundingRect.width;\n    var boundY1 = boundingRect.y - y;\n    var boundY2 = boundY1 + boundingRect.height;\n    background.x = bgX;\n    background.y = bgY;\n    background.width = bgWidth;\n    background.height = bgHeight;\n    if (this.fitPointerToBounds) {\n      background.pointerX = $math.fitToRange(-background.x, boundX1 - background.x, boundX2 - background.x);\n      background.pointerY = $math.fitToRange(-background.y, boundY1 - background.y, boundY2 - background.y);\n    } else {\n      background.pointerX = -background.x;\n      background.pointerY = -background.y;\n    }\n    background.validate();\n  };\n  /**\r\n   *\r\n   */\n  Tooltip.prototype.delayedPointTo = function (point, instantly) {\n    var _this = this;\n    if (this._pointToDisposer) {\n      this._pointToDisposer.dispose();\n    }\n    this._pointToDisposer = registry.events.once(\"exitframe\", function () {\n      _this.pointTo(point, instantly);\n    });\n    this.addDisposer(this._pointToDisposer);\n  };\n  /**\r\n   * Set nes tooltip's anchor point and moves whole tooltip.\r\n   *\r\n   * @param x  X coordinate\r\n   * @param y  Y coordinate\r\n   */\n  Tooltip.prototype.pointTo = function (point, instantly) {\n    if (this._pointTo.x != point.x || this._pointTo.y != point.y) {\n      this._pointTo = point;\n      this.invalidate();\n      // this helps to avoid strange animation from nowhere on initial show or when balloon was hidden already\n      if (!this.visible || instantly) {\n        this.moveTo(this._pointTo);\n        if (this._animation) {\n          this._animation.kill();\n        }\n      } else {\n        // helps to avoid flicker on top/left corner\n        if (this.pixelX == 0 && this.pixelY == 0) {\n          this.moveTo(this._pointTo);\n        } else {\n          if (this._animation) {\n            this._animation.kill();\n          }\n          this._animation = new Animation(this, [{\n            property: \"x\",\n            to: point.x,\n            from: this.pixelX\n          }, {\n            property: \"y\",\n            to: point.y,\n            from: this.pixelY\n          }], this.animationDuration, this.animationEasing).start();\n        }\n      }\n    }\n  };\n  /**\r\n   * Sets numeric boundaries Tooltip needs to obey (so it does not go outside\r\n   * specific area).\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param rectangle Boundary rectangle\r\n   */\n  Tooltip.prototype.setBounds = function (rectangle) {\n    var oldRect = this._boundingRect;\n    if (oldRect.x != rectangle.x || oldRect.y != rectangle.y || oldRect.width != rectangle.width || oldRect.height != rectangle.height) {\n      this._boundingRect = rectangle;\n      this.invalidate();\n    }\n  };\n  Object.defineProperty(Tooltip.prototype, \"boundingContainer\", {\n    /**\r\n     * Sets a [[Container]] instance to be used when calculating numeric\r\n     * boundaries for the Tooltip.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param container  Boundary container\r\n     */\n    set: function (container) {\n      this._boundingContainer = container;\n      // TODO remove closures ?\n      container.events.on(\"sizechanged\", this.updateBounds, this);\n      container.events.on(\"positionchanged\", this.updateBounds, this);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Updates numeric boundaries for the Tooltip, based on the\r\n   * `boundingCountrainer`.\r\n   */\n  Tooltip.prototype.updateBounds = function () {\n    var boundingContainer = this._boundingContainer;\n    // to global\n    var rect = $utils.spriteRectToSvg({\n      x: boundingContainer.pixelX,\n      y: boundingContainer.pixelY,\n      width: boundingContainer.maxWidth,\n      height: boundingContainer.maxHeight\n    }, boundingContainer);\n    this.setBounds(rect);\n  };\n  Object.defineProperty(Tooltip.prototype, \"ignoreBounds\", {\n    /**\r\n     * @return Ignore chart bounds?\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"ignoreBounds\");\n    },\n    /**\r\n     * Normally, a tooltip's position will be adjusted so it always fits into\r\n     * chart's coundaries.\r\n     *\r\n     * Setting this to `false` will disable such checks and will allow tooltip\r\n     * to \"bleed over\" the edge of the chart.\r\n     *\r\n     * @default false\r\n     * @since 4.10.8\r\n     * @param  value  Ignore chart bounds?\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"ignoreBounds\", value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Tooltip.prototype, \"verticalOrientation\", {\n    /**\r\n     * If tooltipOrientation is vertical, it can be drawn below or above point.\r\n     * We need to know this when solving overlapping.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @return \"up\" | \"down\"\r\n     */\n    get: function () {\n      return this._verticalOrientation;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Tooltip.prototype, \"tooltip\", {\n    /**\r\n     * To avoid stackoverflow\r\n     * @ignore\r\n     */\n    get: function () {\n      return undefined;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Copies properties and other attributes.\r\n   *\r\n   * @param source  Source\r\n   */\n  Tooltip.prototype.copyFrom = function (source) {\n    _super.prototype.copyFrom.call(this, source);\n    this.label.copyFrom(source.label);\n    if (source._boundingRect) {\n      this._boundingRect = source._boundingRect;\n    }\n  };\n  /**\r\n   * Adds easing functions to \"function\" fields.\r\n   *\r\n   * @param field  Field name\r\n   * @return Assign as function?\r\n   */\n  Tooltip.prototype.asFunction = function (field) {\n    return field == \"animationEasing\" || _super.prototype.asIs.call(this, field);\n  };\n  return Tooltip;\n}(Container);\nexport { Tooltip };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\nregistry.registeredClasses[\"Tooltip\"] = Tooltip;","map":{"version":3,"names":["Container","registry","PointedRectangle","Label","Animation","color","DropShadowFilter","$math","$ease","$utils","Tooltip","_super","__extends","_this","call","_boundingRect","x","y","width","height","_pointTo","fitPointerToBounds","_verticalOrientation","fixDoc","className","isMeasured","getFillFromObject","margin","defaultState","transitionDuration","hiddenState","background","interactionsEnabled","fillOpacity","strokeWidth","strokeOpacity","stroke","cornerRadius","pointerLength","pointerBaseWidth","dropShadow","dy","dx","opacity","filters","push","autoTextColor","label","createChild","shouldClone","padding","horizontalCenter","fill","_disposers","events","on","drawBackground","zIndex","pointerOrientation","animationDuration","animationEasing","cubicOut","setPropertyValue","role","visible","handleVisibility","applyTheme","prototype","invalidate","Object","defineProperty","get","getPropertyValue","set","value","hoverable","ev","targetSprite","isHover","createBackground","html","text","draw","invalid","validate","boundingRect","textW","measuredWidth","textH","measuredHeight","textX","textY","ignoreBounds","undefined","spritePointToDocument","parent","p1","documentWidth","document","body","offsetWidth","used","offsetHeight","fitToRange","updateBackground","group","addToBack","textWidth","textHeight","bgWidth","bgX","pixelX","bgHeight","bgY","pixelY","boundX1","boundX2","boundY1","boundY2","pointerX","pointerY","delayedPointTo","point","instantly","_pointToDisposer","dispose","once","pointTo","addDisposer","moveTo","_animation","kill","property","to","from","start","setBounds","rectangle","oldRect","container","_boundingContainer","updateBounds","boundingContainer","rect","spriteRectToSvg","maxWidth","maxHeight","copyFrom","source","asFunction","field","asIs","registeredClasses"],"sources":["../../../../../src/.internal/core/elements/Tooltip.ts"],"sourcesContent":["/**\r\n * Provides functionality used to creating and showing tooltips (balloons).\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Container, IContainerProperties, IContainerAdapters, IContainerEvents } from \"../Container\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { Sprite } from \"../../core/Sprite\";\r\nimport { PointedRectangle } from \"./PointedRectangle\";\r\nimport { IPoint } from \"../defs/IPoint\";\r\nimport { Label } from \"../elements/Label\";\r\nimport { Animation } from \"../utils/Animation\";\r\nimport { color } from \"../utils/Color\";\r\nimport { DropShadowFilter } from \"../rendering/filters/DropShadowFilter\";\r\nimport { IRectangle } from \"../defs/IRectangle\";\r\nimport * as $math from \"../utils/Math\";\r\nimport * as $ease from \"../utils/Ease\";\r\nimport * as $utils from \"../utils/Utils\";\r\nimport * as $type from \"../utils/Type\";\r\nimport { IDisposer } from \"../utils/Disposer\";\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Represents options for tooltip pointer (arrow) orientation.\r\n */\r\nexport type PointerOrientation = \"horizontal\" | \"vertical\" | \"left\" | \"right\" | \"up\" | \"down\";\r\n\r\n/**\r\n * Defines properties for [[Tooltip]].\r\n */\r\nexport interface ITooltipProperties extends IContainerProperties {\r\n\r\n\t/**\r\n\t * Pointer orientation: \"horizontal\", \"vertical\", \"left\", \"right\", \"up\", \"down\".\r\n\t *\r\n\t * @default \"vertical\"\r\n\t */\r\n\tpointerOrientation?: PointerOrientation;\r\n\r\n\t/**\r\n\t * Duration (ms) that takes for a Tooltip to move from one place to another.\r\n\t *\r\n\t * If set to a zero value, the Tooltop will jump to a new location\r\n\t * instantenously.\r\n\t *\r\n\t * If set to a non-zero value, the Tooltip will \"glide\" to a new location at\r\n\t * a speed determined by this setting.\r\n\t *\r\n\t * @see {@link https://www.amcharts.com/docs/v4/concepts/animations/} for more info about animations\r\n\t */\r\n\tanimationDuration?: number;\r\n\r\n\t/**\r\n\t * An easing function to use when animating Tooltip position.\r\n\t *\r\n\t * @see {@link https://www.amcharts.com/docs/v4/concepts/animations/} for more info about animations\r\n\t */\r\n\tanimationEasing?: (value: number) => number;\r\n\r\n\t/**\r\n\t * Specifies if tooltip background should get stroke color from the sprite\r\n\t * it is pointing to.\r\n\t */\r\n\tgetStrokeFromObject?: boolean;\r\n\r\n\t/**\r\n\t * Specifies if tooltip background should get fill color from the sprite it\r\n\t * is pointing to.\r\n\t */\r\n\tgetFillFromObject?: boolean;\r\n\r\n\t/**\r\n\t * Specifies if text color should be chosen automatically for a better\r\n\t * readability.\r\n\t */\r\n\tautoTextColor?: boolean;\r\n\r\n\t/**\r\n\t * If this tooltip is displayed on hover on some other object, keep that\r\n\t * element hovered if hovering on the tooltip.\r\n\t *\r\n\t * @since 4.1.13\r\n\t */\r\n\tkeepTargetHover?: boolean;\r\n\r\n\t/**\r\n\t * Normally, a tooltip will hide itself if it is pointing to a coordinate\r\n\t * that is outside viewport.\r\n\t *\r\n\t * Setting this setting to `true` will override that and make tooltip\r\n\t * appear next to the viewport edge closest to the target point.\r\n\t *\r\n\t * @since 4.5.7\r\n\t */\r\n\tshowInViewport?: boolean\r\n\r\n\t/**\r\n\t * Normally, a tooltip's position will be adjusted so it always fits into\r\n\t * chart's boundaries.\r\n\t *\r\n\t * Setting this to `false` will disable such checks and will allow tooltip\r\n\t * to \"bleed over\" the edge of the chart.\r\n\t *\r\n\t * @default false\r\n\t * @since 4.10.8\r\n\t */\r\n\tignoreBounds?: boolean;\r\n}\r\n\r\n/**\r\n * Defines events for [[Tooltip]].\r\n */\r\nexport interface ITooltipEvents extends IContainerEvents { }\r\n\r\n/**\r\n * Defines adapters for [[Tooltip]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ITooltipAdapters extends IContainerAdapters, ITooltipProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Tooltip displays text and/or multimedia information in a balloon over chart\r\n * area.\r\n * @see {@link ITooltipEvents} for a list of available events\r\n * @see {@link ITooltipAdapters} for a list of available Adapters\r\n */\r\nexport class Tooltip extends Container {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: ITooltipProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: ITooltipAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: ITooltipEvents;\r\n\r\n\t/**\r\n\t * A type for the background element.\r\n\t */\r\n\tpublic _background: PointedRectangle;\r\n\r\n\t/**\r\n\t * Text element that represents tooltip contents.\r\n\t */\r\n\tpublic label: Label;\r\n\r\n\t/**\r\n\t * A container that should be considered a \"boundary\" for the tooltip. A\r\n\t * bounding container is used to calculate numeric boundaries\r\n\t * (`boundingRect`). It is used to constrain the Tooltip to specific area on\r\n\t * the chart, like for example cursor tooltip in plot area.\r\n\t */\r\n\tprotected _boundingContainer: Container;\r\n\r\n\t/**\r\n\t * Holds numeric boundary values. Calculated from the `boundingContainer`.\r\n\t * @ignore\r\n\t */\r\n\tpublic _boundingRect: IRectangle = { x: -40000, y: -40000, width: 80000, height: 80000 };\r\n\r\n\t/**\r\n\t * Coordinates tooltip's pointer (stem) should point to.\r\n\t */\r\n\tprotected _pointTo: IPoint = { x: 0, y: 0 };\r\n\r\n\t/**\r\n\t * If set to `true` the pointer/stem of the Tooltip will not go outside\r\n\t * Tooltip's width or height depending on pointer's orientation.\r\n\t *\r\n\t * @default false\r\n\t */\r\n\tpublic fitPointerToBounds: boolean = false;\r\n\r\n\t/**\r\n\t * If `tooltipOrientation` is vertical, it can be drawn below or above point\r\n\t * We need to know this when solving overlapping.\r\n\t */\r\n\tprotected _verticalOrientation: \"up\" | \"down\" = \"up\";\r\n\r\n\t/**\r\n\t * Position animation of a tooltip\r\n\t */\r\n\tprotected _animation: $type.Optional<Animation>;\r\n\r\n\t/**\r\n\t * A [[Sprite]] element this tooltip is displayed for, if any.\r\n\t *\r\n\t * @since 4.1.13\r\n\t */\r\n\tpublic targetSprite: $type.Optional<Sprite>;\r\n\r\n\t/**\r\n\t * reference to a sprite which now shows this tooltip instance.\r\n\t */\r\n\tpublic currentSprite: Sprite;\r\n\r\n\tprotected _pointToDisposer: IDisposer;\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic fixDoc: boolean = true;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"Tooltip\";\r\n\t\tthis.isMeasured = false;\r\n\r\n\t\tthis.getFillFromObject = true;\r\n\t\tthis.margin(5, 5, 5, 5);\r\n\r\n\t\tthis.defaultState.transitionDuration = 1;\r\n\t\tthis.hiddenState.transitionDuration = 1;\r\n\r\n\t\t// Create chrome/background\r\n\t\tlet background = this.background;\r\n\t\tbackground.interactionsEnabled = false;\r\n\t\tbackground.fillOpacity = 0.9;\r\n\t\tbackground.strokeWidth = 1;\r\n\t\tbackground.strokeOpacity = 1;\r\n\t\tbackground.stroke = color(\"#ffffff\");\r\n\t\tbackground.cornerRadius = 3;\r\n\t\tbackground.pointerLength = 6;\r\n\t\tbackground.pointerBaseWidth = 10;\r\n\r\n\t\tlet dropShadow = new DropShadowFilter();\r\n\t\tdropShadow.dy = 1;\r\n\t\tdropShadow.dx = 1;\r\n\t\tdropShadow.opacity = 0.5;\r\n\t\tbackground.filters.push(dropShadow);\r\n\r\n\t\tthis.autoTextColor = true;\r\n\r\n\t\t// Create text element\r\n\t\tlet label = this.createChild(Label);\r\n\t\tlabel.shouldClone = false;\r\n\t\tthis.label = label;\r\n\t\tlabel.padding(7, 12, 4, 12);\r\n\t\tlabel.interactionsEnabled = false;\r\n\t\tlabel.horizontalCenter = \"middle\";\r\n\t\tlabel.fill = color(\"#ffffff\");\r\n\t\tthis._disposers.push(label);\r\n\r\n\t\tthis.label.events.on(\"sizechanged\", this.drawBackground, this);\r\n\r\n\t\tthis.label.zIndex = 1; // @todo remove this line when bg sorting is solved\r\n\r\n\t\t// Set defaults\r\n\t\tthis.pointerOrientation = \"vertical\";\r\n\r\n\t\tthis.animationDuration = 0;\r\n\t\tthis.animationEasing = $ease.cubicOut;\r\n\r\n\t\tthis.setPropertyValue(\"showInViewport\", false);\r\n\r\n\t\t// Set accessibility options\r\n\t\tthis.role = \"tooltip\";\r\n\r\n\t\tthis.visible = false;\r\n\t\tthis.opacity = 0;\r\n\r\n\t\tthis.x = 0;\r\n\t\tthis.y = 0;\r\n\r\n\t\tthis.events.on(\"visibilitychanged\", this.handleVisibility, this);\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\tprotected handleVisibility() {\r\n\t\tif (this.visible) {\r\n\t\t\tthis.label.invalidate();\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Specifies if tooltip background should get stroke color from the sprite it is pointing to.\r\n\t *\r\n\t * @return {boolean}\r\n\t * @default false\r\n\t */\r\n\tpublic get getStrokeFromObject(): boolean {\r\n\t\treturn this.getPropertyValue(\"getStrokeFromObject\");\r\n\t}\r\n\r\n\t/**\r\n\t * Specifies if tooltip background should get stroke color from the sprite it is pointing to.\r\n\t *\r\n\t * @param value boolean\r\n\t */\r\n\tpublic set getStrokeFromObject(value: boolean) {\r\n\t\tthis.setPropertyValue(\"getStrokeFromObject\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * Specifies if text color should be chosen automatically for a better\r\n\t * readability.\r\n\t *\r\n\t * IMPORTANT: this feature is generally ignored, if `getFillFromObject = false`.\r\n\t *\r\n\t * If inheriting of `fill` color from object tooltip is displayed for is\r\n\t * disabled, this feature will not work. If you are explicitly setting a\r\n\t * color for tooltip background, you may set a color for its label as well\r\n\t * using `tooltip.label.fill` property.\r\n\t *\r\n\t *\r\n\t * @param value boolean\r\n\t */\r\n\tpublic set autoTextColor(value: boolean) {\r\n\t\tthis.setPropertyValue(\"autoTextColor\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {boolean}\r\n\t */\r\n\tpublic get autoTextColor(): boolean {\r\n\t\treturn this.getPropertyValue(\"autoTextColor\");\r\n\t}\r\n\r\n\t/**\r\n\t * If this tooltip is displayed on hover on some other object, keep that\r\n\t * element hovered if hovering on the tooltip.\r\n\t *\r\n\t * @default false\r\n\t * @since 4.1.13\r\n\t * @param  value  Keep target hovered?\r\n\t */\r\n\tpublic set keepTargetHover(value: boolean) {\r\n\t\tif (this.setPropertyValue(\"keepTargetHover\", value, true)) {\r\n\t\t\tif (value) {\r\n\t\t\t\tthis.hoverable = true;\r\n\t\t\t\tthis.background.interactionsEnabled = true;\r\n\t\t\t\tthis._disposers.push(this.events.on(\"over\", (ev) => {\r\n\t\t\t\t\tif (this.targetSprite && this.targetSprite.hoverable) {\r\n\t\t\t\t\t\tthis.targetSprite.isHover = true;\r\n\t\t\t\t\t}\r\n\t\t\t\t}));\r\n\r\n\t\t\t\tthis._disposers.push(this.events.on(\"out\", (ev) => {\r\n\t\t\t\t\tif (this.targetSprite && this.targetSprite.hoverable) {\r\n\t\t\t\t\t\t//this.hideTooltip();\r\n\t\t\t\t\t\t//this.targetSprite.handleOut();\r\n\t\t\t\t\t\tthis.targetSprite.isHover = false;\r\n\t\t\t\t\t}\r\n\t\t\t\t}));\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Normally, a tooltip will hide itself if it is pointing to a coordinate\r\n\t * that is outside viewport.\r\n\t *\r\n\t * Setting this setting to `true` will override that and make tooltip\r\n\t * appear next to the viewport edge closest to the target point.\r\n\t *\r\n\t * @default false\r\n\t * @since 4.5.7\r\n\t * @param  value  Force showing tooltip?\r\n\t */\r\n\tpublic set showInViewport(value: boolean) {\r\n\t\tthis.setPropertyValue(\"showInViewport\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Force showing tooltip?\r\n\t */\r\n\tpublic get showInViewport(): boolean {\r\n\t\treturn this.getPropertyValue(\"showInViewport\");\r\n\t}\r\n\r\n\t/**\r\n\t * @return Keep target hovered?\r\n\t */\r\n\tpublic get keepTargetHover(): boolean {\r\n\t\treturn this.getPropertyValue(\"keepTargetHover\");\r\n\t}\r\n\r\n\t/**\r\n\t * Specifies if tooltip background should get fill color from the sprite it is pointing to.\r\n\t *\r\n\t * @return {boolean}\r\n\t * @default true\r\n\t */\r\n\tpublic get getFillFromObject(): boolean {\r\n\t\treturn this.getPropertyValue(\"getFillFromObject\");\r\n\t}\r\n\r\n\t/**\r\n\t * @param value boolean\r\n\t */\r\n\tpublic set getFillFromObject(value: boolean) {\r\n\t\tthis.setPropertyValue(\"getFillFromObject\", value, true);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Creates and returns a background element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @return Background\r\n\t */\r\n\tpublic createBackground(): this[\"_background\"] {\r\n\t\treturn new PointedRectangle();\r\n\t}\r\n\r\n\t/**\r\n\t * Pointer orientation: `\"horizontal\"`, `\"vertical\"`, `\"up\"`, `\"down\"`,\r\n\t * `\"right\"`, or `\"left\"`.\r\n\t *\r\n\t * Options`\"horizontal\"` or `\"vertical\"` are location-aware, meaning they\r\n\t * will change position of the Tooltip based on the target point's position\r\n\t * in relation to chart center.\r\n\t *\r\n\t * Options `\"up\"`, `\"down\"`, `\"right\"`, `\"left\"` are static and will point\r\n\t * in the specified direction regardless of the position, even if that means\r\n\t * going out of chart/screen bounds.\r\n\t *\r\n\t * IMPORTANT: in some situations, like having multiple tooltips stacked for\r\n\t * multiple series, the `\"up\"` and `\"down\"` values might be ignored in order\r\n\t * to make tooltip overlap algorithm work.\r\n\t *\r\n\t * @default \"vertical\"\r\n\t * @param  value  Orientation\r\n\t */\r\n\tpublic set pointerOrientation(value: PointerOrientation) {\r\n\t\tthis.setPropertyValue(\"pointerOrientation\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Orientation\r\n\t */\r\n\tpublic get pointerOrientation(): PointerOrientation {\r\n\t\treturn this.getPropertyValue(\"pointerOrientation\");\r\n\t}\r\n\r\n\t/**\r\n\t * Duration in milliseconds for the animation to take place when the tooltip\r\n\t * is moving from one place to another.\r\n\t *\r\n\t * @default 0\r\n\t * @param value  number\r\n\t */\r\n\tpublic set animationDuration(value: number) {\r\n\t\tthis.setPropertyValue(\"animationDuration\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Orientation\r\n\t */\r\n\tpublic get animationDuration(): number {\r\n\t\treturn this.getPropertyValue(\"animationDuration\");\r\n\t}\r\n\r\n\t/**\r\n\t * Tooltip animation (moving from one place to another) easing function.\r\n\t *\r\n\t * @default $ease.cubicOut\r\n\t * @param value (value: number) => number\r\n\t */\r\n\tpublic set animationEasing(value: (value: number) => number) {\r\n\t\tthis.setPropertyValue(\"animationEasing\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Function}\r\n\t */\r\n\tpublic get animationEasing(): (value: number) => number {\r\n\t\treturn this.getPropertyValue(\"animationEasing\");\r\n\t}\r\n\r\n\t/**\r\n\t * HTML content for the Tooltip.\r\n\t *\r\n\t * Provided value will be used as is, without applying any further\r\n\t * formatting to it.\r\n\t *\r\n\t * @param value  HTML content\r\n\t */\r\n\tpublic set html(value: string) {\r\n\t\tif (this.label.html != value) {\r\n\t\t\tthis.label.html = value;\r\n\t\t\tthis.invalidate();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return HTML content\r\n\t */\r\n\tpublic get html(): string {\r\n\t\treturn this.label.html;\r\n\t}\r\n\r\n\t/**\r\n\t * SVG text content for the Tooltip.\r\n\t *\r\n\t * Text can have a number of formatting options supported by\r\n\t * [[TextFormatter]].\r\n\t *\r\n\t * @param value  SVG text\r\n\t */\r\n\tpublic set text(value: string) {\r\n\t\tif (this.label.text != value) {\r\n\t\t\tthis.label.text = value;\r\n\t\t\tthis.invalidate();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return SVG text\r\n\t */\r\n\tpublic get text(): string {\r\n\t\treturn this.label.text;\r\n\t}\r\n\r\n\t/**\r\n\t * Creates the Tooltip.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic draw(): void {\r\n\t\tsuper.draw();\r\n\r\n\t\tlet label = this.label;\r\n\r\n\t\tif (label.invalid) {\r\n\t\t\tlabel.validate();\r\n\t\t}\r\n\r\n\t\tlet x: number = this._pointTo.x;\r\n\t\tlet y: number = this._pointTo.y;\r\n\r\n\t\tlet boundingRect: IRectangle = this._boundingRect;\r\n\r\n\t\tlet textW: number = label.measuredWidth;\r\n\t\tlet textH: number = label.measuredHeight;\r\n\r\n\t\tlet pointerLength = this.background.pointerLength;\r\n\r\n\t\tlet textX: number;\r\n\t\tlet textY: number;\r\n\r\n\t\tif (this.ignoreBounds) {\r\n\t\t\tboundingRect = undefined;\r\n\t\t}\r\n\r\n\t\t// try to handle if text is wider than br\r\n\t\tif (boundingRect && this.fixDoc && textW > boundingRect.width) {\r\n\t\t\t// TODO maybe this isn't needed ?\r\n\t\t\t$utils.spritePointToDocument({ x: boundingRect.x, y: boundingRect.y }, this.parent);\r\n\t\t\tlet p1 = $utils.spritePointToDocument({ x: boundingRect.x + boundingRect.width, y: boundingRect.y + boundingRect.height }, this.parent);\r\n\r\n\t\t\tlet documentWidth = document.body.offsetWidth;\r\n\t\t\t// TODO maybe this isn't needed ?\r\n\t\t\t$utils.used(document.body.offsetHeight);\r\n\r\n\t\t\tif (p1.x > documentWidth / 2) {\r\n\t\t\t\tboundingRect.x = boundingRect.width - textW;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tboundingRect.width = boundingRect.x + textW;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tlet pointerOrientation = this.pointerOrientation;\r\n\r\n\t\t// horizontal\r\n\t\tif (pointerOrientation == \"horizontal\" || pointerOrientation == \"left\" || pointerOrientation == \"right\") {\r\n\t\t\ttextY = - textH / 2;\r\n\t\t\tif (pointerOrientation == \"horizontal\") {\r\n\t\t\t\tif (boundingRect && x > boundingRect.x + boundingRect.width / 2) {\r\n\t\t\t\t\ttextX = - textW / 2 - pointerLength;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\ttextX = textW / 2 + pointerLength;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse if (pointerOrientation == \"left\") {\r\n\t\t\t\ttextX = textW / 2 + pointerLength;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\ttextX = -textW / 2 - pointerLength;\r\n\t\t\t}\r\n\t\t}\r\n\t\t// vertical pointer\r\n\t\telse {\r\n\t\t\tif (boundingRect) {\r\n\t\t\t\ttextX = $math.fitToRange(0, boundingRect.x - x + textW / 2, boundingRect.x - x + boundingRect.width - textW / 2);\r\n\t\t\t}\r\n\r\n\t\t\tif (pointerOrientation == \"vertical\") {\r\n\t\t\t\tif (boundingRect && y > boundingRect.y + textH + pointerLength) {\r\n\t\t\t\t\ttextY = - textH - pointerLength;\r\n\t\t\t\t\tthis._verticalOrientation = \"up\";\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\ttextY = pointerLength;\r\n\t\t\t\t\tthis._verticalOrientation = \"down\";\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse if (pointerOrientation == \"down\") {\r\n\t\t\t\ttextY = - textH - pointerLength;\r\n\t\t\t\tthis._verticalOrientation = \"up\";\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\ttextY = pointerLength;\r\n\t\t\t\tthis._verticalOrientation = \"down\";\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (boundingRect) {\r\n\t\t\ttextY = $math.fitToRange(textY, boundingRect.y - y, boundingRect.y + boundingRect.height - textH - y);\r\n\t\t}\r\n\r\n\t\tlabel.x = textX;\r\n\t\tlabel.y = textY;\r\n\r\n\t\tthis.drawBackground();\r\n\t}\r\n\r\n\t/**\r\n\t * Overrides functionality from the superclass.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateBackground(): void {\r\n\t\tthis.group.addToBack(this.background.group);\r\n\t}\r\n\r\n\t/**\r\n\t * Draws Tooltip background (chrome, background and pointer/stem).\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic drawBackground(): void {\r\n\t\tlet label = this.label;\r\n\t\tlet background: PointedRectangle = this.background;\r\n\r\n\t\tlet textWidth: number = label.measuredWidth;\r\n\t\tlet textHeight: number = label.measuredHeight;\r\n\r\n\t\tlet boundingRect: IRectangle = this._boundingRect;\r\n\r\n\t\tlet bgWidth: number = textWidth;\r\n\t\tlet bgX: number = label.pixelX - textWidth / 2;\r\n\r\n\t\tlet bgHeight: number = textHeight;\r\n\t\tlet bgY: number = label.pixelY;\r\n\r\n\t\tlet x: number = this._pointTo.x;\r\n\t\tlet y: number = this._pointTo.y;\r\n\r\n\t\tlet boundX1: number = boundingRect.x - x;\r\n\t\tlet boundX2: number = boundX1 + boundingRect.width;\r\n\t\tlet boundY1: number = boundingRect.y - y;\r\n\t\tlet boundY2: number = boundY1 + boundingRect.height;\r\n\r\n\t\tbackground.x = bgX;\r\n\t\tbackground.y = bgY;\r\n\r\n\t\tbackground.width = bgWidth;\r\n\t\tbackground.height = bgHeight;\r\n\r\n\t\tif (this.fitPointerToBounds) {\r\n\t\t\tbackground.pointerX = $math.fitToRange(- background.x, boundX1 - background.x, boundX2 - background.x);\r\n\t\t\tbackground.pointerY = $math.fitToRange(- background.y, boundY1 - background.y, boundY2 - background.y);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tbackground.pointerX = - background.x;\r\n\t\t\tbackground.pointerY = - background.y;\r\n\t\t}\r\n\r\n\t\tbackground.validate();\r\n\t}\r\n\r\n\t/**\r\n\t *\r\n\t */\r\n\tpublic delayedPointTo(point: IPoint, instantly?: boolean) {\r\n\t\tif (this._pointToDisposer) {\r\n\t\t\tthis._pointToDisposer.dispose();\r\n\t\t}\r\n\t\tthis._pointToDisposer = registry.events.once(\"exitframe\", () => {\r\n\t\t\tthis.pointTo(point, instantly);\r\n\t\t})\r\n\r\n\t\tthis.addDisposer(this._pointToDisposer);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Set nes tooltip's anchor point and moves whole tooltip.\r\n\t *\r\n\t * @param x  X coordinate\r\n\t * @param y  Y coordinate\r\n\t */\r\n\tpublic pointTo(point: IPoint, instantly?: boolean): void {\r\n\t\tif (this._pointTo.x != point.x || this._pointTo.y != point.y) {\r\n\t\t\tthis._pointTo = point;\r\n\t\t\tthis.invalidate();\r\n\r\n\t\t\t// this helps to avoid strange animation from nowhere on initial show or when balloon was hidden already\r\n\t\t\tif (!this.visible || instantly) {\r\n\t\t\t\tthis.moveTo(this._pointTo);\r\n\t\t\t\tif (this._animation) {\r\n\t\t\t\t\tthis._animation.kill();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\t// helps to avoid flicker on top/left corner\r\n\t\t\t\tif (this.pixelX == 0 && this.pixelY == 0) {\r\n\t\t\t\t\tthis.moveTo(this._pointTo);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tif (this._animation) {\r\n\t\t\t\t\t\tthis._animation.kill();\r\n\t\t\t\t\t}\r\n\t\t\t\t\tthis._animation = new Animation(this, [{ property: \"x\", to: point.x, from: this.pixelX }, { property: \"y\", to: point.y, from: this.pixelY }], this.animationDuration, this.animationEasing).start();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Sets numeric boundaries Tooltip needs to obey (so it does not go outside\r\n\t * specific area).\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param rectangle Boundary rectangle\r\n\t */\r\n\tpublic setBounds(rectangle: IRectangle): void {\r\n\t\tlet oldRect = this._boundingRect;\r\n\t\tif (oldRect.x != rectangle.x || oldRect.y != rectangle.y || oldRect.width != rectangle.width || oldRect.height != rectangle.height) {\r\n\t\t\tthis._boundingRect = rectangle;\r\n\t\t\tthis.invalidate();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Sets a [[Container]] instance to be used when calculating numeric\r\n\t * boundaries for the Tooltip.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param container  Boundary container\r\n\t */\r\n\tpublic set boundingContainer(container: Container) {\r\n\t\tthis._boundingContainer = container;\r\n\t\t// TODO remove closures ?\r\n\t\tcontainer.events.on(\"sizechanged\", this.updateBounds, this);\r\n\t\tcontainer.events.on(\"positionchanged\", this.updateBounds, this);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates numeric boundaries for the Tooltip, based on the\r\n\t * `boundingCountrainer`.\r\n\t */\r\n\tprotected updateBounds(): void {\r\n\t\tlet boundingContainer: Container = this._boundingContainer;\r\n\t\t// to global\r\n\t\tlet rect: IRectangle = $utils.spriteRectToSvg({\r\n\t\t\tx: boundingContainer.pixelX,\r\n\t\t\ty: boundingContainer.pixelY,\r\n\t\t\twidth: boundingContainer.maxWidth,\r\n\t\t\theight: boundingContainer.maxHeight\r\n\t\t}, boundingContainer);\r\n\t\tthis.setBounds(rect);\r\n\t}\r\n\r\n\t/**\r\n\t * Normally, a tooltip's position will be adjusted so it always fits into\r\n\t * chart's coundaries.\r\n\t *\r\n\t * Setting this to `false` will disable such checks and will allow tooltip\r\n\t * to \"bleed over\" the edge of the chart.\r\n\t *\r\n\t * @default false\r\n\t * @since 4.10.8\r\n\t * @param  value  Ignore chart bounds?\r\n\t */\r\n\tpublic set ignoreBounds(value: boolean) {\r\n\t\tthis.setPropertyValue(\"ignoreBounds\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Ignore chart bounds?\r\n\t */\r\n\tpublic get ignoreBounds(): boolean {\r\n\t\treturn this.getPropertyValue(\"ignoreBounds\");\r\n\t}\r\n\r\n\t/**\r\n\t * If tooltipOrientation is vertical, it can be drawn below or above point.\r\n\t * We need to know this when solving overlapping.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @return \"up\" | \"down\"\r\n\t */\r\n\tpublic get verticalOrientation(): \"up\" | \"down\" {\r\n\t\treturn this._verticalOrientation;\r\n\t}\r\n\r\n\t/**\r\n\t * To avoid stackoverflow\r\n\t * @ignore\r\n\t */\r\n\tpublic get tooltip(): Tooltip {\r\n\t\treturn undefined;\r\n\t}\r\n\r\n\t/**\r\n\t * Copies properties and other attributes.\r\n\t *\r\n\t * @param source  Source\r\n\t */\r\n\tpublic copyFrom(source: this): void {\r\n\t\tsuper.copyFrom(source);\r\n\t\tthis.label.copyFrom(source.label);\r\n\r\n\t\tif (source._boundingRect) {\r\n\t\t\tthis._boundingRect = source._boundingRect;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Adds easing functions to \"function\" fields.\r\n\t *\r\n\t * @param field  Field name\r\n\t * @return Assign as function?\r\n\t */\r\n\tprotected asFunction(field: string): boolean {\r\n\t\treturn field == \"animationEasing\" || super.asIs(field);\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Tooltip\"] = Tooltip;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}