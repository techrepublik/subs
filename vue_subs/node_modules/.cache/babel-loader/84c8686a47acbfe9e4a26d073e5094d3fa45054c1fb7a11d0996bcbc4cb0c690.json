{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.for-each.js\";\nimport \"core-js/modules/esnext.iterator.map.js\";\nimport { geoCentroid as centroid, geoGnomonic as gnomonic } from \"d3-geo\";\nimport { asin, atan2, cos, degrees, max, min, pi, radians, sin } from \"../math.js\";\nimport polyhedral from \"./index.js\";\nimport octahedron from \"./octahedron.js\";\nexport default function (faceProjection) {\n  faceProjection = faceProjection || function (face) {\n    var c = face.length === 6 ? centroid({\n      type: \"MultiPoint\",\n      coordinates: face\n    }) : face[0];\n    return gnomonic().scale(1).translate([0, 0]).rotate([-c[0], -c[1]]);\n  };\n  var w5 = octahedron.map(function (face) {\n    var xyz = face.map(cartesian),\n      n = xyz.length,\n      a = xyz[n - 1],\n      b,\n      hexagon = [];\n    for (var i = 0; i < n; ++i) {\n      b = xyz[i];\n      hexagon.push(spherical([a[0] * 0.9486832980505138 + b[0] * 0.31622776601683794, a[1] * 0.9486832980505138 + b[1] * 0.31622776601683794, a[2] * 0.9486832980505138 + b[2] * 0.31622776601683794]), spherical([b[0] * 0.9486832980505138 + a[0] * 0.31622776601683794, b[1] * 0.9486832980505138 + a[1] * 0.31622776601683794, b[2] * 0.9486832980505138 + a[2] * 0.31622776601683794]));\n      a = b;\n    }\n    return hexagon;\n  });\n  var cornerNormals = [];\n  var parents = [-1, 0, 0, 1, 0, 1, 4, 5];\n  w5.forEach(function (hexagon, j) {\n    var face = octahedron[j],\n      n = face.length,\n      normals = cornerNormals[j] = [];\n    for (var i = 0; i < n; ++i) {\n      w5.push([face[i], hexagon[(i * 2 + 2) % (2 * n)], hexagon[(i * 2 + 1) % (2 * n)]]);\n      parents.push(j);\n      normals.push(cross(cartesian(hexagon[(i * 2 + 2) % (2 * n)]), cartesian(hexagon[(i * 2 + 1) % (2 * n)])));\n    }\n  });\n  var faces = w5.map(function (face) {\n    return {\n      project: faceProjection(face),\n      face: face\n    };\n  });\n  parents.forEach(function (d, i) {\n    var parent = faces[d];\n    parent && (parent.children || (parent.children = [])).push(faces[i]);\n  });\n  function face(lambda, phi) {\n    var cosphi = cos(phi),\n      p = [cosphi * cos(lambda), cosphi * sin(lambda), sin(phi)];\n    var hexagon = lambda < -pi / 2 ? phi < 0 ? 6 : 4 : lambda < 0 ? phi < 0 ? 2 : 0 : lambda < pi / 2 ? phi < 0 ? 3 : 1 : phi < 0 ? 7 : 5;\n    var n = cornerNormals[hexagon];\n    return faces[dot(n[0], p) < 0 ? 8 + 3 * hexagon : dot(n[1], p) < 0 ? 8 + 3 * hexagon + 1 : dot(n[2], p) < 0 ? 8 + 3 * hexagon + 2 : hexagon];\n  }\n  return polyhedral(faces[0], face).angle(-30).scale(110.625).center([0, 45]);\n}\nfunction dot(a, b) {\n  for (var i = 0, n = a.length, s = 0; i < n; ++i) s += a[i] * b[i];\n  return s;\n}\nfunction cross(a, b) {\n  return [a[1] * b[2] - a[2] * b[1], a[2] * b[0] - a[0] * b[2], a[0] * b[1] - a[1] * b[0]];\n}\n\n// Converts 3D Cartesian to spherical coordinates (degrees).\nfunction spherical(cartesian) {\n  return [atan2(cartesian[1], cartesian[0]) * degrees, asin(max(-1, min(1, cartesian[2]))) * degrees];\n}\n\n// Converts spherical coordinates (degrees) to 3D Cartesian.\nfunction cartesian(coordinates) {\n  var lambda = coordinates[0] * radians,\n    phi = coordinates[1] * radians,\n    cosphi = cos(phi);\n  return [cosphi * cos(lambda), cosphi * sin(lambda), sin(phi)];\n}","map":{"version":3,"names":["geoCentroid","centroid","geoGnomonic","gnomonic","asin","atan2","cos","degrees","max","min","pi","radians","sin","polyhedral","octahedron","faceProjection","face","c","length","type","coordinates","scale","translate","rotate","w5","map","xyz","cartesian","n","a","b","hexagon","i","push","spherical","cornerNormals","parents","forEach","j","normals","cross","faces","project","d","parent","children","lambda","phi","cosphi","p","dot","angle","center","s"],"sources":["/home/josh/Documents/projects/subs/vue_subs/node_modules/d3-geo-projection/src/polyhedral/waterman.js"],"sourcesContent":["import {geoCentroid as centroid, geoGnomonic as gnomonic} from \"d3-geo\";\nimport {asin, atan2, cos, degrees, max, min, pi, radians, sin} from \"../math.js\";\nimport polyhedral from \"./index.js\";\nimport octahedron from \"./octahedron.js\";\n\nexport default function(faceProjection) {\n\n  faceProjection = faceProjection || function(face) {\n    var c = face.length === 6 ? centroid({type: \"MultiPoint\", coordinates: face}) : face[0];\n    return gnomonic().scale(1).translate([0, 0]).rotate([-c[0], -c[1]]);\n  };\n\n  var w5 = octahedron.map(function(face) {\n    var xyz = face.map(cartesian),\n        n = xyz.length,\n        a = xyz[n - 1],\n        b,\n        hexagon = [];\n    for (var i = 0; i < n; ++i) {\n      b = xyz[i];\n      hexagon.push(spherical([\n        a[0] * 0.9486832980505138 + b[0] * 0.31622776601683794,\n        a[1] * 0.9486832980505138 + b[1] * 0.31622776601683794,\n        a[2] * 0.9486832980505138 + b[2] * 0.31622776601683794\n      ]), spherical([\n        b[0] * 0.9486832980505138 + a[0] * 0.31622776601683794,\n        b[1] * 0.9486832980505138 + a[1] * 0.31622776601683794,\n        b[2] * 0.9486832980505138 + a[2] * 0.31622776601683794\n      ]));\n      a = b;\n    }\n    return hexagon;\n  });\n\n  var cornerNormals = [];\n\n  var parents = [-1, 0, 0, 1, 0, 1, 4, 5];\n\n  w5.forEach(function(hexagon, j) {\n    var face = octahedron[j],\n        n = face.length,\n        normals = cornerNormals[j] = [];\n    for (var i = 0; i < n; ++i) {\n      w5.push([\n        face[i],\n        hexagon[(i * 2 + 2) % (2 * n)],\n        hexagon[(i * 2 + 1) % (2 * n)]\n      ]);\n      parents.push(j);\n      normals.push(cross(\n        cartesian(hexagon[(i * 2 + 2) % (2 * n)]),\n        cartesian(hexagon[(i * 2 + 1) % (2 * n)])\n      ));\n    }\n  });\n\n  var faces = w5.map(function(face) {\n    return {\n      project: faceProjection(face),\n      face: face\n    };\n  });\n\n  parents.forEach(function(d, i) {\n    var parent = faces[d];\n    parent && (parent.children || (parent.children = [])).push(faces[i]);\n  });\n\n  function face(lambda, phi) {\n    var cosphi = cos(phi),\n        p = [cosphi * cos(lambda), cosphi * sin(lambda), sin(phi)];\n\n    var hexagon = lambda < -pi / 2 ? phi < 0 ? 6 : 4\n        : lambda < 0 ? phi < 0 ? 2 : 0\n        : lambda < pi / 2 ? phi < 0 ? 3 : 1\n        : phi < 0 ? 7 : 5;\n\n    var n = cornerNormals[hexagon];\n\n    return faces[dot(n[0], p) < 0 ? 8 + 3 * hexagon\n        : dot(n[1], p) < 0 ? 8 + 3 * hexagon + 1\n        : dot(n[2], p) < 0 ? 8 + 3 * hexagon + 2\n        : hexagon];\n  }\n\n  return polyhedral(faces[0], face)\n      .angle(-30)\n      .scale(110.625)\n      .center([0,45]);\n}\n\nfunction dot(a, b) {\n  for (var i = 0, n = a.length, s = 0; i < n; ++i) s += a[i] * b[i];\n  return s;\n}\n\nfunction cross(a, b) {\n  return [\n    a[1] * b[2] - a[2] * b[1],\n    a[2] * b[0] - a[0] * b[2],\n    a[0] * b[1] - a[1] * b[0]\n  ];\n}\n\n// Converts 3D Cartesian to spherical coordinates (degrees).\nfunction spherical(cartesian) {\n  return [\n    atan2(cartesian[1], cartesian[0]) * degrees,\n    asin(max(-1, min(1, cartesian[2]))) * degrees\n  ];\n}\n\n// Converts spherical coordinates (degrees) to 3D Cartesian.\nfunction cartesian(coordinates) {\n  var lambda = coordinates[0] * radians,\n      phi = coordinates[1] * radians,\n      cosphi = cos(phi);\n  return [\n    cosphi * cos(lambda),\n    cosphi * sin(lambda),\n    sin(phi)\n  ];\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}