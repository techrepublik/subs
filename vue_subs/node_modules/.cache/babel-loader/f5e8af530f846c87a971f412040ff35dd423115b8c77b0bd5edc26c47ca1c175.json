{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { __extends, __generator, __read } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\nimport { Disposer } from \"./Disposer\";\nimport { EventDispatcher } from \"./EventDispatcher\";\nimport * as $object from \"./Object\";\nimport * as $iter from \"./Iterator\";\nimport * as $string from \"./String\";\n/**\r\n * A disposable dictionary, which when disposed itself will call `dispose()`\r\n * method on all its items.\r\n */\nvar DictionaryDisposer = /** @class */function (_super) {\n  __extends(DictionaryDisposer, _super);\n  function DictionaryDisposer(dict) {\n    var _this = this;\n    var disposer = dict.events.on(\"removed\", function (x) {\n      x.oldValue.dispose();\n    }, undefined, false);\n    _this = _super.call(this, function () {\n      disposer.dispose();\n      // TODO clear the dictionary ?\n      $iter.each(dict.iterator(), function (a) {\n        var v = a[1];\n        v.dispose();\n      });\n    }) || this;\n    return _this;\n  }\n  return DictionaryDisposer;\n}(Disposer);\nexport { DictionaryDisposer };\n/**\r\n * A Dictionary is collection where values of some type can be mapped to\r\n * string keys.\r\n *\r\n * You might call it an \"associative list\" or \"associative array\".\r\n */\nvar Dictionary = /** @class */function () {\n  /**\r\n   * Constructor\r\n   */\n  function Dictionary() {\n    /**\r\n     * Event dispatcher.\r\n     */\n    this.events = new EventDispatcher();\n    this._dictionary = {};\n  }\n  /**\r\n   * Returns `true` if key exists in Dictionary.\r\n   *\r\n   * @param key  The key to search for\r\n   * @return `true` if key exists, `false` if it doesn't\r\n   */\n  Dictionary.prototype.hasKey = function (key) {\n    return $object.hasKey(this._dictionary, key);\n  };\n  /**\r\n   * Returns the value for a specific key.\r\n   *\r\n   * @param key  The key to search for\r\n   * @return Value for the key, or `undefined` if it doesn't exist\r\n   */\n  Dictionary.prototype.getKey = function (key) {\n    return this._dictionary[key];\n  };\n  /**\r\n   * Inserts value at specific key.\r\n   *\r\n   * Will thrown an exception if the key already exists in the dictionary.\r\n   *\r\n   * @param key    Key\r\n   * @param value  Value\r\n   */\n  Dictionary.prototype.insertKey = function (key, value) {\n    if ($object.hasKey(this._dictionary, key)) {\n      throw new Error(\"Key \" + key + \" already exists in dictionary\");\n    } else {\n      this._dictionary[key] = value;\n      if (this.events.isEnabled(\"insertKey\")) {\n        this.events.dispatchImmediately(\"insertKey\", {\n          type: \"insertKey\",\n          target: this,\n          key: key,\n          newValue: value\n        });\n      }\n    }\n  };\n  /**\r\n   * Adds or updates key/value into dictionary.\r\n   *\r\n   * If the key already exists, the old value will be overwritten.\r\n   *\r\n   * If the new value is exactly the same as the old value (using ===), it won't do anything.\r\n   *\r\n   * @param key    Key\r\n   * @param value  Value\r\n   */\n  Dictionary.prototype.setKey = function (key, value) {\n    if ($object.hasKey(this._dictionary, key)) {\n      var oldValue = this._dictionary[key];\n      if (oldValue !== value) {\n        this._dictionary[key] = value;\n        if (this.events.isEnabled(\"setKey\")) {\n          this.events.dispatchImmediately(\"setKey\", {\n            type: \"setKey\",\n            target: this,\n            key: key,\n            oldValue: oldValue,\n            newValue: value\n          });\n        }\n        if (this.events.isEnabled(\"removed\")) {\n          this.events.dispatchImmediately(\"removed\", {\n            type: \"removed\",\n            target: this,\n            oldValue: oldValue\n          });\n        }\n      }\n    } else {\n      this._dictionary[key] = value;\n      if (this.events.isEnabled(\"insertKey\")) {\n        this.events.dispatchImmediately(\"insertKey\", {\n          type: \"insertKey\",\n          target: this,\n          key: key,\n          newValue: value\n        });\n      }\n    }\n  };\n  /**\r\n   * Updates the value at specific `key` using custom function.\r\n   *\r\n   * Passes in current value into the function, and uses its output as a new\r\n   * value.\r\n   *\r\n   * If the new value is exactly the same as the old value (using ===), it won't do anything.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param key  Key\r\n   * @param fn   Function to transform the value\r\n   */\n  Dictionary.prototype.updateKey = function (key, fn) {\n    if ($object.hasKey(this._dictionary, key)) {\n      var oldValue = this._dictionary[key];\n      var newValue = fn(oldValue);\n      if (oldValue !== newValue) {\n        this._dictionary[key] = newValue;\n        if (this.events.isEnabled(\"setKey\")) {\n          this.events.dispatchImmediately(\"setKey\", {\n            type: \"setKey\",\n            target: this,\n            key: key,\n            oldValue: oldValue,\n            newValue: newValue\n          });\n        }\n        if (this.events.isEnabled(\"removed\")) {\n          this.events.dispatchImmediately(\"removed\", {\n            type: \"removed\",\n            target: this,\n            oldValue: oldValue\n          });\n        }\n      }\n    } else {\n      throw new Error(\"Key \" + key + \" doesn't exist in dictionary\");\n    }\n  };\n  /**\r\n   * Removes value at specific `key` from dictionary.\r\n   *\r\n   * @param key  Key to remove\r\n   */\n  Dictionary.prototype.removeKey = function (key) {\n    if ($object.hasKey(this._dictionary, key)) {\n      var oldValue = this._dictionary[key];\n      delete this._dictionary[key];\n      if (this.events.isEnabled(\"removeKey\")) {\n        this.events.dispatchImmediately(\"removeKey\", {\n          type: \"removeKey\",\n          target: this,\n          key: key,\n          oldValue: oldValue\n        });\n      }\n      if (this.events.isEnabled(\"removed\")) {\n        this.events.dispatchImmediately(\"removed\", {\n          type: \"removed\",\n          target: this,\n          oldValue: oldValue\n        });\n      }\n    }\n  };\n  /**\r\n   * [insertKeyIfEmpty description]\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @todo description\r\n   * @param key      [description]\r\n   * @param ifEmpty  [description]\r\n   * @return [description]\r\n   */\n  Dictionary.prototype.insertKeyIfEmpty = function (key, ifEmpty) {\n    if (!this.hasKey(key)) {\n      this.insertKey(key, ifEmpty());\n    }\n    return this.getKey(key);\n  };\n  /**\r\n   * Removes all items from the dictionary.\r\n   */\n  Dictionary.prototype.clear = function () {\n    var _this = this;\n    // TODO dispatch this after clear\n    if (this.events.isEnabled(\"removed\")) {\n      $object.each(this._dictionary, function (key, value) {\n        _this.events.dispatchImmediately(\"removed\", {\n          type: \"removed\",\n          target: _this,\n          oldValue: value\n        });\n      });\n    }\n    this._dictionary = {};\n    if (this.events.isEnabled(\"cleared\")) {\n      this.events.dispatchImmediately(\"cleared\", {\n        type: \"cleared\",\n        target: this\n      });\n    }\n  };\n  /**\r\n   * Copies items from another Dictionary.\r\n   *\r\n   * @param source  A Dictionary to copy items from\r\n   */\n  Dictionary.prototype.copyFrom = function (source) {\n    var _this = this;\n    $iter.each(source.iterator(), function (a) {\n      // TODO fix this type cast\n      _this.setKey(a[0], a[1]);\n    });\n  };\n  /**\r\n   * Returns an interator that can be used to iterate through all items in\r\n   * the dictionary.\r\n   *\r\n   * @return Iterator\r\n   */\n  Dictionary.prototype.iterator = function () {\n    // @todo fix this type after the Iterator bug is fixed\n    // https://github.com/Microsoft/TypeScript/issues/16730\n    return $object.entries(this._dictionary);\n  };\n  /**\r\n   * Returns an ES6 iterator for the keys/values of the dictionary.\r\n   */\n  Dictionary.prototype[Symbol.iterator] = function () {\n    var _a, _b, _i, key;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          _a = [];\n          for (_b in this._dictionary) _a.push(_b);\n          _i = 0;\n          _c.label = 1;\n        case 1:\n          if (!(_i < _a.length)) return [3 /*break*/, 4];\n          key = _a[_i];\n          if (!$object.hasKey(this._dictionary, key)) return [3 /*break*/, 3];\n          return [4 /*yield*/, [key, this._dictionary[key]]];\n        case 2:\n          _c.sent();\n          _c.label = 3;\n        case 3:\n          _i++;\n          return [3 /*break*/, 1];\n        case 4:\n          return [2 /*return*/];\n      }\n    });\n  };\n  /**\r\n   * Calls `f` for each key/value in the dictionary.\r\n   */\n  Dictionary.prototype.each = function (f) {\n    $iter.each(this.iterator(), function (_a) {\n      var _b = __read(_a, 2),\n        key = _b[0],\n        value = _b[1];\n      return f(key, value);\n    });\n  };\n  /**\r\n   * Returns an iterator that can be used to iterate through all items in\r\n   * the dictionary, ordered by key.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @return Iterator\r\n   */\n  Dictionary.prototype.sortedIterator = function () {\n    return $iter.sort(this.iterator(), function (x, y) {\n      return $string.order(x[0], y[0]);\n    });\n  };\n  return Dictionary;\n}();\nexport { Dictionary };\n/**\r\n * A version of a [[Dictionary]] that has a \"template\".\r\n *\r\n * A template is an instance of an object, that can be used to create new\r\n * elements in the list without actually needing to create instances for those.\r\n *\r\n * When new element is created in the list, e.g. by calling its `create()`\r\n * method, an exact copy of the element is created (including properties and\r\n * other attributes), inserted into the list and returned.\r\n */\nvar DictionaryTemplate = /** @class */function (_super) {\n  __extends(DictionaryTemplate, _super);\n  /**\r\n   * Constructor\r\n   *\r\n   * @param t Template object\r\n   */\n  function DictionaryTemplate(t) {\n    var _this = _super.call(this) || this;\n    _this.template = t;\n    return _this;\n  }\n  Object.defineProperty(DictionaryTemplate.prototype, \"template\", {\n    /**\r\n     * @return Template object\r\n     */\n    get: function () {\n      return this._template;\n    },\n    /**\r\n     * A \"template\" object to copy all properties from when creating new list\r\n     * items.\r\n     *\r\n     * @param v  Template object\r\n     */\n    set: function (v) {\n      v.isTemplate = true;\n      this._template = v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Copies all elements from other dictionary.\r\n   *\r\n   * @param source  Source dictionary\r\n   */\n  DictionaryTemplate.prototype.copyFrom = function (source) {\n    var _this = this;\n    $iter.each(source.iterator(), function (a) {\n      // TODO fix this type cast\n      // TODO why does this need to clone ?\n      _this.setKey(a[0], a[1].clone());\n    });\n  };\n  /**\r\n   * Instantiates a new object of the specified type, adds it to specified\r\n   * `key` in the dictionary, and returns it.\r\n   *\r\n   * @param make  Item type to use. Will use the default type for the dictionary if not specified.\r\n   * @return      Newly created item\r\n   */\n  DictionaryTemplate.prototype.create = function (key) {\n    var _this = this;\n    return this.insertKeyIfEmpty(key, function () {\n      return _this.template.clone();\n    });\n  };\n  return DictionaryTemplate;\n}(Dictionary);\nexport { DictionaryTemplate };","map":{"version":3,"names":["Disposer","EventDispatcher","$object","$iter","$string","DictionaryDisposer","_super","__extends","dict","_this","disposer","events","on","x","oldValue","dispose","undefined","call","each","iterator","a","v","Dictionary","_dictionary","prototype","hasKey","key","getKey","insertKey","value","Error","isEnabled","dispatchImmediately","type","target","newValue","setKey","updateKey","fn","removeKey","insertKeyIfEmpty","ifEmpty","clear","copyFrom","source","entries","Symbol","_c","sent","f","_a","_b","__read","sortedIterator","sort","y","order","DictionaryTemplate","t","template","Object","defineProperty","get","_template","set","isTemplate","clone","create"],"sources":["../../../../../src/.internal/core/utils/Dictionary.ts"],"sourcesContent":["/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { IDisposer, Disposer } from \"./Disposer\";\r\nimport { EventDispatcher, AMEvent } from \"./EventDispatcher\";\r\nimport { Optional } from \"./Type\";\r\nimport { IClone } from \"./Clone\";\r\nimport * as $object from \"./Object\";\r\nimport * as $iter from \"./Iterator\";\r\nimport * as $string from \"./String\";\r\n\r\n/**\r\n * Defines events from [[Dictionary]].\r\n */\r\nexport interface IDictionaryEvents<Key, Value> {\r\n\r\n\t/**\r\n\t * Invoked when an item is removed from the dictionary.\r\n\t */\r\n\tremoved: {\r\n\r\n\t\t/**\r\n\t\t * Removed value.\r\n\t\t */\r\n\t\toldValue: Value;\r\n\r\n\t};\r\n\r\n\t/**\r\n\t * Invoked when dictionary is cleared.\r\n\t */\r\n\tcleared: {};\r\n\r\n\t/**\r\n\t * Invoked when `insertKey()` method is called.\r\n\t */\r\n\tinsertKey: {\r\n\r\n\t\t/**\r\n\t\t * Key.\r\n\t\t */\r\n\t\tkey: Key;\r\n\r\n\t\t/**\r\n\t\t * Added value.\r\n\t\t */\r\n\t\tnewValue: Value;\r\n\r\n\t};\r\n\r\n\t/**\r\n\t * Invoked when `setKey()` method is called.\r\n\t */\r\n\tsetKey: {\r\n\r\n\t\t/**\r\n\t\t * Key.\r\n\t\t */\r\n\t\tkey: Key;\r\n\r\n\t\t/**\r\n\t\t * Removed value. (if overwriting)\r\n\t\t */\r\n\t\toldValue: Value;\r\n\r\n\t\t/**\r\n\t\t * Added value.\r\n\t\t */\r\n\t\tnewValue: Value;\r\n\r\n\t};\r\n\r\n\t/**\r\n\t * Invoked when `removeKey()` method is called.\r\n\t */\r\n\tremoveKey: {\r\n\r\n\t\t/**\r\n\t\t * Key.\r\n\t\t */\r\n\t\tkey: Key;\r\n\r\n\t\t/**\r\n\t\t * Removed value.\r\n\t\t */\r\n\t\toldValue: Value;\r\n\r\n\t};\r\n\r\n}\r\n\r\n/**\r\n * [K description]\r\n *\r\n * @ignore Exclude from docs\r\n * @todo Descirption\r\n */\r\nexport type DictionaryLike<K, A> = $iter.Iterable<[K, A]> & {\r\n\tevents: EventDispatcher<{ removed: { oldValue: A } }>;\r\n};\r\n\r\n/**\r\n * A disposable dictionary, which when disposed itself will call `dispose()`\r\n * method on all its items.\r\n */\r\nexport class DictionaryDisposer<K, A extends IDisposer> extends Disposer {\r\n\tconstructor(dict: DictionaryLike<K, A>) {\r\n\t\tconst disposer = dict.events.on(\"removed\", (x) => {\r\n\t\t\tx.oldValue.dispose();\r\n\t\t}, undefined, false);\r\n\r\n\t\tsuper(() => {\r\n\t\t\tdisposer.dispose();\r\n\r\n\t\t\t// TODO clear the dictionary ?\r\n\t\t\t$iter.each(dict.iterator(), (a) => {\r\n\t\t\t\tconst v = a[1];\r\n\t\t\t\tv.dispose();\r\n\t\t\t});\r\n\t\t});\r\n\t}\r\n}\r\n\r\n/**\r\n * A Dictionary is collection where values of some type can be mapped to\r\n * string keys.\r\n *\r\n * You might call it an \"associative list\" or \"associative array\".\r\n */\r\nexport class Dictionary<Key extends string, T> {\r\n\r\n\t/**\r\n\t * Key/value pairs\r\n\t */\r\n\tprivate _dictionary: { [key in Key]?: T };\r\n\r\n\t/**\r\n\t * Event dispatcher.\r\n\t */\r\n\tpublic events: EventDispatcher<AMEvent<Dictionary<Key, T>, IDictionaryEvents<Key, T>>> = new EventDispatcher();\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tthis._dictionary = {};\r\n\t}\r\n\r\n\t/**\r\n\t * Returns `true` if key exists in Dictionary.\r\n\t *\r\n\t * @param key  The key to search for\r\n\t * @return `true` if key exists, `false` if it doesn't\r\n\t */\r\n\tpublic hasKey(key: Key): boolean {\r\n\t\treturn $object.hasKey(this._dictionary, key);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the value for a specific key.\r\n\t *\r\n\t * @param key  The key to search for\r\n\t * @return Value for the key, or `undefined` if it doesn't exist\r\n\t */\r\n\tpublic getKey(key: Key): Optional<T> {\r\n\t\treturn this._dictionary[key];\r\n\t}\r\n\r\n\t/**\r\n\t * Inserts value at specific key.\r\n\t *\r\n\t * Will thrown an exception if the key already exists in the dictionary.\r\n\t *\r\n\t * @param key    Key\r\n\t * @param value  Value\r\n\t */\r\n\tpublic insertKey(key: Key, value: T): void {\r\n\t\tif ($object.hasKey(this._dictionary, key)) {\r\n\t\t\tthrow new Error(\"Key \" + key + \" already exists in dictionary\");\r\n\r\n\t\t} else {\r\n\t\t\tthis._dictionary[key] = value;\r\n\r\n\t\t\tif (this.events.isEnabled(\"insertKey\")) {\r\n\t\t\t\tthis.events.dispatchImmediately(\"insertKey\", {\r\n\t\t\t\t\ttype: \"insertKey\",\r\n\t\t\t\t\ttarget: this,\r\n\t\t\t\t\tkey: key,\r\n\t\t\t\t\tnewValue: value\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Adds or updates key/value into dictionary.\r\n\t *\r\n\t * If the key already exists, the old value will be overwritten.\r\n\t *\r\n\t * If the new value is exactly the same as the old value (using ===), it won't do anything.\r\n\t *\r\n\t * @param key    Key\r\n\t * @param value  Value\r\n\t */\r\n\tpublic setKey(key: Key, value: T): void {\r\n\t\tif ($object.hasKey(this._dictionary, key)) {\r\n\t\t\tconst oldValue = this._dictionary[key];\r\n\r\n\t\t\tif (oldValue !== value) {\r\n\t\t\t\tthis._dictionary[key] = value;\r\n\r\n\t\t\t\tif (this.events.isEnabled(\"setKey\")) {\r\n\t\t\t\t\tthis.events.dispatchImmediately(\"setKey\", {\r\n\t\t\t\t\t\ttype: \"setKey\",\r\n\t\t\t\t\t\ttarget: this,\r\n\t\t\t\t\t\tkey: key,\r\n\t\t\t\t\t\toldValue: oldValue,\r\n\t\t\t\t\t\tnewValue: value\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (this.events.isEnabled(\"removed\")) {\r\n\t\t\t\t\tthis.events.dispatchImmediately(\"removed\", {\r\n\t\t\t\t\t\ttype: \"removed\",\r\n\t\t\t\t\t\ttarget: this,\r\n\t\t\t\t\t\toldValue: oldValue\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\t\t\tthis._dictionary[key] = value;\r\n\r\n\t\t\tif (this.events.isEnabled(\"insertKey\")) {\r\n\t\t\t\tthis.events.dispatchImmediately(\"insertKey\", {\r\n\t\t\t\t\ttype: \"insertKey\",\r\n\t\t\t\t\ttarget: this,\r\n\t\t\t\t\tkey: key,\r\n\t\t\t\t\tnewValue: value\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates the value at specific `key` using custom function.\r\n\t *\r\n\t * Passes in current value into the function, and uses its output as a new\r\n\t * value.\r\n\t *\r\n\t * If the new value is exactly the same as the old value (using ===), it won't do anything.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param key  Key\r\n\t * @param fn   Function to transform the value\r\n\t */\r\n\tpublic updateKey(key: Key, fn: (value: T) => T): void {\r\n\t\tif ($object.hasKey(this._dictionary, key)) {\r\n\t\t\tconst oldValue = this._dictionary[key];\r\n\t\t\tconst newValue = fn(oldValue);\r\n\r\n\t\t\tif (oldValue !== newValue) {\r\n\t\t\t\tthis._dictionary[key] = newValue;\r\n\r\n\t\t\t\tif (this.events.isEnabled(\"setKey\")) {\r\n\t\t\t\t\tthis.events.dispatchImmediately(\"setKey\", {\r\n\t\t\t\t\t\ttype: \"setKey\",\r\n\t\t\t\t\t\ttarget: this,\r\n\t\t\t\t\t\tkey: key,\r\n\t\t\t\t\t\toldValue: oldValue,\r\n\t\t\t\t\t\tnewValue: newValue\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (this.events.isEnabled(\"removed\")) {\r\n\t\t\t\t\tthis.events.dispatchImmediately(\"removed\", {\r\n\t\t\t\t\t\ttype: \"removed\",\r\n\t\t\t\t\t\ttarget: this,\r\n\t\t\t\t\t\toldValue: oldValue\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\t\t\tthrow new Error(\"Key \" + key + \" doesn't exist in dictionary\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Removes value at specific `key` from dictionary.\r\n\t *\r\n\t * @param key  Key to remove\r\n\t */\r\n\tpublic removeKey(key: Key): void {\r\n\t\tif ($object.hasKey(this._dictionary, key)) {\r\n\t\t\tconst oldValue = this._dictionary[key];\r\n\r\n\t\t\tdelete this._dictionary[key];\r\n\r\n\t\t\tif (this.events.isEnabled(\"removeKey\")) {\r\n\t\t\t\tthis.events.dispatchImmediately(\"removeKey\", {\r\n\t\t\t\t\ttype: \"removeKey\",\r\n\t\t\t\t\ttarget: this,\r\n\t\t\t\t\tkey: key,\r\n\t\t\t\t\toldValue: oldValue\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\t\t\tif (this.events.isEnabled(\"removed\")) {\r\n\t\t\t\tthis.events.dispatchImmediately(\"removed\", {\r\n\t\t\t\t\ttype: \"removed\",\r\n\t\t\t\t\ttarget: this,\r\n\t\t\t\t\toldValue: oldValue\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * [insertKeyIfEmpty description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo description\r\n\t * @param key      [description]\r\n\t * @param ifEmpty  [description]\r\n\t * @return [description]\r\n\t */\r\n\tpublic insertKeyIfEmpty(key: Key, ifEmpty: () => T): T {\r\n\t\tif (!this.hasKey(key)) {\r\n\t\t\tthis.insertKey(key, ifEmpty());\r\n\t\t}\r\n\r\n\t\treturn <T>this.getKey(key);\r\n\t}\r\n\r\n\t/**\r\n\t * Removes all items from the dictionary.\r\n\t */\r\n\tpublic clear(): void {\r\n\t\t// TODO dispatch this after clear\r\n\t\tif (this.events.isEnabled(\"removed\")) {\r\n\t\t\t$object.each(this._dictionary, (key, value) => {\r\n\t\t\t\tthis.events.dispatchImmediately(\"removed\", {\r\n\t\t\t\t\ttype: \"removed\",\r\n\t\t\t\t\ttarget: this,\r\n\t\t\t\t\toldValue: value\r\n\t\t\t\t});\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\tthis._dictionary = {};\r\n\r\n\t\tif (this.events.isEnabled(\"cleared\")) {\r\n\t\t\tthis.events.dispatchImmediately(\"cleared\", {\r\n\t\t\t\ttype: \"cleared\",\r\n\t\t\t\ttarget: this\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Copies items from another Dictionary.\r\n\t *\r\n\t * @param source  A Dictionary to copy items from\r\n\t */\r\n\tpublic copyFrom(source: this): void {\r\n\t\t$iter.each(source.iterator(), (a) => {\r\n\t\t\t// TODO fix this type cast\r\n\t\t\tthis.setKey(<Key>a[0], a[1]);\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an interator that can be used to iterate through all items in\r\n\t * the dictionary.\r\n\t *\r\n\t * @return Iterator\r\n\t */\r\n\tpublic iterator(): $iter.Iterator<[Key, T]> {\r\n\t\t// @todo fix this type after the Iterator bug is fixed\r\n\t\t// https://github.com/Microsoft/TypeScript/issues/16730\r\n\t\treturn <$iter.Iterator<[Key, T]>>$object.entries(this._dictionary);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an ES6 iterator for the keys/values of the dictionary.\r\n\t */\r\n\tpublic *[Symbol.iterator](): Iterator<[Key, T]> {\r\n\t\t// TODO make this more efficient ?\r\n\t\tfor (let key in this._dictionary) {\r\n\t\t\tif ($object.hasKey(this._dictionary, key)) {\r\n\t\t\t\tyield [<Key>key, this._dictionary[key]];\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Calls `f` for each key/value in the dictionary.\r\n\t */\r\n\tpublic each(f: (key: Key, value: T) => void): void {\r\n\t\t$iter.each(this.iterator(), ([key, value]) => f(key, value));\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an iterator that can be used to iterate through all items in\r\n\t * the dictionary, ordered by key.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @return Iterator\r\n\t */\r\n\tpublic sortedIterator(): $iter.Iterator<[Key, T]> {\r\n\t\treturn $iter.sort(this.iterator(), (x, y) => $string.order(x[0], y[0]));\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * A version of a [[Dictionary]] that has a \"template\".\r\n *\r\n * A template is an instance of an object, that can be used to create new\r\n * elements in the list without actually needing to create instances for those.\r\n *\r\n * When new element is created in the list, e.g. by calling its `create()`\r\n * method, an exact copy of the element is created (including properties and\r\n * other attributes), inserted into the list and returned.\r\n */\r\nexport class DictionaryTemplate<Key extends string, T extends IClone<T> & { isTemplate: boolean }> extends Dictionary<Key, T> {\r\n\t/**\r\n\t * A template object.\r\n\t *\r\n\t * @todo Make this private\r\n\t */\r\n\tpublic _template!: T;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t *\r\n\t * @param t Template object\r\n\t */\r\n\tpublic constructor(t: T) {\r\n\t\tsuper();\r\n\t\tthis.template = t;\r\n\t}\r\n\r\n\t/**\r\n\t * A \"template\" object to copy all properties from when creating new list\r\n\t * items.\r\n\t *\r\n\t * @param v  Template object\r\n\t */\r\n\tpublic set template(v: T) {\r\n\t\tv.isTemplate = true;\r\n\t\tthis._template = v;\r\n\t}\r\n\r\n\t/**\r\n\t * @return Template object\r\n\t */\r\n\tpublic get template(): T {\r\n\t\treturn this._template;\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all elements from other dictionary.\r\n\t *\r\n\t * @param source  Source dictionary\r\n\t */\r\n\tpublic copyFrom(source: this): void {\r\n\t\t$iter.each(source.iterator(), (a) => {\r\n\t\t\t// TODO fix this type cast\r\n\t\t\t// TODO why does this need to clone ?\r\n\t\t\tthis.setKey(<Key>a[0], a[1].clone());\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Instantiates a new object of the specified type, adds it to specified\r\n\t * `key` in the dictionary, and returns it.\r\n\t *\r\n\t * @param make  Item type to use. Will use the default type for the dictionary if not specified.\r\n\t * @return      Newly created item\r\n\t */\r\n\tpublic create(key: Key): T {\r\n\t\treturn this.insertKeyIfEmpty(key, () => this.template.clone());\r\n\t}\r\n\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}