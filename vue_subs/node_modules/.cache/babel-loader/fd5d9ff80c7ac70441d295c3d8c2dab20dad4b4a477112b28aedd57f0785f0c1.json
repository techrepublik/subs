{"ast":null,"code":"import { renderSlot as _renderSlot, createTextVNode as _createTextVNode, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, normalizeClass as _normalizeClass } from \"vue\";\nconst _hoisted_1 = [\"id\"];\nconst _hoisted_2 = {\n  key: 0,\n  class: \"dz-message\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", {\n    id: $props.id,\n    ref: \"dropzoneElement\",\n    class: _normalizeClass({\n      'vue-dropzone dropzone': $props.includeStyling\n    })\n  }, [$props.useCustomSlot ? (_openBlock(), _createElementBlock(\"div\", _hoisted_2, [_renderSlot(_ctx.$slots, \"default\", {}, () => [_cache[0] || (_cache[0] = _createTextVNode(\"Drop files here to upload\"))])])) : _createCommentVNode(\"v-if\", true)], 10 /* CLASS, PROPS */, _hoisted_1);\n}","map":{"version":3,"names":["key","class","_createElementBlock","id","$props","ref","_normalizeClass","includeStyling","useCustomSlot","_hoisted_2","_renderSlot","_ctx","$slots","_createTextVNode","_createCommentVNode","_hoisted_1"],"sources":["/Users/admin/Desktop/techrepublik/pro/subs/vue_subs/node_modules/dropzone-vue3/src/components/vue-dropzone.vue"],"sourcesContent":["<template>\n  <div\n      :id=\"id\"\n      ref=\"dropzoneElement\"\n      :class=\"{ 'vue-dropzone dropzone': includeStyling }\"\n  >\n    <div\n        v-if=\"useCustomSlot\"\n        class=\"dz-message\"\n    >\n      <slot>Drop files here to upload</slot>\n    </div>\n  </div>\n</template>\n\n<script>\nimport Dropzone from \"dropzone\"\nimport awsEndpoint from '../services/urlsigner'\n\nexport default {\n  props: {\n    id: {\n      type: String,\n      required: true,\n      default: 'dropzone'\n    },\n    options: {\n      type: Object,\n      required: true\n    },\n    includeStyling: {\n      type: Boolean,\n      default: true,\n      required: false\n    },\n    awss3: {\n      type: Object,\n      required: false,\n      default: null\n    },\n    destroyDropzone: {\n      type: Boolean,\n      default: true,\n      required: false\n    },\n    duplicateCheck: {\n      type: Boolean,\n      default: false,\n      required: false\n    },\n    useCustomSlot: {\n      type: Boolean,\n      default: false,\n      required: false\n    }\n  },\n  emits: [\n    'vdropzone-thumbnail',\n    'vdropzone-duplicate-file',\n    'vdropzone-file-added',\n    'vdropzone-files-added',\n    'vdropzone-removed-file',\n    'vdropzone-success',\n    'vdropzone-error',\n    'vdropzone-s3-upload-success',\n    'vdropzone-s3-upload-error',\n    'vdropzone-success-multiple',\n    'vdropzone-error-multiple',\n    'vdropzone-sending',\n    'vdropzone-sending-multiple',\n    'vdropzone-complete',\n    'vdropzone-complete-multiple',\n    'vdropzone-canceled',\n    'vdropzone-canceled-multiple',\n    'vdropzone-max-files-reached',\n    'vdropzone-max-files-exceeded',\n    'vdropzone-processing',\n    'vdropzone-processing-multiple',\n    'vdropzone-upload-progress',\n    'vdropzone-total-upload-progress',\n    'vdropzone-reset',\n    'vdropzone-queue-complete',\n    'vdropzone-drop',\n    'vdropzone-drag-start',\n    'vdropzone-drag-end',\n    'vdropzone-drag-enter',\n    'vdropzone-drag-over',\n    'vdropzone-drag-leave',\n    'vdropzone-mounted',\n    'vdropzone-file-added-manually',\n  ],\n  data () {\n    return {\n      aws: null,\n      isS3: false,\n      isS3OverridesServerPropagation: false,\n      wasQueueAutoProcess: true,\n      files: [],\n      dropzoneSettings: {\n        thumbnailWidth: 200,\n        thumbnailHeight: 200\n      }\n    }\n  },\n  watch: {\n    options: {\n      handler () {\n        this.updateSettings()\n      },\n      deep: true,\n    },\n    awss3: {\n      handler () {\n        this.updateAWSSettings()\n      },\n      deep: true,\n    }\n  },\n  beforeMount () {\n    this.updateSettings()\n    this.updateAWSSettings()\n  },\n  mounted () {\n    if (this.$isServer && this.hasBeenMounted) {\n      return\n    }\n    this.hasBeenMounted = true\n\n    this.dropzone = new Dropzone(\n        this.$refs.dropzoneElement,\n        this.dropzoneSettings\n    )\n\n    this.dropzone.on('thumbnail', (file, dataUrl) => {\n      this.$emit('vdropzone-thumbnail', file, dataUrl)\n    })\n\n    this.dropzone.on('addedfile', (file) => {\n      if (this.duplicateCheck && this.dropzone.getQueuedFiles().length) {\n        this.getQueuedFiles().forEach(existingFile => {\n          if (\n              existingFile.name === file.name &&\n              existingFile.size === file.size &&\n              existingFile.lastModifiedDate.toString() === file.lastModifiedDate.toString() &&\n              existingFile.dataUrl === file.dataUrl\n          ) {\n            this.removeFile(file)\n            this.$emit('vdropzone-duplicate-file', file)\n          }\n        })\n      }\n\n      this.$emit('vdropzone-file-added', file)\n\n      if (this.isS3 && this.wasQueueAutoProcess && !file.manuallyAdded) {\n        this.getSignedAndUploadToS3(file)\n      }\n    })\n\n    this.dropzone.on('addedfiles', (files) => {\n      this.$emit('vdropzone-files-added', files)\n    })\n\n    this.dropzone.on('removedfile', (file) => {\n      this.$emit('vdropzone-removed-file', file)\n      if (file.manuallyAdded && this.dropzone.options.maxFiles !== null)\n        this.dropzone.options.maxFiles++\n    })\n\n    this.dropzone.on('success', (file, response) => {\n      this.$emit('vdropzone-success', file, response)\n      if (this.isS3) {\n        if (this.isS3OverridesServerPropagation) {\n          let xmlResponse = new window.DOMParser().parseFromString(\n              response,\n              'text/xml'\n          )\n          let s3ObjectLocation = xmlResponse.firstChild.children[0].innerHTML\n          this.$emit('vdropzone-s3-upload-success', s3ObjectLocation)\n        }\n        if (this.wasQueueAutoProcess) {\n          this.setOption('autoProcessQueue', false)\n        }\n      }\n    })\n\n    this.dropzone.on('successmultiple', (file, response) => {\n      this.$emit('vdropzone-success-multiple', file, response)\n    })\n\n    this.dropzone.on('error', (file, message, xhr) => {\n      this.$emit('vdropzone-error', file, message, xhr)\n      if (this.isS3) this.$emit('vdropzone-s3-upload-error')\n    })\n\n    this.dropzone.on('errormultiple', (files, message, xhr) => {\n      this.$emit('vdropzone-error-multiple', files, message, xhr)\n    })\n\n    this.dropzone.on('sending', (file, xhr, formData) => {\n      if (this.isS3) {\n        if (this.isS3OverridesServerPropagation) {\n          let signature = file.s3Signature\n          Object.keys(signature).forEach(function (key) {\n            formData.append(key, signature[key])\n          })\n        } else {\n          formData.append('s3ObjectLocation', file.s3ObjectLocation)\n        }\n      }\n      this.$emit('vdropzone-sending', file, xhr, formData)\n    })\n\n    this.dropzone.on('sendingmultiple', (file, xhr, formData) => {\n      this.$emit('vdropzone-sending-multiple', file, xhr, formData)\n    })\n\n    this.dropzone.on('complete', (file) => {\n      this.$emit('vdropzone-complete', file)\n    })\n\n    this.dropzone.on('completemultiple', (files) => {\n      this.$emit('vdropzone-complete-multiple', files)\n    })\n\n    this.dropzone.on('canceled', (file) => {\n      this.$emit('vdropzone-canceled', file)\n    })\n\n    this.dropzone.on('canceledmultiple', (files) => {\n      this.$emit('vdropzone-canceled-multiple', files)\n    })\n\n    this.dropzone.on('maxfilesreached', (files) => {\n      this.$emit('vdropzone-max-files-reached', files)\n    })\n\n    this.dropzone.on('maxfilesexceeded', (file) => {\n      this.$emit('vdropzone-max-files-exceeded', file)\n    })\n\n    this.dropzone.on('processing', (file) => {\n      this.$emit('vdropzone-processing', file)\n    })\n\n    this.dropzone.on('processingmultiple', (files) => {\n      this.$emit('vdropzone-processing-multiple', files)\n    })\n\n    this.dropzone.on('uploadprogress', (file, progress, bytesSent) => {\n      this.$emit('vdropzone-upload-progress', file, progress, bytesSent)\n    })\n\n    this.dropzone.on('totaluploadprogress', (totaluploadprogress, totalBytes, totalBytesSent) => {\n      this.$emit(\n          'vdropzone-total-upload-progress',\n          totaluploadprogress,\n          totalBytes,\n          totalBytesSent\n      )\n    })\n\n    this.dropzone.on('reset', () => {\n      this.$emit('vdropzone-reset')\n    })\n\n    this.dropzone.on('queuecomplete', () => {\n      this.$emit('vdropzone-queue-complete')\n    })\n\n    this.dropzone.on('drop', (event) => {\n      this.$emit('vdropzone-drop', event)\n    })\n\n    this.dropzone.on('dragstart', (event) => {\n      this.$emit('vdropzone-drag-start', event)\n    })\n\n    this.dropzone.on('dragend', (event) => {\n      this.$emit('vdropzone-drag-end', event)\n    })\n\n    this.dropzone.on('dragenter', (event) => {\n      this.$emit('vdropzone-drag-enter', event)\n    })\n\n    this.dropzone.on('dragover', (event) => {\n      this.$emit('vdropzone-drag-over', event)\n    })\n\n    this.dropzone.on('dragleave', (event) => {\n      this.$emit('vdropzone-drag-leave', event)\n    })\n\n    this.$emit('vdropzone-mounted')\n  },\n  beforeUnmount () {\n    if (this.destroyDropzone) {\n      this.dropzone.destroy()\n    }\n  },\n  methods: {\n    updateAWSSettings () {\n      if (this.awss3 !== null) {\n        this.aws = {...this.awss3}\n        this.dropzoneSettings['autoProcessQueue'] = false\n        this.isS3 = true\n        this.isS3OverridesServerPropagation = this.aws.sendFileToServer === false\n        if (this.options.autoProcessQueue !== undefined) {\n          this.wasQueueAutoProcess = this.options.autoProcessQueue\n        }\n\n        if (this.isS3OverridesServerPropagation) {\n          this.dropzoneSettings['url'] = files => files[0].s3Url\n        }\n      }\n    },\n    updateSettings () {\n      this.dropzoneSettings = Object.assign(this.dropzoneSettings, this.options)\n    },\n    manuallyAddFile: function (file, fileUrl) {\n      file.manuallyAdded = true\n      this.dropzone.emit('addedfile', file)\n      let containsImageFileType = false\n      if (\n          fileUrl.indexOf('.svg') > -1 ||\n          fileUrl.indexOf('.png') > -1 ||\n          fileUrl.indexOf('.jpg') > -1 ||\n          fileUrl.indexOf('.jpeg') > -1 ||\n          fileUrl.indexOf('.gif') > -1 ||\n          fileUrl.indexOf('.webp') > -1\n      )\n        containsImageFileType = true\n      if (\n          this.dropzone.options.createImageThumbnails &&\n          containsImageFileType &&\n          file.size <= this.dropzone.options.maxThumbnailFilesize * 1024 * 1024\n      ) {\n        fileUrl && this.dropzone.emit('thumbnail', file, fileUrl)\n\n        let thumbnails = file.previewElement.querySelectorAll(\n            '[data-dz-thumbnail]'\n        )\n        for (let i = 0; i < thumbnails.length; i++) {\n          thumbnails[i].style.width =\n              this.dropzoneSettings.thumbnailWidth + 'px'\n          thumbnails[i].style.height =\n              this.dropzoneSettings.thumbnailHeight + 'px'\n          thumbnails[i].style['object-fit'] = 'contain'\n        }\n      }\n      this.dropzone.emit('complete', file)\n      if (this.dropzone.options.maxFiles) this.dropzone.options.maxFiles--\n      this.dropzone.files.push(file)\n      this.$emit('vdropzone-file-added-manually', file)\n    },\n    setOption: function (option, value) {\n      this.dropzone.options[option] = value\n    },\n    removeAllFiles: function (bool) {\n      this.dropzone.removeAllFiles(bool)\n    },\n    processQueue: function () {\n      let dropzoneEle = this.dropzone\n      if (this.isS3 && !this.wasQueueAutoProcess) {\n        this.getQueuedFiles().forEach(file => {\n          this.getSignedAndUploadToS3(file)\n        })\n      } else {\n        this.dropzone.processQueue()\n      }\n      this.dropzone.on('success', function () {\n        dropzoneEle.options.autoProcessQueue = true\n      })\n      this.dropzone.on('queuecomplete', function () {\n        dropzoneEle.options.autoProcessQueue = false\n      })\n    },\n    init: function () {\n      return this.dropzone.init()\n    },\n    destroy: function () {\n      return this.dropzone.destroy()\n    },\n    updateTotalUploadProgress: function () {\n      return this.dropzone.updateTotalUploadProgress()\n    },\n    getFallbackForm: function () {\n      return this.dropzone.getFallbackForm()\n    },\n    getExistingFallback: function () {\n      return this.dropzone.getExistingFallback()\n    },\n    setupEventListeners: function () {\n      return this.dropzone.setupEventListeners()\n    },\n    removeEventListeners: function () {\n      return this.dropzone.removeEventListeners()\n    },\n    disable: function () {\n      return this.dropzone.disable()\n    },\n    enable: function () {\n      return this.dropzone.enable()\n    },\n    filesize: function (size) {\n      return this.dropzone.filesize(size)\n    },\n    accept: function (file, done) {\n      return this.dropzone.accept(file, done)\n    },\n    addFile: function (file) {\n      return this.dropzone.addFile(file)\n    },\n    removeFile: function (file) {\n      this.dropzone.removeFile(file)\n    },\n    getAcceptedFiles: function () {\n      return this.dropzone.getAcceptedFiles()\n    },\n    getRejectedFiles: function () {\n      return this.dropzone.getRejectedFiles()\n    },\n    getFilesWithStatus: function () {\n      return this.dropzone.getFilesWithStatus()\n    },\n    getQueuedFiles: function () {\n      return this.dropzone.getQueuedFiles()\n    },\n    getUploadingFiles: function () {\n      return this.dropzone.getUploadingFiles()\n    },\n    getAddedFiles: function () {\n      return this.dropzone.getAddedFiles()\n    },\n    getActiveFiles: function () {\n      return this.dropzone.getActiveFiles()\n    },\n    getSignedAndUploadToS3 (file) {\n      let promise = awsEndpoint.sendFile(\n          file,\n          this.aws,\n          this.isS3OverridesServerPropagation\n      )\n      if (!this.isS3OverridesServerPropagation) {\n        promise.then(response => {\n          if (response.success) {\n            file.s3ObjectLocation = response.message\n            setTimeout(() => this.dropzone.processFile(file))\n            this.$emit('vdropzone-s3-upload-success', response.message)\n          } else {\n            if ('undefined' !== typeof response.message) {\n              this.$emit('vdropzone-s3-upload-error', response.message)\n            } else {\n              this.$emit(\n                  'vdropzone-s3-upload-error',\n                  'Network Error : Could not send request to AWS. (Maybe CORS error)'\n              )\n            }\n          }\n        })\n      } else {\n        promise.then(() => {\n          setTimeout(() => this.dropzone.processFile(file))\n        })\n      }\n      promise.catch(error => {\n        alert(error)\n      })\n    },\n    setAWSSigningURL (location) {\n      if (this.isS3 && this.aws) {\n        this.aws.signingURL = location\n      }\n    }\n  }\n}\n</script>\n\n<style>\n.vue-dropzone {\n  border: 2px solid #e5e5e5;\n  font-family: \"Arial\", sans-serif;\n  letter-spacing: 0.2px;\n  color: #777;\n  transition: 0.2s linear;\n}\n\n.vue-dropzone:hover {\n  background-color: #f6f6f6;\n}\n\n.vue-dropzone > i {\n  color: #ccc;\n}\n\n.vue-dropzone > .dz-preview .dz-image {\n  border-radius: 0;\n  width: 100%;\n  height: 100%;\n}\n\n.vue-dropzone > .dz-preview .dz-image img:not([src]) {\n  width: 200px;\n  height: 200px;\n}\n\n.vue-dropzone > .dz-preview .dz-image:hover img {\n  transform: none;\n  -webkit-filter: none;\n}\n\n.vue-dropzone > .dz-preview .dz-details {\n  bottom: 0;\n  top: 0;\n  color: white;\n  background-color: rgba(33, 150, 243, 0.8);\n  transition: opacity 0.2s linear;\n  text-align: left;\n}\n\n.vue-dropzone > .dz-preview .dz-details .dz-filename {\n  overflow: hidden;\n}\n\n.vue-dropzone > .dz-preview .dz-details .dz-filename span,\n.vue-dropzone > .dz-preview .dz-details .dz-size span {\n  background-color: transparent;\n}\n\n.vue-dropzone > .dz-preview .dz-details .dz-filename:not(:hover) span {\n  border: none;\n}\n\n.vue-dropzone > .dz-preview .dz-details .dz-filename:hover span {\n  background-color: transparent;\n  border: none;\n}\n\n.vue-dropzone > .dz-preview .dz-progress .dz-upload {\n  background: #cccccc;\n}\n\n.vue-dropzone > .dz-preview .dz-remove {\n  position: absolute;\n  z-index: 30;\n  color: white;\n  margin-left: 15px;\n  padding: 10px;\n  top: inherit;\n  bottom: 15px;\n  border: 2px white solid;\n  text-decoration: none;\n  text-transform: uppercase;\n  font-size: 0.8rem;\n  font-weight: 800;\n  letter-spacing: 1.1px;\n  opacity: 0;\n}\n\n.vue-dropzone > .dz-preview:hover .dz-remove {\n  opacity: 1;\n}\n\n.vue-dropzone > .dz-preview .dz-success-mark svg,\n.vue-dropzone > .dz-preview .dz-error-mark svg {\n  margin-left: auto;\n  margin-right: auto;\n}\n\n.vue-dropzone > .dz-preview .dz-error-message {\n  margin-left: auto;\n  margin-right: auto;\n  left: 0;\n  width: 100%;\n  text-align: center;\n}\n\n.vue-dropzone > .dz-preview .dz-error-message:after {\n  display: none;\n}\n</style>\n"],"mappings":";mBAAA;;EAAAA,GAAA;EAQQC,KAAK,EAAC;;;uBAPZC,mBAAA,CAWM;IAVDC,EAAE,EAAEC,MAAA,CAAAD,EAAE;IACPE,GAAG,EAAC,iBAAiB;IACpBJ,KAAK,EAJZK,eAAA;MAAA,yBAIyCF,MAAA,CAAAG;IAAc;MAGzCH,MAAA,CAAAI,aAAa,I,cADvBN,mBAAA,CAKM,OALNO,UAKM,GADJC,WAAA,CAAsCC,IAAA,CAAAC,MAAA,iBAAtC,MAAsC,C,0BAV5CC,gBAAA,CAUY,2BAAyB,G,OAVrCC,mBAAA,e,yBAAAC,UAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}