{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/esnext.iterator.map.js\";\n/**\r\n * A module for the mini-map control.\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\nimport { Container } from \"../../core/Container\";\nimport { Rectangle } from \"../../core/elements/Rectangle\";\nimport { List } from \"../../core/utils/List\";\nimport { MutableValueDisposer, MultiDisposer } from \"../../core/utils/Disposer\";\nimport { registry } from \"../../core/Registry\";\nimport { color } from \"../../core/utils/Color\";\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\nimport * as $utils from \"../../core/utils/Utils\";\nimport * as $type from \"../../core/utils/Type\";\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n/**\r\n * Creates a \"bird's eye\" view of the whole map.\r\n *\r\n * This control creates a mini-map with the whole of the map, highlighting\r\n * the area which is in the current viewport of the map map.\r\n *\r\n * @see {@link ISmallMapEvents} for a list of available events\r\n * @see {@link ISmallMapAdapters} for a list of available Adapters\r\n * @important\r\n */\nvar SmallMap = /** @class */function (_super) {\n  __extends(SmallMap, _super);\n  /**\r\n   * Constructor\r\n   */\n  function SmallMap() {\n    var _this =\n    // Init\n    _super.call(this) || this;\n    /**\r\n     * A target map.\r\n     */\n    _this._chart = new MutableValueDisposer();\n    _this.className = \"SmallMap\";\n    // Set defaults\n    _this.align = \"left\";\n    _this.valign = \"bottom\";\n    _this.percentHeight = 20;\n    _this.percentWidth = 20;\n    _this.margin(5, 5, 5, 5);\n    var interfaceColors = new InterfaceColorSet();\n    // Set background defailts\n    _this.background.fillOpacity = 0.9;\n    _this.background.fill = interfaceColors.getFor(\"background\");\n    // Set up events\n    _this.events.on(\"hit\", _this.moveToPosition, _this, false);\n    _this.events.on(\"maxsizechanged\", _this.updateMapSize, _this, false);\n    // Create a container\n    _this.seriesContainer = _this.createChild(Container);\n    _this.seriesContainer.shouldClone = false;\n    // Create an outline rectangle\n    var rectangle = _this.createChild(Rectangle);\n    rectangle.shouldClone = false;\n    rectangle.stroke = interfaceColors.getFor(\"alternativeBackground\");\n    rectangle.strokeWidth = 1;\n    rectangle.strokeOpacity = 0.5;\n    rectangle.fill = color(); //\"none\";\n    rectangle.verticalCenter = \"middle\";\n    rectangle.horizontalCenter = \"middle\";\n    rectangle.isMeasured = false;\n    rectangle.visible = false;\n    _this.rectangle = rectangle;\n    _this._disposers.push(_this._chart);\n    // Apply theme\n    _this.applyTheme();\n    return _this;\n  }\n  Object.defineProperty(SmallMap.prototype, \"series\", {\n    /**\r\n     * A list of map series used to draw the mini-map.\r\n     *\r\n     * @readonly\r\n     * @return Series\r\n     */\n    get: function () {\n      if (!this._series) {\n        this._series = new List();\n        this._series.events.on(\"inserted\", this.handleSeriesAdded, this, false);\n        this._series.events.on(\"removed\", this.handleSeriesRemoved, this, false);\n      }\n      return this._series;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Decorates a new series when they are pushed into a `series` list.\r\n   *\r\n   * @param event Event\r\n   */\n  SmallMap.prototype.handleSeriesAdded = function (event) {\n    var series = event.newValue;\n    if (this.chart.series.contains(series)) {\n      var newSeries = series.clone();\n      this._series.removeValue(series);\n      this._series.push(newSeries);\n      series = newSeries;\n      this.chart.dataUsers.push(newSeries);\n    }\n    series.chart = this.chart;\n    series.parent = this.seriesContainer;\n    series.interactionsEnabled = false;\n    series.events.on(\"inited\", this.updateMapSize, this, false);\n    series.hidden = false;\n  };\n  /**\r\n   * Cleans up after series are removed from Scrollbar.\r\n   *\r\n   * @param event  Event\r\n   */\n  SmallMap.prototype.handleSeriesRemoved = function (event) {\n    //let sourceSeries: MapSeries = event.oldValue;\n    this.invalidate();\n  };\n  /**\r\n   * Moves main map pan position after click on the small map.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param event  Event\r\n   */\n  SmallMap.prototype.moveToPosition = function (event) {\n    var rectPoint = $utils.spritePointToSprite(event.spritePoint, this, this.seriesContainer);\n    var geoPoint = this.chart.seriesPointToGeo(rectPoint);\n    this.chart.zoomToGeoPoint(geoPoint, this.chart.zoomLevel, true);\n  };\n  Object.defineProperty(SmallMap.prototype, \"chart\", {\n    /**\r\n     * @return Chart/map\r\n     */\n    get: function () {\n      return this._chart.get();\n    },\n    /**\r\n     * A chart/map that this control is meant for.\r\n     *\r\n     * @param chart  Chart/map\r\n     */\n    set: function (chart) {\n      if (this.chart != chart) {\n        this._chart.set(chart, new MultiDisposer([\n        //chart.events.on(\"zoomlevelchanged\", this.updateRectangle, this, false),\n        chart.events.on(\"mappositionchanged\", this.updateRectangle, this, false), chart.events.on(\"scaleratiochanged\", this.updateMapSize, this, false)]));\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Updates the viewport recangle as per current map zoom/pan position.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  SmallMap.prototype.updateRectangle = function () {\n    var chart = this.chart;\n    var zoomLevel = chart.zoomLevel;\n    var rectangle = this.rectangle;\n    rectangle.width = this.pixelWidth / zoomLevel;\n    rectangle.height = this.pixelHeight / zoomLevel;\n    var scale = Math.min(this.percentWidth, this.percentHeight) / 100;\n    var seriesContainer = chart.seriesContainer;\n    rectangle.x = Math.ceil(-seriesContainer.pixelX * scale / zoomLevel) + this.seriesContainer.pixelX;\n    rectangle.y = Math.ceil(-seriesContainer.pixelY * scale / zoomLevel) + this.seriesContainer.pixelY;\n    rectangle.validate();\n  };\n  /**\r\n   * Update map size so that internal elements can redraw themselves after\r\n   * the size of the small map changes.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  SmallMap.prototype.updateMapSize = function () {\n    if (this.chart) {\n      var scale = this.chart.scaleRatio * Math.min(this.percentWidth, this.percentHeight) / 100;\n      this.seriesContainer.scale = scale;\n      var bbox = {\n        width: 0,\n        height: 0,\n        x: 0,\n        y: 0\n      };\n      try {\n        // Add exception catching to tame FF\n        bbox = this.seriesContainer.group.node.getBBox();\n      } catch (err) {}\n      if (bbox.width > 0) {\n        this.rectangle.visible = true;\n      }\n      this.seriesContainer.x = this.pixelWidth / 2 - bbox.x * scale - bbox.width / 2 * scale;\n      this.seriesContainer.y = this.pixelHeight / 2 - bbox.y * scale - bbox.height / 2 * scale;\n      this.updateRectangle();\n      this.afterDraw();\n    }\n  };\n  /**\r\n   * Update elements after drawing the small map.\r\n   */\n  SmallMap.prototype.afterDraw = function () {\n    _super.prototype.afterDraw.call(this);\n    //this.seriesContainer.moveTo({ x: this.pixelWidth / 2, y: this.pixelHeight / 2 });\n    this.rectangle.maskRectangle = {\n      x: -1,\n      y: -1,\n      width: Math.ceil(this.pixelWidth + 2),\n      height: Math.ceil(this.pixelHeight + 2)\n    };\n  };\n  /**\r\n   * Processes JSON-based config before it is applied to the object.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param config  Config\r\n   */\n  SmallMap.prototype.processConfig = function (config) {\n    if (config) {\n      // Set up series\n      if ($type.hasValue(config.series) && $type.isArray(config.series)) {\n        for (var i = 0, len = config.series.length; i < len; i++) {\n          var series = config.series[i];\n          if ($type.hasValue(series) && $type.isString(series) && this.map.hasKey(series)) {\n            config.series[i] = this.map.getKey(series);\n          }\n        }\n      }\n    }\n    _super.prototype.processConfig.call(this, config);\n  };\n  return SmallMap;\n}(Container);\nexport { SmallMap };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\nregistry.registeredClasses[\"SmallMap\"] = SmallMap;","map":{"version":3,"names":["Container","Rectangle","List","MutableValueDisposer","MultiDisposer","registry","color","InterfaceColorSet","$utils","$type","SmallMap","_super","__extends","_this","call","_chart","className","align","valign","percentHeight","percentWidth","margin","interfaceColors","background","fillOpacity","fill","getFor","events","on","moveToPosition","updateMapSize","seriesContainer","createChild","shouldClone","rectangle","stroke","strokeWidth","strokeOpacity","verticalCenter","horizontalCenter","isMeasured","visible","_disposers","push","applyTheme","Object","defineProperty","prototype","get","_series","handleSeriesAdded","handleSeriesRemoved","event","series","newValue","chart","contains","newSeries","clone","removeValue","dataUsers","parent","interactionsEnabled","hidden","invalidate","rectPoint","spritePointToSprite","spritePoint","geoPoint","seriesPointToGeo","zoomToGeoPoint","zoomLevel","set","updateRectangle","width","pixelWidth","height","pixelHeight","scale","Math","min","x","ceil","pixelX","y","pixelY","validate","scaleRatio","bbox","group","node","getBBox","err","afterDraw","maskRectangle","processConfig","config","hasValue","isArray","i","len","length","isString","map","hasKey","getKey","registeredClasses"],"sources":["../../../../../src/.internal/charts/map/SmallMap.ts"],"sourcesContent":["/**\r\n * A module for the mini-map control.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Container, IContainerProperties, IContainerAdapters, IContainerEvents } from \"../../core/Container\";\r\nimport { IRectangle } from \"../../core/defs/IRectangle\";\r\nimport { Sprite, ISpriteEvents, AMEvent } from \"../../core/Sprite\";\r\nimport { Rectangle } from \"../../core/elements/Rectangle\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { IGeoPoint } from \"../../core/defs/IGeoPoint\";\r\nimport { MapChart } from \"../types/MapChart\";\r\nimport { MapSeries } from \"./MapSeries\";\r\nimport { List, IListEvents } from \"../../core/utils/List\";\r\nimport { MutableValueDisposer, MultiDisposer } from \"../../core/utils/Disposer\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { color } from \"../../core/utils/Color\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[SmallMap]].\r\n */\r\nexport interface ISmallMapProperties extends IContainerProperties { }\r\n\r\n/**\r\n * Defines events for [[SmallMap]].\r\n */\r\nexport interface ISmallMapEvents extends IContainerEvents { }\r\n\r\n/**\r\n * Defines adapters for [[SmallMap]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ISmallMapAdapters extends IContainerAdapters, ISmallMapProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a \"bird's eye\" view of the whole map.\r\n *\r\n * This control creates a mini-map with the whole of the map, highlighting\r\n * the area which is in the current viewport of the map map.\r\n *\r\n * @see {@link ISmallMapEvents} for a list of available events\r\n * @see {@link ISmallMapAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class SmallMap extends Container {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: ISmallMapProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: ISmallMapAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: ISmallMapEvents;\r\n\r\n\t/**\r\n\t * A target map.\r\n\t */\r\n\tprotected _chart: MutableValueDisposer<MapChart> = new MutableValueDisposer<MapChart>();\r\n\r\n\t/**\r\n\t * A container that holds the visual elements for the mini-map.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic seriesContainer: Container;\r\n\r\n\t/**\r\n\t * The rectangle element which highlights current viewport.\r\n\t */\r\n\tpublic rectangle: Rectangle;\r\n\r\n\t/**\r\n\t * A list of map series used to draw the mini-map.\r\n\t */\r\n\tprotected _series: List<MapSeries>;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"SmallMap\";\r\n\r\n\t\t// Set defaults\r\n\t\tthis.align = \"left\";\r\n\t\tthis.valign = \"bottom\";\r\n\t\tthis.percentHeight = 20;\r\n\t\tthis.percentWidth = 20;\r\n\t\tthis.margin(5, 5, 5, 5);\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\r\n\t\t// Set background defailts\r\n\t\tthis.background.fillOpacity = 0.9;\r\n\t\tthis.background.fill = interfaceColors.getFor(\"background\");\r\n\r\n\t\t// Set up events\r\n\t\tthis.events.on(\"hit\", this.moveToPosition, this, false);\r\n\t\tthis.events.on(\"maxsizechanged\", this.updateMapSize, this, false);\r\n\r\n\t\t// Create a container\r\n\t\tthis.seriesContainer = this.createChild(Container);\r\n\t\tthis.seriesContainer.shouldClone = false;\r\n\r\n\t\t// Create an outline rectangle\r\n\t\tlet rectangle: Rectangle = this.createChild(Rectangle);\r\n\t\trectangle.shouldClone = false;\r\n\t\trectangle.stroke = interfaceColors.getFor(\"alternativeBackground\");\r\n\t\trectangle.strokeWidth = 1;\r\n\t\trectangle.strokeOpacity = 0.5;\r\n\t\trectangle.fill = color(); //\"none\";\r\n\t\trectangle.verticalCenter = \"middle\";\r\n\t\trectangle.horizontalCenter = \"middle\";\r\n\t\trectangle.isMeasured = false;\r\n\t\trectangle.visible = false;\t\t\r\n\r\n\t\tthis.rectangle = rectangle;\r\n\r\n\t\tthis._disposers.push(this._chart);\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * A list of map series used to draw the mini-map.\r\n\t *\r\n\t * @readonly\r\n\t * @return Series\r\n\t */\r\n\tpublic get series(): List<MapSeries> {\r\n\t\tif (!this._series) {\r\n\t\t\tthis._series = new List<MapSeries>();\r\n\t\t\tthis._series.events.on(\"inserted\", this.handleSeriesAdded, this, false);\r\n\t\t\tthis._series.events.on(\"removed\", this.handleSeriesRemoved, this, false);\r\n\t\t}\r\n\t\treturn this._series;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Decorates a new series when they are pushed into a `series` list.\r\n\t *\r\n\t * @param event Event\r\n\t */\r\n\tprotected handleSeriesAdded(event: IListEvents<MapSeries>[\"inserted\"]) {\r\n\t\tlet series: MapSeries = event.newValue;\r\n\t\tif (this.chart.series.contains(series)) {\r\n\t\t\tlet newSeries = series.clone();\r\n\t\t\tthis._series.removeValue(series);\r\n\t\t\tthis._series.push(newSeries);\r\n\t\t\tseries = newSeries;\r\n\r\n\t\t\tthis.chart.dataUsers.push(newSeries);\r\n\t\t}\r\n\t\tseries.chart = this.chart;\r\n\t\tseries.parent = this.seriesContainer;\r\n\t\tseries.interactionsEnabled = false;\r\n\t\tseries.events.on(\"inited\", this.updateMapSize, this, false);\r\n\t\tseries.hidden = false;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Cleans up after series are removed from Scrollbar.\r\n\t *\r\n\t * @param event  Event\r\n\t */\r\n\tprotected handleSeriesRemoved(event: IListEvents<MapSeries>[\"removed\"]) {\r\n\t\t//let sourceSeries: MapSeries = event.oldValue;\r\n\t\tthis.invalidate();\r\n\t}\r\n\r\n\t/**\r\n\t * Moves main map pan position after click on the small map.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param event  Event\r\n\t */\r\n\tpublic moveToPosition(event: AMEvent<Sprite, ISpriteEvents>[\"hit\"]) {\r\n\t\tlet rectPoint: IPoint = $utils.spritePointToSprite(event.spritePoint, this, this.seriesContainer);\r\n\t\tlet geoPoint: IGeoPoint = this.chart.seriesPointToGeo(rectPoint);\r\n\t\tthis.chart.zoomToGeoPoint(geoPoint, this.chart.zoomLevel, true);\r\n\t}\r\n\r\n\t/**\r\n\t * A chart/map that this control is meant for.\r\n\t *\r\n\t * @param chart  Chart/map\r\n\t */\r\n\tpublic set chart(chart: MapChart) {\r\n\t\tif (this.chart != chart) {\r\n\t\t\tthis._chart.set(chart, new MultiDisposer([\r\n\t\t\t\t//chart.events.on(\"zoomlevelchanged\", this.updateRectangle, this, false),\r\n\t\t\t\tchart.events.on(\"mappositionchanged\", this.updateRectangle, this, false),\r\n\t\t\t\tchart.events.on(\"scaleratiochanged\", this.updateMapSize, this, false)\r\n\t\t\t]));\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Chart/map\r\n\t */\r\n\tpublic get chart(): MapChart {\r\n\t\treturn this._chart.get();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates the viewport recangle as per current map zoom/pan position.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateRectangle(): void {\r\n\t\tlet chart: MapChart = this.chart;\r\n\t\tlet zoomLevel: number = chart.zoomLevel;\r\n\t\tlet rectangle: Rectangle = this.rectangle;\r\n\r\n\t\trectangle.width = this.pixelWidth / zoomLevel;\r\n\t\trectangle.height = this.pixelHeight / zoomLevel;\r\n\r\n\t\tlet scale: number = Math.min(this.percentWidth, this.percentHeight) / 100;\r\n\r\n\t\tlet seriesContainer: Container = chart.seriesContainer;\r\n\r\n\t\trectangle.x = Math.ceil(( - seriesContainer.pixelX) * scale / zoomLevel) + this.seriesContainer.pixelX;\r\n\t\trectangle.y = Math.ceil(( - seriesContainer.pixelY) * scale / zoomLevel) + this.seriesContainer.pixelY;\r\n\r\n\t\trectangle.validate();\r\n\t}\r\n\r\n\t/**\r\n\t * Update map size so that internal elements can redraw themselves after\r\n\t * the size of the small map changes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateMapSize(): void {\r\n\t\tif (this.chart) {\r\n\t\t\tlet scale = this.chart.scaleRatio * Math.min(this.percentWidth, this.percentHeight) / 100;\r\n\t\t\tthis.seriesContainer.scale = scale;\r\n\r\n\t\t\tlet bbox: IRectangle = {\r\n\t\t\t\twidth: 0,\r\n\t\t\t\theight: 0,\r\n\t\t\t\tx: 0,\r\n\t\t\t\ty: 0\r\n\t\t\t};\r\n\r\n\t\t\ttry { // Add exception catching to tame FF\r\n\t\t\t\tbbox = this.seriesContainer.group.node.getBBox();\r\n\t\t\t} catch (err) { }\r\n\r\n\t\t\tif(bbox.width > 0){\r\n\t\t\t\tthis.rectangle.visible = true;\r\n\t\t\t}\r\n\r\n\t\t\tthis.seriesContainer.x = this.pixelWidth / 2 - bbox.x * scale - bbox.width / 2 * scale;\r\n\t\t\tthis.seriesContainer.y = this.pixelHeight / 2 - bbox.y * scale - bbox.height / 2 * scale;\r\n\r\n\t\t\tthis.updateRectangle();\r\n\t\t\tthis.afterDraw();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Update elements after drawing the small map.\r\n\t */\r\n\tprotected afterDraw(): void {\r\n\t\tsuper.afterDraw();\r\n\t\t//this.seriesContainer.moveTo({ x: this.pixelWidth / 2, y: this.pixelHeight / 2 });\r\n\t\tthis.rectangle.maskRectangle = { x: -1, y: -1, width: Math.ceil(this.pixelWidth + 2), height: Math.ceil(this.pixelHeight + 2) };\r\n\t}\r\n\r\n\t/**\r\n\t * Processes JSON-based config before it is applied to the object.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param config  Config\r\n\t */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\tif (config) {\r\n\r\n\t\t\t// Set up series\r\n\t\t\tif ($type.hasValue(config.series) && $type.isArray(config.series)) {\r\n\t\t\t\tfor (let i = 0, len = config.series.length; i < len; i++) {\r\n\t\t\t\t\tlet series = config.series[i];\r\n\t\t\t\t\tif ($type.hasValue(series) && $type.isString(series) && this.map.hasKey(series)) {\r\n\t\t\t\t\t\tconfig.series[i] = this.map.getKey(series);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tsuper.processConfig(config);\r\n\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"SmallMap\"] = SmallMap;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}