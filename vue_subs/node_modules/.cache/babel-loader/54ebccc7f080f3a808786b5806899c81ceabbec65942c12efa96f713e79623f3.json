{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n/**\r\n * Map line series module\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\nimport { MapSeries, MapSeriesDataItem } from \"./MapSeries\";\nimport { MapLine } from \"./MapLine\";\nimport { ListTemplate, ListDisposer } from \"../../core/utils/List\";\nimport { registry } from \"../../core/Registry\";\nimport * as $mapUtils from \"./MapUtils\";\nimport * as $array from \"../../core/utils/Array\";\nimport * as $utils from \"../../core/utils/Utils\";\nimport * as $iter from \"../../core/utils/Iterator\";\nimport { Disposer } from \"../../core/utils/Disposer\";\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\n/**\r\n * Defines a [[DataItem]] for [[MapLineSeries]]\r\n * @see {@link DataItem}\r\n */\nvar MapLineSeriesDataItem = /** @class */function (_super) {\n  __extends(MapLineSeriesDataItem, _super);\n  /**\r\n   * Constructor\r\n   */\n  function MapLineSeriesDataItem() {\n    var _this = _super.call(this) || this;\n    _this.className = \"MapLineSeriesDataItem\";\n    _this.applyTheme();\n    return _this;\n  }\n  MapLineSeriesDataItem.prototype.getFeature = function () {\n    if (this.multiLine && this.multiLine.length > 0) {\n      return {\n        \"type\": \"Feature\",\n        geometry: {\n          type: \"MultiLineString\",\n          coordinates: this.multiLine\n        }\n      };\n    }\n  };\n  Object.defineProperty(MapLineSeriesDataItem.prototype, \"mapLine\", {\n    /**\r\n     * A [[MapLine]] element related to this data item.\r\n     *\r\n     * @readonly\r\n     * @return Element\r\n     */\n    get: function () {\n      var _this = this;\n      if (!this._mapLine) {\n        var mapLine_1 = this.component.mapLines.create();\n        this._mapLine = mapLine_1;\n        this.addSprite(mapLine_1);\n        this._disposers.push(mapLine_1);\n        this._disposers.push(new Disposer(function () {\n          if (_this.component) {\n            _this.component.mapLines.removeValue(mapLine_1);\n          }\n        }));\n        this.mapObject = mapLine_1;\n      }\n      return this._mapLine;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MapLineSeriesDataItem.prototype, \"line\", {\n    /**\r\n     * @return Coordinates\r\n     */\n    get: function () {\n      return this._line;\n    },\n    /**\r\n     * A collection of X/Y coordinates for a single-segment line. E.g.:\r\n     *\r\n     * ```JSON\r\n     * [\r\n     *   [ 100, 150 ],\r\n     *   [ 120, 200 ]\r\n     * ]\r\n     * ```\r\n     *\r\n     * @param line  Coordinates\r\n     */\n    set: function (line) {\n      this._line = line;\n      this.multiLine = [line];\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MapLineSeriesDataItem.prototype, \"multiLine\", {\n    /**\r\n     * @return Coordinates\r\n     */\n    get: function () {\n      return this._multiLine;\n    },\n    /**\r\n     * A collection of X/Y coordinates for a multi-segment line. E.g.:\r\n     *\r\n     * ```JSON\r\n     * [\r\n     *   // Segment 1\r\n     *   [\r\n     *     [ 100, 150 ],\r\n     *     [ 120, 200 ]\r\n     *   ],\r\n     *\r\n     *   // Segment 2\r\n     *   [\r\n     *     [ 120, 200 ],\r\n     *     [ 150, 100 ]\r\n     *   ]\r\n     * ]\r\n     * ```\r\n     *\r\n     * @param multiLine  Coordinates\r\n     */\n    set: function (multiLine) {\n      this._multiLine = multiLine;\n      this._multiGeoLine = $mapUtils.multiLineToGeo(multiLine);\n      this.updateExtremes();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MapLineSeriesDataItem.prototype, \"geoLine\", {\n    /**\r\n     * @return Coordinates\r\n     */\n    get: function () {\n      return this._geoLine;\n    },\n    /**\r\n     * A collection of lat/long coordinates for a single-segment line. E.g.:\r\n     *\r\n     * ```JSON\r\n     * [\r\n     *   { longitude: 3.121, latitude: 0.58 },\r\n     *   { longitude: -5.199, latitude: 21.223 }\r\n     * ]\r\n     * ```\r\n     *\r\n     * @see {@link https://tools.ietf.org/html/rfc7946#section-3.1.4} GeoJSON LineString reference\r\n     * @param geoLine  Coordinates\r\n     */\n    set: function (geoLine) {\n      this._geoLine = geoLine;\n      this.multiLine = $mapUtils.multiGeoLineToMultiLine([geoLine]);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MapLineSeriesDataItem.prototype, \"multiGeoLine\", {\n    /**\r\n     * @return Coordinates\r\n     */\n    get: function () {\n      return this._multiGeoLine;\n    },\n    /**\r\n     * A collection of X/Y coordinates for a multi-segment line. E.g.:\r\n     *\r\n     * ```JSON\r\n     * [\r\n     *   // Segment 1\r\n     *   [\r\n     *     { longitude: 3.121, latitude: 0.58 },\r\n     *     { longitude: -5.199, latitude: 21.223 }\r\n     *   ],\r\n     *\r\n     *   // Segment 2\r\n     *   [\r\n     *     { longitude: -5.199, latitude: 21.223 },\r\n     *     { longitude: -12.9, latitude: 25.85 }\r\n     *   ]\r\n     * ]\r\n     * ```\r\n     *\r\n     * @see {@link https://tools.ietf.org/html/rfc7946#section-3.1.5} GeoJSON MultiLineString reference\r\n     * @param multiGeoLine  Coordinates\r\n     */\n    set: function (multiGeoLine) {\n      this._multiGeoLine = multiGeoLine;\n      this.multiLine = $mapUtils.multiGeoLineToMultiLine(multiGeoLine);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return MapLineSeriesDataItem;\n}(MapSeriesDataItem);\nexport { MapLineSeriesDataItem };\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n/**\r\n * A series of map line series.\r\n *\r\n * @see {@link IMapLineSeriesEvents} for a list of available Events\r\n * @see {@link IMapLineSeriesAdapters} for a list of available Adapters\r\n * @important\r\n */\nvar MapLineSeries = /** @class */function (_super) {\n  __extends(MapLineSeries, _super);\n  /**\r\n   * Constructor\r\n   */\n  function MapLineSeries() {\n    var _this =\n    // Init\n    _super.call(this) || this;\n    _this.className = \"MapLineSeries\";\n    // Set data fields\n    _this.dataFields.multiLine = \"multiLine\";\n    _this.dataFields.line = \"line\";\n    _this.dataFields.geoLine = \"geoLine\";\n    _this.dataFields.multiGeoLine = \"multiGeoLine\";\n    _this.ignoreBounds = true;\n    // Apply theme\n    _this.applyTheme();\n    return _this;\n  }\n  /**\r\n   * Returns a new/empty DataItem of the type appropriate for this object.\r\n   *\r\n   * @see {@link DataItem}\r\n   * @return Data Item\r\n   */\n  MapLineSeries.prototype.createDataItem = function () {\n    return new MapLineSeriesDataItem();\n  };\n  /**\r\n   * (Re)validates series data, effectively causing the whole series to be\r\n   * redrawn.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  MapLineSeries.prototype.validateData = function () {\n    // process geoJSON and created map objects\n    if (this.useGeodata || this.geodata) {\n      var geoJSON = this.chart.geodata;\n      if (geoJSON) {\n        var features = void 0;\n        if (geoJSON.type == \"FeatureCollection\") {\n          features = geoJSON.features;\n        } else if (geoJSON.type == \"Feature\") {\n          features = [geoJSON];\n        } else if ([\"Point\", \"LineString\", \"Polygon\", \"MultiPoint\", \"MultiLineString\", \"MultiPolygon\"].indexOf(geoJSON.type) != -1) {\n          features = [{\n            geometry: geoJSON\n          }];\n        } else {\n          console.log(\"nothing found in geoJSON\");\n        }\n        if (features) {\n          var _loop_1 = function (i, len) {\n            var feature = features[i];\n            var geometry = feature.geometry;\n            if (geometry) {\n              var type = geometry.type;\n              var id_1 = feature.id;\n              if (type == \"LineString\" || type == \"MultiLineString\") {\n                if (!this_1.checkInclude(this_1.include, this_1.exclude, id_1)) {\n                  return \"continue\";\n                }\n                var coordinates = geometry.coordinates;\n                var dataObject = $array.find(this_1.data, function (value, i) {\n                  return value.id == id_1;\n                });\n                if (type == \"LineString\") {\n                  coordinates = [coordinates];\n                }\n                if (!dataObject) {\n                  dataObject = {\n                    multiLine: coordinates,\n                    id: id_1,\n                    madeFromGeoData: true\n                  };\n                  this_1.data.push(dataObject);\n                } else {\n                  if (!dataObject.multiLine) {\n                    dataObject.multiLine = coordinates;\n                  }\n                }\n                // copy properties data to datacontext\n                $utils.softCopyProperties(feature.properties, dataObject);\n              }\n            }\n          };\n          var this_1 = this;\n          for (var i = 0, len = features.length; i < len; i++) {\n            _loop_1(i, len);\n          }\n        }\n      }\n    }\n    _super.prototype.validateData.call(this);\n  };\n  Object.defineProperty(MapLineSeries.prototype, \"mapLines\", {\n    /**\r\n     * A list of lines in the series.\r\n     *\r\n     * @return Lines\r\n     */\n    get: function () {\n      if (!this._mapLines) {\n        var lineTemplate = this.createLine();\n        var mapLines = new ListTemplate(lineTemplate);\n        this._disposers.push(new ListDisposer(mapLines));\n        this._disposers.push(mapLines.template);\n        mapLines.events.on(\"inserted\", this.handleObjectAdded, this, false);\n        this._mapLines = mapLines;\n        this._mapObjects = mapLines;\n      }\n      return this._mapLines;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Returns a new line instance of suitable type.\r\n   *\r\n   * @return New line\r\n   */\n  MapLineSeries.prototype.createLine = function () {\n    return new MapLine();\n  };\n  /**\r\n   * (Re)validates the series\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  MapLineSeries.prototype.validate = function () {\n    this.dataItems.each(function (dataItem) {\n      $utils.used(dataItem.mapLine);\n    });\n    _super.prototype.validate.call(this);\n    this.mapLines.each(function (mapLine) {\n      mapLine.validate();\n    });\n  };\n  /**\r\n   * Copies all properties from another instance of [[Series]].\r\n   *\r\n   * @param source  Source series\r\n   */\n  MapLineSeries.prototype.copyFrom = function (source) {\n    this.mapLines.template.copyFrom(source.mapLines.template);\n    _super.prototype.copyFrom.call(this, source);\n  };\n  /**\r\n   * @ignore\r\n   */\n  MapLineSeries.prototype.getFeatures = function () {\n    var _this = this;\n    var features = [];\n    this.dataItems.each(function (dataItem) {\n      var feature = dataItem.getFeature();\n      if (feature) {\n        features.push(feature);\n      }\n    });\n    this.mapLines.each(function (mapLine) {\n      if (_this.dataItems.indexOf(mapLine._dataItem) == -1) {\n        var feature = mapLine.getFeature();\n        if (feature) {\n          features.push(feature);\n        }\n      }\n    });\n    return features;\n  };\n  /**\r\n   * returns MapLine by id\r\n   * @param line id\r\n   * @return {MapLine}\r\n   */\n  MapLineSeries.prototype.getLineById = function (id) {\n    return $iter.find(this.mapLines.iterator(), function (mapLine) {\n      var dataContext = mapLine.dataItem.dataContext;\n      return dataContext.id == id;\n    });\n  };\n  return MapLineSeries;\n}(MapSeries);\nexport { MapLineSeries };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\nregistry.registeredClasses[\"MapLineSeries\"] = MapLineSeries;\nregistry.registeredClasses[\"MapLineSeriesDataItem\"] = MapLineSeriesDataItem;","map":{"version":3,"names":["MapSeries","MapSeriesDataItem","MapLine","ListTemplate","ListDisposer","registry","$mapUtils","$array","$utils","$iter","Disposer","MapLineSeriesDataItem","_super","__extends","_this","call","className","applyTheme","prototype","getFeature","multiLine","length","geometry","type","coordinates","Object","defineProperty","get","_mapLine","mapLine_1","component","mapLines","create","addSprite","_disposers","push","removeValue","mapObject","_line","set","line","_multiLine","_multiGeoLine","multiLineToGeo","updateExtremes","_geoLine","geoLine","multiGeoLineToMultiLine","multiGeoLine","MapLineSeries","dataFields","ignoreBounds","createDataItem","validateData","useGeodata","geodata","geoJSON","chart","features","indexOf","console","log","i","len","feature","id_1","id","this_1","checkInclude","include","exclude","dataObject","find","data","value","madeFromGeoData","softCopyProperties","properties","_mapLines","lineTemplate","createLine","template","events","on","handleObjectAdded","_mapObjects","validate","dataItems","each","dataItem","used","mapLine","copyFrom","source","getFeatures","_dataItem","getLineById","iterator","dataContext","registeredClasses"],"sources":["../../../../../src/.internal/charts/map/MapLineSeries.ts"],"sourcesContent":["/**\r\n * Map line series module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { MapSeries, MapSeriesDataItem, GEOJSONGeometry, IMapSeriesProperties, IMapSeriesDataFields, IMapSeriesAdapters, IMapSeriesEvents } from \"./MapSeries\";\r\nimport { MapChart } from \"../types/MapChart\";\r\nimport { MapLine } from \"./MapLine\";\r\nimport { ListTemplate, ListDisposer } from \"../../core/utils/List\";\r\nimport { IMapLineDataObject } from \"../types/MapChart\";\r\nimport { IGeoPoint } from \"../../core/defs/IGeoPoint\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $mapUtils from \"./MapUtils\";\r\nimport * as $array from \"../../core/utils/Array\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport { Disposer } from \"../../core/utils/Disposer\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[MapLineSeries]]\r\n * @see {@link DataItem}\r\n */\r\nexport class MapLineSeriesDataItem extends MapSeriesDataItem {\r\n\r\n\t/**\r\n\t * A [[MapLine]] element related to this data item.\r\n\t */\r\n\tpublic _mapLine: MapLine;\r\n\r\n\t/**\r\n\t * A collection of X/Y coordinates for a single-segment line.\r\n\t */\r\n\tprotected _line: Array<[number, number]>;\r\n\r\n\t/**\r\n\t * A collection of X/Y coordinates for a multi-segment line.\r\n\t */\r\n\tprotected _multiLine: Array<Array<[number, number]>>;\r\n\r\n\t/**\r\n\t * A collection of lat/long coordinates for a single-segment line.\r\n\t */\r\n\tprotected _geoLine: Array<IGeoPoint>;\r\n\r\n\t/**\r\n\t * A collection of lat/long coordinates for a multi-segment line.\r\n\t */\r\n\tprotected _multiGeoLine: Array<Array<IGeoPoint>>;\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for\r\n\t */\r\n\tpublic _component!: MapLineSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"MapLineSeriesDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\tpublic getFeature(): { \"type\": \"Feature\", geometry: { type: \"MultiLineString\", coordinates: Array<Array<[number, number]>> } } {\r\n\t\tif (this.multiLine && this.multiLine.length > 0) {\r\n\t\t\treturn { \"type\": \"Feature\", geometry: { type: \"MultiLineString\", coordinates: this.multiLine } };\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A [[MapLine]] element related to this data item.\r\n\t *\r\n\t * @readonly\r\n\t * @return Element\r\n\t */\r\n\tpublic get mapLine(): this[\"_mapLine\"] {\r\n\t\tif (!this._mapLine) {\r\n\t\t\tlet mapLine = this.component.mapLines.create();\r\n\r\n\t\t\tthis._mapLine = mapLine;\r\n\t\t\tthis.addSprite(mapLine);\r\n\r\n\t\t\tthis._disposers.push(mapLine);\r\n\t\t\tthis._disposers.push(new Disposer(() => {\r\n\t\t\t\tif (this.component) {\r\n\t\t\t\t\tthis.component.mapLines.removeValue(mapLine);\r\n\t\t\t\t}\r\n\t\t\t}));\r\n\r\n\t\t\tthis.mapObject = mapLine;\r\n\t\t}\r\n\t\treturn this._mapLine;\r\n\t}\r\n\r\n\t/**\r\n\t * A collection of X/Y coordinates for a single-segment line. E.g.:\r\n\t *\r\n\t * ```JSON\r\n\t * [\r\n\t *   [ 100, 150 ],\r\n\t *   [ 120, 200 ]\r\n\t * ]\r\n\t * ```\r\n\t *\r\n\t * @param line  Coordinates\r\n\t */\r\n\tpublic set line(line: Array<[number, number]>) {\r\n\t\tthis._line = line;\r\n\t\tthis.multiLine = [line];\r\n\t}\r\n\r\n\t/**\r\n\t * @return Coordinates\r\n\t */\r\n\tpublic get line(): Array<[number, number]> {\r\n\t\treturn this._line;\r\n\t}\r\n\r\n\t/**\r\n\t * A collection of X/Y coordinates for a multi-segment line. E.g.:\r\n\t *\r\n\t * ```JSON\r\n\t * [\r\n\t *   // Segment 1\r\n\t *   [\r\n\t *     [ 100, 150 ],\r\n\t *     [ 120, 200 ]\r\n\t *   ],\r\n\t *\r\n\t *   // Segment 2\r\n\t *   [\r\n\t *     [ 120, 200 ],\r\n\t *     [ 150, 100 ]\r\n\t *   ]\r\n\t * ]\r\n\t * ```\r\n\t *\r\n\t * @param multiLine  Coordinates\r\n\t */\r\n\tpublic set multiLine(multiLine: Array<Array<[number, number]>>) {\r\n\t\tthis._multiLine = multiLine;\r\n\t\tthis._multiGeoLine = $mapUtils.multiLineToGeo(multiLine);\r\n\t\tthis.updateExtremes();\r\n\t}\r\n\r\n\t/**\r\n\t * @return Coordinates\r\n\t */\r\n\tpublic get multiLine(): Array<Array<[number, number]>> {\r\n\t\treturn this._multiLine;\r\n\t}\r\n\r\n\t/**\r\n\t * A collection of lat/long coordinates for a single-segment line. E.g.:\r\n\t *\r\n\t * ```JSON\r\n\t * [\r\n\t *   { longitude: 3.121, latitude: 0.58 },\r\n\t *   { longitude: -5.199, latitude: 21.223 }\r\n\t * ]\r\n\t * ```\r\n\t *\r\n\t * @see {@link https://tools.ietf.org/html/rfc7946#section-3.1.4} GeoJSON LineString reference\r\n\t * @param geoLine  Coordinates\r\n\t */\r\n\tpublic set geoLine(geoLine: Array<IGeoPoint>) {\r\n\t\tthis._geoLine = geoLine;\r\n\t\tthis.multiLine = $mapUtils.multiGeoLineToMultiLine([geoLine]);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Coordinates\r\n\t */\r\n\tpublic get geoLine(): Array<IGeoPoint> {\r\n\t\treturn this._geoLine;\r\n\t}\r\n\r\n\t/**\r\n\t * A collection of X/Y coordinates for a multi-segment line. E.g.:\r\n\t *\r\n\t * ```JSON\r\n\t * [\r\n\t *   // Segment 1\r\n\t *   [\r\n\t *     { longitude: 3.121, latitude: 0.58 },\r\n\t *     { longitude: -5.199, latitude: 21.223 }\r\n\t *   ],\r\n\t *\r\n\t *   // Segment 2\r\n\t *   [\r\n\t *     { longitude: -5.199, latitude: 21.223 },\r\n\t *     { longitude: -12.9, latitude: 25.85 }\r\n\t *   ]\r\n\t * ]\r\n\t * ```\r\n\t *\r\n\t * @see {@link https://tools.ietf.org/html/rfc7946#section-3.1.5} GeoJSON MultiLineString reference\r\n\t * @param multiGeoLine  Coordinates\r\n\t */\r\n\tpublic set multiGeoLine(multiGeoLine: Array<Array<IGeoPoint>>) {\r\n\t\tthis._multiGeoLine = multiGeoLine;\r\n\t\tthis.multiLine = $mapUtils.multiGeoLineToMultiLine(multiGeoLine);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Coordinates\r\n\t */\r\n\tpublic get multiGeoLine(): Array<Array<IGeoPoint>> {\r\n\t\treturn this._multiGeoLine;\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[MapLineSeries]].\r\n */\r\nexport interface IMapLineSeriesDataFields extends IMapSeriesDataFields {\r\n\r\n\t/**\r\n\t * Field name that holds line data in pixels.\r\n\t */\r\n\tline?: string;\r\n\r\n\t/**\r\n\t * Field name that holds multi-line data in pixels.\r\n\t */\r\n\tmultiLine?: string;\r\n\r\n\t/**\r\n\t * Field name that holds line data in Geo coordinates.\r\n\t */\r\n\tgeoLine?: string;\r\n\r\n\t/**\r\n\t * Field name that holds multi-line data in Geo coordinates.\r\n\t */\r\n\tmultiGeoLine?: string;\r\n\r\n}\r\n\r\n/**\r\n * Defines properties for [[MapLineSeries]].\r\n */\r\nexport interface IMapLineSeriesProperties extends IMapSeriesProperties { }\r\n\r\n/**\r\n * Defines events for [[MapLineSeries]].\r\n */\r\nexport interface IMapLineSeriesEvents extends IMapSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[MapLineSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IMapLineSeriesAdapters extends IMapSeriesAdapters, IMapLineSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * A series of map line series.\r\n *\r\n * @see {@link IMapLineSeriesEvents} for a list of available Events\r\n * @see {@link IMapLineSeriesAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class MapLineSeries extends MapSeries {\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t */\r\n\tpublic _dataFields: IMapLineSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IMapLineSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IMapLineSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IMapLineSeriesEvents;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t */\r\n\tpublic _dataItem: MapLineSeriesDataItem;\r\n\r\n\r\n\t/**\r\n\t * A related chart/map object, this element is drawn on.\r\n\t */\r\n\tpublic chart: MapChart;\r\n\r\n\t/**\r\n\t * Defines the type of the line items in this series.\r\n\t */\r\n\tpublic _mapLine: MapLine;\r\n\r\n\t/**\r\n\t * A list of map lins in the series.\r\n\t */\r\n\tprotected _mapLines: ListTemplate<this[\"_mapLine\"]>;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"MapLineSeries\";\r\n\r\n\t\t// Set data fields\r\n\t\tthis.dataFields.multiLine = \"multiLine\";\r\n\t\tthis.dataFields.line = \"line\";\r\n\r\n\t\tthis.dataFields.geoLine = \"geoLine\";\r\n\t\tthis.dataFields.multiGeoLine = \"multiGeoLine\";\r\n\r\n\t\tthis.ignoreBounds = true;\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new MapLineSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates series data, effectively causing the whole series to be\r\n\t * redrawn.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateData(): void {\r\n\t\t// process geoJSON and created map objects\r\n\t\tif (this.useGeodata || this.geodata) {\r\n\t\t\tlet geoJSON: any = this.chart.geodata;\r\n\t\t\tif (geoJSON) {\r\n\r\n\t\t\t\tlet features: any[];\r\n\r\n\t\t\t\tif (geoJSON.type == \"FeatureCollection\") {\r\n\t\t\t\t\tfeatures = geoJSON.features;\r\n\t\t\t\t}\r\n\t\t\t\telse if (geoJSON.type == \"Feature\") {\r\n\t\t\t\t\tfeatures = [geoJSON];\r\n\t\t\t\t}\r\n\t\t\t\telse if ([\"Point\", \"LineString\", \"Polygon\", \"MultiPoint\", \"MultiLineString\", \"MultiPolygon\"].indexOf(geoJSON.type) != -1) {\r\n\t\t\t\t\tfeatures = [{ geometry: geoJSON }];\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tconsole.log(\"nothing found in geoJSON\");\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (features) {\r\n\t\t\t\t\tfor (let i = 0, len = features.length; i < len; i++) {\r\n\r\n\t\t\t\t\t\tlet feature: any = features[i];\r\n\t\t\t\t\t\tlet geometry: any = feature.geometry;\r\n\t\t\t\t\t\tif (geometry) {\r\n\t\t\t\t\t\t\tlet type: GEOJSONGeometry = <GEOJSONGeometry>geometry.type;\r\n\t\t\t\t\t\t\tlet id: string = feature.id;\r\n\t\t\t\t\t\t\tif (type == \"LineString\" || type == \"MultiLineString\") {\r\n\r\n\t\t\t\t\t\t\t\tif (!this.checkInclude(this.include, this.exclude, id)) {\r\n\t\t\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\tlet coordinates: any[] = geometry.coordinates;\r\n\t\t\t\t\t\t\t\tlet dataObject: IMapLineDataObject = $array.find(this.data, (value, i) => {\r\n\t\t\t\t\t\t\t\t\treturn value.id == id;\r\n\t\t\t\t\t\t\t\t});\r\n\r\n\t\t\t\t\t\t\t\tif (type == \"LineString\") {\r\n\t\t\t\t\t\t\t\t\tcoordinates = [coordinates];\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\tif (!dataObject) {\r\n\t\t\t\t\t\t\t\t\tdataObject = { multiLine: coordinates, id: id, madeFromGeoData:true};\r\n\t\t\t\t\t\t\t\t\tthis.data.push(dataObject);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\t\tif (!dataObject.multiLine) {\r\n\t\t\t\t\t\t\t\t\t\tdataObject.multiLine = coordinates;\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t// copy properties data to datacontext\r\n\t\t\t\t\t\t\t\t$utils.softCopyProperties(feature.properties, dataObject);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tsuper.validateData();\r\n\t}\r\n\r\n\t/**\r\n\t * A list of lines in the series.\r\n\t *\r\n\t * @return Lines\r\n\t */\r\n\tpublic get mapLines(): ListTemplate<this[\"_mapLine\"]> {\r\n\r\n\t\tif (!this._mapLines) {\r\n\t\t\tlet lineTemplate: MapLine = this.createLine();\r\n\t\t\tlet mapLines = new ListTemplate<MapLine>(lineTemplate);\r\n\t\t\tthis._disposers.push(new ListDisposer(mapLines));\r\n\t\t\tthis._disposers.push(mapLines.template);\r\n\t\t\tmapLines.events.on(\"inserted\", this.handleObjectAdded, this, false);\r\n\t\t\tthis._mapLines = mapLines;\r\n\t\t\tthis._mapObjects = mapLines;\r\n\t\t}\r\n\r\n\t\treturn this._mapLines;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new line instance of suitable type.\r\n\t *\r\n\t * @return New line\r\n\t */\r\n\tprotected createLine(): this[\"_mapLine\"] {\r\n\t\treturn new MapLine();\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the series\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate() {\r\n\r\n\t\tthis.dataItems.each((dataItem) => {\r\n\t\t\t$utils.used(dataItem.mapLine);\r\n\t\t})\r\n\r\n\r\n\t\tsuper.validate();\r\n\t\tthis.mapLines.each((mapLine) => {\r\n\t\t\tmapLine.validate();\r\n\t\t})\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all properties from another instance of [[Series]].\r\n\t *\r\n\t * @param source  Source series\r\n\t */\r\n\tpublic copyFrom(source: this) {\r\n\t\tthis.mapLines.template.copyFrom(source.mapLines.template);\r\n\t\tsuper.copyFrom(source);\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic getFeatures(): { \"type\": \"Feature\", geometry: { type: \"MultiLineString\", coordinates: Array<Array<[number, number]>> } }[] {\r\n\t\tlet features: { \"type\": \"Feature\", geometry: { type: \"MultiLineString\", coordinates: Array<Array<[number, number]>> } }[] = [];\r\n\t\tthis.dataItems.each((dataItem) => {\r\n\t\t\tlet feature = dataItem.getFeature();\r\n\t\t\tif (feature) {\r\n\t\t\t\tfeatures.push(feature);\r\n\t\t\t}\r\n\t\t})\r\n\r\n\t\tthis.mapLines.each((mapLine) => {\r\n\t\t\tif (this.dataItems.indexOf(mapLine._dataItem) == -1) {\r\n\t\t\t\tlet feature = mapLine.getFeature();\r\n\t\t\t\tif (feature) {\r\n\t\t\t\t\tfeatures.push(feature);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t})\r\n\t\treturn features;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * returns MapLine by id\r\n\t * @param line id\r\n\t * @return {MapLine}\r\n\t */\r\n\tpublic getLineById(id: string): MapLine {\r\n\t\treturn $iter.find(this.mapLines.iterator(), (mapLine) => {\r\n\t\t\tlet dataContext: any = mapLine.dataItem.dataContext;\r\n\t\t\treturn dataContext.id == id;\r\n\t\t});\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"MapLineSeries\"] = MapLineSeries;\r\nregistry.registeredClasses[\"MapLineSeriesDataItem\"] = MapLineSeriesDataItem;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}