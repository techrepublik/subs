{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n/**\r\n * Preloader module.\r\n *\r\n * Preloader is a progress indicator.\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\nimport { Container } from \"../Container\";\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\nimport { Slice } from \"./Slice\";\nimport { Label } from \"./Label\";\nimport { registry } from \"../Registry\";\nimport { percent } from \"../../core/utils/Percent\";\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n/**\r\n * A class used to draw and display progress indicator.\r\n *\r\n * @see {@link IPreloaderEvents} for a list of available events\r\n * @see {@link IPreloaderAdapters} for a list of available Adapters\r\n */\nvar Preloader = /** @class */function (_super) {\n  __extends(Preloader, _super);\n  /**\r\n   * Constructor\r\n   */\n  function Preloader() {\n    var _this =\n    // Init\n    _super.call(this) || this;\n    _this.className = \"Preloader\";\n    // Set dimensions\n    _this.width = percent(100);\n    _this.height = percent(100);\n    var interfaceColors = new InterfaceColorSet();\n    // Create main container\n    var sliceContainer = _this.createChild(Container);\n    sliceContainer.shouldClone = false;\n    // Add background (100%) slice\n    var backgroundSlice = sliceContainer.createChild(Slice);\n    backgroundSlice.shouldClone = false;\n    backgroundSlice.radius = 53;\n    backgroundSlice.arc = 360;\n    backgroundSlice.fill = interfaceColors.getFor(\"fill\");\n    backgroundSlice.fillOpacity = 0.8;\n    backgroundSlice.innerRadius = 42;\n    backgroundSlice.isMeasured = false;\n    _this.backgroundSlice = backgroundSlice;\n    // Add progress slice\n    var progressSlice = sliceContainer.createChild(Slice);\n    progressSlice.shouldClone = false;\n    progressSlice.radius = 50;\n    progressSlice.innerRadius = 45;\n    progressSlice.fill = interfaceColors.getFor(\"alternativeBackground\");\n    progressSlice.fillOpacity = 0.2;\n    progressSlice.isMeasured = false;\n    _this.progressSlice = progressSlice;\n    // Add text label element\n    var label = sliceContainer.createChild(Label);\n    label.shouldClone = false;\n    label.horizontalCenter = \"middle\";\n    label.verticalCenter = \"middle\";\n    label.isMeasured = false;\n    label.fill = interfaceColors.getFor(\"text\");\n    label.align = \"center\";\n    label.valign = \"middle\";\n    label.textAlign = \"middle\";\n    label.fillOpacity = 0.4;\n    _this.label = label;\n    // Set defaults\n    _this.background.opacity = 1;\n    _this.background.fill = interfaceColors.getFor(\"background\");\n    _this.contentAlign = \"center\";\n    _this.contentValign = \"middle\";\n    _this.delay = 300;\n    // Create hidden state\n    var hiddenState = _this.states.create(\"hidden\");\n    hiddenState.properties.opacity = 0;\n    // Hide by default\n    _this.visible = false;\n    _this.hide(0);\n    _this.__disabled = true;\n    // Make it disposable\n    // @todo Maybe it's enough to just dispose `sliceContainer`?\n    _this._disposers.push(_this.backgroundSlice);\n    _this._disposers.push(_this.progressSlice);\n    _this._disposers.push(_this.label);\n    _this._disposers.push(sliceContainer);\n    return _this;\n  }\n  Object.defineProperty(Preloader.prototype, \"progress\", {\n    /**\r\n     * @return Progress (0-1)\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"progress\");\n    },\n    /**\r\n     * Current preload progress. (0-1)\r\n     *\r\n     * * 0 - 0%\r\n     * * 0.5 - 50%\r\n     * * 1 - 100%\r\n     *\r\n     * Setting this to a value less than 1, will automatically reveal the\r\n     * preloader, while setting it to 1 (100%) will hide it.\r\n     *\r\n     * @param value Progress (0-1)\r\n     */\n    set: function (value) {\n      var _this = this;\n      this.__disabled = false;\n      this.validateLayout(); // show not in center without this\n      this.setPropertyValue(\"progress\", value);\n      /*if (!this.visible && value == 1) {\r\n          return;\r\n      }*/\n      this.progressSlice.arc = 360 * value;\n      if (this.label) {\n        this.label.text = Math.round(value * 100) + \"%\";\n      }\n      if (value >= 1) {\n        // Cancel the timeout\n        if (this._started) {\n          this._started = undefined;\n        }\n        // TODO remove closure ?\n        registry.events.once(\"enterframe\", function () {\n          var animation = _this.hide();\n          if (animation && !animation.isFinished()) {\n            animation.events.once(\"animationended\", function () {\n              _this.__disabled = true;\n            });\n          } else {\n            _this.__disabled = true;\n          }\n        });\n        this.interactionsEnabled = false;\n        this.setPropertyValue(\"progress\", 0);\n      } else if (value > 0) {\n        if (this.delay) {\n          if (!this._started) {\n            this._started = new Date().getTime();\n          } else if (this._started + this.delay <= new Date().getTime()) {\n            this.__disabled = false;\n            this.show();\n            this.interactionsEnabled = true;\n          }\n        } else {\n          this.__disabled = false;\n          this.show();\n          this.interactionsEnabled = true;\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Preloader.prototype, \"delay\", {\n    /**\r\n     * @return Delay (ms)\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"delay\");\n    },\n    /**\r\n     * Delay display of preloader by X milliseconds.\r\n     *\r\n     * When loading starts (`progress` is set to <1) and finishes (`progress` is\r\n     * set to 1) before `delay` ms, the loader is never shown.\r\n     *\r\n     * This is used to avoid brief flashing of the preload for very quick loads.\r\n     *\r\n     * @default 1000\r\n     * @param value  Delay (ms)\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"delay\", value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return Preloader;\n}(Container);\nexport { Preloader };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\nregistry.registeredClasses[\"Preloader\"] = Preloader;","map":{"version":3,"names":["Container","InterfaceColorSet","Slice","Label","registry","percent","Preloader","_super","__extends","_this","call","className","width","height","interfaceColors","sliceContainer","createChild","shouldClone","backgroundSlice","radius","arc","fill","getFor","fillOpacity","innerRadius","isMeasured","progressSlice","label","horizontalCenter","verticalCenter","align","valign","textAlign","background","opacity","contentAlign","contentValign","delay","hiddenState","states","create","properties","visible","hide","__disabled","_disposers","push","Object","defineProperty","prototype","get","getPropertyValue","set","value","validateLayout","setPropertyValue","text","Math","round","_started","undefined","events","once","animation","isFinished","interactionsEnabled","Date","getTime","show","registeredClasses"],"sources":["../../../../../src/.internal/core/elements/Preloader.ts"],"sourcesContent":["/**\r\n * Preloader module.\r\n *\r\n * Preloader is a progress indicator.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Container, IContainerProperties, IContainerAdapters, IContainerEvents } from \"../Container\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport { Slice } from \"./Slice\";\r\nimport { Label } from \"./Label\";\r\nimport { registry } from \"../Registry\";\r\nimport { percent } from \"../../core/utils/Percent\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[Preloader]].\r\n */\r\nexport interface IPreloaderProperties extends IContainerProperties {\r\n\r\n\t/**\r\n\t * Current preload progress. (0-1)\r\n\t *\r\n\t * * 0 - 0%\r\n\t * * 0.5 - 50%\r\n\t * * 1 - 100%\r\n\t */\r\n\tprogress?: number;\r\n\r\n\t/**\r\n\t * Delay display of preloader by X milliseconds.\r\n\t *\r\n\t * When loading starts (`progress` is set to <1) and finishes (`progress` is\r\n\t * set to 1) before `delay` ms, the loader is never shown.\r\n\t *\r\n\t * This is used to avoid brief flashing of the preload for very quick loads.\r\n\t *\r\n\t * @default 1000\r\n\t */\r\n\tdelay?: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[Preloader]].\r\n */\r\nexport interface IPreloaderEvents extends IContainerEvents { }\r\n\r\n/**\r\n * Defines adapters for [[Preloader]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IPreloaderAdapters extends IContainerAdapters, IPreloaderProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * A class used to draw and display progress indicator.\r\n *\r\n * @see {@link IPreloaderEvents} for a list of available events\r\n * @see {@link IPreloaderAdapters} for a list of available Adapters\r\n */\r\nexport class Preloader extends Container {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IPreloaderProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IPreloaderAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IPreloaderEvents;\r\n\r\n\t/**\r\n\t * A [[Slice]] element that indicates load progress.\r\n\t *\r\n\t * This can be used to modify appearance of the preloader elements.\r\n\t */\r\n\tpublic progressSlice: Slice;\r\n\r\n\t/**\r\n\t * A [[Slice]] element that shows the full ring. (background for the\r\n\t * `progressSlice`)\r\n\t *\r\n\t * This can be used to modify appearance of the preloader elements.\r\n\t */\r\n\tpublic backgroundSlice: Slice;\r\n\r\n\t/**\r\n\t * Label that displays progress in percent.\r\n\t *\r\n\t * This can be used to modify appearance of the preloader elements.\r\n\t */\r\n\tpublic label: Label;\r\n\r\n\t/**\r\n\t * Logs the timestamp of when the loader was initiated. It will be used to\r\n\t * delay showing of the Preloader so for quick operations it does not even\r\n\t * appear on screen.\r\n\t */\r\n\tprotected _started: $type.Optional<number>;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"Preloader\";\r\n\r\n\t\t// Set dimensions\r\n\t\tthis.width = percent(100);\r\n\t\tthis.height = percent(100);\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\r\n\t\t// Create main container\r\n\t\tlet sliceContainer: Container = this.createChild(Container);\r\n\t\tsliceContainer.shouldClone = false;\r\n\r\n\t\t// Add background (100%) slice\r\n\t\tlet backgroundSlice: Slice = sliceContainer.createChild(Slice);\r\n\t\tbackgroundSlice.shouldClone = false;\r\n\t\tbackgroundSlice.radius = 53;\r\n\t\tbackgroundSlice.arc = 360;\r\n\t\tbackgroundSlice.fill = interfaceColors.getFor(\"fill\");\r\n\t\tbackgroundSlice.fillOpacity = 0.8;\r\n\t\tbackgroundSlice.innerRadius = 42;\r\n\t\tbackgroundSlice.isMeasured = false;\r\n\t\tthis.backgroundSlice = backgroundSlice;\r\n\r\n\t\t// Add progress slice\r\n\t\tlet progressSlice: Slice = sliceContainer.createChild(Slice);\r\n\t\tprogressSlice.shouldClone = false;\r\n\t\tprogressSlice.radius = 50;\r\n\t\tprogressSlice.innerRadius = 45;\r\n\t\tprogressSlice.fill = interfaceColors.getFor(\"alternativeBackground\");\r\n\t\tprogressSlice.fillOpacity = 0.2;\r\n\t\tprogressSlice.isMeasured = false;\r\n\t\tthis.progressSlice = progressSlice;\r\n\r\n\t\t// Add text label element\r\n\t\tlet label: Label = sliceContainer.createChild(Label);\r\n\t\tlabel.shouldClone = false;\r\n\t\tlabel.horizontalCenter = \"middle\";\r\n\t\tlabel.verticalCenter = \"middle\";\r\n\t\tlabel.isMeasured = false;\r\n\t\tlabel.fill = interfaceColors.getFor(\"text\");\r\n\t\tlabel.align = \"center\";\r\n\t\tlabel.valign = \"middle\";\r\n\t\tlabel.textAlign = \"middle\";\r\n\t\tlabel.fillOpacity = 0.4;\r\n\t\tthis.label = label;\r\n\r\n\t\t// Set defaults\r\n\t\tthis.background.opacity = 1;\r\n\t\tthis.background.fill = interfaceColors.getFor(\"background\");\r\n\t\tthis.contentAlign = \"center\";\r\n\t\tthis.contentValign = \"middle\";\r\n\t\tthis.delay = 300;\r\n\r\n\t\t// Create hidden state\r\n\t\tlet hiddenState = this.states.create(\"hidden\");\r\n\t\thiddenState.properties.opacity = 0;\r\n\r\n\t\t// Hide by default\r\n\t\tthis.visible = false;\r\n\t\tthis.hide(0);\r\n\t\tthis.__disabled = true;\r\n\r\n\t\t// Make it disposable\r\n\t\t// @todo Maybe it's enough to just dispose `sliceContainer`?\r\n\t\tthis._disposers.push(this.backgroundSlice);\r\n\t\tthis._disposers.push(this.progressSlice);\r\n\t\tthis._disposers.push(this.label);\r\n\t\tthis._disposers.push(sliceContainer);\r\n\t}\r\n\r\n\t/**\r\n\t * Current preload progress. (0-1)\r\n\t *\r\n\t * * 0 - 0%\r\n\t * * 0.5 - 50%\r\n\t * * 1 - 100%\r\n\t *\r\n\t * Setting this to a value less than 1, will automatically reveal the\r\n\t * preloader, while setting it to 1 (100%) will hide it.\r\n\t *\r\n\t * @param value Progress (0-1)\r\n\t */\r\n\tpublic set progress(value: number) {\r\n\t\tthis.__disabled = false;\r\n\r\n\t\tthis.validateLayout(); // show not in center without this\r\n\r\n\t\tthis.setPropertyValue(\"progress\", value);\r\n\r\n\t\t/*if (!this.visible && value == 1) {\r\n\t\t\treturn;\r\n\t\t}*/\r\n\r\n\t\tthis.progressSlice.arc = 360 * value;\r\n\r\n\t\tif (this.label) {\r\n\t\t\tthis.label.text = Math.round(value * 100) + \"%\";\r\n\t\t}\r\n\r\n\t\tif (value >= 1) {\r\n\r\n\t\t\t// Cancel the timeout\r\n\t\t\tif (this._started) {\r\n\t\t\t\tthis._started = undefined;\r\n\t\t\t}\r\n\r\n\t\t\t// TODO remove closure ?\r\n\t\t\tregistry.events.once(\"enterframe\", () => {\r\n\t\t\t\tlet animation = this.hide();\r\n\t\t\t\tif (animation && !animation.isFinished()) {\r\n\t\t\t\t\tanimation.events.once(\"animationended\", () => {\r\n\t\t\t\t\t\tthis.__disabled = true;\r\n\t\t\t\t\t})\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis.__disabled = true;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t\tthis.interactionsEnabled = false;\r\n\t\t\tthis.setPropertyValue(\"progress\", 0);\r\n\t\t}\r\n\t\telse if (value > 0) {\r\n\t\t\tif (this.delay) {\r\n\t\t\t\tif (!this._started) {\r\n\t\t\t\t\tthis._started = new Date().getTime();\r\n\t\t\t\t}\r\n\t\t\t\telse if ((this._started + this.delay) <= new Date().getTime()) {\r\n\t\t\t\t\tthis.__disabled = false;\r\n\t\t\t\t\tthis.show();\r\n\t\t\t\t\tthis.interactionsEnabled = true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.__disabled = false;\r\n\t\t\t\tthis.show();\r\n\t\t\t\tthis.interactionsEnabled = true;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * @return Progress (0-1)\r\n\t */\r\n\tpublic get progress(): number {\r\n\t\treturn this.getPropertyValue(\"progress\");\r\n\t}\r\n\r\n\t/**\r\n\t * Delay display of preloader by X milliseconds.\r\n\t *\r\n\t * When loading starts (`progress` is set to <1) and finishes (`progress` is\r\n\t * set to 1) before `delay` ms, the loader is never shown.\r\n\t *\r\n\t * This is used to avoid brief flashing of the preload for very quick loads.\r\n\t *\r\n\t * @default 1000\r\n\t * @param value  Delay (ms)\r\n\t */\r\n\tpublic set delay(value: number) {\r\n\t\tthis.setPropertyValue(\"delay\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Delay (ms)\r\n\t */\r\n\tpublic get delay(): number {\r\n\t\treturn this.getPropertyValue(\"delay\");\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Preloader\"] = Preloader;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}