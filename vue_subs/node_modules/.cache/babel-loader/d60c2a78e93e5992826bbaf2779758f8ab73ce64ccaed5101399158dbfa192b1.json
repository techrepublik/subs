{"ast":null,"code":"/**\r\n * Resize button module.\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\nimport { Button } from \"./Button\";\nimport { Sprite } from \"../Sprite\";\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\nimport { registry } from \"../Registry\";\nimport * as $path from \"../rendering/Path\";\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n/**\r\n * Creates a draggable resize/grip button.\r\n *\r\n * @see {@link IResizeButtonEvents} for a list of available events\r\n * @see {@link IResizeButtonAdapters} for a list of available Adapters\r\n */\nvar ResizeButton = /** @class */function (_super) {\n  __extends(ResizeButton, _super);\n  /**\r\n   * Constructor\r\n   */\n  function ResizeButton() {\n    var _this =\n    // Init\n    _super.call(this) || this;\n    _this.className = \"ResizeButton\";\n    // Set defaults\n    _this.orientation = \"horizontal\";\n    _this.layout = \"absolute\";\n    _this.horizontalCenter = \"middle\";\n    _this.verticalCenter = \"middle\";\n    _this.draggable = true;\n    _this.padding(8, 8, 8, 8);\n    _this.background.cornerRadius(20, 20, 20, 20);\n    // Create an icon\n    var icon = new Sprite();\n    icon.element = _this.paper.add(\"path\");\n    var path = $path.moveTo({\n      x: -2,\n      y: -6\n    });\n    path += $path.lineTo({\n      x: -2,\n      y: 6\n    });\n    path += $path.moveTo({\n      x: 2,\n      y: -6\n    });\n    path += $path.lineTo({\n      x: 2,\n      y: 6\n    });\n    icon.path = path;\n    icon.pixelPerfect = true;\n    icon.padding(0, 4, 0, 4);\n    icon.stroke = new InterfaceColorSet().getFor(\"alternativeText\");\n    icon.strokeOpacity = 0.7;\n    //icon.align = \"center\";\n    //icon.valign = \"middle\";\n    _this.icon = icon;\n    _this.label.dispose();\n    _this.label = undefined;\n    // Apply theme\n    _this.applyTheme();\n    return _this;\n  }\n  Object.defineProperty(ResizeButton.prototype, \"orientation\", {\n    /**\r\n     * Use for setting of direction (orientation) of the resize button.\r\n     *\r\n     * Available options: \"horizontal\", \"vertical\".\r\n     *\r\n     * @param value Orientation\r\n     */\n    set: function (value) {\n      var icon = this.icon;\n      if (icon) {\n        if (value == \"horizontal\") {\n          icon.rotation = 0;\n        } else {\n          icon.rotation = -90;\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return ResizeButton;\n}(Button);\nexport { ResizeButton };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\nregistry.registeredClasses[\"ResizeButton\"] = ResizeButton;","map":{"version":3,"names":["Button","Sprite","InterfaceColorSet","registry","$path","ResizeButton","_super","__extends","_this","call","className","orientation","layout","horizontalCenter","verticalCenter","draggable","padding","background","cornerRadius","icon","element","paper","add","path","moveTo","x","y","lineTo","pixelPerfect","stroke","getFor","strokeOpacity","label","dispose","undefined","applyTheme","Object","defineProperty","prototype","set","value","rotation","registeredClasses"],"sources":["../../../../../src/.internal/core/elements/ResizeButton.ts"],"sourcesContent":["/**\r\n * Resize button module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Button, IButtonProperties, IButtonAdapters, IButtonEvents } from \"./Button\";\r\nimport { Sprite } from \"../Sprite\";\r\nimport { Orientation } from \"../defs/Orientation\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport { registry } from \"../Registry\";\r\nimport * as $path from \"../rendering/Path\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[ResizeButton]].\r\n */\r\nexport interface IResizeButtonProperties extends IButtonProperties { }\r\n\r\n/**\r\n * Defines events for [[ResizeButton]] for [[ResizeButton]].\r\n */\r\nexport interface IResizeButtonEvents extends IButtonEvents { }\r\n\r\n/**\r\n * Defines adapters for [[ResizeButton]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IResizeButtonAdapters extends IButtonAdapters, IResizeButtonProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a draggable resize/grip button.\r\n *\r\n * @see {@link IResizeButtonEvents} for a list of available events\r\n * @see {@link IResizeButtonAdapters} for a list of available Adapters\r\n */\r\nexport class ResizeButton extends Button {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IResizeButtonProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IResizeButtonAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IResizeButtonEvents;\r\n\r\n\t/**\r\n\t * Orientation of the resize direction.\r\n\t *\r\n\t * @deprecated Not used\r\n\t */\r\n\tprotected _orientation: Orientation;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"ResizeButton\";\r\n\r\n\t\t// Set defaults\r\n\t\tthis.orientation = \"horizontal\";\r\n\t\tthis.layout = \"absolute\";\r\n\t\tthis.horizontalCenter = \"middle\";\r\n\t\tthis.verticalCenter = \"middle\";\r\n\r\n\t\tthis.draggable = true;\r\n\t\tthis.padding(8, 8, 8, 8);\r\n\r\n\t\tthis.background.cornerRadius(20, 20, 20, 20);\r\n\r\n\t\t// Create an icon\r\n\t\tlet icon: Sprite = new Sprite();\r\n\t\ticon.element = this.paper.add(\"path\");\r\n\r\n\t\tlet path = $path.moveTo({ x: -2, y: -6 });\r\n\t\tpath += $path.lineTo({ x: -2, y: 6 });\r\n\t\tpath += $path.moveTo({ x: 2, y: -6 });\r\n\t\tpath += $path.lineTo({ x: 2, y: 6 });\r\n\t\ticon.path = path;\r\n\r\n\t\ticon.pixelPerfect = true;\r\n\t\ticon.padding(0, 4, 0, 4);\r\n\t\ticon.stroke = new InterfaceColorSet().getFor(\"alternativeText\");\r\n\t\ticon.strokeOpacity = 0.7;\r\n\t\t//icon.align = \"center\";\r\n\t\t//icon.valign = \"middle\";\r\n\t\tthis.icon = icon;\r\n\r\n\t\tthis.label.dispose();\r\n\t\tthis.label = undefined;\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Use for setting of direction (orientation) of the resize button.\r\n\t *\r\n\t * Available options: \"horizontal\", \"vertical\".\r\n\t *\r\n\t * @param value Orientation\r\n\t */\r\n\tpublic set orientation(value: Orientation) {\r\n\t\tlet icon = this.icon;\r\n\t\tif (icon) {\r\n\t\t\tif (value == \"horizontal\") {\r\n\t\t\t\ticon.rotation = 0;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\ticon.rotation = -90;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"ResizeButton\"] = ResizeButton;\r\n"],"mappings":"AAAA;;;;AAIA;;;;;;AAMA,SAASA,MAAM,QAA2D,UAAU;AACpF,SAASC,MAAM,QAAQ,WAAW;AAElC,SAASC,iBAAiB,QAAQ,oCAAoC;AACtE,SAASC,QAAQ,QAAQ,aAAa;AACtC,OAAO,KAAKC,KAAK,MAAM,mBAAmB;AA4B1C;;;;;;AAOA;;;;;;AAMA,IAAAC,YAAA,0BAAAC,MAAA;EAAkCC,SAAA,CAAAF,YAAA,EAAAC,MAAA;EAwBjC;;;EAGA,SAAAD,aAAA;IAAA,IAAAG,KAAA;IAEC;IACAF,MAAA,CAAAG,IAAA,MAAO;IACPD,KAAI,CAACE,SAAS,GAAG,cAAc;IAE/B;IACAF,KAAI,CAACG,WAAW,GAAG,YAAY;IAC/BH,KAAI,CAACI,MAAM,GAAG,UAAU;IACxBJ,KAAI,CAACK,gBAAgB,GAAG,QAAQ;IAChCL,KAAI,CAACM,cAAc,GAAG,QAAQ;IAE9BN,KAAI,CAACO,SAAS,GAAG,IAAI;IACrBP,KAAI,CAACQ,OAAO,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;IAExBR,KAAI,CAACS,UAAU,CAACC,YAAY,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;IAE5C;IACA,IAAIC,IAAI,GAAW,IAAIlB,MAAM,EAAE;IAC/BkB,IAAI,CAACC,OAAO,GAAGZ,KAAI,CAACa,KAAK,CAACC,GAAG,CAAC,MAAM,CAAC;IAErC,IAAIC,IAAI,GAAGnB,KAAK,CAACoB,MAAM,CAAC;MAAEC,CAAC,EAAE,CAAC,CAAC;MAAEC,CAAC,EAAE,CAAC;IAAC,CAAE,CAAC;IACzCH,IAAI,IAAInB,KAAK,CAACuB,MAAM,CAAC;MAAEF,CAAC,EAAE,CAAC,CAAC;MAAEC,CAAC,EAAE;IAAC,CAAE,CAAC;IACrCH,IAAI,IAAInB,KAAK,CAACoB,MAAM,CAAC;MAAEC,CAAC,EAAE,CAAC;MAAEC,CAAC,EAAE,CAAC;IAAC,CAAE,CAAC;IACrCH,IAAI,IAAInB,KAAK,CAACuB,MAAM,CAAC;MAAEF,CAAC,EAAE,CAAC;MAAEC,CAAC,EAAE;IAAC,CAAE,CAAC;IACpCP,IAAI,CAACI,IAAI,GAAGA,IAAI;IAEhBJ,IAAI,CAACS,YAAY,GAAG,IAAI;IACxBT,IAAI,CAACH,OAAO,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;IACxBG,IAAI,CAACU,MAAM,GAAG,IAAI3B,iBAAiB,EAAE,CAAC4B,MAAM,CAAC,iBAAiB,CAAC;IAC/DX,IAAI,CAACY,aAAa,GAAG,GAAG;IACxB;IACA;IACAvB,KAAI,CAACW,IAAI,GAAGA,IAAI;IAEhBX,KAAI,CAACwB,KAAK,CAACC,OAAO,EAAE;IACpBzB,KAAI,CAACwB,KAAK,GAAGE,SAAS;IAEtB;IACA1B,KAAI,CAAC2B,UAAU,EAAE;;EAElB;EASAC,MAAA,CAAAC,cAAA,CAAWhC,YAAA,CAAAiC,SAAA,eAAW;IAPtB;;;;;;;SAOA,SAAAC,CAAuBC,KAAkB;MACxC,IAAIrB,IAAI,GAAG,IAAI,CAACA,IAAI;MACpB,IAAIA,IAAI,EAAE;QACT,IAAIqB,KAAK,IAAI,YAAY,EAAE;UAC1BrB,IAAI,CAACsB,QAAQ,GAAG,CAAC;SACjB,MACI;UACJtB,IAAI,CAACsB,QAAQ,GAAG,CAAC,EAAE;;;IAGtB,CAAC;;;;EAEF,OAAApC,YAAC;AAAD,CAAC,CAzFiCL,MAAM;;AA2FxC;;;;;;AAMAG,QAAQ,CAACuC,iBAAiB,CAAC,cAAc,CAAC,GAAGrC,YAAY","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}