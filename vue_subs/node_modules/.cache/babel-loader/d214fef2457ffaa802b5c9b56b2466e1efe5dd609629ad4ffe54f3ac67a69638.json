{"ast":null,"code":"import { EventDispatcher } from \"./utils/EventDispatcher\";\nimport { Dictionary } from \"./utils/Dictionary\";\nimport { cache } from \"./utils/Cache\";\nimport * as $type from \"./utils/Type\";\nimport * as $string from \"./utils/String\";\nimport * as $array from \"./utils/Array\";\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n/**\r\n * Registry is used to store miscellaneous system-wide information, like ids,\r\n * maps, themes, and registered classes.\r\n *\r\n * @ignore Exclude from docs\r\n */\nvar Registry = /** @class */function () {\n  function Registry() {\n    var _this = this;\n    /**\r\n     * Event dispacther.\r\n     */\n    this.events = new EventDispatcher();\n    /**\r\n     * All currently applied themes. All new chart instances created will\r\n     * automatically inherit and retain System's themes.\r\n     */\n    this.themes = [];\n    /**\r\n     * List of all loaded available themes.\r\n     *\r\n     * Whenever a theme loads, it registers itself in System's `loadedThemes`\r\n     * collection.\r\n     */\n    this.loadedThemes = {};\n    /**\r\n     * An indeternal counter used to generate unique IDs.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\n    this._uidCount = 0;\n    /**\r\n     * Keeps register of class references so that they can be instnatiated using\r\n     * string key.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\n    this.registeredClasses = {};\n    /**\r\n     * Holds all generated placeholders.\r\n     */\n    this._placeholders = {};\n    /**\r\n     * A list of invalid(ated) [[Sprite]] objects that need to be re-validated\r\n     * during next cycle.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\n    this.invalidSprites = {};\n    /**\r\n     * Components are added to this list when their data provider changes to\r\n     * a new one or data is added/removed from their data provider.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\n    this.invalidDatas = {};\n    /**\r\n     * Components are added to this list when values of their raw data change.\r\n     * Used when we want a smooth animation from one set of values to another.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\n    this.invalidRawDatas = [];\n    /**\r\n     * Components are added to this list when values of their data changes\r\n     * (but not data provider itself).\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\n    this.invalidDataItems = [];\n    /**\r\n     * Components are added to this list when their data range (selection) is\r\n     * changed, e.g. zoomed.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\n    this.invalidDataRange = [];\n    /**\r\n     * A list of [[Sprite]] objects that have invalid(ated) positions, that need\r\n     * to be recalculated.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\n    this.invalidPositions = {};\n    /**\r\n     * A list of [[Container]] objects with invalid(ated) layouts.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\n    this.invalidLayouts = {};\n    /**\r\n     * An array holding all active (non-disposed) top level elemens.\r\n     *\r\n     * When, for example, a new chart is created, its instance will be added to\r\n     * this array, and will be removed when the chart is disposed.\r\n     */\n    this.baseSprites = [];\n    /**\r\n     * An UID-based map of base sprites (top-level charts).\r\n     */\n    this.baseSpritesByUid = {};\n    /**\r\n     * Queued charts (waiting for their turn) to initialize.\r\n     *\r\n     * @see {@link https://www.amcharts.com/docs/v4/concepts/performance/#Daisy_chaining_multiple_charts} for more information\r\n     */\n    this.queue = [];\n    /**\r\n     * An array of deferred charts that haven't been created yet.\r\n     *\r\n     * @see {@link https://www.amcharts.com/docs/v4/concepts/performance/#Deferred_daisy_chained_instantiation} for more information\r\n     * @since 4.10.0\r\n     */\n    this.deferred = [];\n    this.uid = this.getUniqueId();\n    this.invalidSprites.noBase = [];\n    this.invalidDatas.noBase = [];\n    this.invalidLayouts.noBase = [];\n    this.invalidPositions.noBase = [];\n    // This is needed for Angular Universal SSR\n    if (typeof addEventListener !== \"undefined\") {\n      // This is needed to prevent charts from being cut off when printing\n      addEventListener(\"beforeprint\", function () {\n        $array.each(_this.baseSprites, function (sprite) {\n          var svg = sprite.paper.svg;\n          svg.setAttribute(\"viewBox\", \"0 0 \" + svg.clientWidth + \" \" + svg.clientHeight);\n        });\n      });\n      addEventListener(\"afterprint\", function () {\n        $array.each(_this.baseSprites, function (sprite) {\n          var svg = sprite.paper.svg;\n          svg.removeAttribute(\"viewBox\");\n        });\n      });\n    }\n  }\n  /**\r\n   * Generates a unique chart system-wide ID.\r\n   *\r\n   * @return Generated ID\r\n   */\n  Registry.prototype.getUniqueId = function () {\n    var uid = this._uidCount;\n    this._uidCount += 1;\n    return \"id-\" + uid;\n  };\n  Object.defineProperty(Registry.prototype, \"map\", {\n    /**\r\n     * Returns a universal collection for mapping ids with objects.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @return Map collection\r\n     */\n    get: function () {\n      if (!this._map) {\n        this._map = new Dictionary();\n      }\n      return this._map;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Caches value in object's cache.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param key    Key\r\n   * @param value  Value\r\n   * @param ttl    TTL in seconds\r\n   */\n  Registry.prototype.setCache = function (key, value, ttl) {\n    cache.set(this.uid, key, value, ttl);\n  };\n  /**\r\n   * Retrieves cached value.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param key    Key\r\n   * @param value  Value to return if cache is not available\r\n   * @return Value\r\n   */\n  Registry.prototype.getCache = function (key, value) {\n    if (value === void 0) {\n      value = undefined;\n    }\n    return cache.get(this.uid, key, value);\n  };\n  /**\r\n   * Dispatches an event using own event dispatcher. Will automatically\r\n   * populate event data object with event type and target (this element).\r\n   * It also checks if there are any handlers registered for this sepecific\r\n   * event.\r\n   *\r\n   * @param eventType Event type (name)\r\n   * @param data      Data to pass into event handler(s)\r\n   */\n  Registry.prototype.dispatch = function (eventType, data) {\n    // @todo Implement proper type check\n    if (this.events.isEnabled(eventType)) {\n      if (data) {\n        data.type = eventType;\n        data.target = data.target || this;\n        this.events.dispatch(eventType, {\n          type: eventType,\n          target: this\n        });\n      } else {\n        this.events.dispatch(eventType, {\n          type: eventType,\n          target: this\n        });\n      }\n    }\n  };\n  /**\r\n   * Works like `dispatch`, except event is triggered immediately, without\r\n   * waiting for the next frame cycle.\r\n   *\r\n   * @param eventType Event type (name)\r\n   * @param data      Data to pass into event handler(s)\r\n   */\n  Registry.prototype.dispatchImmediately = function (eventType, data) {\n    // @todo Implement proper type check\n    if (this.events.isEnabled(eventType)) {\n      if (data) {\n        data.type = eventType;\n        data.target = data.target || this;\n        this.events.dispatchImmediately(eventType, data);\n      } else {\n        this.events.dispatchImmediately(eventType, {\n          type: eventType,\n          target: this\n        });\n      }\n    }\n  };\n  /**\r\n   * Returns a unique placeholder suitable for the key.\r\n   *\r\n   * @param key  Key\r\n   * @return Random string to be used as placeholder\r\n   */\n  Registry.prototype.getPlaceholder = function (key) {\n    if ($type.hasValue(this._placeholders[key])) {\n      return this._placeholders[key];\n    }\n    this._placeholders[key] = \"__amcharts_\" + key + \"_\" + $string.random(8) + \"__\";\n    return this._placeholders[key];\n  };\n  /**\r\n   * @ignore\r\n   */\n  Registry.prototype.addToInvalidComponents = function (component) {\n    if (component.baseId) {\n      $array.move(this.invalidDatas[component.baseId], component);\n    } else {\n      $array.move(this.invalidDatas[\"noBase\"], component);\n    }\n  };\n  /**\r\n   * @ignore\r\n   */\n  Registry.prototype.removeFromInvalidComponents = function (component) {\n    if (component.baseId) {\n      $array.remove(this.invalidDatas[component.baseId], component);\n    }\n    $array.remove(this.invalidDatas[\"noBase\"], component);\n  };\n  /**\r\n   * @ignore\r\n   */\n  Registry.prototype.addToInvalidSprites = function (sprite) {\n    if (sprite.baseId) {\n      $array.add(this.invalidSprites[sprite.baseId], sprite);\n    } else {\n      $array.add(this.invalidSprites[\"noBase\"], sprite);\n    }\n  };\n  /**\r\n   * @ignore\r\n   */\n  Registry.prototype.removeFromInvalidSprites = function (sprite) {\n    if (sprite.baseId) {\n      $array.remove(this.invalidSprites[sprite.baseId], sprite);\n    }\n    $array.remove(this.invalidSprites[\"noBase\"], sprite);\n  };\n  /**\r\n   * @ignore\r\n   */\n  Registry.prototype.addToInvalidPositions = function (sprite) {\n    if (sprite.baseId) {\n      $array.add(this.invalidPositions[sprite.baseId], sprite);\n    } else {\n      $array.add(this.invalidPositions[\"noBase\"], sprite);\n    }\n  };\n  /**\r\n   * @ignore\r\n   */\n  Registry.prototype.removeFromInvalidPositions = function (sprite) {\n    if (sprite.baseId) {\n      $array.remove(this.invalidPositions[sprite.baseId], sprite);\n    }\n    $array.remove(this.invalidPositions[\"noBase\"], sprite);\n  };\n  /**\r\n   * @ignore\r\n   */\n  Registry.prototype.addToInvalidLayouts = function (sprite) {\n    if (sprite.baseId) {\n      $array.add(this.invalidLayouts[sprite.baseId], sprite);\n    } else {\n      $array.add(this.invalidLayouts[\"noBase\"], sprite);\n    }\n  };\n  /**\r\n   * @ignore\r\n   */\n  Registry.prototype.removeFromInvalidLayouts = function (sprite) {\n    if (sprite.baseId) {\n      $array.remove(this.invalidLayouts[sprite.baseId], sprite);\n    }\n    $array.remove(this.invalidLayouts[\"noBase\"], sprite);\n  };\n  return Registry;\n}();\nexport { Registry };\n/**\r\n * A singleton global instance of [[Registry]].\r\n *\r\n * @ignore Exclude from docs\r\n */\nexport var registry = new Registry();\n/**\r\n * Returns `true` if object is an instance of the class. It's the same as `instanceof` except it doesn't need to import the class.\r\n *\r\n * @param object Object\r\n * @param name Class name\r\n * @return Is instance of class\r\n */\nexport function is(object, name) {\n  var x = registry.registeredClasses[name];\n  return x != null && object instanceof x;\n}","map":{"version":3,"names":["EventDispatcher","Dictionary","cache","$type","$string","$array","Registry","_this","events","themes","loadedThemes","_uidCount","registeredClasses","_placeholders","invalidSprites","invalidDatas","invalidRawDatas","invalidDataItems","invalidDataRange","invalidPositions","invalidLayouts","baseSprites","baseSpritesByUid","queue","deferred","uid","getUniqueId","noBase","addEventListener","each","sprite","svg","paper","setAttribute","clientWidth","clientHeight","removeAttribute","prototype","Object","defineProperty","get","_map","setCache","key","value","ttl","set","getCache","undefined","dispatch","eventType","data","isEnabled","type","target","dispatchImmediately","getPlaceholder","hasValue","random","addToInvalidComponents","component","baseId","move","removeFromInvalidComponents","remove","addToInvalidSprites","add","removeFromInvalidSprites","addToInvalidPositions","removeFromInvalidPositions","addToInvalidLayouts","removeFromInvalidLayouts","registry","is","object","name","x"],"sources":["../../../../src/.internal/core/Registry.ts"],"sourcesContent":["/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { ITheme } from \"../themes/ITheme\";\r\nimport { EventDispatcher, AMEvent } from \"./utils/EventDispatcher\";\r\nimport { Dictionary } from \"./utils/Dictionary\";\r\nimport { Sprite } from \"./Sprite\";\r\nimport { Container } from \"./Container\";\r\nimport { Component } from \"./Component\";\r\nimport { cache } from \"./utils/Cache\";\r\nimport * as $type from \"./utils/Type\";\r\nimport * as $string from \"./utils/String\";\r\nimport * as $array from \"./utils/Array\";\r\n\r\n\r\n/**\r\n * Define events available for [[Registry]]\r\n */\r\nexport interface IRegistryEvents {\r\n\r\n\t/**\r\n\t * Invoked when update cycle starts. Before invalid elements are re-validated.\r\n\t */\r\n\tenterframe: {};\r\n\r\n\t/**\r\n\t * Invoked when udpate cycle ends. After invalid elements have been\r\n\t * re-validated.\r\n\t */\r\n\texitframe: {};\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Registry is used to store miscellaneous system-wide information, like ids,\r\n * maps, themes, and registered classes.\r\n *\r\n * @ignore Exclude from docs\r\n */\r\nexport class Registry {\r\n\r\n\t/**\r\n\t * Unique ID of the object.\r\n\t */\r\n\tpublic uid: string;\r\n\r\n\t/**\r\n\t * Event dispacther.\r\n\t */\r\n\tpublic events: EventDispatcher<AMEvent<Registry, IRegistryEvents>> = new EventDispatcher();\r\n\r\n\t/**\r\n\t * Holds a universal mapping collection, so that elements and their children\r\n\t * can create and look up all kinds of relations between id and object.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected _map: $type.Optional<Dictionary<string, any>>;\r\n\r\n\t/**\r\n\t * All currently applied themes. All new chart instances created will\r\n\t * automatically inherit and retain System's themes.\r\n\t */\r\n\tpublic themes: ITheme[] = [];\r\n\r\n\t/**\r\n\t * List of all loaded available themes.\r\n\t *\r\n\t * Whenever a theme loads, it registers itself in System's `loadedThemes`\r\n\t * collection.\r\n\t */\r\n\tpublic loadedThemes: { [index: string]: ITheme } = {};\r\n\r\n\t/**\r\n\t * An indeternal counter used to generate unique IDs.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected _uidCount: number = 0;\r\n\r\n\t/**\r\n\t * Keeps register of class references so that they can be instnatiated using\r\n\t * string key.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic registeredClasses: { [index: string]: any } = {};\r\n\r\n\t/**\r\n\t * Holds all generated placeholders.\r\n\t */\r\n\tprotected _placeholders: { [index: string]: string } = {};\r\n\r\n\t/**\r\n\t * A list of invalid(ated) [[Sprite]] objects that need to be re-validated\r\n\t * during next cycle.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic invalidSprites: { [index: string]: Array<Sprite> } = {};\r\n\r\n\t/**\r\n\t * Components are added to this list when their data provider changes to\r\n\t * a new one or data is added/removed from their data provider.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic invalidDatas: { [index: string]: Array<Component> } = {};\r\n\r\n\t/**\r\n\t * Components are added to this list when values of their raw data change.\r\n\t * Used when we want a smooth animation from one set of values to another.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic invalidRawDatas: Array<Component> = [];\r\n\r\n\t/**\r\n\t * Components are added to this list when values of their data changes\r\n\t * (but not data provider itself).\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic invalidDataItems: Array<Component> = [];\r\n\r\n\t/**\r\n\t * Components are added to this list when their data range (selection) is\r\n\t * changed, e.g. zoomed.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic invalidDataRange: Array<Component> = [];\r\n\r\n\t/**\r\n\t * A list of [[Sprite]] objects that have invalid(ated) positions, that need\r\n\t * to be recalculated.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic invalidPositions: { [index: string]: Array<Sprite> } = {};\r\n\r\n\t/**\r\n\t * A list of [[Container]] objects with invalid(ated) layouts.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic invalidLayouts: { [index: string]: Array<Container> } = {};\r\n\r\n\t/**\r\n\t * An array holding all active (non-disposed) top level elemens.\r\n\t *\r\n\t * When, for example, a new chart is created, its instance will be added to\r\n\t * this array, and will be removed when the chart is disposed.\r\n\t */\r\n\tpublic baseSprites: Array<Sprite> = [];\r\n\r\n\t/**\r\n\t * An UID-based map of base sprites (top-level charts).\r\n\t */\r\n\tpublic baseSpritesByUid: { [index: string]: Sprite } = {};\r\n\r\n\t/**\r\n\t * Queued charts (waiting for their turn) to initialize.\r\n\t * \r\n\t * @see {@link https://www.amcharts.com/docs/v4/concepts/performance/#Daisy_chaining_multiple_charts} for more information\r\n\t */\r\n\tpublic queue: Array<Sprite> = [];\r\n\r\n\t/**\r\n\t * An array of deferred charts that haven't been created yet.\r\n\t *\r\n\t * @see {@link https://www.amcharts.com/docs/v4/concepts/performance/#Deferred_daisy_chained_instantiation} for more information\r\n\t * @since 4.10.0\r\n\t */\r\n\tpublic deferred: Array<{\r\n\t\tcallback: (...args: Array<any>) => Sprite,\r\n\t\tscope?: any,\r\n\t\targs?: Array<any>,\r\n\t\tresolve: any\r\n\t}> = [];\r\n\r\n\tconstructor() {\r\n\t\tthis.uid = this.getUniqueId();\r\n\r\n\t\tthis.invalidSprites.noBase = [];\r\n\t\tthis.invalidDatas.noBase = [];\r\n\t\tthis.invalidLayouts.noBase = [];\r\n\t\tthis.invalidPositions.noBase = [];\r\n\r\n\t\t// This is needed for Angular Universal SSR\r\n\t\tif (typeof addEventListener !== \"undefined\") {\r\n\t\t\t// This is needed to prevent charts from being cut off when printing\r\n\t\t\taddEventListener(\"beforeprint\", () => {\r\n\t\t\t\t$array.each(this.baseSprites, (sprite) => {\r\n\t\t\t\t\tconst svg = sprite.paper.svg;\r\n\t\t\t\t\tsvg.setAttribute(\"viewBox\", \"0 0 \" + svg.clientWidth + \" \" + svg.clientHeight);\r\n\t\t\t\t});\r\n\t\t\t});\r\n\r\n\t\t\taddEventListener(\"afterprint\", () => {\r\n\t\t\t\t$array.each(this.baseSprites, (sprite) => {\r\n\t\t\t\t\tconst svg = sprite.paper.svg;\r\n\t\t\t\t\tsvg.removeAttribute(\"viewBox\");\r\n\t\t\t\t});\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Generates a unique chart system-wide ID.\r\n\t *\r\n\t * @return Generated ID\r\n\t */\r\n\tpublic getUniqueId(): string {\r\n\t\tlet uid = this._uidCount;\r\n\t\tthis._uidCount += 1;\r\n\t\treturn \"id-\" + uid;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a universal collection for mapping ids with objects.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @return Map collection\r\n\t */\r\n\tpublic get map(): Dictionary<string, any> {\r\n\t\tif (!this._map) {\r\n\t\t\tthis._map = new Dictionary<string, any>();\r\n\t\t}\r\n\t\treturn this._map;\r\n\t}\r\n\r\n\t/**\r\n\t * Caches value in object's cache.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param key    Key\r\n\t * @param value  Value\r\n\t * @param ttl    TTL in seconds\r\n\t */\r\n\tpublic setCache(key: string, value: any, ttl?: number): void {\r\n\t\tcache.set(this.uid, key, value, ttl);\r\n\t}\r\n\r\n\t/**\r\n\t * Retrieves cached value.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param key    Key\r\n\t * @param value  Value to return if cache is not available\r\n\t * @return Value\r\n\t */\r\n\tpublic getCache(key: string, value: any = undefined): any {\r\n\t\treturn cache.get(this.uid, key, value);\r\n\t}\r\n\r\n\t/**\r\n\t * Dispatches an event using own event dispatcher. Will automatically\r\n\t * populate event data object with event type and target (this element).\r\n\t * It also checks if there are any handlers registered for this sepecific\r\n\t * event.\r\n\t *\r\n\t * @param eventType Event type (name)\r\n\t * @param data      Data to pass into event handler(s)\r\n\t */\r\n\tpublic dispatch<Key extends keyof IRegistryEvents>(eventType: Key, data?: any): void {\r\n\t\t// @todo Implement proper type check\r\n\t\tif (this.events.isEnabled(eventType)) {\r\n\t\t\tif (data) {\r\n\t\t\t\tdata.type = eventType;\r\n\t\t\t\tdata.target = data.target || this;\r\n\t\t\t\t(<any>this.events).dispatch(eventType, {\r\n\t\t\t\t\ttype: eventType,\r\n\t\t\t\t\ttarget: this\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\t(<any>this.events).dispatch(eventType, {\r\n\t\t\t\t\ttype: eventType,\r\n\t\t\t\t\ttarget: this\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Works like `dispatch`, except event is triggered immediately, without\r\n\t * waiting for the next frame cycle.\r\n\t *\r\n\t * @param eventType Event type (name)\r\n\t * @param data      Data to pass into event handler(s)\r\n\t */\r\n\tpublic dispatchImmediately<Key extends keyof IRegistryEvents>(eventType: Key, data?: any): void {\r\n\t\t// @todo Implement proper type check\r\n\t\tif (this.events.isEnabled(eventType)) {\r\n\t\t\tif (data) {\r\n\t\t\t\tdata.type = eventType;\r\n\t\t\t\tdata.target = data.target || this;\r\n\t\t\t\t(<any>this.events).dispatchImmediately(eventType, data);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\t(<any>this.events).dispatchImmediately(eventType, {\r\n\t\t\t\t\ttype: eventType,\r\n\t\t\t\t\ttarget: this\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a unique placeholder suitable for the key.\r\n\t *\r\n\t * @param key  Key\r\n\t * @return Random string to be used as placeholder\r\n\t */\r\n\tpublic getPlaceholder(key: string): string {\r\n\t\tif ($type.hasValue(this._placeholders[key])) {\r\n\t\t\treturn this._placeholders[key];\r\n\t\t}\r\n\t\tthis._placeholders[key] = \"__amcharts_\" + key + \"_\" + $string.random(8) + \"__\";\r\n\t\treturn this._placeholders[key];\r\n\t}\r\n\r\n\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic addToInvalidComponents(component: Component) {\r\n\t\tif (component.baseId) {\r\n\t\t\t$array.move(this.invalidDatas[component.baseId], component);\r\n\t\t}\r\n\t\telse {\r\n\t\t\t$array.move(this.invalidDatas[\"noBase\"], component);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic removeFromInvalidComponents(component: Component) {\r\n\t\tif (component.baseId) {\r\n\t\t\t$array.remove(this.invalidDatas[component.baseId], component);\r\n\t\t}\r\n\r\n\t\t$array.remove(this.invalidDatas[\"noBase\"], component);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic addToInvalidSprites(sprite: Sprite) {\r\n\t\tif (sprite.baseId) {\r\n\t\t\t$array.add(this.invalidSprites[sprite.baseId], sprite);\r\n\t\t}\r\n\t\telse {\r\n\t\t\t$array.add(this.invalidSprites[\"noBase\"], sprite);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic removeFromInvalidSprites(sprite: Sprite) {\r\n\t\tif (sprite.baseId) {\r\n\t\t\t$array.remove(this.invalidSprites[sprite.baseId], sprite);\r\n\t\t}\r\n\r\n\t\t$array.remove(this.invalidSprites[\"noBase\"], sprite);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic addToInvalidPositions(sprite: Sprite) {\r\n\t\tif (sprite.baseId) {\r\n\t\t\t$array.add(this.invalidPositions[sprite.baseId], sprite);\r\n\t\t}\r\n\t\telse {\r\n\t\t\t$array.add(this.invalidPositions[\"noBase\"], sprite);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic removeFromInvalidPositions(sprite: Sprite) {\r\n\t\tif (sprite.baseId) {\r\n\t\t\t$array.remove(this.invalidPositions[sprite.baseId], sprite);\r\n\t\t}\r\n\r\n\t\t$array.remove(this.invalidPositions[\"noBase\"], sprite);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic addToInvalidLayouts(sprite: Container) {\r\n\t\tif (sprite.baseId) {\r\n\t\t\t$array.add(this.invalidLayouts[sprite.baseId], sprite);\r\n\t\t}\r\n\t\telse {\r\n\t\t\t$array.add(this.invalidLayouts[\"noBase\"], sprite);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic removeFromInvalidLayouts(sprite: Container) {\r\n\t\tif (sprite.baseId) {\r\n\t\t\t$array.remove(this.invalidLayouts[sprite.baseId], sprite);\r\n\t\t}\r\n\r\n\t\t$array.remove(this.invalidLayouts[\"noBase\"], sprite);\r\n\t}\r\n}\r\n\r\n/**\r\n * A singleton global instance of [[Registry]].\r\n *\r\n * @ignore Exclude from docs\r\n */\r\nexport let registry = new Registry();\r\n\r\n\r\n/**\r\n * Returns `true` if object is an instance of the class. It's the same as `instanceof` except it doesn't need to import the class.\r\n *\r\n * @param object Object\r\n * @param name Class name\r\n * @return Is instance of class\r\n */\r\nexport function is<A>(object: any, name: string): object is A {\r\n\tconst x = registry.registeredClasses[name];\r\n\treturn x != null && object instanceof x;\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}