{"ast":null,"code":"import { geoProjection as projection } from \"d3-geo\";\nimport { abs, asin, cos, epsilon, halfPi, pi, sin, sqrt2 } from \"./math.js\";\nexport function mollweideBromleyTheta(cp, phi) {\n  var cpsinPhi = cp * sin(phi),\n    i = 30,\n    delta;\n  do phi -= delta = (phi + sin(phi) - cpsinPhi) / (1 + cos(phi)); while (abs(delta) > epsilon && --i > 0);\n  return phi / 2;\n}\nexport function mollweideBromleyRaw(cx, cy, cp) {\n  function forward(lambda, phi) {\n    return [cx * lambda * cos(phi = mollweideBromleyTheta(cp, phi)), cy * sin(phi)];\n  }\n  forward.invert = function (x, y) {\n    return y = asin(y / cy), [x / (cx * cos(y)), asin((2 * y + sin(2 * y)) / cp)];\n  };\n  return forward;\n}\nexport var mollweideRaw = mollweideBromleyRaw(sqrt2 / halfPi, sqrt2, pi);\nexport default function () {\n  return projection(mollweideRaw).scale(169.529);\n}","map":{"version":3,"names":["geoProjection","projection","abs","asin","cos","epsilon","halfPi","pi","sin","sqrt2","mollweideBromleyTheta","cp","phi","cpsinPhi","i","delta","mollweideBromleyRaw","cx","cy","forward","lambda","invert","x","y","mollweideRaw","scale"],"sources":["/home/josh/Documents/projects/subs/vue_subs/node_modules/d3-geo-projection/src/mollweide.js"],"sourcesContent":["import {geoProjection as projection} from \"d3-geo\";\nimport {abs, asin, cos, epsilon, halfPi, pi, sin, sqrt2} from \"./math.js\";\n\nexport function mollweideBromleyTheta(cp, phi) {\n  var cpsinPhi = cp * sin(phi), i = 30, delta;\n  do phi -= delta = (phi + sin(phi) - cpsinPhi) / (1 + cos(phi));\n  while (abs(delta) > epsilon && --i > 0);\n  return phi / 2;\n}\n\nexport function mollweideBromleyRaw(cx, cy, cp) {\n\n  function forward(lambda, phi) {\n    return [cx * lambda * cos(phi = mollweideBromleyTheta(cp, phi)), cy * sin(phi)];\n  }\n\n  forward.invert = function(x, y) {\n    return y = asin(y / cy), [x / (cx * cos(y)), asin((2 * y + sin(2 * y)) / cp)];\n  };\n\n  return forward;\n}\n\nexport var mollweideRaw = mollweideBromleyRaw(sqrt2 / halfPi, sqrt2, pi);\n\nexport default function() {\n  return projection(mollweideRaw)\n      .scale(169.529);\n}\n"],"mappings":"AAAA,SAAQA,aAAa,IAAIC,UAAU,QAAO,QAAQ;AAClD,SAAQC,GAAG,EAAEC,IAAI,EAAEC,GAAG,EAAEC,OAAO,EAAEC,MAAM,EAAEC,EAAE,EAAEC,GAAG,EAAEC,KAAK,QAAO,WAAW;AAEzE,OAAO,SAASC,qBAAqBA,CAACC,EAAE,EAAEC,GAAG,EAAE;EAC7C,IAAIC,QAAQ,GAAGF,EAAE,GAAGH,GAAG,CAACI,GAAG,CAAC;IAAEE,CAAC,GAAG,EAAE;IAAEC,KAAK;EAC3C,GAAGH,GAAG,IAAIG,KAAK,GAAG,CAACH,GAAG,GAAGJ,GAAG,CAACI,GAAG,CAAC,GAAGC,QAAQ,KAAK,CAAC,GAAGT,GAAG,CAACQ,GAAG,CAAC,CAAC,CAAC,QACxDV,GAAG,CAACa,KAAK,CAAC,GAAGV,OAAO,IAAI,EAAES,CAAC,GAAG,CAAC;EACtC,OAAOF,GAAG,GAAG,CAAC;AAChB;AAEA,OAAO,SAASI,mBAAmBA,CAACC,EAAE,EAAEC,EAAE,EAAEP,EAAE,EAAE;EAE9C,SAASQ,OAAOA,CAACC,MAAM,EAAER,GAAG,EAAE;IAC5B,OAAO,CAACK,EAAE,GAAGG,MAAM,GAAGhB,GAAG,CAACQ,GAAG,GAAGF,qBAAqB,CAACC,EAAE,EAAEC,GAAG,CAAC,CAAC,EAAEM,EAAE,GAAGV,GAAG,CAACI,GAAG,CAAC,CAAC;EACjF;EAEAO,OAAO,CAACE,MAAM,GAAG,UAASC,CAAC,EAAEC,CAAC,EAAE;IAC9B,OAAOA,CAAC,GAAGpB,IAAI,CAACoB,CAAC,GAAGL,EAAE,CAAC,EAAE,CAACI,CAAC,IAAIL,EAAE,GAAGb,GAAG,CAACmB,CAAC,CAAC,CAAC,EAAEpB,IAAI,CAAC,CAAC,CAAC,GAAGoB,CAAC,GAAGf,GAAG,CAAC,CAAC,GAAGe,CAAC,CAAC,IAAIZ,EAAE,CAAC,CAAC;EAC/E,CAAC;EAED,OAAOQ,OAAO;AAChB;AAEA,OAAO,IAAIK,YAAY,GAAGR,mBAAmB,CAACP,KAAK,GAAGH,MAAM,EAAEG,KAAK,EAAEF,EAAE,CAAC;AAExE,eAAe,YAAW;EACxB,OAAON,UAAU,CAACuB,YAAY,CAAC,CAC1BC,KAAK,CAAC,OAAO,CAAC;AACrB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}