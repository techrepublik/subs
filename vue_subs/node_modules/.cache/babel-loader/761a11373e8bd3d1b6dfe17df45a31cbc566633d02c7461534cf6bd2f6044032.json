{"ast":null,"code":"import { geoAzimuthalEquidistantRaw as azimuthalEquidistantRaw, geoProjectionMutator as projectionMutator } from \"d3-geo\";\nimport { abs, asin, atan2, cos, degrees, epsilon, epsilon2, halfPi, pi, radians, round, sin, sqrt } from \"./math.js\";\nexport function gingeryRaw(rho, n) {\n  var k = 2 * pi / n,\n    rho2 = rho * rho;\n  function forward(lambda, phi) {\n    var p = azimuthalEquidistantRaw(lambda, phi),\n      x = p[0],\n      y = p[1],\n      r2 = x * x + y * y;\n    if (r2 > rho2) {\n      var r = sqrt(r2),\n        theta = atan2(y, x),\n        theta0 = k * round(theta / k),\n        alpha = theta - theta0,\n        rhoCosAlpha = rho * cos(alpha),\n        k_ = (rho * sin(alpha) - alpha * sin(rhoCosAlpha)) / (halfPi - rhoCosAlpha),\n        s_ = gingeryLength(alpha, k_),\n        e = (pi - rho) / gingeryIntegrate(s_, rhoCosAlpha, pi);\n      x = r;\n      var i = 50,\n        delta;\n      do {\n        x -= delta = (rho + gingeryIntegrate(s_, rhoCosAlpha, x) * e - r) / (s_(x) * e);\n      } while (abs(delta) > epsilon && --i > 0);\n      y = alpha * sin(x);\n      if (x < halfPi) y -= k_ * (x - halfPi);\n      var s = sin(theta0),\n        c = cos(theta0);\n      p[0] = x * c - y * s;\n      p[1] = x * s + y * c;\n    }\n    return p;\n  }\n  forward.invert = function (x, y) {\n    var r2 = x * x + y * y;\n    if (r2 > rho2) {\n      var r = sqrt(r2),\n        theta = atan2(y, x),\n        theta0 = k * round(theta / k),\n        dTheta = theta - theta0;\n      x = r * cos(dTheta);\n      y = r * sin(dTheta);\n      var x_halfPi = x - halfPi,\n        sinx = sin(x),\n        alpha = y / sinx,\n        delta = x < halfPi ? Infinity : 0,\n        i = 10;\n      while (true) {\n        var rhosinAlpha = rho * sin(alpha),\n          rhoCosAlpha = rho * cos(alpha),\n          sinRhoCosAlpha = sin(rhoCosAlpha),\n          halfPi_RhoCosAlpha = halfPi - rhoCosAlpha,\n          k_ = (rhosinAlpha - alpha * sinRhoCosAlpha) / halfPi_RhoCosAlpha,\n          s_ = gingeryLength(alpha, k_);\n        if (abs(delta) < epsilon2 || ! --i) break;\n        alpha -= delta = (alpha * sinx - k_ * x_halfPi - y) / (sinx - x_halfPi * 2 * (halfPi_RhoCosAlpha * (rhoCosAlpha + alpha * rhosinAlpha * cos(rhoCosAlpha) - sinRhoCosAlpha) - rhosinAlpha * (rhosinAlpha - alpha * sinRhoCosAlpha)) / (halfPi_RhoCosAlpha * halfPi_RhoCosAlpha));\n      }\n      r = rho + gingeryIntegrate(s_, rhoCosAlpha, x) * (pi - rho) / gingeryIntegrate(s_, rhoCosAlpha, pi);\n      theta = theta0 + alpha;\n      x = r * cos(theta);\n      y = r * sin(theta);\n    }\n    return azimuthalEquidistantRaw.invert(x, y);\n  };\n  return forward;\n}\nfunction gingeryLength(alpha, k) {\n  return function (x) {\n    var y_ = alpha * cos(x);\n    if (x < halfPi) y_ -= k;\n    return sqrt(1 + y_ * y_);\n  };\n}\n\n// Numerical integration: trapezoidal rule.\nfunction gingeryIntegrate(f, a, b) {\n  var n = 50,\n    h = (b - a) / n,\n    s = f(a) + f(b);\n  for (var i = 1, x = a; i < n; ++i) s += 2 * f(x += h);\n  return s * 0.5 * h;\n}\nexport default function () {\n  var n = 6,\n    rho = 30 * radians,\n    cRho = cos(rho),\n    sRho = sin(rho),\n    m = projectionMutator(gingeryRaw),\n    p = m(rho, n),\n    stream_ = p.stream,\n    epsilon = 1e-2,\n    cr = -cos(epsilon * radians),\n    sr = sin(epsilon * radians);\n  p.radius = function (_) {\n    if (!arguments.length) return rho * degrees;\n    cRho = cos(rho = _ * radians);\n    sRho = sin(rho);\n    return m(rho, n);\n  };\n  p.lobes = function (_) {\n    if (!arguments.length) return n;\n    return m(rho, n = +_);\n  };\n  p.stream = function (stream) {\n    var rotate = p.rotate(),\n      rotateStream = stream_(stream),\n      sphereStream = (p.rotate([0, 0]), stream_(stream));\n    p.rotate(rotate);\n    rotateStream.sphere = function () {\n      sphereStream.polygonStart(), sphereStream.lineStart();\n      for (var i = 0, delta = 2 * pi / n, phi = 0; i < n; ++i, phi -= delta) {\n        sphereStream.point(atan2(sr * cos(phi), cr) * degrees, asin(sr * sin(phi)) * degrees);\n        sphereStream.point(atan2(sRho * cos(phi - delta / 2), cRho) * degrees, asin(sRho * sin(phi - delta / 2)) * degrees);\n      }\n      sphereStream.lineEnd(), sphereStream.polygonEnd();\n    };\n    return rotateStream;\n  };\n  return p.rotate([90, -40]).scale(91.7095).clipAngle(180 - 1e-3);\n}","map":{"version":3,"names":["geoAzimuthalEquidistantRaw","azimuthalEquidistantRaw","geoProjectionMutator","projectionMutator","abs","asin","atan2","cos","degrees","epsilon","epsilon2","halfPi","pi","radians","round","sin","sqrt","gingeryRaw","rho","n","k","rho2","forward","lambda","phi","p","x","y","r2","r","theta","theta0","alpha","rhoCosAlpha","k_","s_","gingeryLength","e","gingeryIntegrate","i","delta","s","c","invert","dTheta","x_halfPi","sinx","Infinity","rhosinAlpha","sinRhoCosAlpha","halfPi_RhoCosAlpha","y_","f","a","b","h","cRho","sRho","m","stream_","stream","cr","sr","radius","_","arguments","length","lobes","rotate","rotateStream","sphereStream","sphere","polygonStart","lineStart","point","lineEnd","polygonEnd","scale","clipAngle"],"sources":["/home/josh/Documents/projects/subs/vue_subs/node_modules/d3-geo-projection/src/gingery.js"],"sourcesContent":["import {geoAzimuthalEquidistantRaw as azimuthalEquidistantRaw, geoProjectionMutator as projectionMutator} from \"d3-geo\";\nimport {abs, asin, atan2, cos, degrees, epsilon, epsilon2, halfPi, pi, radians, round, sin, sqrt} from \"./math.js\";\n\nexport function gingeryRaw(rho, n) {\n  var k = 2 * pi / n,\n      rho2 = rho * rho;\n\n  function forward(lambda, phi) {\n    var p = azimuthalEquidistantRaw(lambda, phi),\n        x = p[0],\n        y = p[1],\n        r2 = x * x + y * y;\n\n    if (r2 > rho2) {\n      var r = sqrt(r2),\n          theta = atan2(y, x),\n          theta0 = k * round(theta / k),\n          alpha = theta - theta0,\n          rhoCosAlpha = rho * cos(alpha),\n          k_ = (rho * sin(alpha) - alpha * sin(rhoCosAlpha)) / (halfPi - rhoCosAlpha),\n          s_ = gingeryLength(alpha, k_),\n          e = (pi - rho) / gingeryIntegrate(s_, rhoCosAlpha, pi);\n\n      x = r;\n      var i = 50, delta;\n      do {\n        x -= delta = (rho + gingeryIntegrate(s_, rhoCosAlpha, x) * e - r) / (s_(x) * e);\n      } while (abs(delta) > epsilon && --i > 0);\n\n      y = alpha * sin(x);\n      if (x < halfPi) y -= k_ * (x - halfPi);\n\n      var s = sin(theta0),\n          c = cos(theta0);\n      p[0] = x * c - y * s;\n      p[1] = x * s + y * c;\n    }\n    return p;\n  }\n\n  forward.invert = function(x, y) {\n    var r2 = x * x + y * y;\n    if (r2 > rho2) {\n      var r = sqrt(r2),\n          theta = atan2(y, x),\n          theta0 = k * round(theta / k),\n          dTheta = theta - theta0;\n\n      x = r * cos(dTheta);\n      y = r * sin(dTheta);\n\n      var x_halfPi = x - halfPi,\n          sinx = sin(x),\n          alpha = y / sinx,\n          delta = x < halfPi ? Infinity : 0,\n          i = 10;\n\n      while (true) {\n        var rhosinAlpha = rho * sin(alpha),\n            rhoCosAlpha = rho * cos(alpha),\n            sinRhoCosAlpha = sin(rhoCosAlpha),\n            halfPi_RhoCosAlpha = halfPi - rhoCosAlpha,\n            k_ = (rhosinAlpha - alpha * sinRhoCosAlpha) / halfPi_RhoCosAlpha,\n            s_ = gingeryLength(alpha, k_);\n\n        if (abs(delta) < epsilon2 || !--i) break;\n\n        alpha -= delta = (alpha * sinx - k_ * x_halfPi - y) / (\n          sinx - x_halfPi * 2 * (\n            halfPi_RhoCosAlpha * (rhoCosAlpha + alpha * rhosinAlpha * cos(rhoCosAlpha) - sinRhoCosAlpha) -\n            rhosinAlpha * (rhosinAlpha - alpha * sinRhoCosAlpha)\n          ) / (halfPi_RhoCosAlpha * halfPi_RhoCosAlpha));\n      }\n      r = rho + gingeryIntegrate(s_, rhoCosAlpha, x) * (pi - rho) / gingeryIntegrate(s_, rhoCosAlpha, pi);\n      theta = theta0 + alpha;\n      x = r * cos(theta);\n      y = r * sin(theta);\n    }\n    return azimuthalEquidistantRaw.invert(x, y);\n  };\n\n  return forward;\n}\n\nfunction gingeryLength(alpha, k) {\n  return function(x) {\n    var y_ = alpha * cos(x);\n    if (x < halfPi) y_ -= k;\n    return sqrt(1 + y_ * y_);\n  };\n}\n\n// Numerical integration: trapezoidal rule.\nfunction gingeryIntegrate(f, a, b) {\n  var n = 50,\n      h = (b - a) / n,\n      s = f(a) + f(b);\n  for (var i = 1, x = a; i < n; ++i) s += 2 * f(x += h);\n  return s * 0.5 * h;\n}\n\nexport default function() {\n  var n = 6,\n      rho = 30 * radians,\n      cRho = cos(rho),\n      sRho = sin(rho),\n      m = projectionMutator(gingeryRaw),\n      p = m(rho, n),\n      stream_ = p.stream,\n      epsilon = 1e-2,\n      cr = -cos(epsilon * radians),\n      sr = sin(epsilon * radians);\n\n  p.radius = function(_) {\n    if (!arguments.length) return rho * degrees;\n    cRho = cos(rho = _ * radians);\n    sRho = sin(rho);\n    return m(rho, n);\n  };\n\n  p.lobes = function(_) {\n    if (!arguments.length) return n;\n    return m(rho, n = +_);\n  };\n\n  p.stream = function(stream) {\n    var rotate = p.rotate(),\n        rotateStream = stream_(stream),\n        sphereStream = (p.rotate([0, 0]), stream_(stream));\n    p.rotate(rotate);\n    rotateStream.sphere = function() {\n      sphereStream.polygonStart(), sphereStream.lineStart();\n      for (var i = 0, delta = 2 * pi / n, phi = 0; i < n; ++i, phi -= delta) {\n        sphereStream.point(atan2(sr * cos(phi), cr) * degrees, asin(sr * sin(phi)) * degrees);\n        sphereStream.point(atan2(sRho * cos(phi - delta / 2), cRho) * degrees, asin(sRho * sin(phi - delta / 2)) * degrees);\n      }\n      sphereStream.lineEnd(), sphereStream.polygonEnd();\n    };\n    return rotateStream;\n  };\n\n  return p\n      .rotate([90, -40])\n      .scale(91.7095)\n      .clipAngle(180 - 1e-3);\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}