{"ast":null,"code":"/**\r\n * Functionality for drawing triangles.\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\nimport { Sprite } from \"../Sprite\";\nimport { registry } from \"../Registry\";\nimport * as $path from \"../rendering/Path\";\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n/**\r\n * Used to draw a triangle.\r\n *\r\n * @see {@link ITriangleEvents} for a list of available events\r\n * @see {@link ITriangleAdapters} for a list of available Adapters\r\n */\nvar Triangle = /** @class */function (_super) {\n  __extends(Triangle, _super);\n  /**\r\n   * Constructor\r\n   */\n  function Triangle() {\n    var _this = _super.call(this) || this;\n    _this.className = \"Triangle\";\n    _this.element = _this.paper.add(\"path\");\n    _this.direction = \"top\";\n    _this.applyTheme();\n    return _this;\n  }\n  /**\r\n   * Draws the element.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  Triangle.prototype.draw = function () {\n    _super.prototype.draw.call(this);\n    var w = this.pixelWidth;\n    var h = this.pixelHeight;\n    var path;\n    switch (this.direction) {\n      case \"right\":\n        path = $path.moveTo({\n          x: 0,\n          y: 0\n        }) + $path.lineTo({\n          x: w,\n          y: h / 2\n        }) + $path.lineTo({\n          x: 0,\n          y: h\n        }) + $path.closePath();\n        break;\n      case \"left\":\n        path = $path.moveTo({\n          x: w,\n          y: 0\n        }) + $path.lineTo({\n          x: 0,\n          y: h / 2\n        }) + $path.lineTo({\n          x: w,\n          y: h\n        }) + $path.closePath();\n        break;\n      case \"bottom\":\n        path = $path.moveTo({\n          x: 0,\n          y: 0\n        }) + $path.lineTo({\n          x: w,\n          y: 0\n        }) + $path.lineTo({\n          x: w / 2,\n          y: h\n        }) + $path.closePath();\n        break;\n      case \"top\":\n        path = $path.moveTo({\n          x: w / 2,\n          y: 0\n        }) + $path.lineTo({\n          x: w,\n          y: h\n        }) + $path.lineTo({\n          x: 0,\n          y: h\n        }) + $path.closePath();\n        break;\n    }\n    this.path = path;\n  };\n  Object.defineProperty(Triangle.prototype, \"direction\", {\n    /**\r\n     * Returns direction of a triangle\r\n     *\r\n     * @return value\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"direction\");\n    },\n    /**\r\n     * Sets direction of a triangle\r\n     *\r\n     * @param value\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"direction\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return Triangle;\n}(Sprite);\nexport { Triangle };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\nregistry.registeredClasses[\"Triangle\"] = Triangle;","map":{"version":3,"names":["Sprite","registry","$path","Triangle","_super","__extends","_this","call","className","element","paper","add","direction","applyTheme","prototype","draw","w","pixelWidth","h","pixelHeight","path","moveTo","x","y","lineTo","closePath","Object","defineProperty","get","getPropertyValue","set","value","setPropertyValue","registeredClasses"],"sources":["../../../../../src/.internal/core/elements/Triangle.ts"],"sourcesContent":["/**\r\n * Functionality for drawing triangles.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Sprite, ISpriteProperties, ISpriteAdapters, ISpriteEvents } from \"../Sprite\";\r\nimport { registry } from \"../Registry\";\r\nimport * as $path from \"../rendering/Path\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[Triangle]].\r\n */\r\nexport interface ITriangleProperties extends ISpriteProperties {\r\n\tdirection: \"left\" | \"right\" | \"top\" | \"bottom\"\r\n}\r\n\r\n/**\r\n * Defines events for [[Triangle]].\r\n */\r\nexport interface ITriangleEvents extends ISpriteEvents { }\r\n\r\n/**\r\n * Defines adapters for [[Triangle]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ITriangleAdapters extends ISpriteAdapters, ITriangleProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Used to draw a triangle.\r\n *\r\n * @see {@link ITriangleEvents} for a list of available events\r\n * @see {@link ITriangleAdapters} for a list of available Adapters\r\n */\r\nexport class Triangle extends Sprite {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: ITriangleProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: ITriangleAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: ITriangleEvents;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"Triangle\";\r\n\t\tthis.element = this.paper.add(\"path\");\r\n\t\tthis.direction = \"top\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Draws the element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic draw(): void {\r\n\t\tsuper.draw();\r\n\t\tlet w: number = this.pixelWidth;\r\n\t\tlet h: number = this.pixelHeight;\r\n\r\n\t\tlet path: string;\r\n\r\n\r\n\r\n\t\tswitch (this.direction) {\r\n\t\t\tcase \"right\":\r\n\t\t\t\tpath = $path.moveTo({ x: 0, y: 0 })\r\n\t\t\t\t\t+ $path.lineTo({ x: w, y: h / 2 })\r\n\t\t\t\t\t+ $path.lineTo({ x: 0, y: h })\r\n\t\t\t\t\t+ $path.closePath();\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"left\":\r\n\t\t\t\tpath = $path.moveTo({ x: w, y: 0 })\r\n\t\t\t\t\t+ $path.lineTo({ x: 0, y: h / 2 })\r\n\t\t\t\t\t+ $path.lineTo({ x: w, y: h })\r\n\t\t\t\t\t+ $path.closePath();\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"bottom\":\r\n\t\t\t\tpath = $path.moveTo({ x: 0, y: 0 })\r\n\t\t\t\t\t+ $path.lineTo({ x: w, y: 0 })\r\n\t\t\t\t\t+ $path.lineTo({ x: w / 2, y: h })\r\n\t\t\t\t\t+ $path.closePath();\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"top\":\r\n\t\t\t\tpath = $path.moveTo({ x: w / 2, y: 0 })\r\n\t\t\t\t\t+ $path.lineTo({ x: w, y: h })\r\n\t\t\t\t\t+ $path.lineTo({ x: 0, y: h })\r\n\t\t\t\t\t+ $path.closePath();\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\r\n\t\tthis.path = path;\r\n\t}\r\n\r\n\t/**\r\n\t * Sets direction of a triangle\r\n\t *\r\n\t * @param value\r\n\t */\r\n\tpublic set direction(value: \"left\" | \"right\" | \"top\" | \"bottom\") {\r\n\t\tthis.setPropertyValue(\"direction\", value, true);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Returns direction of a triangle\r\n\t *\r\n\t * @return value\r\n\t */\r\n\tpublic get direction(): \"left\" | \"right\" | \"top\" | \"bottom\" {\r\n\t\treturn this.getPropertyValue(\"direction\");\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Triangle\"] = Triangle;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}