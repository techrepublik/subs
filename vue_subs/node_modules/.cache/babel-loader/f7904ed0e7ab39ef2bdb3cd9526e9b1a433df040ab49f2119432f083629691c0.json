{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n/**\r\n * This module contains a base class for an SVG filter.\r\n *\r\n * Filters can be used to decorate, change and transform just about any DOM\r\n * element.\r\n *\r\n * A Filter works by applying one or more effects (primitives) to SVG element.\r\n *\r\n * For more information on how SVG filters work, refer to\r\n * [this MDN tutorial](https://developer.mozilla.org/en-US/docs/Web/SVG/Tutorial/SVG_Filters_Tutorial).\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\nimport { BaseObject } from \"../../Base\";\nimport { getGhostPaper } from \"../Paper\";\nimport { Animation, AnimationDisposer } from \"../../utils/Animation\";\nimport { List } from \"../../utils/List\";\nimport * as $object from \"../../utils/Object\";\nimport * as $iter from \"../../utils/Iterator\";\n;\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n/**\r\n * Base filter class.\r\n *\r\n * This class while can be instantiated will not do anything. It is just a base\r\n * functionality for any other \"real\" filters to extend.\r\n *\r\n * Filters can be used to decorate, change and transform just about any DOM\r\n * element.\r\n *\r\n * A Filter works by applying one or more effects (primitives) to SVG element.\r\n *\r\n * For more information on how SVG filters work, refer to\r\n * [this MDN tutorial](https://developer.mozilla.org/en-US/docs/Web/SVG/Tutorial/SVG_Filters_Tutorial).\r\n *\r\n * @todo Example\r\n */\nvar Filter = /** @class */function (_super) {\n  __extends(Filter, _super);\n  /**\r\n   * Constructor\r\n   */\n  function Filter() {\n    var _this =\n    // Init\n    _super.call(this) || this;\n    /**\r\n     * A storage for Filter property/value pairs.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @see {@link FilterProperties}\r\n     */\n    _this.properties = {};\n    /**\r\n     * Identifies if this object is a \"template\" and should not be treated as\r\n     * real object that is drawn or actually used in the chart.\r\n     */\n    _this.isTemplate = false;\n    /**\r\n     * [_scale description]\r\n     *\r\n     * @todo Description\r\n     */\n    _this._scale = 1;\n    /**\r\n     * [_nonScaling description]\r\n     *\r\n     * @todo Description\r\n     */\n    _this._nonScaling = true;\n    _this.className = \"Filter\";\n    // Create a list to hold primitives (effect elements)\n    _this.filterPrimitives = new List();\n    _this.properties.filterUnits = \"objectBoundingBox\";\n    // Automatically add added primitives to `_disposers` so they are discarded\n    // when Filter object is destroyed (disposed)\n    _this.filterPrimitives.events.on(\"inserted\", function (ev) {\n      _this._disposers.push(ev.newValue);\n    });\n    // Set default dimensions\n    _this.width = 120;\n    _this.height = 120;\n    // Apply theme\n    _this.applyTheme();\n    return _this;\n  }\n  /**\r\n   * Appends actual filter elements to the filter group.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param filterElement An SVG `<group>` element to add filter element to\r\n   */\n  Filter.prototype.appendPrimitives = function (filterElement) {\n    $iter.each(this.filterPrimitives.iterator(), function (filterPrimitive) {\n      filterElement.add(filterPrimitive);\n    });\n  };\n  /**\r\n   * Uses Transitions filter's values from current to target. This is used to\r\n   * smoothly appear filter, rather than it pop into effect.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param animationOptions  Animation options\r\n   * @param duration          Duration in milliseconds\r\n   * @param easing            Easing function\r\n   * @return Animation instance\r\n   */\n  Filter.prototype.animate = function (animationOptions, duration, easing) {\n    var animation = new Animation(this, animationOptions, duration, easing).start();\n    return animation;\n  };\n  Object.defineProperty(Filter.prototype, \"width\", {\n    /**\r\n     * @return Width (%)\r\n     */\n    get: function () {\n      return this.properties[\"width\"];\n    },\n    /**\r\n     * Width of the filter element in percent.\r\n     *\r\n     * If the filter is designed to \"bleed out\" of the original target element,\r\n     * like for example a shadow, you need this bigger than 100, or the\r\n     * non-fitting parts will be clipped.\r\n     *\r\n     * @default 120\r\n     * @param value Width (px)\r\n     */\n    set: function (value) {\n      this.properties[\"width\"] = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Filter.prototype, \"height\", {\n    /**\r\n     * @return Height\r\n     */\n    get: function () {\n      return this.properties[\"height\"];\n    },\n    /**\r\n     * Height of the filter element in percent.\r\n     *\r\n     * If the filter is designed to \"bleed out\" of the original target element,\r\n     * like for example a shadow, you need this bigger than 100, or the\r\n     * non-fitting parts will be clipped.\r\n     *\r\n     * @default 120\r\n     * @param value Height (%)\r\n     */\n    set: function (value) {\n      this.properties[\"height\"] = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Copies properties from another [[Filter]] object.\r\n   *\r\n   * @param filter Source [[Filter]] object\r\n   */\n  Filter.prototype.copyFrom = function (filter) {\n    var _this = this;\n    _super.prototype.copyFrom.call(this, filter);\n    $object.each(filter.properties, function (key, value) {\n      _this[key] = value;\n    });\n  };\n  Object.defineProperty(Filter.prototype, \"paper\", {\n    /**\r\n     * @return Paper\r\n     */\n    get: function () {\n      if (this._paper) {\n        return this._paper;\n      }\n      return getGhostPaper();\n    },\n    /**\r\n     * Sets [[Paper]] instance to create filter's elements in.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param paper  Paper\r\n     */\n    set: function (paper) {\n      if (this._paper != paper) {\n        this._paper = paper;\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Filter.prototype, \"animations\", {\n    /**\r\n     * All animations currently in play.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @return List of animations\r\n     */\n    get: function () {\n      if (!this._animations) {\n        this._animations = [];\n        this._disposers.push(new AnimationDisposer(this._animations));\n      }\n      return this._animations;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Filter.prototype, \"scale\", {\n    /**\r\n     * @ignore Exclude from docs\r\n     */\n    get: function () {\n      return this._scale;\n    },\n    /**\r\n     * [[Sprite]] uses this method to inform filter about it's scale.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\n    set: function (value) {\n      this._scale = value;\n      this.updateScale();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Updates filter properties which depend on scale.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  Filter.prototype.updateScale = function () {\n    // Dummy method for extending classes to override.\n  };\n  Object.defineProperty(Filter.prototype, \"filterUnits\", {\n    /**\r\n     * @return Filter units\r\n     */\n    get: function () {\n      return this.properties.filterUnits;\n    },\n    /**\r\n     * Which units are used when drawing filter.\r\n     *\r\n     * Use `\"userSpaceOnUse\"` when applying filters on a perfectly straight line.\r\n     *\r\n     * @since 4.9.17\r\n     * @default objectBoundingBox\r\n     * @param value Filter units\r\n     */\n    set: function (value) {\n      this.properties.filterUnits = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Filter.prototype, \"nonScaling\", {\n    /**\r\n     * @return Non scaling?\r\n     */\n    get: function () {\n      return this._nonScaling;\n    },\n    /**\r\n     * If a filter is non scaling, it will look the same even if the sprite is\r\n     * scaled, otherwise filter will scale together with a [[Sprite]].\r\n     *\r\n     * @default false\r\n     * @param value  Non scaling?\r\n     */\n    set: function (value) {\n      this._nonScaling = value;\n      if (!value) {\n        this._scale = 1;\n      }\n      this.updateScale();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Filter.prototype, \"sprite\", {\n    /**\r\n     * A target element this filter is currently attached to.\r\n     *\r\n     * We need to keep track of it because one filter can be used for just one\r\n     * element, so we have to remove it from the old \"parent\" when attaching to\r\n     * the new one.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param value  Target element\r\n     */\n    set: function (value) {\n      this.setSprite(value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Sets filter's target element.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param value  Element filter is being attached to\r\n   */\n  Filter.prototype.setSprite = function (value) {\n    if (this._sprite && this._sprite != value) {\n      this._sprite.filters.removeValue(this);\n    }\n    this._sprite = value;\n  };\n  return Filter;\n}(BaseObject);\nexport { Filter };","map":{"version":3,"names":["BaseObject","getGhostPaper","Animation","AnimationDisposer","List","$object","$iter","Filter","_super","__extends","_this","call","properties","isTemplate","_scale","_nonScaling","className","filterPrimitives","filterUnits","events","on","ev","_disposers","push","newValue","width","height","applyTheme","prototype","appendPrimitives","filterElement","each","iterator","filterPrimitive","add","animate","animationOptions","duration","easing","animation","start","Object","defineProperty","get","set","value","copyFrom","filter","key","_paper","paper","_animations","updateScale","setSprite","_sprite","filters","removeValue"],"sources":["../../../../../../src/.internal/core/rendering/filters/Filter.ts"],"sourcesContent":["/**\r\n * This module contains a base class for an SVG filter.\r\n *\r\n * Filters can be used to decorate, change and transform just about any DOM\r\n * element.\r\n *\r\n * A Filter works by applying one or more effects (primitives) to SVG element.\r\n *\r\n * For more information on how SVG filters work, refer to\r\n * [this MDN tutorial](https://developer.mozilla.org/en-US/docs/Web/SVG/Tutorial/SVG_Filters_Tutorial).\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { BaseObject } from \"../../Base\";\r\nimport { Paper, getGhostPaper } from \"../Paper\";\r\nimport { Group } from \"../Group\";\r\nimport { AMElement } from \"../AMElement\";\r\nimport { Animation, IAnimatable, IAnimationOptions, AnimationDisposer } from \"../../utils/Animation\";\r\nimport { List } from \"../../utils/List\";\r\nimport { Sprite } from \"../../Sprite\";\r\nimport * as $object from \"../../utils/Object\";\r\nimport * as $iter from \"../../utils/Iterator\";\r\nimport * as $type from \"../../utils/Type\";\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for a base filter\r\n */\r\nexport interface FilterProperties {\r\n\r\n\t/**\r\n\t * Width of the filter in percent.\r\n\t *\r\n\t * @default 120\r\n\t */\r\n\twidth: number;\r\n\r\n\t/**\r\n\t * Height of the filter in percent.\r\n\t *\r\n\t * @default 120\r\n\t */\r\n\theight: number;\r\n\r\n  /**\r\n   * https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/filterUnits\r\n   */\r\n\tfilterUnits: \"userSpaceOnUse\" | \"objectBoundingBox\";\r\n\r\n};\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Base filter class.\r\n *\r\n * This class while can be instantiated will not do anything. It is just a base\r\n * functionality for any other \"real\" filters to extend.\r\n *\r\n * Filters can be used to decorate, change and transform just about any DOM\r\n * element.\r\n *\r\n * A Filter works by applying one or more effects (primitives) to SVG element.\r\n *\r\n * For more information on how SVG filters work, refer to\r\n * [this MDN tutorial](https://developer.mozilla.org/en-US/docs/Web/SVG/Tutorial/SVG_Filters_Tutorial).\r\n *\r\n * @todo Example\r\n */\r\nexport class Filter extends BaseObject implements IAnimatable {\r\n\r\n\t/**\r\n\t * List of animations currently running for the filter.\r\n\t */\r\n\tprotected _animations: $type.Optional<Array<Animation>>;\r\n\r\n\t/**\r\n\t * Contains a list of filter primitives (effects) applied by the filter.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic filterPrimitives: List<AMElement>;\r\n\r\n\t/**\r\n\t * Defines property types.\r\n\t */\r\n\tpublic _properties!: FilterProperties;\r\n\r\n\t/**\r\n\t * A storage for Filter property/value pairs.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @see {@link FilterProperties}\r\n\t */\r\n\tpublic properties: this[\"_properties\"] = <any>{};\r\n\t//public propertyValues = new Dictionary<FilterProperties, any>();\r\n\r\n\t/**\r\n\t * An SVG `<group>` element hold primitive (effect) definitions.\r\n\t */\r\n\tpublic filterElement: $type.Optional<Group>;\r\n\r\n\t/**\r\n\t * Identifies if this object is a \"template\" and should not be treated as\r\n\t * real object that is drawn or actually used in the chart.\r\n\t */\r\n\tpublic isTemplate: boolean = false;\r\n\r\n\t/**\r\n\t * A Paper instance to add element to.\r\n\t */\r\n\tprotected _paper: $type.Optional<Paper>;\r\n\r\n\t/**\r\n\t * [_scale description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _scale: number = 1;\r\n\r\n\t/**\r\n\t * [_nonScaling description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _nonScaling: boolean = true;\r\n\r\n\t/**\r\n\t * A target element this filter is currently attached to.\r\n\t *\r\n\t * We need to keep track of it because one filter can be used for just one\r\n\t * element, so we have to remove it from the old \"parent\" when attaching to\r\n\t * the new one.\r\n\t */\r\n\tprotected _sprite: $type.Optional<Sprite>;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"Filter\";\r\n\r\n\t\t// Create a list to hold primitives (effect elements)\r\n\t\tthis.filterPrimitives = new List<any>();\r\n\t\tthis.properties.filterUnits = \"objectBoundingBox\";\r\n\r\n\t\t// Automatically add added primitives to `_disposers` so they are discarded\r\n\t\t// when Filter object is destroyed (disposed)\r\n\t\tthis.filterPrimitives.events.on(\"inserted\", (ev) => {\r\n\t\t\tthis._disposers.push(ev.newValue);\r\n\t\t});\r\n\r\n\t\t// Set default dimensions\r\n\t\tthis.width = 120;\r\n\t\tthis.height = 120;\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Appends actual filter elements to the filter group.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param filterElement An SVG `<group>` element to add filter element to\r\n\t */\r\n\tpublic appendPrimitives(filterElement: Group): void {\r\n\t\t$iter.each(this.filterPrimitives.iterator(), (filterPrimitive) => {\r\n\t\t\tfilterElement.add(filterPrimitive);\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Uses Transitions filter's values from current to target. This is used to\r\n\t * smoothly appear filter, rather than it pop into effect.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param animationOptions  Animation options\r\n\t * @param duration          Duration in milliseconds\r\n\t * @param easing            Easing function\r\n\t * @return Animation instance\r\n\t */\r\n\tpublic animate(animationOptions: IAnimationOptions[] | IAnimationOptions, duration: number, easing?: (value: number) => number): Animation {\r\n\t\tlet animation: Animation = new Animation(this, animationOptions, duration, easing).start();\r\n\t\treturn animation;\r\n\t}\r\n\r\n\t/**\r\n\t * Width of the filter element in percent.\r\n\t *\r\n\t * If the filter is designed to \"bleed out\" of the original target element,\r\n\t * like for example a shadow, you need this bigger than 100, or the\r\n\t * non-fitting parts will be clipped.\r\n\t *\r\n\t * @default 120\r\n\t * @param value Width (px)\r\n\t */\r\n\tpublic set width(value: number) {\r\n\t\tthis.properties[\"width\"] = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @return Width (%)\r\n\t */\r\n\tpublic get width(): number {\r\n\t\treturn this.properties[\"width\"];\r\n\t}\r\n\r\n\t/**\r\n\t * Height of the filter element in percent.\r\n\t *\r\n\t * If the filter is designed to \"bleed out\" of the original target element,\r\n\t * like for example a shadow, you need this bigger than 100, or the\r\n\t * non-fitting parts will be clipped.\r\n\t *\r\n\t * @default 120\r\n\t * @param value Height (%)\r\n\t */\r\n\tpublic set height(value: number) {\r\n\t\tthis.properties[\"height\"] = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @return Height\r\n\t */\r\n\tpublic get height(): number {\r\n\t\treturn this.properties[\"height\"];\r\n\t}\r\n\r\n\t/**\r\n\t * Copies properties from another [[Filter]] object.\r\n\t *\r\n\t * @param filter Source [[Filter]] object\r\n\t */\r\n\tpublic copyFrom(filter: this): void {\r\n\t\tsuper.copyFrom(filter);\r\n\t\t$object.each(filter.properties, (key, value) => {\r\n\t\t\t(<any>this)[key] = value;\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Sets [[Paper]] instance to create filter's elements in.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param paper  Paper\r\n\t */\r\n\tpublic set paper(paper: Paper) {\r\n\t\tif (this._paper != paper) {\r\n\t\t\tthis._paper = paper;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Paper\r\n\t */\r\n\tpublic get paper(): Paper {\r\n\t\tif (this._paper) {\r\n\t\t\treturn this._paper;\r\n\t\t}\r\n\t\treturn getGhostPaper();\r\n\t}\r\n\r\n\t/**\r\n\t * All animations currently in play.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @return List of animations\r\n\t */\r\n\tpublic get animations(): Array<Animation> {\r\n\t\tif (!this._animations) {\r\n\t\t\tthis._animations = [];\r\n\t\t\tthis._disposers.push(new AnimationDisposer(this._animations));\r\n\t\t}\r\n\t\treturn this._animations;\r\n\t}\r\n\r\n\t/**\r\n\t * [[Sprite]] uses this method to inform filter about it's scale.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic set scale(value: number) {\r\n\t\tthis._scale = value;\r\n\t\tthis.updateScale();\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic get scale(): number {\r\n\t\treturn this._scale;\r\n\t}\r\n\r\n\t/**\r\n\t * Updates filter properties which depend on scale.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected updateScale() {\r\n\t\t// Dummy method for extending classes to override.\r\n\t}\r\n\r\n\t/**\r\n\t * Which units are used when drawing filter.\r\n\t *\r\n\t * Use `\"userSpaceOnUse\"` when applying filters on a perfectly straight line.\r\n\t *\r\n\t * @since 4.9.17\r\n\t * @default objectBoundingBox\r\n\t * @param value Filter units\r\n\t */\r\n\tpublic set filterUnits(value: \"objectBoundingBox\" | \"userSpaceOnUse\") {\r\n\t\tthis.properties.filterUnits = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @return Filter units\r\n\t */\r\n\tpublic get filterUnits(): \"objectBoundingBox\" | \"userSpaceOnUse\" {\r\n\t\treturn this.properties.filterUnits;\r\n\t}\r\n\r\n\t/**\r\n\t * If a filter is non scaling, it will look the same even if the sprite is\r\n\t * scaled, otherwise filter will scale together with a [[Sprite]].\r\n\t *\r\n\t * @default false\r\n\t * @param value  Non scaling?\r\n\t */\r\n\tpublic set nonScaling(value: boolean) {\r\n\t\tthis._nonScaling = value;\r\n\t\tif (!value) {\r\n\t\t\tthis._scale = 1;\r\n\t\t}\r\n\t\tthis.updateScale();\r\n\t}\r\n\r\n\t/**\r\n\t * @return Non scaling?\r\n\t */\r\n\tpublic get nonScaling(): boolean {\r\n\t\treturn this._nonScaling;\r\n\t}\r\n\r\n\t/**\r\n\t * A target element this filter is currently attached to.\r\n\t *\r\n\t * We need to keep track of it because one filter can be used for just one\r\n\t * element, so we have to remove it from the old \"parent\" when attaching to\r\n\t * the new one.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param value  Target element\r\n\t */\r\n\tpublic set sprite(value: Sprite) {\r\n\t\tthis.setSprite(value);\r\n\t}\r\n\r\n\t/**\r\n\t * Sets filter's target element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param value  Element filter is being attached to\r\n\t */\r\n\tprotected setSprite(value: Sprite): void {\r\n\t\tif (this._sprite && this._sprite != value) {\r\n\t\t\tthis._sprite.filters.removeValue(this);\r\n\t\t}\r\n\t\tthis._sprite = value;\r\n\t}\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}