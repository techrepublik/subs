{"ast":null,"code":"/**\r\n * Pointed shape module.\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\nimport { Sprite } from \"../Sprite\";\nimport * as $type from \"../utils/Type\";\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n/**\r\n * Draws a shape with a pointer.\r\n *\r\n * @see {@link IPointedShapeEvents} for a list of available events\r\n * @see {@link IPointedShapeAdapters} for a list of available Adapters\r\n */\nvar PointedShape = /** @class */function (_super) {\n  __extends(PointedShape, _super);\n  /**\r\n   * Constructor\r\n   */\n  function PointedShape() {\n    var _this = _super.call(this) || this;\n    _this.className = \"PointedShape\";\n    _this.pointerBaseWidth = 15;\n    _this.pointerLength = 10;\n    _this.pointerY = 0;\n    _this.pointerX = 0;\n    _this.applyTheme();\n    return _this;\n  }\n  /**\r\n   * Draws the element.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  PointedShape.prototype.draw = function () {\n    _super.prototype.draw.call(this);\n    if (!$type.isNumber(this.pointerX)) {\n      this.pointerX = this.pixelWidth / 2;\n    }\n    if (!$type.isNumber(this.pointerY)) {\n      this.pointerY = this.pixelHeight + 10;\n    }\n  };\n  Object.defineProperty(PointedShape.prototype, \"pointerBaseWidth\", {\n    /**\r\n     * @return Width (px)\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"pointerBaseWidth\");\n    },\n    /**\r\n     * A width of the pinter's (stem's) thick end (base) in pixels.\r\n     *\r\n     * @default 15\r\n     * @param value  Width (px)\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"pointerBaseWidth\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PointedShape.prototype, \"pointerLength\", {\n    /**\r\n     * @return Length (px)\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"pointerLength\");\n    },\n    /**\r\n     * A length of the pinter (stem) in pixels.\r\n     *\r\n     * @default 10\r\n     * @param value  Length (px)\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"pointerLength\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PointedShape.prototype, \"pointerX\", {\n    /**\r\n     * @return X\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"pointerX\");\n    },\n    /**\r\n     * X coordinate the shape is pointing to.\r\n     *\r\n     * @param value  X\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"pointerX\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PointedShape.prototype, \"pointerY\", {\n    /**\r\n     * @return Y\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"pointerY\");\n    },\n    /**\r\n     * Y coordinate the shape is pointing to.\r\n     *\r\n     * @param value  Y\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"pointerY\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return PointedShape;\n}(Sprite);\nexport { PointedShape };","map":{"version":3,"names":["Sprite","$type","PointedShape","_super","__extends","_this","call","className","pointerBaseWidth","pointerLength","pointerY","pointerX","applyTheme","prototype","draw","isNumber","pixelWidth","pixelHeight","Object","defineProperty","get","getPropertyValue","set","value","setPropertyValue"],"sources":["../../../../../src/.internal/core/elements/PointedShape.ts"],"sourcesContent":["/**\r\n * Pointed shape module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Sprite, ISpriteProperties, ISpriteAdapters, ISpriteEvents } from \"../Sprite\";\r\nimport * as $type from \"../utils/Type\";\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[PointedShape]].\r\n */\r\nexport interface IPointedShapeProperties extends ISpriteProperties {\r\n\r\n\t/**\r\n\t * A width of the pinter's (stem's) thick end (base) in pixels.\r\n\t *\r\n\t * @default 15\r\n\t */\r\n\tpointerBaseWidth?: number;\r\n\r\n\t/**\r\n\t * A length of the pinter (stem) in pixels.\r\n\t *\r\n\t * @default 10\r\n\t */\r\n\tpointerLength?: number;\r\n\r\n\t/**\r\n\t * X coordinate the shape is pointing to.\r\n\t */\r\n\tpointerX?: number;\r\n\r\n\t/**\r\n\t * Y coordinate the shape is pointing to.\r\n\t */\r\n\tpointerY?: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[PointedShape]].\r\n */\r\nexport interface IPointedShapeEvents extends ISpriteEvents { }\r\n\r\n/**\r\n * Defines adapters for [[PointedShape]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IPointedShapeAdapters extends ISpriteAdapters, IPointedShapeProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Draws a shape with a pointer.\r\n *\r\n * @see {@link IPointedShapeEvents} for a list of available events\r\n * @see {@link IPointedShapeAdapters} for a list of available Adapters\r\n */\r\nexport class PointedShape extends Sprite {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IPointedShapeProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IPointedShapeAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IPointedShapeEvents;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"PointedShape\";\r\n\t\tthis.pointerBaseWidth = 15;\r\n\t\tthis.pointerLength = 10;\r\n\t\tthis.pointerY = 0;\r\n\t\tthis.pointerX = 0;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Draws the element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic draw(): void {\r\n\t\tsuper.draw();\r\n\t\tif (!$type.isNumber(this.pointerX)) {\r\n\t\t\tthis.pointerX = this.pixelWidth / 2;\r\n\t\t}\r\n\t\tif (!$type.isNumber(this.pointerY)) {\r\n\t\t\tthis.pointerY = this.pixelHeight + 10;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A width of the pinter's (stem's) thick end (base) in pixels.\r\n\t *\r\n\t * @default 15\r\n\t * @param value  Width (px)\r\n\t */\r\n\tpublic set pointerBaseWidth(value: number) {\r\n\t\tthis.setPropertyValue(\"pointerBaseWidth\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * A length of the pinter (stem) in pixels.\r\n\t *\r\n\t * @default 10\r\n\t * @param value  Length (px)\r\n\t */\r\n\tpublic set pointerLength(value: number) {\r\n\t\tthis.setPropertyValue(\"pointerLength\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Length (px)\r\n\t */\r\n\tpublic get pointerLength(): number {\r\n\t\treturn this.getPropertyValue(\"pointerLength\");\r\n\t}\r\n\r\n\t/**\r\n\t * @return Width (px)\r\n\t */\r\n\tpublic get pointerBaseWidth(): number {\r\n\t\treturn this.getPropertyValue(\"pointerBaseWidth\");\r\n\t}\r\n\r\n\t/**\r\n\t * X coordinate the shape is pointing to.\r\n\t *\r\n\t * @param value  X\r\n\t */\r\n\tpublic set pointerX(value: number) {\r\n\t\tthis.setPropertyValue(\"pointerX\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return X\r\n\t */\r\n\tpublic get pointerX(): number {\r\n\t\treturn this.getPropertyValue(\"pointerX\");\r\n\t}\r\n\r\n\t/**\r\n\t * Y coordinate the shape is pointing to.\r\n\t *\r\n\t * @param value  Y\r\n\t */\r\n\tpublic set pointerY(value: number) {\r\n\t\tthis.setPropertyValue(\"pointerY\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Y\r\n\t */\r\n\tpublic get pointerY(): number {\r\n\t\treturn this.getPropertyValue(\"pointerY\");\r\n\t}\r\n\r\n}\r\n"],"mappings":"AAAA;;;;AAIA;;;;;;AAMA,SAASA,MAAM,QAA2D,WAAW;AACrF,OAAO,KAAKC,KAAK,MAAM,eAAe;AAqDtC;;;;;;AAOA;;;;;;AAMA,IAAAC,YAAA,0BAAAC,MAAA;EAAkCC,SAAA,CAAAF,YAAA,EAAAC,MAAA;EAiBjC;;;EAGA,SAAAD,aAAA;IAAA,IAAAG,KAAA,GACCF,MAAA,CAAAG,IAAA,MAAO;IACPD,KAAI,CAACE,SAAS,GAAG,cAAc;IAC/BF,KAAI,CAACG,gBAAgB,GAAG,EAAE;IAC1BH,KAAI,CAACI,aAAa,GAAG,EAAE;IACvBJ,KAAI,CAACK,QAAQ,GAAG,CAAC;IACjBL,KAAI,CAACM,QAAQ,GAAG,CAAC;IAEjBN,KAAI,CAACO,UAAU,EAAE;;EAClB;EAEA;;;;;EAKOV,YAAA,CAAAW,SAAA,CAAAC,IAAI,GAAX;IACCX,MAAA,CAAAU,SAAA,CAAMC,IAAI,CAAAR,IAAA,MAAE;IACZ,IAAI,CAACL,KAAK,CAACc,QAAQ,CAAC,IAAI,CAACJ,QAAQ,CAAC,EAAE;MACnC,IAAI,CAACA,QAAQ,GAAG,IAAI,CAACK,UAAU,GAAG,CAAC;;IAEpC,IAAI,CAACf,KAAK,CAACc,QAAQ,CAAC,IAAI,CAACL,QAAQ,CAAC,EAAE;MACnC,IAAI,CAACA,QAAQ,GAAG,IAAI,CAACO,WAAW,GAAG,EAAE;;EAEvC,CAAC;EAQDC,MAAA,CAAAC,cAAA,CAAWjB,YAAA,CAAAW,SAAA,oBAAgB;IAqB3B;;;SAGA,SAAAO,CAAA;MACC,OAAO,IAAI,CAACC,gBAAgB,CAAC,kBAAkB,CAAC;IACjD,CAAC;IAhCD;;;;;;SAMA,SAAAC,CAA4BC,KAAa;MACxC,IAAI,CAACC,gBAAgB,CAAC,kBAAkB,EAAED,KAAK,EAAE,IAAI,CAAC;IACvD,CAAC;;;;EAQDL,MAAA,CAAAC,cAAA,CAAWjB,YAAA,CAAAW,SAAA,iBAAa;IAIxB;;;SAGA,SAAAO,CAAA;MACC,OAAO,IAAI,CAACC,gBAAgB,CAAC,eAAe,CAAC;IAC9C,CAAC;IAfD;;;;;;SAMA,SAAAC,CAAyBC,KAAa;MACrC,IAAI,CAACC,gBAAgB,CAAC,eAAe,EAAED,KAAK,EAAE,IAAI,CAAC;IACpD,CAAC;;;;EAqBDL,MAAA,CAAAC,cAAA,CAAWjB,YAAA,CAAAW,SAAA,YAAQ;IAInB;;;SAGA,SAAAO,CAAA;MACC,OAAO,IAAI,CAACC,gBAAgB,CAAC,UAAU,CAAC;IACzC,CAAC;IAdD;;;;;SAKA,SAAAC,CAAoBC,KAAa;MAChC,IAAI,CAACC,gBAAgB,CAAC,UAAU,EAAED,KAAK,EAAE,IAAI,CAAC;IAC/C,CAAC;;;;EAcDL,MAAA,CAAAC,cAAA,CAAWjB,YAAA,CAAAW,SAAA,YAAQ;IAInB;;;SAGA,SAAAO,CAAA;MACC,OAAO,IAAI,CAACC,gBAAgB,CAAC,UAAU,CAAC;IACzC,CAAC;IAdD;;;;;SAKA,SAAAC,CAAoBC,KAAa;MAChC,IAAI,CAACC,gBAAgB,CAAC,UAAU,EAAED,KAAK,EAAE,IAAI,CAAC;IAC/C,CAAC;;;;EASF,OAAArB,YAAC;AAAD,CAAC,CAhHiCF,MAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}