{"ast":null,"code":"/**\r\n * Functionality for drawing a trapezoid.\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\nimport { Sprite } from \"../Sprite\";\nimport { percent } from \"../../core/utils/Percent\";\nimport { registry } from \"../Registry\";\nimport * as $utils from \"../utils/Utils\";\nimport * as $type from \"../utils/Type\";\nimport * as $path from \"../rendering/Path\";\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n/**\r\n * Used to draw a Trapezoid.\r\n *\r\n * @see {@link ITrapezoidEvents} for a list of available events\r\n * @see {@link ITrapezoidAdapters} for a list of available Adapters\r\n */\nvar Trapezoid = /** @class */function (_super) {\n  __extends(Trapezoid, _super);\n  /**\r\n   * Constructor\r\n   */\n  function Trapezoid() {\n    var _this = _super.call(this) || this;\n    _this.className = \"Trapezoid\";\n    _this.element = _this.paper.add(\"path\");\n    _this.topSide = percent(100);\n    _this.bottomSide = percent(100);\n    _this.leftSide = percent(100);\n    _this.rightSide = percent(100);\n    _this.isMeasured = false; // todo: add measureElement\n    _this.applyTheme();\n    return _this;\n  }\n  /**\r\n   * Draws the element.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  Trapezoid.prototype.draw = function () {\n    _super.prototype.draw.call(this);\n    var w = this.pixelWidth;\n    var h = this.pixelHeight;\n    var ts = $utils.relativeToValue(this.topSide, w);\n    var bs = $utils.relativeToValue(this.bottomSide, w);\n    var ls = $utils.relativeToValue(this.leftSide, h);\n    var rs = $utils.relativeToValue(this.rightSide, h);\n    // 1----2\n    // |    |\n    // 4----3\n    var x0 = (w - ts) / 2;\n    var y0 = (h - ls) / 2;\n    var x1 = w - (w - ts) / 2;\n    var y1 = (h - rs) / 2;\n    var x2 = w - (w - bs) / 2;\n    var y2 = h - (h - rs) / 2;\n    var x3 = (w - bs) / 2;\n    var y3 = h - (h - ls) / 2;\n    var mt = \"\";\n    var mr = \"\";\n    var mb = \"\";\n    var ml = \"\";\n    if ($type.hasValue(this.horizontalNeck)) {\n      var hn = this.horizontalNeck.value;\n      mt = $path.lineTo({\n        x: w * hn,\n        y: Math.max(y0, y1)\n      });\n      mb = $path.lineTo({\n        x: w * hn,\n        y: Math.min(y2, y3)\n      });\n    }\n    if ($type.hasValue(this.verticalNeck)) {\n      var vn = this.verticalNeck.value;\n      mr = $path.lineTo({\n        x: Math.min(x1, x2),\n        y: h * vn\n      });\n      ml = $path.lineTo({\n        x: Math.max(x0, x3),\n        y: h * vn\n      });\n    }\n    var path = $path.moveTo({\n      x: x0,\n      y: y0\n    }) + mt + $path.lineTo({\n      x: x1,\n      y: y1\n    }) + mr + $path.lineTo({\n      x: x2,\n      y: y2\n    }) + mb + $path.lineTo({\n      x: x3,\n      y: y3\n    }) + ml;\n    this.path = path;\n  };\n  Object.defineProperty(Trapezoid.prototype, \"topSide\", {\n    /**\r\n     * @return Width\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"topSide\");\n    },\n    /**\r\n     * Wdith of the top side. Absolute (px) or relative ([[Percent]]).\r\n     *\r\n     * @default Percent(100)\r\n     * @param value  Width\r\n     */\n    set: function (value) {\n      this.setPercentProperty(\"topSide\", value, true, false, 10, false);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Trapezoid.prototype, \"bottomSide\", {\n    /**\r\n     * @return Width\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"bottomSide\");\n    },\n    /**\r\n     * Wdith of the bottom side. Absolute (px) or relative ([[Percent]]).\r\n     *\r\n     * @default Percent(100)\r\n     * @param value  Width\r\n     */\n    set: function (value) {\n      this.setPercentProperty(\"bottomSide\", value, true, false, 10, false);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Trapezoid.prototype, \"leftSide\", {\n    /**\r\n     * @return Height\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"leftSide\");\n    },\n    /**\r\n     * Height of the left side. Absolute (px) or relative ([[Percent]]).\r\n     *\r\n     * @default Percent(100)\r\n     * @param value  Height\r\n     */\n    set: function (value) {\n      this.setPercentProperty(\"leftSide\", value, true, false, 10, false);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Trapezoid.prototype, \"rightSide\", {\n    /**\r\n     * @return Height\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"rightSide\");\n    },\n    /**\r\n     * Height of the right side. Absolute (px) or relative ([[Percent]]).\r\n     *\r\n     * @default Percent(100)\r\n     * @param value  Height\r\n     */\n    set: function (value) {\n      this.setPercentProperty(\"rightSide\", value, true, false, 10, false);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Trapezoid.prototype, \"horizontalNeck\", {\n    /**\r\n     * @return Horizontal neck position\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"horizontalNeck\");\n    },\n    /**\r\n     * A relative vertical position of the \"neck\". If the top and bottom sides\r\n     * are of different width, and `horizontalNeck` is set, a choke point\r\n     * will be created at that position, creating a funnel shape.\r\n     *\r\n     * @param value  Horizontal neck position\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"horizontalNeck\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Trapezoid.prototype, \"verticalNeck\", {\n    /**\r\n     * @return Vertical neck position\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"verticalNeck\");\n    },\n    /**\r\n     * A relative horizontal position of the \"neck\". If the left and right sides\r\n     * are of different height, and `verticalNeck` is set, a choke point\r\n     * will be created at that position, creating a funnel shape.\r\n     *\r\n     * @param value  Vertical neck position\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"verticalNeck\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return Trapezoid;\n}(Sprite);\nexport { Trapezoid };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\nregistry.registeredClasses[\"Trapezoid\"] = Trapezoid;","map":{"version":3,"names":["Sprite","percent","registry","$utils","$type","$path","Trapezoid","_super","__extends","_this","call","className","element","paper","add","topSide","bottomSide","leftSide","rightSide","isMeasured","applyTheme","prototype","draw","w","pixelWidth","h","pixelHeight","ts","relativeToValue","bs","ls","rs","x0","y0","x1","y1","x2","y2","x3","y3","mt","mr","mb","ml","hasValue","horizontalNeck","hn","value","lineTo","x","y","Math","max","min","verticalNeck","vn","path","moveTo","Object","defineProperty","get","getPropertyValue","set","setPercentProperty","setPropertyValue","registeredClasses"],"sources":["../../../../../src/.internal/core/elements/Trapezoid.ts"],"sourcesContent":["/**\r\n * Functionality for drawing a trapezoid.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Sprite, ISpriteProperties, ISpriteAdapters, ISpriteEvents } from \"../Sprite\";\r\nimport { Percent, percent } from \"../../core/utils/Percent\";\r\nimport { registry } from \"../Registry\";\r\nimport * as $utils from \"../utils/Utils\";\r\nimport * as $type from \"../utils/Type\";\r\nimport * as $path from \"../rendering/Path\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[Trapezoid]].\r\n */\r\nexport interface ITrapezoidProperties extends ISpriteProperties {\r\n\r\n\t/**\r\n\t * Wdith of the top side. Absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @default Percent(100)\r\n\t */\r\n\ttopSide?: number | Percent;\r\n\r\n\t/**\r\n\t * Wdith of the bottom side. Absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @default Percent(100)\r\n\t */\r\n\tbottomSide?: number | Percent;\r\n\r\n\t/**\r\n\t * Height of the left side. Absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @default Percent(100)\r\n\t */\r\n\tleftSide?: number | Percent;\r\n\r\n\t/**\r\n\t * Height of the right side. Absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @default Percent(100)\r\n\t */\r\n\trightSide?: number | Percent;\r\n\r\n\t/**\r\n\t * A relative vertical position of the \"neck\". If the top and bottom sides\r\n\t * are of different width, and `horizontalNeck` is set, a choke point\r\n\t * will be created at that position, creating a funnel shape.\r\n\t */\r\n\thorizontalNeck?: Percent;\r\n\r\n\t/**\r\n\t * A relative horizontal position of the \"neck\". If the left and right sides\r\n\t * are of different height, and `verticalNeck` is set, a choke point\r\n\t * will be created at that position, creating a funnel shape.\r\n\t */\r\n\tverticalNeck?: Percent;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[Trapezoid]].\r\n */\r\nexport interface ITrapezoidEvents extends ISpriteEvents { }\r\n\r\n/**\r\n * Defines adapters for [[Trapezoid]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ITrapezoidAdapters extends ISpriteAdapters, ITrapezoidProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Used to draw a Trapezoid.\r\n *\r\n * @see {@link ITrapezoidEvents} for a list of available events\r\n * @see {@link ITrapezoidAdapters} for a list of available Adapters\r\n */\r\nexport class Trapezoid extends Sprite {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: ITrapezoidProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: ITrapezoidAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: ITrapezoidEvents;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"Trapezoid\";\r\n\t\tthis.element = this.paper.add(\"path\");\r\n\r\n\t\tthis.topSide = percent(100);\r\n\t\tthis.bottomSide = percent(100);\r\n\t\tthis.leftSide = percent(100);\r\n\t\tthis.rightSide = percent(100);\r\n\r\n\t\tthis.isMeasured = false; // todo: add measureElement\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Draws the element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic draw(): void {\r\n\t\tsuper.draw();\r\n\t\tlet w: number = this.pixelWidth;\r\n\t\tlet h: number = this.pixelHeight;\r\n\r\n\t\tlet ts: number = $utils.relativeToValue(this.topSide, w);\r\n\t\tlet bs: number = $utils.relativeToValue(this.bottomSide, w);\r\n\t\tlet ls: number = $utils.relativeToValue(this.leftSide, h);\r\n\t\tlet rs: number = $utils.relativeToValue(this.rightSide, h);\r\n\r\n\t\t// 1----2\r\n\t\t// |    |\r\n\t\t// 4----3\r\n\r\n\t\tlet x0: number = (w - ts) / 2;\r\n\t\tlet y0: number = (h - ls) / 2;\r\n\r\n\t\tlet x1: number = w - (w - ts) / 2;\r\n\t\tlet y1: number = (h - rs) / 2;\r\n\r\n\t\tlet x2: number = w - (w - bs) / 2;\r\n\t\tlet y2: number = h - (h - rs) / 2;\r\n\r\n\t\tlet x3: number = (w - bs) / 2;\r\n\t\tlet y3: number = h - (h - ls) / 2;\r\n\r\n\t\tlet mt: string = \"\";\r\n\t\tlet mr: string = \"\";\r\n\t\tlet mb: string = \"\";\r\n\t\tlet ml: string = \"\";\r\n\r\n\t\tif ($type.hasValue(this.horizontalNeck)) {\r\n\t\t\tlet hn: number = this.horizontalNeck.value;\r\n\t\t\tmt = $path.lineTo({ x: w * hn, y: Math.max(y0, y1) });\r\n\t\t\tmb = $path.lineTo({ x: w * hn, y: Math.min(y2, y3) });\r\n\t\t}\r\n\r\n\t\tif ($type.hasValue(this.verticalNeck)) {\r\n\t\t\tlet vn: number = this.verticalNeck.value;\r\n\t\t\tmr = $path.lineTo({ x: Math.min(x1, x2), y: h * vn });\r\n\t\t\tml = $path.lineTo({ x: Math.max(x0, x3), y: h * vn });\r\n\t\t}\r\n\r\n\r\n\t\tlet path: string = $path.moveTo({ x: x0, y: y0 })\r\n\t\t\t+ mt\r\n\t\t\t+ $path.lineTo({ x: x1, y: y1 })\r\n\t\t\t+ mr\r\n\t\t\t+ $path.lineTo({ x: x2, y: y2 })\r\n\t\t\t+ mb\r\n\t\t\t+ $path.lineTo({ x: x3, y: y3 })\r\n\t\t\t+ ml\r\n\t\tthis.path = path;\r\n\t}\r\n\r\n\t/**\r\n\t * Wdith of the top side. Absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @default Percent(100)\r\n\t * @param value  Width\r\n\t */\r\n\tpublic set topSide(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"topSide\", value, true, false, 10, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Width\r\n\t */\r\n\tpublic get topSide(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"topSide\");\r\n\t}\r\n\r\n\t/**\r\n\t * Wdith of the bottom side. Absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @default Percent(100)\r\n\t * @param value  Width\r\n\t */\r\n\tpublic set bottomSide(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"bottomSide\", value, true, false, 10, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Width\r\n\t */\r\n\tpublic get bottomSide(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"bottomSide\");\r\n\t}\r\n\r\n\t/**\r\n\t * Height of the left side. Absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @default Percent(100)\r\n\t * @param value  Height\r\n\t */\r\n\tpublic set leftSide(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"leftSide\", value, true, false, 10, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Height\r\n\t */\r\n\tpublic get leftSide(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"leftSide\");\r\n\t}\r\n\r\n\t/**\r\n\t * Height of the right side. Absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @default Percent(100)\r\n\t * @param value  Height\r\n\t */\r\n\tpublic set rightSide(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"rightSide\", value, true, false, 10, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Height\r\n\t */\r\n\tpublic get rightSide(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"rightSide\");\r\n\t}\r\n\r\n\t/**\r\n\t * A relative vertical position of the \"neck\". If the top and bottom sides\r\n\t * are of different width, and `horizontalNeck` is set, a choke point\r\n\t * will be created at that position, creating a funnel shape.\r\n\t *\r\n\t * @param value  Horizontal neck position\r\n\t */\r\n\tpublic set horizontalNeck(value: Percent) {\r\n\t\tthis.setPropertyValue(\"horizontalNeck\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Horizontal neck position\r\n\t */\r\n\tpublic get horizontalNeck(): Percent {\r\n\t\treturn this.getPropertyValue(\"horizontalNeck\");\r\n\t}\r\n\r\n\t/**\r\n\t * A relative horizontal position of the \"neck\". If the left and right sides\r\n\t * are of different height, and `verticalNeck` is set, a choke point\r\n\t * will be created at that position, creating a funnel shape.\r\n\t *\r\n\t * @param value  Vertical neck position\r\n\t */\r\n\tpublic set verticalNeck(value: Percent) {\r\n\t\tthis.setPropertyValue(\"verticalNeck\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Vertical neck position\r\n\t */\r\n\tpublic get verticalNeck(): Percent {\r\n\t\treturn this.getPropertyValue(\"verticalNeck\");\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Trapezoid\"] = Trapezoid;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}