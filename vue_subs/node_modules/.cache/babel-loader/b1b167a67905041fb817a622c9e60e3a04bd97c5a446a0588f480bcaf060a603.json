{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n/**\r\n * Map polygon series module\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\nimport { MapSeries, MapSeriesDataItem } from \"./MapSeries\";\nimport { MapPolygon } from \"./MapPolygon\";\nimport { ListTemplate, ListDisposer } from \"../../core/utils/List\";\nimport { registry } from \"../../core/Registry\";\nimport * as $mapUtils from \"./MapUtils\";\nimport * as $array from \"../../core/utils/Array\";\nimport * as $utils from \"../../core/utils/Utils\";\nimport * as $iter from \"../../core/utils/Iterator\";\nimport { Disposer } from \"../../core/utils/Disposer\";\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\n/**\r\n * Defines a [[DataItem]] for [[MapPolygonSeries]]\r\n * @see {@link DataItem}\r\n */\nvar MapPolygonSeriesDataItem = /** @class */function (_super) {\n  __extends(MapPolygonSeriesDataItem, _super);\n  /**\r\n   * Constructor\r\n   */\n  function MapPolygonSeriesDataItem() {\n    var _this = _super.call(this) || this;\n    _this.className = \"MapPolygonSeriesDataItem\";\n    _this.applyTheme();\n    return _this;\n  }\n  /**\r\n   * @ignore\r\n   */\n  MapPolygonSeriesDataItem.prototype.getFeature = function () {\n    if (this.multiPolygon && this.multiPolygon.length > 0) {\n      return {\n        \"type\": \"Feature\",\n        geometry: {\n          type: \"MultiPolygon\",\n          coordinates: this.multiPolygon\n        }\n      };\n    }\n  };\n  Object.defineProperty(MapPolygonSeriesDataItem.prototype, \"mapPolygon\", {\n    /**\r\n     * A [[MapPolygon]] element related to this data item.\r\n     *\r\n     * @readonly\r\n     * @return Element\r\n     */\n    get: function () {\n      var _this = this;\n      if (!this._mapPolygon) {\n        var mapPolygon_1 = this.component.mapPolygons.create();\n        this._mapPolygon = mapPolygon_1;\n        this.addSprite(mapPolygon_1);\n        this._disposers.push(new Disposer(function () {\n          if (_this.component) {\n            _this.component.mapPolygons.removeValue(mapPolygon_1);\n          }\n        }));\n        this.mapObject = mapPolygon_1;\n      }\n      return this._mapPolygon;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MapPolygonSeriesDataItem.prototype, \"polygon\", {\n    /**\r\n     * @return Coordinates\r\n     */\n    get: function () {\n      return this._polygon;\n    },\n    /**\r\n     * A collection of X/Y coordinates for a single polygon. E.g.:\r\n     *\r\n     * ```JSON\r\n     * [\r\n     *   [\r\n     *     [ 100, 150 ],\r\n     *     [ 120, 200 ],\r\n     *     [ 150, 200 ],\r\n     *     [ 170, 240 ],\r\n     *     [ 100, 150 ]\r\n     *   ]\r\n     * ]\r\n     * ```\r\n     *\r\n     * @param polygon  Coordinates\r\n     */\n    set: function (polygon) {\n      this._polygon = polygon;\n      this.multiPolygon = [polygon];\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MapPolygonSeriesDataItem.prototype, \"multiPolygon\", {\n    /**\r\n     * @return Coordinates\r\n     */\n    get: function () {\n      return this._multiPolygon;\n    },\n    /**\r\n     * A collection of X/Y coordinates for a multi-part polygon. E.g.:\r\n     *\r\n     * ```JSON\r\n     * [\r\n     *   // Part 1\r\n     *   [\r\n     *     [\r\n     *       [ 100, 150 ],\r\n     *       [ 120, 200 ],\r\n     *       [ 150, 220 ],\r\n     *       [ 170, 240 ],\r\n     *       [ 100, 150 ]\r\n     *     ]\r\n     *   ],\r\n     *\r\n     *   // Part 2\r\n     *   [\r\n     *     [\r\n     *       [ 300, 350 ],\r\n     *       [ 320, 400 ],\r\n     *       [ 350, 420 ],\r\n     *       [ 370, 440 ],\r\n     *       [ 300, 350 ]\r\n     *     ]\r\n     *   ]\r\n     * ]\r\n     * ```\r\n     *\r\n     * @param multiPolygon  Coordinates\r\n     */\n    set: function (multiPolygon) {\n      this._multiPolygon = multiPolygon;\n      this.updateExtremes();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MapPolygonSeriesDataItem.prototype, \"geoPolygon\", {\n    /**\r\n     * @return Coordinates\r\n     */\n    get: function () {\n      return this._geoPolygon;\n    },\n    /**\r\n     * A collection of lat/long coordinates for a single polygon. E.g.:\r\n     *\r\n     * ```JSON\r\n     * [\r\n     *   [\r\n     *     { latitude: -10.0, longitude: -10.0 },\r\n     *     { latitude: 10.0, longitude: -10.0 },\r\n     *     { latitude: 10.0, longitude: 10.0 },\r\n     *     { latitude: -10.0, longitude: -10.0 }\r\n     *   ]\r\n     * ]\r\n     * ```\r\n     *\r\n     * @see {@link https://tools.ietf.org/html/rfc7946#section-3.1.6} GeoJSON Polygon reference\r\n     * @param geoPolygon  Coordinates\r\n     */\n    set: function (geoPolygon) {\n      this._geoPolygon = geoPolygon;\n      this.multiGeoPolygon = [geoPolygon];\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MapPolygonSeriesDataItem.prototype, \"multiGeoPolygon\", {\n    /**\r\n     * @return Coordinates\r\n     */\n    get: function () {\n      return this._multiGeoPolygon;\n    },\n    /**\r\n     * A collection of lat/long coordinates for a multi-part polygon. E.g.:\r\n     *\r\n     * ```JSON\r\n     * [\r\n     *   [\r\n     *     [\r\n     *       { longitude: 180.0, latitude: 40.0 },\r\n     *       { longitude: 180.0, latitude: 50.0 },\r\n     *       { longitude: 170.0, latitude: 50.0 },\r\n     *       { longitude: 170.0, latitude: 40.0 },\r\n     *       { longitude: 180.0, latitude: 40.0 }\r\n     *     ]\r\n     *   ],\r\n     *   [\r\n     *     [\r\n     *       { longitude: -170.0, latitude: 40.0 },\r\n     *       { longitude: -170.0, latitude: 50.0 },\r\n     *       { longitude: -180.0, latitude: 50.0 },\r\n     *       { longitude: -180.0, latitude: 40.0 },\r\n     *       { longitude: -170.0, latitude: 40.0 }\r\n     *     ]\r\n     *   ]\r\n     * ]\r\n     * ```\r\n     *\r\n     * @see {@link https://tools.ietf.org/html/rfc7946#section-3.1.7} GeoJSON MultiPolygon reference\r\n     * @param multiGeoPolygon  Coordinates\r\n     */\n    set: function (multiGeoPolygon) {\n      this._multiGeoPolygon = multiGeoPolygon;\n      this.multiPolygon = $mapUtils.multiGeoPolygonToMultipolygon(multiGeoPolygon);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return MapPolygonSeriesDataItem;\n}(MapSeriesDataItem);\nexport { MapPolygonSeriesDataItem };\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n/**\r\n * A series of map polygon elements.\r\n *\r\n * @see {@link IMapPolygonSeriesEvents} for a list of available Events\r\n * @see {@link IMapPolygonSeriesAdapters} for a list of available Adapters\r\n * @important\r\n */\nvar MapPolygonSeries = /** @class */function (_super) {\n  __extends(MapPolygonSeries, _super);\n  /**\r\n   * Constructor\r\n   */\n  function MapPolygonSeries() {\n    var _this =\n    // Init\n    _super.call(this) || this;\n    /**\r\n     * Indicates if series should automatically calculate visual center of the\r\n     * polygons (accessible via `visualLongitude` and `visualLatitude` properties\r\n     * of the [[MapPolygon]]).\r\n     *\r\n     * @default false\r\n     * @since 4.3.0\r\n     */\n    _this.calculateVisualCenter = false;\n    _this.className = \"MapPolygonSeries\";\n    // Set data fields\n    _this.dataFields.multiPolygon = \"multiPolygon\";\n    _this.dataFields.polygon = \"polygon\";\n    _this.dataFields.geoPolygon = \"geoPolygon\";\n    _this.dataFields.multiGeoPolygon = \"multiGeoPolygon\";\n    _this.setPropertyValue(\"sortPolygonsBy\", \"area\");\n    _this.setPropertyValue(\"sortPolygonsReversed\", false);\n    // Apply theme\n    _this.applyTheme();\n    return _this;\n  }\n  /**\r\n   * Returns a new/empty DataItem of the type appropriate for this object.\r\n   *\r\n   * @see {@link DataItem}\r\n   * @return Data Item\r\n   */\n  MapPolygonSeries.prototype.createDataItem = function () {\n    return new MapPolygonSeriesDataItem();\n  };\n  /**\r\n   * @ignore\r\n   */\n  MapPolygonSeries.prototype.processIncExc = function () {\n    this.mapPolygons.clear();\n    _super.prototype.processIncExc.call(this);\n  };\n  /**\r\n   * (Re)validates series data, effectively causing the whole series to be\r\n   * redrawn.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  MapPolygonSeries.prototype.validateData = function () {\n    // process geoJSON and created map objects\n    if (this.useGeodata || this.geodata) {\n      var geoJSON = !this._dataSources[\"geodata\"] ? this.chart.geodata : undefined;\n      if (this.geodata) {\n        geoJSON = this.geodata;\n      }\n      if (geoJSON) {\n        var features = void 0;\n        if (geoJSON.type == \"FeatureCollection\") {\n          features = geoJSON.features;\n        } else if (geoJSON.type == \"Feature\") {\n          features = [geoJSON];\n        } else if ([\"Point\", \"LineString\", \"Polygon\", \"MultiPoint\", \"MultiLineString\", \"MultiPolygon\"].indexOf(geoJSON.type) != -1) {\n          features = [{\n            geometry: geoJSON\n          }];\n        } else {\n          console.log(\"nothing found in geoJSON\");\n        }\n        if (features) {\n          var _loop_1 = function (i, len) {\n            var feature = features[i];\n            var geometry = feature.geometry;\n            if (geometry) {\n              var type = geometry.type;\n              var id_1 = feature.id;\n              if (this_1.chart.geodataNames && this_1.chart.geodataNames[id_1]) {\n                feature.properties.name = this_1.chart.geodataNames[id_1];\n              }\n              if (type == \"Polygon\" || type == \"MultiPolygon\") {\n                if (!this_1.checkInclude(this_1.include, this_1.exclude, id_1)) {\n                  return \"continue\";\n                }\n                var coordinates = geometry.coordinates;\n                if (coordinates) {\n                  // make the same as MultiPolygon\n                  if (type == \"Polygon\") {\n                    coordinates = [coordinates];\n                  }\n                }\n                // find data object in user-provided data\n                var dataObject = $array.find(this_1.data, function (value, i) {\n                  return value.id == id_1;\n                });\n                // create one if not found\n                if (!dataObject) {\n                  dataObject = {\n                    multiPolygon: coordinates,\n                    id: id_1,\n                    madeFromGeoData: true\n                  };\n                  this_1.data.push(dataObject);\n                }\n                // in case found\n                else {\n                  // if user-provided object doesn't have points data provided in any way:\n                  if (!dataObject.multiPolygon) {\n                    dataObject.multiPolygon = coordinates;\n                  }\n                }\n                // copy properties data to datacontext\n                $utils.softCopyProperties(feature.properties, dataObject);\n              }\n            }\n          };\n          var this_1 = this;\n          for (var i = 0, len = features.length; i < len; i++) {\n            _loop_1(i, len);\n          }\n        }\n      }\n    }\n    _super.prototype.validateData.call(this);\n  };\n  /**\r\n   * (Re)validates the series\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  MapPolygonSeries.prototype.validate = function () {\n    _super.prototype.validate.call(this);\n    this.dataItems.each(function (dataItem) {\n      $utils.used(dataItem.mapPolygon);\n    });\n    if (this.sortPolygonsBy != \"none\") {\n      var sortBy_1 = this.sortPolygonsBy;\n      var reversed_1 = this.sortPolygonsReversed;\n      this.mapPolygons.sort(function (a, b) {\n        var valA = \"\";\n        var valB = \"\";\n        var dirA = -1;\n        var dirB = 1;\n        switch (sortBy_1) {\n          case \"area\":\n            valA = a.boxArea;\n            valB = b.boxArea;\n            dirA = -1;\n            dirB = 1;\n            break;\n          case \"name\":\n            valA = a.dataItem.dataContext.name || \"\";\n            valB = b.dataItem.dataContext.name || \"\";\n            dirA = 1;\n            dirB = -1;\n            break;\n          case \"id\":\n            valA = a.dataItem.dataContext.id || \"\";\n            valB = b.dataItem.dataContext.id || \"\";\n            dirA = 1;\n            dirB = -1;\n            break;\n          case \"latitude\":\n            valA = reversed_1 ? a.south : a.north;\n            valB = reversed_1 ? b.south : b.north;\n            dirA = -1;\n            dirB = 1;\n            break;\n          case \"longitude\":\n            valA = reversed_1 ? a.east : a.west;\n            valB = reversed_1 ? b.east : b.west;\n            dirA = 1;\n            dirB = -1;\n            break;\n        }\n        if (valA < valB) {\n          return reversed_1 ? dirB : dirA;\n        }\n        if (valA > valB) {\n          return reversed_1 ? dirA : dirB;\n        }\n        return 0;\n      });\n      this.mapPolygons.each(function (mapPolygon, index) {\n        mapPolygon.validate();\n        // makes small go first to avoid hover problems with IE\n        if (!mapPolygon.zIndex && !mapPolygon.propertyFields.zIndex) {\n          mapPolygon.zIndex = 1000000 - index;\n        }\n      });\n    }\n  };\n  Object.defineProperty(MapPolygonSeries.prototype, \"mapPolygons\", {\n    /**\r\n     * List of polygon elements in the series.\r\n     *\r\n     * @return Polygon list\r\n     */\n    get: function () {\n      if (!this._mapPolygons) {\n        var polygonTemplate = new MapPolygon();\n        var mapPolygons = new ListTemplate(polygonTemplate);\n        this._disposers.push(new ListDisposer(mapPolygons));\n        this._disposers.push(mapPolygons.template);\n        mapPolygons.template.focusable = true;\n        mapPolygons.events.on(\"inserted\", this.handleObjectAdded, this, false);\n        this._mapPolygons = mapPolygons;\n        this._mapObjects = mapPolygons;\n      }\n      return this._mapPolygons;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * returns MapPolygon by id in geoJSON file\r\n   * @param polygon id\r\n   * @return {MapPolygon}\r\n   */\n  MapPolygonSeries.prototype.getPolygonById = function (id) {\n    return $iter.find(this.mapPolygons.iterator(), function (mapPolygon) {\n      var dataContext = mapPolygon.dataItem.dataContext;\n      return dataContext.id == id;\n    });\n  };\n  /**\r\n   * Copies all properties from another instance of [[Series]].\r\n   *\r\n   * @param source  Source series\r\n   */\n  MapPolygonSeries.prototype.copyFrom = function (source) {\n    this.mapPolygons.template.copyFrom(source.mapPolygons.template);\n    _super.prototype.copyFrom.call(this, source);\n  };\n  /**\r\n   * @ignore\r\n   */\n  MapPolygonSeries.prototype.getFeatures = function () {\n    var _this = this;\n    var features = [];\n    this.dataItems.each(function (dataItem) {\n      var feature = dataItem.getFeature();\n      if (feature) {\n        features.push(feature);\n      }\n    });\n    this.mapPolygons.each(function (mapPolygon) {\n      if (_this.dataItems.indexOf(mapPolygon._dataItem) == -1) {\n        var feature = mapPolygon.getFeature();\n        if (feature) {\n          features.push(feature);\n        }\n      }\n    });\n    return features;\n  };\n  Object.defineProperty(MapPolygonSeries.prototype, \"sortPolygonsBy\", {\n    /**\r\n     * @return How to sort map polygons\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"sortPolygonsBy\");\n    },\n    /**\r\n     * How to order polygons in actual SVG document. Affects selection order\r\n     * using TAB key.\r\n     *\r\n     * Available options: `\"area\"` (default), `\"name\"`, `\"longitude\"`,\r\n     * `\"latitude\"`, `\"id\"`, and `\"none\"`.\r\n     *\r\n     * @default area\r\n     * @since 4.9.36\r\n     * @param value  How to sort map polygons\r\n     */\n    set: function (value) {\n      if (this.setPropertyValue(\"sortPolygonsBy\", value)) {\n        this.invalidateData();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MapPolygonSeries.prototype, \"sortPolygonsReversed\", {\n    /**\r\n     * @return Reverse polygon sort direction\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"sortPolygonsReversed\");\n    },\n    /**\r\n     * If `sortPolygonsBy` is set to something other than `\"none\"`, polygons\r\n     * will be sorted by the given parameter, using natural sort direction.\r\n     *\r\n     * Setting `sortPolygonsReversed = true` will reverse this direction.\r\n     *\r\n     * @default false\r\n     * @since 4.9.36\r\n     * @param value  Reverse polygon sort direction\r\n     */\n    set: function (value) {\n      if (this.setPropertyValue(\"sortPolygonsReversed\", value)) {\n        this.invalidateData();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return MapPolygonSeries;\n}(MapSeries);\nexport { MapPolygonSeries };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\nregistry.registeredClasses[\"MapPolygonSeries\"] = MapPolygonSeries;\nregistry.registeredClasses[\"MapPolygonSeriesDataItem\"] = MapPolygonSeriesDataItem;","map":{"version":3,"names":["MapSeries","MapSeriesDataItem","MapPolygon","ListTemplate","ListDisposer","registry","$mapUtils","$array","$utils","$iter","Disposer","MapPolygonSeriesDataItem","_super","__extends","_this","call","className","applyTheme","prototype","getFeature","multiPolygon","length","geometry","type","coordinates","Object","defineProperty","get","_mapPolygon","mapPolygon_1","component","mapPolygons","create","addSprite","_disposers","push","removeValue","mapObject","_polygon","set","polygon","_multiPolygon","updateExtremes","_geoPolygon","geoPolygon","multiGeoPolygon","_multiGeoPolygon","multiGeoPolygonToMultipolygon","MapPolygonSeries","calculateVisualCenter","dataFields","setPropertyValue","createDataItem","processIncExc","clear","validateData","useGeodata","geodata","geoJSON","_dataSources","chart","undefined","features","indexOf","console","log","i","len","feature","id_1","id","this_1","geodataNames","properties","name","checkInclude","include","exclude","dataObject","find","data","value","madeFromGeoData","softCopyProperties","validate","dataItems","each","dataItem","used","mapPolygon","sortPolygonsBy","sortBy_1","reversed_1","sortPolygonsReversed","sort","a","b","valA","valB","dirA","dirB","boxArea","dataContext","south","north","east","west","index","zIndex","propertyFields","_mapPolygons","polygonTemplate","template","focusable","events","on","handleObjectAdded","_mapObjects","getPolygonById","iterator","copyFrom","source","getFeatures","_dataItem","getPropertyValue","invalidateData","registeredClasses"],"sources":["../../../../../src/.internal/charts/map/MapPolygonSeries.ts"],"sourcesContent":["/**\r\n * Map polygon series module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { MapSeries, MapSeriesDataItem, GEOJSONGeometry, IMapSeriesProperties, IMapSeriesDataFields, IMapSeriesAdapters, IMapSeriesEvents } from \"./MapSeries\";\r\nimport { MapChart } from \"../types/MapChart\";\r\nimport { MapPolygon } from \"./MapPolygon\";\r\nimport { ListTemplate, ListDisposer } from \"../../core/utils/List\";\r\nimport { IMapPolygonDataObject } from \"../types/MapChart\";\r\nimport { IGeoPoint } from \"../../core/defs/IGeoPoint\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $mapUtils from \"./MapUtils\";\r\nimport * as $array from \"../../core/utils/Array\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport { Disposer } from \"../../core/utils/Disposer\";\r\nimport { Ordering } from \"../../core/utils/Order\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[MapPolygonSeries]]\r\n * @see {@link DataItem}\r\n */\r\nexport class MapPolygonSeriesDataItem extends MapSeriesDataItem {\r\n\r\n\t/**\r\n\t * A [[MapPolygon]] element related to this data item.\r\n\t */\r\n\tprotected _mapPolygon: MapPolygon;\r\n\r\n\t/**\r\n\t * A collection of X/Y coordinates for a single polygon.\r\n\t */\r\n\tprotected _polygon: Array<Array<[number, number]>>;\r\n\r\n\t/**\r\n\t * A collection of X/Y coordinates for a multi-part polygon.\r\n\t */\r\n\tprotected _multiPolygon: Array<Array<Array<[number, number]>>>;\r\n\r\n\t/**\r\n\t * A collection of lat/long coordinates for a single polygon.\r\n\t */\r\n\tprotected _geoPolygon: [Array<IGeoPoint>, Array<IGeoPoint>];\r\n\r\n\t/**\r\n\t * A collection of lat/long coordinates for a multi-part polygon.\r\n\t */\r\n\tprotected _multiGeoPolygon: Array<[Array<IGeoPoint>, Array<IGeoPoint>]>;\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for\r\n\t */\r\n\tpublic _component!: MapPolygonSeries;\r\n\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"MapPolygonSeriesDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic getFeature(): { \"type\": \"Feature\", geometry: { type: \"MultiPolygon\", coordinates: Array<Array<Array<[number, number]>>> } } {\r\n\t\tif (this.multiPolygon && this.multiPolygon.length > 0) {\r\n\t\t\treturn { \"type\": \"Feature\", geometry: { type: \"MultiPolygon\", coordinates: this.multiPolygon } };\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A [[MapPolygon]] element related to this data item.\r\n\t *\r\n\t * @readonly\r\n\t * @return Element\r\n\t */\r\n\tpublic get mapPolygon(): MapPolygon {\r\n\t\tif (!this._mapPolygon) {\r\n\t\t\tlet mapPolygon = this.component.mapPolygons.create();\r\n\t\t\tthis._mapPolygon = mapPolygon;\r\n\t\t\tthis.addSprite(mapPolygon);\r\n\r\n\t\t\tthis._disposers.push(new Disposer(() => {\r\n\t\t\t\tif (this.component) {\r\n\t\t\t\t\tthis.component.mapPolygons.removeValue(mapPolygon);\r\n\t\t\t\t}\r\n\t\t\t}));\r\n\r\n\t\t\tthis.mapObject = mapPolygon;\r\n\t\t}\r\n\t\treturn this._mapPolygon;\r\n\t}\r\n\r\n\t/**\r\n\t * A collection of X/Y coordinates for a single polygon. E.g.:\r\n\t *\r\n\t * ```JSON\r\n\t * [\r\n\t *   [\r\n\t *     [ 100, 150 ],\r\n\t *     [ 120, 200 ],\r\n\t *     [ 150, 200 ],\r\n\t *     [ 170, 240 ],\r\n\t *     [ 100, 150 ]\r\n\t *   ]\r\n\t * ]\r\n\t * ```\r\n\t *\r\n\t * @param polygon  Coordinates\r\n\t */\r\n\tpublic set polygon(polygon: Array<Array<[number, number]>>) {\r\n\t\tthis._polygon = polygon;\r\n\t\tthis.multiPolygon = [polygon];\r\n\t}\r\n\r\n\t/**\r\n\t * @return Coordinates\r\n\t */\r\n\tpublic get polygon(): Array<Array<[number, number]>> {\r\n\t\treturn this._polygon;\r\n\t}\r\n\r\n\t/**\r\n\t * A collection of X/Y coordinates for a multi-part polygon. E.g.:\r\n\t *\r\n\t * ```JSON\r\n\t * [\r\n\t *   // Part 1\r\n\t *   [\r\n\t *     [\r\n\t *       [ 100, 150 ],\r\n\t *       [ 120, 200 ],\r\n\t *       [ 150, 220 ],\r\n\t *       [ 170, 240 ],\r\n\t *       [ 100, 150 ]\r\n\t *     ]\r\n\t *   ],\r\n\t *\r\n\t *   // Part 2\r\n\t *   [\r\n\t *     [\r\n\t *       [ 300, 350 ],\r\n\t *       [ 320, 400 ],\r\n\t *       [ 350, 420 ],\r\n\t *       [ 370, 440 ],\r\n\t *       [ 300, 350 ]\r\n\t *     ]\r\n\t *   ]\r\n\t * ]\r\n\t * ```\r\n\t *\r\n\t * @param multiPolygon  Coordinates\r\n\t */\r\n\tpublic set multiPolygon(multiPolygon: Array<Array<Array<[number, number]>>>) {\r\n\t\tthis._multiPolygon = multiPolygon;\r\n\t\tthis.updateExtremes();\r\n\t}\r\n\r\n\t/**\r\n\t * @return Coordinates\r\n\t */\r\n\tpublic get multiPolygon(): Array<Array<Array<[number, number]>>> {\r\n\t\treturn this._multiPolygon;\r\n\t}\r\n\r\n\t/**\r\n\t * A collection of lat/long coordinates for a single polygon. E.g.:\r\n\t *\r\n\t * ```JSON\r\n\t * [\r\n\t *   [\r\n\t *     { latitude: -10.0, longitude: -10.0 },\r\n\t *     { latitude: 10.0, longitude: -10.0 },\r\n\t *     { latitude: 10.0, longitude: 10.0 },\r\n\t *     { latitude: -10.0, longitude: -10.0 }\r\n\t *   ]\r\n\t * ]\r\n\t * ```\r\n\t *\r\n\t * @see {@link https://tools.ietf.org/html/rfc7946#section-3.1.6} GeoJSON Polygon reference\r\n\t * @param geoPolygon  Coordinates\r\n\t */\r\n\tpublic set geoPolygon(geoPolygon: [Array<IGeoPoint>, Array<IGeoPoint>]) {\r\n\t\tthis._geoPolygon = geoPolygon;\r\n\t\tthis.multiGeoPolygon = [geoPolygon];\r\n\t}\r\n\r\n\t/**\r\n\t * @return Coordinates\r\n\t */\r\n\tpublic get geoPolygon(): [Array<IGeoPoint>, Array<IGeoPoint>] {\r\n\t\treturn this._geoPolygon;\r\n\t}\r\n\r\n\t/**\r\n\t * A collection of lat/long coordinates for a multi-part polygon. E.g.:\r\n\t *\r\n\t * ```JSON\r\n\t * [\r\n\t *   [\r\n\t *     [\r\n\t *       { longitude: 180.0, latitude: 40.0 },\r\n\t *       { longitude: 180.0, latitude: 50.0 },\r\n\t *       { longitude: 170.0, latitude: 50.0 },\r\n\t *       { longitude: 170.0, latitude: 40.0 },\r\n\t *       { longitude: 180.0, latitude: 40.0 }\r\n\t *     ]\r\n\t *   ],\r\n\t *   [\r\n\t *     [\r\n\t *       { longitude: -170.0, latitude: 40.0 },\r\n\t *       { longitude: -170.0, latitude: 50.0 },\r\n\t *       { longitude: -180.0, latitude: 50.0 },\r\n\t *       { longitude: -180.0, latitude: 40.0 },\r\n\t *       { longitude: -170.0, latitude: 40.0 }\r\n\t *     ]\r\n\t *   ]\r\n\t * ]\r\n\t * ```\r\n\t *\r\n\t * @see {@link https://tools.ietf.org/html/rfc7946#section-3.1.7} GeoJSON MultiPolygon reference\r\n\t * @param multiGeoPolygon  Coordinates\r\n\t */\r\n\tpublic set multiGeoPolygon(multiGeoPolygon: Array<[Array<IGeoPoint>, Array<IGeoPoint>]>) {\r\n\t\tthis._multiGeoPolygon = multiGeoPolygon;\r\n\t\tthis.multiPolygon = $mapUtils.multiGeoPolygonToMultipolygon(multiGeoPolygon);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Coordinates\r\n\t */\r\n\tpublic get multiGeoPolygon(): Array<[Array<IGeoPoint>, Array<IGeoPoint>]> {\r\n\t\treturn this._multiGeoPolygon;\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[MapPolygonSeries]].\r\n */\r\nexport interface IMapPolygonSeriesDataFields extends IMapSeriesDataFields {\r\n\r\n\t/**\r\n\t * Field name that holds polygon pixels.\r\n\t */\r\n\tpolygon?: string;\r\n\r\n\t/**\r\n\t * Field name that holds multi-polygon pixels.\r\n\t */\r\n\tmultiPolygon?: string;\r\n\r\n\t/**\r\n\t * Field name that holds polygon data in Geo coordinates.\r\n\t */\r\n\tgeoPolygon?: string;\r\n\r\n\t/**\r\n\t * Field name that holds poly-polygon data in Geo coordinates.\r\n\t */\r\n\tmultiGeoPolygon?: string;\r\n\r\n}\r\n\r\n/**\r\n * Defines properties for [[MapPolygonSeries]].\r\n */\r\nexport interface IMapPolygonSeriesProperties extends IMapSeriesProperties {\r\n\r\n\t/**\r\n\t * How to order polygons in actual SVG document. Affects selection order\r\n\t * using TAB key.\r\n\t *\r\n\t * @since 4.9.36\r\n\t */\r\n\tsortPolygonsBy: \"area\" | \"name\" | \"longitude\" | \"latitude\" | \"id\" | \"none\";\r\n\r\n\t/**\r\n\t * If `sortPolygonsBy` is set to something other than `\"none\"`, polygons\r\n\t * will be sorted by the given parameter, using natural sort direction.\r\n\t *\r\n\t * Setting `sortPolygonsReversed = true` will reverse this direction.\r\n\t *\r\n\t * @since 4.9.36\r\n\t */\r\n\tsortPolygonsReversed: boolean;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[MapPolygonSeries]].\r\n */\r\nexport interface IMapPolygonSeriesEvents extends IMapSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[MapPolygonSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IMapPolygonSeriesAdapters extends IMapSeriesAdapters, IMapPolygonSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * A series of map polygon elements.\r\n *\r\n * @see {@link IMapPolygonSeriesEvents} for a list of available Events\r\n * @see {@link IMapPolygonSeriesAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class MapPolygonSeries extends MapSeries {\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t */\r\n\tpublic _dataFields: IMapPolygonSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IMapPolygonSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IMapPolygonSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IMapPolygonSeriesEvents;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t */\r\n\tpublic _dataItem: MapPolygonSeriesDataItem;\r\n\r\n\t/**\r\n\t * A related chart/map object, this element is drawn on.\r\n\t */\r\n\tpublic chart: MapChart;\r\n\r\n\t/**\r\n\t * A list of map polygons in the series.\r\n\t */\r\n\tprotected _mapPolygons: ListTemplate<MapPolygon>;\r\n\r\n\t/**\r\n\t * Indicates if series should automatically calculate visual center of the\r\n\t * polygons (accessible via `visualLongitude` and `visualLatitude` properties\r\n\t * of the [[MapPolygon]]).\r\n\t *\r\n\t * @default false\r\n\t * @since 4.3.0\r\n\t */\r\n\tpublic calculateVisualCenter: boolean = false;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"MapPolygonSeries\";\r\n\r\n\t\t// Set data fields\r\n\t\tthis.dataFields.multiPolygon = \"multiPolygon\";\r\n\t\tthis.dataFields.polygon = \"polygon\";\r\n\r\n\t\tthis.dataFields.geoPolygon = \"geoPolygon\";\r\n\t\tthis.dataFields.multiGeoPolygon = \"multiGeoPolygon\";\r\n\r\n\t\tthis.setPropertyValue(\"sortPolygonsBy\", \"area\");\r\n\t\tthis.setPropertyValue(\"sortPolygonsReversed\", false);\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new MapPolygonSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected processIncExc() {\r\n\t\tthis.mapPolygons.clear();\r\n\t\tsuper.processIncExc();\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates series data, effectively causing the whole series to be\r\n\t * redrawn.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateData(): void {\r\n\t\t// process geoJSON and created map objects\r\n\t\tif (this.useGeodata || this.geodata) {\r\n\t\t\tlet geoJSON: any = !this._dataSources[\"geodata\"] ? this.chart.geodata : undefined;\r\n\r\n\t\t\tif (this.geodata) {\r\n\t\t\t\tgeoJSON = this.geodata;\r\n\t\t\t}\r\n\r\n\t\t\tif (geoJSON) {\r\n\r\n\t\t\t\tlet features: any[];\r\n\r\n\t\t\t\tif (geoJSON.type == \"FeatureCollection\") {\r\n\t\t\t\t\tfeatures = geoJSON.features;\r\n\t\t\t\t}\r\n\t\t\t\telse if (geoJSON.type == \"Feature\") {\r\n\t\t\t\t\tfeatures = [geoJSON];\r\n\t\t\t\t}\r\n\t\t\t\telse if ([\"Point\", \"LineString\", \"Polygon\", \"MultiPoint\", \"MultiLineString\", \"MultiPolygon\"].indexOf(geoJSON.type) != -1) {\r\n\t\t\t\t\tfeatures = [{ geometry: geoJSON }];\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tconsole.log(\"nothing found in geoJSON\");\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (features) {\r\n\t\t\t\t\tfor (let i = 0, len = features.length; i < len; i++) {\r\n\t\t\t\t\t\tlet feature: any = features[i];\r\n\t\t\t\t\t\tlet geometry: any = feature.geometry;\r\n\r\n\t\t\t\t\t\tif (geometry) {\r\n\t\t\t\t\t\t\tlet type: GEOJSONGeometry = <GEOJSONGeometry>geometry.type;\r\n\t\t\t\t\t\t\tlet id: string = feature.id;\r\n\r\n\t\t\t\t\t\t\tif (this.chart.geodataNames && this.chart.geodataNames[id]) {\r\n\t\t\t\t\t\t\t\tfeature.properties.name = this.chart.geodataNames[id];\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tif (type == \"Polygon\" || type == \"MultiPolygon\") {\r\n\r\n\t\t\t\t\t\t\t\tif (!this.checkInclude(this.include, this.exclude, id)) {\r\n\t\t\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\tlet coordinates: any[] = geometry.coordinates;\r\n\r\n\t\t\t\t\t\t\t\tif (coordinates) {\r\n\t\t\t\t\t\t\t\t\t// make the same as MultiPolygon\r\n\t\t\t\t\t\t\t\t\tif (type == \"Polygon\") {\r\n\t\t\t\t\t\t\t\t\t\tcoordinates = [coordinates];\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\t// find data object in user-provided data\r\n\t\t\t\t\t\t\t\tlet dataObject: IMapPolygonDataObject = $array.find(this.data, (value, i) => {\r\n\t\t\t\t\t\t\t\t\treturn value.id == id;\r\n\t\t\t\t\t\t\t\t});\r\n\r\n\r\n\t\t\t\t\t\t\t\t// create one if not found\r\n\t\t\t\t\t\t\t\tif (!dataObject) {\r\n\t\t\t\t\t\t\t\t\tdataObject = { multiPolygon: coordinates, id: id, madeFromGeoData: true };\r\n\t\t\t\t\t\t\t\t\tthis.data.push(dataObject);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t// in case found\r\n\t\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\t\t// if user-provided object doesn't have points data provided in any way:\r\n\t\t\t\t\t\t\t\t\tif (!dataObject.multiPolygon) {\r\n\t\t\t\t\t\t\t\t\t\tdataObject.multiPolygon = coordinates;\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\t// copy properties data to datacontext\r\n\t\t\t\t\t\t\t\t$utils.softCopyProperties(feature.properties, dataObject);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tsuper.validateData();\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * (Re)validates the series\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate() {\r\n\t\tsuper.validate();\r\n\r\n\t\tthis.dataItems.each((dataItem) => {\r\n\t\t\t$utils.used(dataItem.mapPolygon);\r\n\t\t});\r\n\r\n\t\tif (this.sortPolygonsBy != \"none\") {\r\n\r\n\t\t\tconst sortBy = this.sortPolygonsBy;\r\n\t\t\tconst reversed = this.sortPolygonsReversed;\r\n\t\t\tthis.mapPolygons.sort((a, b) => {\r\n\t\t\t\tlet valA: number | string = \"\";\r\n\t\t\t\tlet valB: number | string = \"\";\r\n\t\t\t\tlet dirA: Ordering = -1;\r\n\t\t\t\tlet dirB: Ordering = 1;\r\n\r\n\t\t\t\tswitch (sortBy) {\r\n\t\t\t\t\tcase \"area\":\r\n\t\t\t\t\t\tvalA = a.boxArea;\r\n\t\t\t\t\t\tvalB = b.boxArea;\r\n\t\t\t\t\t\tdirA = -1;\r\n\t\t\t\t\t\tdirB = 1;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"name\":\r\n\t\t\t\t\t\tvalA = (<any>a).dataItem.dataContext.name || \"\";\r\n\t\t\t\t\t\tvalB = (<any>b).dataItem.dataContext.name || \"\";\r\n\t\t\t\t\t\tdirA = 1;\r\n\t\t\t\t\t\tdirB = -1;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"id\":\r\n\t\t\t\t\t\tvalA = (<any>a).dataItem.dataContext.id || \"\";\r\n\t\t\t\t\t\tvalB = (<any>b).dataItem.dataContext.id || \"\";\r\n\t\t\t\t\t\tdirA = 1;\r\n\t\t\t\t\t\tdirB = -1;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"latitude\":\r\n\t\t\t\t\t\tvalA = reversed ? a.south : a.north;\r\n\t\t\t\t\t\tvalB = reversed ? b.south : b.north;\r\n\t\t\t\t\t\tdirA = -1;\r\n\t\t\t\t\t\tdirB = 1;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"longitude\":\r\n\t\t\t\t\t\tvalA = reversed ? a.east : a.west;\r\n\t\t\t\t\t\tvalB = reversed ? b.east : b.west;\r\n\t\t\t\t\t\tdirA = 1;\r\n\t\t\t\t\t\tdirB = -1;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (valA < valB) {\r\n\t\t\t\t\treturn reversed ? dirB : dirA;\r\n\t\t\t\t}\r\n\t\t\t\tif (valA > valB) {\r\n\t\t\t\t\treturn reversed ? dirA : dirB;\r\n\t\t\t\t}\r\n\t\t\t\treturn 0;\r\n\t\t\t});\r\n\r\n\t\t\tthis.mapPolygons.each((mapPolygon, index) => {\r\n\t\t\t\tmapPolygon.validate();\r\n\t\t\t\t// makes small go first to avoid hover problems with IE\r\n\t\t\t\tif (!mapPolygon.zIndex && !mapPolygon.propertyFields.zIndex) {\r\n\t\t\t\t\tmapPolygon.zIndex = 1000000 - index;\r\n\t\t\t\t}\r\n\t\t\t})\r\n\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * List of polygon elements in the series.\r\n\t *\r\n\t * @return Polygon list\r\n\t */\r\n\tpublic get mapPolygons(): ListTemplate<MapPolygon> {\r\n\r\n\t\tif (!this._mapPolygons) {\r\n\t\t\tlet polygonTemplate: MapPolygon = new MapPolygon();\r\n\r\n\t\t\tlet mapPolygons: ListTemplate<MapPolygon> = new ListTemplate<MapPolygon>(polygonTemplate);\r\n\t\t\tthis._disposers.push(new ListDisposer(mapPolygons));\r\n\t\t\tthis._disposers.push(mapPolygons.template);\r\n\t\t\tmapPolygons.template.focusable = true;\r\n\t\t\tmapPolygons.events.on(\"inserted\", this.handleObjectAdded, this, false);\r\n\t\t\tthis._mapPolygons = mapPolygons;\r\n\t\t\tthis._mapObjects = mapPolygons;\r\n\t\t}\r\n\r\n\t\treturn this._mapPolygons;\r\n\t}\r\n\r\n\t/**\r\n\t * returns MapPolygon by id in geoJSON file\r\n\t * @param polygon id\r\n\t * @return {MapPolygon}\r\n\t */\r\n\tpublic getPolygonById(id: string): MapPolygon {\r\n\t\treturn $iter.find(this.mapPolygons.iterator(), (mapPolygon) => {\r\n\t\t\tlet dataContext: any = mapPolygon.dataItem.dataContext;\r\n\t\t\treturn dataContext.id == id;\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all properties from another instance of [[Series]].\r\n\t *\r\n\t * @param source  Source series\r\n\t */\r\n\tpublic copyFrom(source: this) {\r\n\t\tthis.mapPolygons.template.copyFrom(source.mapPolygons.template);\r\n\t\tsuper.copyFrom(source);\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic getFeatures(): { \"type\": \"Feature\", geometry: { type: \"MultiPolygon\", coordinates: Array<Array<Array<[number, number]>>> } }[] {\r\n\r\n\t\tlet features: { \"type\": \"Feature\", geometry: { type: \"MultiPolygon\", coordinates: Array<Array<Array<[number, number]>>> } }[] = [];\r\n\r\n\t\tthis.dataItems.each((dataItem) => {\r\n\t\t\tlet feature = dataItem.getFeature();\r\n\t\t\tif (feature) {\r\n\t\t\t\tfeatures.push(feature);\r\n\t\t\t}\r\n\t\t})\r\n\r\n\t\tthis.mapPolygons.each((mapPolygon) => {\r\n\t\t\tif (this.dataItems.indexOf(mapPolygon._dataItem) == -1) {\r\n\t\t\t\tlet feature = mapPolygon.getFeature();\r\n\t\t\t\tif (feature) {\r\n\t\t\t\t\tfeatures.push(feature);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t})\r\n\t\treturn features;\r\n\t}\r\n\r\n\t/**\r\n\t * How to order polygons in actual SVG document. Affects selection order\r\n\t * using TAB key.\r\n\t *\r\n\t * Available options: `\"area\"` (default), `\"name\"`, `\"longitude\"`,\r\n\t * `\"latitude\"`, `\"id\"`, and `\"none\"`.\r\n\t *\r\n\t * @default area\r\n\t * @since 4.9.36\r\n\t * @param value  How to sort map polygons\r\n\t */\r\n\tpublic set sortPolygonsBy(value: \"area\" | \"name\" | \"longitude\" | \"latitude\" | \"id\" | \"none\") {\r\n\t\tif (this.setPropertyValue(\"sortPolygonsBy\", value)) {\r\n\t\t\tthis.invalidateData();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return How to sort map polygons\r\n\t */\r\n\tpublic get sortPolygonsBy(): \"area\" | \"name\" | \"longitude\" | \"latitude\" | \"id\" | \"none\" {\r\n\t\treturn this.getPropertyValue(\"sortPolygonsBy\");\r\n\t}\r\n\r\n\t/**\r\n\t * If `sortPolygonsBy` is set to something other than `\"none\"`, polygons\r\n\t * will be sorted by the given parameter, using natural sort direction.\r\n\t *\r\n\t * Setting `sortPolygonsReversed = true` will reverse this direction.\r\n\t *\r\n\t * @default false\r\n\t * @since 4.9.36\r\n\t * @param value  Reverse polygon sort direction\r\n\t */\r\n\tpublic set sortPolygonsReversed(value: boolean) {\r\n\t\tif (this.setPropertyValue(\"sortPolygonsReversed\", value)) {\r\n\t\t\tthis.invalidateData();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Reverse polygon sort direction\r\n\t */\r\n\tpublic get sortPolygonsReversed(): boolean {\r\n\t\treturn this.getPropertyValue(\"sortPolygonsReversed\");\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"MapPolygonSeries\"] = MapPolygonSeries;\r\nregistry.registeredClasses[\"MapPolygonSeriesDataItem\"] = MapPolygonSeriesDataItem;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}