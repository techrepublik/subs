{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n/**\r\n * A module defining functionality for axis grid elements.\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\nimport { Sprite } from \"../../core/Sprite\";\nimport { registry } from \"../../core/Registry\";\nimport { color } from \"../../core/utils/Color\";\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\nimport { defaultRules, ResponsiveBreakpoints } from \"../../core/utils/Responsive\";\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n/**\r\n * Displays an axis grid line.\r\n *\r\n * @see {@link IGridEvents} for a list of available events\r\n * @see {@link IGridAdapters} for a list of available Adapters\r\n * @todo Review: container is better, as we'll be able to attach something to the grid, also with 3d charts we might need some additional elements\r\n * @important\r\n */\nvar Grid = /** @class */function (_super) {\n  __extends(Grid, _super);\n  /**\r\n   * Constructor\r\n   */\n  function Grid() {\n    var _this = _super.call(this) || this;\n    _this.className = \"Grid\";\n    _this.element = _this.paper.add(\"path\");\n    _this.location = 0.5;\n    _this.isMeasured = false;\n    _this.above = false;\n    var interfaceColors = new InterfaceColorSet();\n    _this.stroke = interfaceColors.getFor(\"grid\");\n    _this.pixelPerfect = true;\n    _this.strokeOpacity = 0.15;\n    _this.fill = color(); // \"none\";\n    _this.applyTheme();\n    return _this;\n  }\n  Object.defineProperty(Grid.prototype, \"location\", {\n    /**\r\n     * @return Location (0-1)\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"location\");\n    },\n    /**\r\n     * Location within axis cell to place grid line on.\r\n     *\r\n     * * 0 - start\r\n     * * 0.5 - middle\r\n     * * 1 - end\r\n     *\r\n     * @param value  Location (0-1)\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"location\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Grid.prototype, \"above\", {\n    /**\r\n     * @return Draw above series?\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"above\");\n    },\n    /**\r\n     * Normally fill goes below series. Set this to `true` to go above.\r\n     *\r\n     * @default false\r\n     * @since 4.5.9\r\n     * @param  value  Draw above series?\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"above\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * @ignore\r\n   */\n  Grid.prototype.setDisabled = function (value) {\n    var changed = _super.prototype.setDisabled.call(this, value);\n    if (this.axis) {\n      this.axis.invalidateDataItems();\n    }\n    return changed;\n  };\n  return Grid;\n}(Sprite);\nexport { Grid };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\nregistry.registeredClasses[\"Grid\"] = Grid;\n/**\r\n * Add default responsive rules\r\n */\n/**\r\n * Disable grid on smaller charts\r\n */\ndefaultRules.push({\n  relevant: ResponsiveBreakpoints.maybeXS,\n  state: function (target, stateId) {\n    if (target instanceof Grid) {\n      var state = target.states.create(stateId);\n      state.properties.disabled = true;\n      return state;\n    }\n    return null;\n  }\n});","map":{"version":3,"names":["Sprite","registry","color","InterfaceColorSet","defaultRules","ResponsiveBreakpoints","Grid","_super","__extends","_this","call","className","element","paper","add","location","isMeasured","above","interfaceColors","stroke","getFor","pixelPerfect","strokeOpacity","fill","applyTheme","Object","defineProperty","prototype","get","getPropertyValue","set","value","setPropertyValue","setDisabled","changed","axis","invalidateDataItems","registeredClasses","push","relevant","maybeXS","state","target","stateId","states","create","properties","disabled"],"sources":["../../../../../src/.internal/charts/axes/Grid.ts"],"sourcesContent":["/**\r\n * A module defining functionality for axis grid elements.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Sprite, ISpriteProperties, ISpriteEvents, ISpriteAdapters } from \"../../core/Sprite\";\r\nimport { AxisItemLocation, AxisDataItem, Axis } from \"./Axis\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { color } from \"../../core/utils/Color\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport { defaultRules, ResponsiveBreakpoints } from \"../../core/utils/Responsive\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[Grid]].\r\n */\r\nexport interface IGridProperties extends ISpriteProperties {\r\n\r\n\t/**\r\n\t * Location of the grid item within cell. (0-1)\r\n\t */\r\n\tlocation?: AxisItemLocation;\r\n\r\n\t/**\r\n\t * Normally fill goes below series. Set this to `true` to go above.\r\n\t *\r\n\t * @default false\r\n\t */\r\n\tabove?: boolean;\r\n}\r\n\r\n/**\r\n * Defines events for [[Grid]].\r\n */\r\nexport interface IGridEvents extends ISpriteEvents { }\r\n\r\n/**\r\n * Defines adapters  for [[Grid]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IGridAdapters extends ISpriteAdapters, IGridProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Displays an axis grid line.\r\n *\r\n * @see {@link IGridEvents} for a list of available events\r\n * @see {@link IGridAdapters} for a list of available Adapters\r\n * @todo Review: container is better, as we'll be able to attach something to the grid, also with 3d charts we might need some additional elements\r\n * @important\r\n */\r\nexport class Grid extends Sprite {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IGridProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IGridAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IGridEvents;\r\n\r\n\t/**\r\n\t * An axis data item that corresponds to the this grid element.\r\n\t */\r\n\tpublic _dataItem: AxisDataItem;\r\n\r\n\t/**\r\n\t * A referecent to Axis element this fill is applied to.\r\n\t */\r\n\tpublic axis: Axis;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"Grid\";\r\n\r\n\t\tthis.element = this.paper.add(\"path\");\r\n\r\n\t\tthis.location = 0.5;\r\n\t\tthis.isMeasured = false;\r\n\t\tthis.above = false;\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\t\tthis.stroke = interfaceColors.getFor(\"grid\");\r\n\r\n\t\tthis.pixelPerfect = true;\r\n\t\tthis.strokeOpacity = 0.15;\r\n\t\tthis.fill = color(); // \"none\";\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Location within axis cell to place grid line on.\r\n\t *\r\n\t * * 0 - start\r\n\t * * 0.5 - middle\r\n\t * * 1 - end\r\n\t *\r\n\t * @param value  Location (0-1)\r\n\t */\r\n\tpublic set location(value: AxisItemLocation) {\r\n\t\tthis.setPropertyValue(\"location\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Location (0-1)\r\n\t */\r\n\tpublic get location(): AxisItemLocation {\r\n\t\treturn this.getPropertyValue(\"location\");\r\n\t}\r\n\r\n\t/**\r\n\t * Normally fill goes below series. Set this to `true` to go above.\r\n\t *\r\n\t * @default false\r\n\t * @since 4.5.9\r\n\t * @param  value  Draw above series?\r\n\t */\r\n\tpublic set above(value: boolean) {\r\n\t\tthis.setPropertyValue(\"above\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Draw above series?\r\n\t */\r\n\tpublic get above(): boolean {\r\n\t\treturn this.getPropertyValue(\"above\");\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected setDisabled(value: boolean): boolean {\r\n\t\tlet changed = super.setDisabled(value);\r\n\t\tif (this.axis) {\r\n\t\t\tthis.axis.invalidateDataItems();\r\n\t\t}\r\n\t\treturn changed;\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Grid\"] = Grid;\r\n\r\n/**\r\n * Add default responsive rules\r\n */\r\n\r\n/**\r\n * Disable grid on smaller charts\r\n */\r\ndefaultRules.push({\r\n\trelevant: ResponsiveBreakpoints.maybeXS,\r\n\tstate: function(target, stateId) {\r\n\t\tif (target instanceof Grid) {\r\n\t\t\tlet state = target.states.create(stateId);\r\n\t\t\tstate.properties.disabled = true;\r\n\t\t\treturn state;\r\n\t\t}\r\n\r\n\t\treturn null;\r\n\t}\r\n});"],"mappings":";AAAA;;;;AAIA;;;;;;AAMA,SAASA,MAAM,QAA2D,mBAAmB;AAE7F,SAASC,QAAQ,QAAQ,qBAAqB;AAC9C,SAASC,KAAK,QAAQ,wBAAwB;AAC9C,SAASC,iBAAiB,QAAQ,oCAAoC;AACtE,SAASC,YAAY,EAAEC,qBAAqB,QAAQ,6BAA6B;AAyCjF;;;;;;AAOA;;;;;;;;AAQA,IAAAC,IAAA,0BAAAC,MAAA;EAA0BC,SAAA,CAAAF,IAAA,EAAAC,MAAA;EA2BzB;;;EAGA,SAAAD,KAAA;IAAA,IAAAG,KAAA,GACCF,MAAA,CAAAG,IAAA,MAAO;IACPD,KAAI,CAACE,SAAS,GAAG,MAAM;IAEvBF,KAAI,CAACG,OAAO,GAAGH,KAAI,CAACI,KAAK,CAACC,GAAG,CAAC,MAAM,CAAC;IAErCL,KAAI,CAACM,QAAQ,GAAG,GAAG;IACnBN,KAAI,CAACO,UAAU,GAAG,KAAK;IACvBP,KAAI,CAACQ,KAAK,GAAG,KAAK;IAElB,IAAIC,eAAe,GAAG,IAAIf,iBAAiB,EAAE;IAC7CM,KAAI,CAACU,MAAM,GAAGD,eAAe,CAACE,MAAM,CAAC,MAAM,CAAC;IAE5CX,KAAI,CAACY,YAAY,GAAG,IAAI;IACxBZ,KAAI,CAACa,aAAa,GAAG,IAAI;IACzBb,KAAI,CAACc,IAAI,GAAGrB,KAAK,EAAE,CAAC,CAAC;IAErBO,KAAI,CAACe,UAAU,EAAE;;EAClB;EAWAC,MAAA,CAAAC,cAAA,CAAWpB,IAAA,CAAAqB,SAAA,YAAQ;IAInB;;;SAGA,SAAAC,CAAA;MACC,OAAO,IAAI,CAACC,gBAAgB,CAAC,UAAU,CAAC;IACzC,CAAC;IAlBD;;;;;;;;;SASA,SAAAC,CAAoBC,KAAuB;MAC1C,IAAI,CAACC,gBAAgB,CAAC,UAAU,EAAED,KAAK,EAAE,IAAI,CAAC;IAC/C,CAAC;;;;EAgBDN,MAAA,CAAAC,cAAA,CAAWpB,IAAA,CAAAqB,SAAA,SAAK;IAIhB;;;SAGA,SAAAC,CAAA;MACC,OAAO,IAAI,CAACC,gBAAgB,CAAC,OAAO,CAAC;IACtC,CAAC;IAhBD;;;;;;;SAOA,SAAAC,CAAiBC,KAAc;MAC9B,IAAI,CAACC,gBAAgB,CAAC,OAAO,EAAED,KAAK,EAAE,IAAI,CAAC;IAC5C,CAAC;;;;EASD;;;EAGUzB,IAAA,CAAAqB,SAAA,CAAAM,WAAW,GAArB,UAAsBF,KAAc;IACnC,IAAIG,OAAO,GAAG3B,MAAA,CAAAoB,SAAA,CAAMM,WAAW,CAAAvB,IAAA,OAACqB,KAAK,CAAC;IACtC,IAAI,IAAI,CAACI,IAAI,EAAE;MACd,IAAI,CAACA,IAAI,CAACC,mBAAmB,EAAE;;IAEhC,OAAOF,OAAO;EACf,CAAC;EAEF,OAAA5B,IAAC;AAAD,CAAC,CAnGyBN,MAAM;;AAqGhC;;;;;;AAMAC,QAAQ,CAACoC,iBAAiB,CAAC,MAAM,CAAC,GAAG/B,IAAI;AAEzC;;;AAIA;;;AAGAF,YAAY,CAACkC,IAAI,CAAC;EACjBC,QAAQ,EAAElC,qBAAqB,CAACmC,OAAO;EACvCC,KAAK,EAAE,SAAAA,CAASC,MAAM,EAAEC,OAAO;IAC9B,IAAID,MAAM,YAAYpC,IAAI,EAAE;MAC3B,IAAImC,KAAK,GAAGC,MAAM,CAACE,MAAM,CAACC,MAAM,CAACF,OAAO,CAAC;MACzCF,KAAK,CAACK,UAAU,CAACC,QAAQ,GAAG,IAAI;MAChC,OAAON,KAAK;;IAGb,OAAO,IAAI;EACZ;CACA,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}