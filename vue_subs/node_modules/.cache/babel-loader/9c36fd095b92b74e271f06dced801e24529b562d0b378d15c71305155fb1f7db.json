{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n/**\r\n * Handles date and time formatting\r\n */\nimport { __extends } from \"tslib\";\nimport { Language } from \"../utils/Language\";\nimport { BaseObject } from \"../Base\";\nimport { getTextFormatter } from \"../formatters/TextFormatter\";\nimport { registry } from \"../Registry\";\nimport * as $strings from \"../utils/Strings\";\nimport * as $utils from \"../utils/Utils\";\nimport * as $type from \"../utils/Type\";\nimport * as $time from \"../utils/Time\";\n/**\r\n * Handles date and time formatting.\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v4/concepts/formatters/formatting-date-time/} Tutorial on date/time formatting\r\n * @todo Better type casting of passed in date?\r\n * @todo Quarter support?\r\n * @todo When parsing named months make the search case-insensitive\r\n * @todo Escape a.m./p.m. properly when used in RegEx\r\n */\nvar DateFormatter = /** @class */function (_super) {\n  __extends(DateFormatter, _super);\n  /**\r\n   * Constructor\r\n   */\n  function DateFormatter() {\n    var _this = _super.call(this) || this;\n    /**\r\n     * Date format.\r\n     */\n    _this._dateFormat = \"yyyy-MM-dd\";\n    /**\r\n     * Input date format.\r\n     */\n    _this._inputDateFormat = \"yyyy-MM-dd\";\n    /**\r\n     * Assume UTC time zone.\r\n     */\n    _this._utc = false;\n    /**\r\n     * If `timezone` is set, this will hold minute fraction of the timezone.\r\n     *\r\n     * @readonly\r\n     * @ignore\r\n     */\n    _this.timezoneMinutes = 0;\n    /**\r\n     * First day of week.\r\n     *\r\n     * 0 - Sunday\r\n     * 1 - Monday\r\n     *\r\n     * Etc.\r\n     */\n    _this._firstDayOfWeek = 1;\n    /**\r\n     * A list of month names.\r\n     */\n    _this.months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n    /**\r\n     * A list of short month names.\r\n     */\n    _this.monthsShort = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May(short)\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"];\n    /**\r\n     * A list of weekday names.\r\n     */\n    _this.weekdays = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\n    /**\r\n     * A list of short weekday names.\r\n     */\n    _this.weekdaysShort = [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"];\n    /**\r\n     * Output format to produce. If the format calls for applying color to the\r\n     * formatted value, this setting will determine what markup to use: SVG or\r\n     * HTML.\r\n     *\r\n     * Available options: svg, html.\r\n     *\r\n     * @default \"svg\"\r\n     */\n    _this._outputFormat = \"svg\";\n    /**\r\n     * Should the first letter of the formatted date be capitalized?\r\n     *\r\n     * @default true\r\n     */\n    _this.capitalize = true;\n    _this.className = \"DateFormatter\";\n    _this.applyTheme();\n    return _this;\n  }\n  Object.defineProperty(DateFormatter.prototype, \"language\", {\n    /**\r\n     * @return Language\r\n     */\n    get: function () {\n      return this._language;\n    },\n    /**\r\n     * A reference to [[Language]] object.\r\n     *\r\n     * @param  value  Language\r\n     */\n    set: function (value) {\n      this._language = value;\n      this.dateFormat = this._language.translate(\"_date\");\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Formats the date value according to specified format.\r\n   *\r\n   * @see {@link https://www.amcharts.com/docs/v4/concepts/formatters/formatting-date-time/} Tutorial on date/time formatting\r\n   * @param source  Date value\r\n   * @param format  Format\r\n   * @return Formatted date string\r\n   */\n  DateFormatter.prototype.format = function (source, format, applyTimezone) {\n    // No language?\n    if (!this.language) {\n      if (this.sprite) {\n        this.language = this.sprite.language;\n      } else {\n        this.language = new Language();\n      }\n    }\n    // No format passed in or it's empty\n    if (typeof format === \"undefined\" || format === \"\") {\n      format = this._dateFormat;\n    }\n    // Init return value\n    var formatted;\n    // Do casting if required\n    // This will take care of timestamps as well as Date objects\n    var date;\n    if ($type.isString(source)) {\n      // If it's a string, let's try parsing it using our own functionality\n      date = this.parse(source);\n    } else {\n      date = $utils.anyToDate(source);\n    }\n    // Is it a built-in format or Intl.DateTimeFormat\n    if ($type.isObject(format)) {\n      try {\n        if (this.intlLocales) {\n          return new Intl.DateTimeFormat(this.intlLocales, format).format(date);\n        } else {\n          return new Intl.DateTimeFormat(undefined, format).format(date);\n        }\n      } catch (e) {\n        return \"Invalid\";\n      }\n    } else {\n      // Clean format\n      format = $utils.cleanFormat(format);\n      // get format info (it will also deal with parser caching)\n      var info = this.parseFormat(format);\n      // Should we apply custom time zone?\n      if ($type.hasValue(this.timezoneOffset)) {\n        date.setMinutes(date.getMinutes() + date.getTimezoneOffset() - this.timezoneOffset);\n      } else if ($type.hasValue(this.timezone) && applyTimezone !== false) {\n        date = $time.setTimezone(date, this.timezone);\n      }\n      // Check if it's a valid date\n      if (!$type.isNumber(date.getTime())) {\n        return this.language.translate(\"Invalid date\");\n      }\n      // Apply format\n      formatted = this.applyFormat(date, info, this.language);\n      // Capitalize\n      if (this.capitalize) {\n        formatted = formatted.replace(/^.{1}/, formatted.substr(0, 1).toUpperCase());\n      }\n    }\n    // We're done\n    return formatted;\n  };\n  /**\r\n   * Parses format into structured infromation.\r\n   *\r\n   * @param format Format template\r\n   */\n  DateFormatter.prototype.parseFormat = function (format) {\n    // Check cache\n    var cached = this.getCache(format);\n    if ($type.hasValue(cached)) {\n      return cached;\n    }\n    // Init format parse info holder\n    var info = {\n      \"template\": \"\",\n      \"parts\": []\n    };\n    // Let TextFormatter split into chunks\n    var chunks = getTextFormatter().chunk(format, true);\n    for (var i = 0; i < chunks.length; i++) {\n      var chunk = chunks[i];\n      if (chunk.type === \"value\") {\n        // Just \"Date\"?\n        if (chunk.text.match(/^date$/i) && $type.isString(this._dateFormat)) {\n          chunk.text = this._dateFormat;\n        }\n        // Find all possible parts\n        var matches = chunk.text.match(/G|yyyy|yyy|yy|y|YYYY|YYY|YY|Y|u|q|MMMMM|MMMM|MMM|MM|M|ww|w|W|dd|d|DDD|DD|D|F|g|EEEEE|EEEE|EEE|EE|E|eeeee|eeee|eee|ee|e|aaa|aa|a|hh|h|HH|H|KK|K|kk|k|mm|m|ss|s|SSS|SS|S|A|zzzz|zzz|zz|z|ZZ|Z|t|x|nnn|nn|n|i|I/g);\n        // Found?\n        if (matches) {\n          // Populate template\n          for (var x = 0; x < matches.length; x++) {\n            info.parts.push(matches[x]);\n            chunk.text = chunk.text.replace(matches[x], $strings.PLACEHOLDER);\n          }\n        }\n      }\n      // Apply to template\n      info.template += chunk.text;\n    }\n    // Apply style formatting\n    //info.template = getTextFormatter().format(info.template, this.outputFormat);\n    // Save cache\n    this.setCache(format, info);\n    return info;\n  };\n  /**\r\n   * Applies format to Date.\r\n   *\r\n   * @param date      Date object\r\n   * @param info      Parsed format information\r\n   * @param language  Language\r\n   * @return Formatted date string\r\n   */\n  DateFormatter.prototype.applyFormat = function (date, info, language) {\n    // Init return value\n    var res = info.template;\n    // Get values\n    var fullYear,\n      month,\n      weekday,\n      day,\n      hours,\n      minutes,\n      seconds,\n      milliseconds,\n      offset = date.getTimezoneOffset(),\n      timestamp = date.getTime();\n    if (this.utc) {\n      fullYear = date.getUTCFullYear();\n      month = date.getUTCMonth();\n      weekday = date.getUTCDay();\n      day = date.getUTCDate();\n      hours = date.getUTCHours();\n      minutes = date.getUTCMinutes();\n      seconds = date.getUTCSeconds();\n      milliseconds = date.getUTCMilliseconds();\n    } else {\n      fullYear = date.getFullYear();\n      month = date.getMonth();\n      weekday = date.getDay();\n      day = date.getDate();\n      hours = date.getHours();\n      minutes = date.getMinutes();\n      seconds = date.getSeconds();\n      milliseconds = date.getMilliseconds();\n    }\n    // Go through each part and format/replace it in template\n    for (var i = 0, len = info.parts.length; i < len; i++) {\n      var value = \"\";\n      switch (info.parts[i]) {\n        case \"G\":\n          value = language.translate(fullYear < 0 ? \"_era_bc\" : \"_era_ad\");\n          break;\n        case \"yyyy\":\n          value = Math.abs(fullYear).toString();\n          if (fullYear < 0) {\n            value += language.translate(\"_era_bc\");\n          }\n          break;\n        case \"yyy\":\n        case \"yy\":\n        case \"y\":\n          value = Math.abs(fullYear).toString().substr(-info.parts[i].length);\n          if (fullYear < 0) {\n            value += language.translate(\"_era_bc\");\n          }\n          break;\n        case \"YYYY\":\n        case \"YYY\":\n        case \"YY\":\n        case \"Y\":\n          var year = $utils.getWeekYear(date);\n          if (info.parts[i] == \"YYYY\") {\n            value = Math.abs(year).toString();\n          } else {\n            value = Math.abs(year).toString().substr(-info.parts[i].length);\n          }\n          if (year < 0) {\n            value += language.translate(\"_era_bc\");\n          }\n          break;\n        case \"u\":\n          // @todo\n          break;\n        case \"q\":\n          value = \"\" + Math.ceil((date.getMonth() + 1) / 3);\n          break;\n        case \"MMMMM\":\n          value = language.translate(this.months[month]).substr(0, 1);\n          break;\n        case \"MMMM\":\n          value = language.translate(this.months[month]);\n          break;\n        case \"MMM\":\n          value = language.translate(this.monthsShort[month]);\n          break;\n        case \"MM\":\n          value = $utils.padString(month + 1, 2, \"0\");\n          break;\n        case \"M\":\n          value = (month + 1).toString();\n          break;\n        case \"ww\":\n          value = $utils.padString($utils.getWeek(date, this.utc), 2, \"0\");\n          break;\n        case \"w\":\n          value = $utils.getWeek(date, this.utc).toString();\n          break;\n        case \"W\":\n          value = $utils.getMonthWeek(date, this.utc).toString();\n          break;\n        case \"dd\":\n          value = $utils.padString(day, 2, \"0\");\n          break;\n        case \"d\":\n          value = day.toString();\n          break;\n        case \"DD\":\n        case \"DDD\":\n          value = $utils.padString($utils.getYearDay(date, this.utc).toString(), info.parts[i].length, \"0\");\n          break;\n        case \"D\":\n          value = $utils.getYearDay(date, this.utc).toString();\n          break;\n        case \"F\":\n          // @todo\n          break;\n        case \"g\":\n          // @todo\n          break;\n        case \"t\":\n          value = language.translateFunc(\"_dateOrd\").call(this, day);\n          break;\n        case \"E\":\n          value = (weekday || 7).toString();\n          break;\n        case \"EE\":\n          value = $utils.padString((weekday || 7).toString(), 2, \"0\");\n          break;\n        case \"EEE\":\n        case \"eee\":\n          value = language.translate(this.weekdaysShort[weekday]);\n          break;\n        case \"EEEE\":\n        case \"eeee\":\n          value = language.translate(this.weekdays[weekday]);\n          break;\n        case \"EEEEE\":\n        case \"eeeee\":\n          value = language.translate(this.weekdays[weekday]).substr(0, 1);\n          break;\n        case \"e\":\n        case \"ee\":\n          value = (weekday - this.firstDayOfWeek + 1).toString();\n          if (info.parts[i] == \"ee\") {\n            value = $utils.padString(value, 2, \"0\");\n          }\n          break;\n        case \"a\":\n          if (hours >= 12) {\n            value = language.translate(\"PM\");\n          } else {\n            value = language.translate(\"AM\");\n          }\n          break;\n        case \"aa\":\n          if (hours >= 12) {\n            value = language.translate(\"P.M.\");\n          } else {\n            value = language.translate(\"A.M.\");\n          }\n          break;\n        case \"aaa\":\n          if (hours >= 12) {\n            value = language.translate(\"P\");\n          } else {\n            value = language.translate(\"A\");\n          }\n          break;\n        case \"h\":\n          value = $utils.get12Hours(hours).toString();\n          break;\n        case \"hh\":\n          value = $utils.padString($utils.get12Hours(hours), 2, \"0\");\n          break;\n        case \"H\":\n          value = hours.toString();\n          break;\n        case \"HH\":\n          value = $utils.padString(hours, 2, \"0\");\n          break;\n        case \"K\":\n          value = $utils.get12Hours(hours, 0).toString();\n          break;\n        case \"KK\":\n          value = $utils.padString($utils.get12Hours(hours, 0), 2, \"0\");\n          break;\n        case \"k\":\n          value = (hours + 1).toString();\n          break;\n        case \"kk\":\n          value = $utils.padString(hours + 1, 2, \"0\");\n          break;\n        case \"m\":\n          value = minutes.toString();\n          break;\n        case \"mm\":\n          value = $utils.padString(minutes, 2, \"0\");\n          break;\n        case \"s\":\n          value = seconds.toString();\n          break;\n        case \"ss\":\n          value = $utils.padString(seconds, 2, \"0\");\n          break;\n        case \"S\":\n        case \"SS\":\n        case \"SSS\":\n          value = Math.round(milliseconds / 1000 * Math.pow(10, info.parts[i].length)).toString();\n          break;\n        case \"x\":\n          value = timestamp.toString();\n          break;\n        case \"n\":\n        case \"nn\":\n        case \"nnn\":\n          value = $utils.padString(milliseconds, info.parts[i].length, \"0\");\n          break;\n        case \"z\":\n          value = $utils.getTimeZone(date, false, false, this.utc);\n          break;\n        case \"zz\":\n          value = $utils.getTimeZone(date, true, false, this.utc);\n          break;\n        case \"zzz\":\n          value = $utils.getTimeZone(date, false, true, this.utc);\n          break;\n        case \"zzzz\":\n          value = $utils.getTimeZone(date, true, true, this.utc);\n          break;\n        case \"Z\":\n        case \"ZZ\":\n          var tz = Math.abs(offset) / 60;\n          var tzh = Math.floor(tz);\n          var tzm = tz * 60 - tzh * 60;\n          if (this.utc) {\n            tzh = 0;\n            tzm = 0;\n          }\n          if (info.parts[i] == \"Z\") {\n            value = \"GMT\";\n            value += offset > 0 ? \"-\" : \"+\";\n            value += $utils.padString(tzh, 2) + \":\" + $utils.padString(tzm, 2);\n          } else {\n            value = offset > 0 ? \"-\" : \"+\";\n            value += $utils.padString(tzh, 2) + $utils.padString(tzm, 2);\n          }\n          break;\n        case \"i\":\n          value = date.toISOString();\n          break;\n        case \"I\":\n          value = date.toUTCString();\n          break;\n      }\n      res = res.replace($strings.PLACEHOLDER, value);\n    }\n    return res;\n  };\n  /**\r\n   * Parses any input value into Date object.\r\n   *\r\n   * @see {@link https://www.amcharts.com/docs/v4/concepts/formatters/formatting-date-time/#Parsing_Dates} Tutorial on date/time parsing\r\n   * @param source  Source value\r\n   * @param format  Source format\r\n   * @return Date object\r\n   */\n  DateFormatter.prototype.parse = function (source, format) {\n    // Format set?\n    if (!$type.hasValue(format)) {\n      format = this.inputDateFormat;\n    }\n    // Is it already a Date\n    if (source instanceof Date) {\n      return source;\n    }\n    // Is it a numeric timestamp\n    if (typeof source === \"number\") {\n      return new Date(source);\n    }\n    // No? Let's check if it's string, and try converting to it if nec\n    if (typeof source !== \"string\") {\n      source = source.toString();\n    }\n    // no language?\n    if (!this.language) {\n      if (this.sprite) {\n        this.language = this.sprite.language;\n      } else {\n        this.language = new Language();\n      }\n    }\n    // Init return value\n    var res;\n    // Init RegEx for parsing\n    var reg = \"\";\n    // Clean format\n    format = $utils.cleanFormat(format);\n    // Clip format to length of the source string\n    format = format.substr(0, source.length);\n    // Parse format\n    var info = this.parseFormat(format);\n    // Init parsed items holder\n    var parsedIndexes = {\n      \"year\": -1,\n      \"year3\": -1,\n      \"year2\": -1,\n      \"year1\": -1,\n      \"month\": -1,\n      \"monthShort\": -1,\n      \"monthLong\": -1,\n      \"weekdayShort\": -1,\n      \"weekdayLong\": -1,\n      \"day\": -1,\n      \"yearDay\": -1,\n      \"week\": -1,\n      \"hourBase0\": -1,\n      \"hour12Base0\": -1,\n      \"hourBase1\": -1,\n      \"hour12Base1\": -1,\n      \"minute\": -1,\n      \"second\": -1,\n      \"millisecond\": -1,\n      \"millisecondDigits\": -1,\n      \"am\": -1,\n      \"zone\": -1,\n      \"timestamp\": -1,\n      \"iso\": -1\n    };\n    // Init values\n    var resValues = {\n      \"year\": 1970,\n      \"month\": 0,\n      \"day\": 1,\n      \"hour\": 0,\n      \"minute\": 0,\n      \"second\": 0,\n      \"millisecond\": 0,\n      \"timestamp\": null,\n      \"offset\": 0,\n      \"utc\": this.utc\n    };\n    // Index adjuster\n    var indexAdjust = 0,\n      index = 0;\n    // Iterate through all of the parts\n    for (var i = 0; i < info.parts.length; i++) {\n      // Set current match index\n      index = i + indexAdjust + 1;\n      switch (info.parts[i]) {\n        case \"yyyy\":\n        case \"YYYY\":\n          reg += \"([0-9]{4})\";\n          parsedIndexes.year = index;\n          break;\n        case \"yyy\":\n        case \"YYY\":\n          reg += \"([0-9]{3})\";\n          parsedIndexes.year3 = index;\n          break;\n        case \"yy\":\n        case \"YY\":\n          reg += \"([0-9]{2})\";\n          parsedIndexes.year2 = index;\n          break;\n        case \"y\":\n        case \"Y\":\n          reg += \"([0-9]{1})\";\n          parsedIndexes.year1 = index;\n          break;\n        case \"MMMM\":\n          reg += \"(\" + this.getStringList(this.months).join(\"|\") + \")\";\n          parsedIndexes.monthLong = index;\n          break;\n        case \"MMM\":\n          reg += \"(\" + this.getStringList(this.monthsShort).join(\"|\") + \")\";\n          parsedIndexes.monthShort = index;\n          break;\n        case \"MM\":\n        case \"M\":\n          reg += \"([0-9]{2}|[0-9]{1})\";\n          parsedIndexes.month = index;\n          break;\n        case \"ww\":\n        case \"w\":\n          reg += \"([0-9]{2}|[0-9]{1})\";\n          parsedIndexes.week = index;\n          break;\n        case \"dd\":\n        case \"d\":\n          reg += \"([0-9]{2}|[0-9]{1})\";\n          parsedIndexes.day = index;\n          break;\n        case \"DDD\":\n        case \"DD\":\n        case \"D\":\n          reg += \"([0-9]{3}|[0-9]{2}|[0-9]{1})\";\n          parsedIndexes.yearDay = index;\n          break;\n        case \"dddd\":\n          reg += \"(\" + this.getStringList(this.weekdays).join(\"|\") + \")\";\n          parsedIndexes.weekdayLong = index;\n          break;\n        case \"ddd\":\n          reg += \"(\" + this.getStringList(this.weekdaysShort).join(\"|\") + \")\";\n          parsedIndexes.weekdayShort = index;\n          break;\n        case \"aaa\":\n        case \"aa\":\n        case \"a\":\n          // TODO: fix (escape regex)\n          reg += \"(\" + this.getStringList([\"AM\", \"PM\", \"A\\.M\\.\", \"P\\.M\\.\", \"A\", \"P\"]).join(\"|\") + \")\";\n          parsedIndexes.am = index;\n          break;\n        case \"hh\":\n        case \"h\":\n          reg += \"([0-9]{2}|[0-9]{1})\";\n          parsedIndexes.hour12Base1 = index;\n          break;\n        case \"HH\":\n        case \"H\":\n          reg += \"([0-9]{2}|[0-9]{1})\";\n          parsedIndexes.hourBase0 = index;\n          break;\n        case \"KK\":\n        case \"K\":\n          reg += \"([0-9]{2}|[0-9]{1})\";\n          parsedIndexes.hour12Base0 = index;\n          break;\n        case \"kk\":\n        case \"k\":\n          reg += \"([0-9]{2}|[0-9]{1})\";\n          parsedIndexes.hourBase1 = index;\n          break;\n        case \"mm\":\n        case \"m\":\n          reg += \"([0-9]{2}|[0-9]{1})\";\n          parsedIndexes.minute = index;\n          break;\n        case \"ss\":\n        case \"s\":\n          reg += \"([0-9]{2}|[0-9]{1})\";\n          parsedIndexes.second = index;\n          break;\n        case \"SSS\":\n        case \"SS\":\n        case \"S\":\n          reg += \"([0-9]{3}|[0-9]{2}|[0-9]{1})\";\n          parsedIndexes.millisecond = index;\n          parsedIndexes.millisecondDigits = info.parts[i].length;\n          break;\n        case \"nnn\":\n        case \"nn\":\n        case \"n\":\n          reg += \"([0-9]{3}|[0-9]{2}|[0-9]{1})\";\n          parsedIndexes.millisecond = index;\n          break;\n        case \"x\":\n          reg += \"([0-9]{1,})\";\n          parsedIndexes.timestamp = index;\n          break;\n        case \"Z\":\n          reg += \"GMT([-+]+[0-9]{2}:[0-9]{2})\";\n          parsedIndexes.zone = index;\n          break;\n        case \"ZZ\":\n          reg += \"([\\\\-+]+[0-9]{2}[0-9]{2})\";\n          parsedIndexes.zone = index;\n          break;\n        case \"i\":\n          reg += \"([0-9]{4})-?([0-9]{2})-?([0-9]{2})T?([0-9]{2}):?([0-9]{2}):?([0-9]{2})\\.?([0-9]{0,3})([zZ]|[+\\-][0-9]{2}:?[0-9]{2}|$)\";\n          parsedIndexes.iso = index;\n          indexAdjust += 7;\n          break;\n        case \"G\":\n        case \"YYYY\":\n        case \"YYY\":\n        case \"YY\":\n        case \"Y\":\n        case \"MMMMM\":\n        case \"W\":\n        case \"EEEEE\":\n        case \"EEEE\":\n        case \"EEE\":\n        case \"EE\":\n        case \"E\":\n        case \"eeeee\":\n        case \"eeee\":\n        case \"eee\":\n        case \"ee\":\n        case \"e\":\n        case \"zzzz\":\n        case \"zzz\":\n        case \"zz\":\n        case \"z\":\n        case \"t\":\n          // Ignore\n          indexAdjust--;\n          break;\n      }\n      reg += \"[^0-9]*\";\n    }\n    // Try matching\n    var regex = new RegExp(reg);\n    var matches = source.match(regex);\n    if (matches) {\n      // Populate the date object\n      // Full year\n      if (parsedIndexes.year > -1) {\n        resValues.year = parseInt(matches[parsedIndexes.year]);\n      }\n      // 3-digit year\n      if (parsedIndexes.year3 > -1) {\n        var val = parseInt(matches[parsedIndexes.year3]);\n        val += 1000;\n        resValues.year = val;\n      }\n      // 2-digit year\n      if (parsedIndexes.year2 > -1) {\n        var val = parseInt(matches[parsedIndexes.year2]);\n        if (val > 50) {\n          val += 1000;\n        } else {\n          val += 2000;\n        }\n        resValues.year = val;\n      }\n      // 1-digit year\n      if (parsedIndexes.year1 > -1) {\n        var val = parseInt(matches[parsedIndexes.year1]);\n        val = Math.floor(new Date().getFullYear() / 10) * 10 + val;\n        resValues.year = val;\n      }\n      // Full month\n      if (parsedIndexes.monthLong > -1) {\n        resValues.month = this.resolveMonth(matches[parsedIndexes.monthLong]);\n      }\n      // Short month\n      if (parsedIndexes.monthShort > -1) {\n        resValues.month = this.resolveShortMonth(matches[parsedIndexes.monthShort]);\n      }\n      // Numeric month\n      if (parsedIndexes.month > -1) {\n        resValues.month = parseInt(matches[parsedIndexes.month]) - 1;\n      }\n      // Weekday\n      // @todo\n      // Week\n      if (parsedIndexes.week > -1 && parsedIndexes.day === -1) {\n        // We parse weeks ONLY if day is not explicitly set\n        // TODO: this needs work\n        // (but maybe later - I can hardly imagine anyone passing their dates in weeks)\n        resValues.month = 0;\n        resValues.day = $utils.getDayFromWeek(parseInt(matches[parsedIndexes.week]), resValues.year, 1, this.utc);\n      }\n      // Day\n      if (parsedIndexes.day > -1) {\n        resValues.day = parseInt(matches[parsedIndexes.day]);\n      }\n      // Year day\n      if (parsedIndexes.yearDay > -1) {\n        resValues.month = 0;\n        resValues.day = parseInt(matches[parsedIndexes.yearDay]);\n      }\n      // 24 Hour (0-23)\n      if (parsedIndexes.hourBase0 > -1) {\n        resValues.hour = parseInt(matches[parsedIndexes.hourBase0]);\n      }\n      // 24 Hour (1-24)\n      if (parsedIndexes.hourBase1 > -1) {\n        resValues.hour = parseInt(matches[parsedIndexes.hourBase1]) - 1;\n      }\n      // 12 Hour (0-11)\n      if (parsedIndexes.hour12Base0 > -1) {\n        var val = parseInt(matches[parsedIndexes.hour12Base0]);\n        if (val == 11) {\n          val = 0;\n        }\n        if (parsedIndexes.am > -1 && !this.isAm(matches[parsedIndexes.am])) {\n          val += 12;\n        }\n        resValues.hour = val;\n      }\n      // 12 Hour (1-12)\n      if (parsedIndexes.hour12Base1 > -1) {\n        var val = parseInt(matches[parsedIndexes.hour12Base1]);\n        if (val == 12) {\n          val = 0;\n        }\n        if (parsedIndexes.am > -1 && !this.isAm(matches[parsedIndexes.am])) {\n          val += 12;\n        }\n        resValues.hour = val;\n      }\n      // Minute\n      if (parsedIndexes.minute > -1) {\n        resValues.minute = parseInt(matches[parsedIndexes.minute]);\n      }\n      // Second\n      if (parsedIndexes.second > -1) {\n        resValues.second = parseInt(matches[parsedIndexes.second]);\n      }\n      // Millisecond\n      if (parsedIndexes.millisecond > -1) {\n        var val = parseInt(matches[parsedIndexes.millisecond]);\n        if (parsedIndexes.millisecondDigits == 2) {\n          val *= 10;\n        } else if (parsedIndexes.millisecondDigits == 1) {\n          val *= 100;\n        }\n        resValues.millisecond = val;\n      }\n      // Timestamp\n      if (parsedIndexes.timestamp > -1) {\n        resValues.timestamp = parseInt(matches[parsedIndexes.timestamp]);\n        var ts = new Date(resValues.timestamp);\n        resValues.year = ts.getUTCFullYear();\n        resValues.month = ts.getUTCMonth();\n        resValues.day = ts.getUTCDate();\n        resValues.hour = ts.getUTCHours();\n        resValues.minute = ts.getUTCMinutes();\n        resValues.second = ts.getUTCSeconds();\n        resValues.millisecond = ts.getUTCMilliseconds();\n      }\n      // Adjust time zone\n      if (parsedIndexes.zone > -1) {\n        resValues.offset = this.resolveTimezoneOffset(new Date(resValues.year, resValues.month, resValues.day), matches[parsedIndexes.zone]);\n      }\n      // ISO\n      if (parsedIndexes.iso > -1) {\n        resValues.year = $type.toNumber(matches[parsedIndexes.iso + 0]);\n        resValues.month = $type.toNumber(matches[parsedIndexes.iso + 1]) - 1;\n        resValues.day = $type.toNumber(matches[parsedIndexes.iso + 2]);\n        resValues.hour = $type.toNumber(matches[parsedIndexes.iso + 3]);\n        resValues.minute = $type.toNumber(matches[parsedIndexes.iso + 4]);\n        resValues.second = $type.toNumber(matches[parsedIndexes.iso + 5]);\n        resValues.millisecond = $type.toNumber(matches[parsedIndexes.iso + 6]);\n        if (matches[parsedIndexes.iso + 7] == \"Z\" || matches[parsedIndexes.iso + 7] == \"z\") {\n          resValues.utc = true;\n        } else if (matches[parsedIndexes.iso + 7] != \"\") {\n          resValues.offset = this.resolveTimezoneOffset(new Date(resValues.year, resValues.month, resValues.day), matches[parsedIndexes.iso + 7]);\n        }\n      }\n      // Create Date object\n      if (resValues.utc) {\n        res = new Date(Date.UTC(resValues.year, resValues.month, resValues.day, resValues.hour, resValues.minute, resValues.second, resValues.millisecond));\n      } else {\n        res = new Date(resValues.year, resValues.month, resValues.day, resValues.hour, resValues.minute + resValues.offset, resValues.second, resValues.millisecond);\n      }\n    } else {\n      // Didn't match anything\n      // Let's try dropping it into Date constructor and hope for the best\n      res = new Date(source);\n    }\n    return res;\n  };\n  DateFormatter.prototype.resolveTimezoneOffset = function (date, zone) {\n    var value = zone.match(/([+\\-]?)([0-9]{2}):?([0-9]{2})/);\n    if (value) {\n      var match = $type.getValue(zone.match(/([+\\-]?)([0-9]{2}):?([0-9]{2})/));\n      var dir = match[1];\n      var hour = match[2];\n      var minute = match[3];\n      var offset = parseInt(hour) * 60 + parseInt(minute);\n      // Adjust offset\n      // Making it negative does not seem to make sense, but it's right\n      // because of how JavaScript calculates GMT offsets\n      if (dir == \"+\") {\n        offset *= -1;\n      }\n      // Check the difference in offset\n      var originalOffset = (date || new Date()).getTimezoneOffset();\n      var diff = offset - originalOffset;\n      return diff;\n    }\n    return 0;\n  };\n  /**\r\n   * Resolves month name (i.e. \"December\") into a month number (11).\r\n   *\r\n   * @param value  Month name\r\n   * @return Month number\r\n   */\n  DateFormatter.prototype.resolveMonth = function (value) {\n    // Let's try English first\n    var month = this.months.indexOf(value);\n    if (month > -1) {\n      return month;\n    }\n    // Try the translation\n    if (this.language && !this.language.isDefault()) {\n      month = this.language.translateAll(this.months).indexOf(value);\n      if (month > -1) {\n        return month;\n      }\n    }\n    return 0;\n  };\n  /**\r\n   * Resolves short month name (i.e. \"Dec\") into a month number.\r\n   *\r\n   * @param value  Short month name\r\n   * @return Month number\r\n   */\n  DateFormatter.prototype.resolveShortMonth = function (value) {\n    // Let's try English first\n    var month = this.monthsShort.indexOf(value);\n    if (month > -1) {\n      return month;\n    }\n    // Maybe long month (workaround for May)\n    month = this.months.indexOf(value);\n    if (month > -1) {\n      return month;\n    }\n    // Try the translation\n    if (this.language && !this.language.isDefault()) {\n      month = this.language.translateAll(this.monthsShort).indexOf(value);\n      if (month > -1) {\n        return month;\n      }\n    }\n    return 0;\n  };\n  /**\r\n   * Checks if passed in string represents AM/PM notation in many of its\r\n   * versions.\r\n   *\r\n   * @param value  Source string\r\n   * @return Is it AM/PM?\r\n   */\n  DateFormatter.prototype.isAm = function (value) {\n    var list = this.getStringList([\"AM\", \"A.M.\", \"A\"]);\n    return list.indexOf(value.toUpperCase()) > -1;\n  };\n  /**\r\n   * Invalidates related [[Sprite]] causing it to redraw.\r\n   */\n  DateFormatter.prototype.invalidateSprite = function () {\n    if (this.sprite) {\n      this.sprite.invalidate();\n    }\n  };\n  /**\r\n   * Translates list of strings.\r\n   *\r\n   * @param list  Source strings\r\n   * @return Translated strings\r\n   */\n  DateFormatter.prototype.getStringList = function (list) {\n    var res = [];\n    for (var i = 0; i < list.length; i++) {\n      // translate?\n      if (this.language) {\n        res.push($utils.escapeForRgex(this.language.translate(list[i])));\n      } else {\n        res.push($utils.escapeForRgex(list[i]));\n      }\n    }\n    return res;\n  };\n  Object.defineProperty(DateFormatter.prototype, \"dateFormat\", {\n    /**\r\n     * @return Date format\r\n     */\n    get: function () {\n      return this._dateFormat;\n    },\n    /**\r\n     * Date format to use.\r\n     *\r\n     * If format is not supplied in-line in the string, this setting will be\r\n     * used.\r\n     *\r\n     * @default \"yyyy-MM-dd\"\r\n     * @param value Date format\r\n     */\n    set: function (value) {\n      this._dateFormat = value;\n      this.invalidateSprite();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(DateFormatter.prototype, \"inputDateFormat\", {\n    /**\r\n     * @return Date format\r\n     */\n    get: function () {\n      return this._inputDateFormat;\n    },\n    /**\r\n     * Date format to use when parsing dates.\r\n     *\r\n     * @default \"yyyy-MM-dd\"\r\n     * @param value Date format\r\n     */\n    set: function (value) {\n      this._inputDateFormat = value;\n      this.invalidateSprite();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(DateFormatter.prototype, \"intlLocales\", {\n    /**\r\n     * @return Date format\r\n     */\n    get: function () {\n      return this._intlLocales;\n    },\n    /**\r\n     * Locales if you are using date formats in `Intl.DateTimeFormatOptions` syntax.\r\n     *\r\n     * @param value Locales\r\n     */\n    set: function (value) {\n      this._intlLocales = value;\n      this.invalidateSprite();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(DateFormatter.prototype, \"utc\", {\n    /**\r\n     * @return Use UTC?\r\n     */\n    get: function () {\n      return this._utc;\n    },\n    /**\r\n     * Should formatter use UTC functions?\r\n     *\r\n     * If UTC is used, all date/time values will be independent on client's\r\n     * time zone.\r\n     *\r\n     * @param value Use UTC?\r\n     */\n    set: function (value) {\n      this._utc = value;\n      this.invalidateSprite();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(DateFormatter.prototype, \"timezoneOffset\", {\n    /**\r\n     * @return Offset (minutes)\r\n     */\n    get: function () {\n      return this._timezoneOffset;\n    },\n    /**\r\n     * If set, will apply specific offset in minutes before formatting the date\r\n     * text.\r\n     *\r\n     * The value is a number of minutes from target time zone to UTC.\r\n     *\r\n     * E.g. `300` will recalculate Dates in \"GMT-5\" time zone.\r\n     *\r\n     * @param  value  Offset (minutes)\r\n     */\n    set: function (value) {\n      if (this._timezoneOffset != value) {\n        this._timezoneOffset = value;\n        this.invalidateSprite();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(DateFormatter.prototype, \"timezone\", {\n    /**\r\n     * @return Timezone\r\n     */\n    get: function () {\n      return this._timezone;\n    },\n    /**\r\n     * If set, will format date/time in specific time zone.\r\n     *\r\n     * The value should be named time zone, e.g.:\r\n     * `\"America/Vancouver\"`, `\"Australia/Sydney\"`, `\"UTC\"`.\r\n     *\r\n     * @since 4.10.1\r\n     * @param  value  Timezone\r\n     */\n    set: function (value) {\n      if (this._timezone != value) {\n        this._timezone = value;\n        this.timezoneMinutes = $time.getTimezoneMinutes(value);\n        this.invalidateSprite();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(DateFormatter.prototype, \"firstDayOfWeek\", {\n    /**\r\n     * @return First day of week\r\n     */\n    get: function () {\n      return this._firstDayOfWeek;\n    },\n    /**\r\n     * First day of the week:\r\n     *\r\n     * * 0 - Sunday\r\n     * * 1 - Monday\r\n     * * 2 - Tuesday\r\n     *\r\n     * Etc.\r\n     *\r\n     * @param value First day of week\r\n     */\n    set: function (value) {\n      this._firstDayOfWeek = value;\n      this.invalidateSprite();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(DateFormatter.prototype, \"outputFormat\", {\n    /**\r\n     * @ignore Exclude from docs\r\n     * @return Format\r\n     */\n    get: function () {\n      return this._outputFormat;\n    },\n    /**\r\n     * Output format for the formatted date.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param value  Format\r\n     */\n    set: function (value) {\n      this._outputFormat = value.toLowerCase();\n      this.invalidateSprite();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return DateFormatter;\n}(BaseObject);\nexport { DateFormatter };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\nregistry.registeredClasses[\"DateFormatter\"] = DateFormatter;","map":{"version":3,"names":["Language","BaseObject","getTextFormatter","registry","$strings","$utils","$type","$time","DateFormatter","_super","__extends","_this","call","_dateFormat","_inputDateFormat","_utc","timezoneMinutes","_firstDayOfWeek","months","monthsShort","weekdays","weekdaysShort","_outputFormat","capitalize","className","applyTheme","Object","defineProperty","prototype","get","_language","set","value","dateFormat","translate","format","source","applyTimezone","language","sprite","formatted","date","isString","parse","anyToDate","isObject","intlLocales","Intl","DateTimeFormat","undefined","e","cleanFormat","info","parseFormat","hasValue","timezoneOffset","setMinutes","getMinutes","getTimezoneOffset","timezone","setTimezone","isNumber","getTime","applyFormat","replace","substr","toUpperCase","cached","getCache","chunks","chunk","i","length","type","text","match","matches","x","parts","push","PLACEHOLDER","template","setCache","res","fullYear","month","weekday","day","hours","minutes","seconds","milliseconds","offset","timestamp","utc","getUTCFullYear","getUTCMonth","getUTCDay","getUTCDate","getUTCHours","getUTCMinutes","getUTCSeconds","getUTCMilliseconds","getFullYear","getMonth","getDay","getDate","getHours","getSeconds","getMilliseconds","len","Math","abs","toString","year","getWeekYear","ceil","padString","getWeek","getMonthWeek","getYearDay","translateFunc","firstDayOfWeek","get12Hours","round","pow","getTimeZone","tz","tzh","floor","tzm","toISOString","toUTCString","inputDateFormat","Date","reg","parsedIndexes","resValues","indexAdjust","index","year3","year2","year1","getStringList","join","monthLong","monthShort","week","yearDay","weekdayLong","weekdayShort","am","hour12Base1","hourBase0","hour12Base0","hourBase1","minute","second","millisecond","millisecondDigits","zone","iso","regex","RegExp","parseInt","val","resolveMonth","resolveShortMonth","getDayFromWeek","hour","isAm","ts","resolveTimezoneOffset","toNumber","UTC","getValue","dir","originalOffset","diff","indexOf","isDefault","translateAll","list","invalidateSprite","invalidate","escapeForRgex","_intlLocales","_timezoneOffset","_timezone","getTimezoneMinutes","toLowerCase","registeredClasses"],"sources":["../../../../../src/.internal/core/formatters/DateFormatter.ts"],"sourcesContent":["/**\r\n * Handles date and time formatting\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Sprite } from \"../Sprite\";\r\nimport { Language, ILocaleProperties } from \"../utils/Language\";\r\nimport { BaseObject } from \"../Base\";\r\nimport { ITextChunk, getTextFormatter } from \"../formatters/TextFormatter\";\r\nimport { registry } from \"../Registry\";\r\nimport * as $strings from \"../utils/Strings\";\r\nimport * as $utils from \"../utils/Utils\";\r\nimport * as $type from \"../utils/Type\";\r\nimport * as $time from \"../utils/Time\";\r\n\r\n/**\r\n * Interface describing parsed date format definition.\r\n */\r\nexport interface DateFormatInfo {\r\n\t\"template\": string;\r\n\t\"parts\": any[];\r\n}\r\n\r\n/**\r\n * Month names.\r\n */\r\nexport type MonthNames = \"January\" | \"February\" | \"March\" | \"April\" | \"May\" | \"June\" | \"July\" | \"August\" | \"September\" | \"October\" | \"November\" | \"December\";\r\n\r\n/**\r\n * Short month names.\r\n *\r\n * @param {string}\r\n */\r\nexport type ShortMonthNames = \"Jan\" | \"Feb\" | \"Mar\" | \"Apr\" | \"May(short)\" | \"Jun\" | \"Jul\" | \"Aug\" | \"Sep\" | \"Oct\" | \"Nov\" | \"Dec\";\r\n\r\n/**\r\n * Weekedays.\r\n */\r\nexport type Weekdays = \"Sunday\" | \"Monday\" | \"Tuesday\" | \"Wednesday\" | \"Thursday\" | \"Friday\" | \"Saturday\";\r\n\r\n/**\r\n * Short weekday names.\r\n */\r\nexport type ShortWeekdays = \"Sun\" | \"Mon\" | \"Tue\" | \"Wed\" | \"Thu\" | \"Fri\" | \"Sat\";\r\n\r\n/**\r\n * Handles date and time formatting.\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v4/concepts/formatters/formatting-date-time/} Tutorial on date/time formatting\r\n * @todo Better type casting of passed in date?\r\n * @todo Quarter support?\r\n * @todo When parsing named months make the search case-insensitive\r\n * @todo Escape a.m./p.m. properly when used in RegEx\r\n */\r\nexport class DateFormatter extends BaseObject {\r\n\r\n\t/**\r\n\t * Date format.\r\n\t */\r\n\tprotected _dateFormat: string | Intl.DateTimeFormatOptions = \"yyyy-MM-dd\";\r\n\r\n\t/**\r\n\t * Locales to use when formatting using Intl.DateFormatter\r\n\t */\r\n\tprotected _intlLocales: string;\r\n\r\n\t/**\r\n\t * Input date format.\r\n\t */\r\n\tprotected _inputDateFormat: string = \"yyyy-MM-dd\";\r\n\r\n\t/**\r\n\t * Assume UTC time zone.\r\n\t */\r\n\tprotected _utc: boolean = false;\r\n\r\n\t/**\r\n\t * Timezone offset.\r\n\t */\r\n\tprotected _timezoneOffset: $type.Optional<number>;\r\n\r\n\t/**\r\n\t * Timezone.\r\n\t */\r\n\tprotected _timezone: $type.Optional<string>;\r\n\r\n\t/**\r\n\t * If `timezone` is set, this will hold minute fraction of the timezone.\r\n\t * \r\n\t * @readonly\r\n\t * @ignore\r\n\t */\r\n\tpublic timezoneMinutes: number = 0;\r\n\r\n\t/**\r\n\t * First day of week.\r\n\t *\r\n\t * 0 - Sunday\r\n\t * 1 - Monday\r\n\t *\r\n\t * Etc.\r\n\t */\r\n\tprotected _firstDayOfWeek: number = 1;\r\n\r\n\t/**\r\n\t * A list of month names.\r\n\t */\r\n\tpublic months: Array<MonthNames> = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\r\n\r\n\t/**\r\n\t * A list of short month names.\r\n\t */\r\n\tpublic monthsShort: Array<ShortMonthNames> = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May(short)\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"];\r\n\r\n\t/**\r\n\t * A list of weekday names.\r\n\t */\r\n\tpublic weekdays: Array<Weekdays> = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\r\n\r\n\t/**\r\n\t * A list of short weekday names.\r\n\t */\r\n\tpublic weekdaysShort: Array<ShortWeekdays> = [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"];\r\n\r\n\t/**\r\n\t * Output format to produce. If the format calls for applying color to the\r\n\t * formatted value, this setting will determine what markup to use: SVG or\r\n\t * HTML.\r\n\t *\r\n\t * Available options: svg, html.\r\n\t *\r\n\t * @default \"svg\"\r\n\t */\r\n\tprotected _outputFormat: string = \"svg\";\r\n\r\n\t/**\r\n\t * Holds reference to parent [[Sprite]] object.\r\n\t */\r\n\tpublic sprite: $type.Optional<Sprite>;\r\n\r\n\t/**\r\n\t * Holds reference to [[Language]] object.\r\n\t */\r\n\tpublic _language: $type.Optional<Language>;\r\n\r\n\t/**\r\n\t * Should the first letter of the formatted date be capitalized?\r\n\t *\r\n\t * @default true\r\n\t */\r\n\tpublic capitalize: boolean = true;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"DateFormatter\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * A reference to [[Language]] object.\r\n\t *\r\n\t * @param  value  Language\r\n\t */\r\n\tpublic set language(value: $type.Optional<Language>) {\r\n\t\tthis._language = value;\r\n\t\tthis.dateFormat = this._language.translate(\"_date\");\r\n\t}\r\n\r\n\t/**\r\n\t * @return Language\r\n\t */\r\n\tpublic get language(): $type.Optional<Language> {\r\n\t\treturn this._language;\r\n\t}\r\n\r\n\t/**\r\n\t * Formats the date value according to specified format.\r\n\t *\r\n\t * @see {@link https://www.amcharts.com/docs/v4/concepts/formatters/formatting-date-time/} Tutorial on date/time formatting\r\n\t * @param source  Date value\r\n\t * @param format  Format\r\n\t * @return Formatted date string\r\n\t */\r\n\tpublic format(source: any, format?: string | Intl.DateTimeFormatOptions, applyTimezone?: boolean): string {\r\n\r\n\t\t// No language?\r\n\t\tif (!this.language) {\r\n\t\t\tif (this.sprite) {\r\n\t\t\t\tthis.language = this.sprite.language;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.language = new Language();\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// No format passed in or it's empty\r\n\t\tif (typeof format === \"undefined\" || format === \"\") {\r\n\t\t\tformat = this._dateFormat;\r\n\t\t}\r\n\r\n\t\t// Init return value\r\n\t\tlet formatted;\r\n\r\n\t\t// Do casting if required\r\n\t\t// This will take care of timestamps as well as Date objects\r\n\t\tlet date: Date;\r\n\t\tif ($type.isString(source)) {\r\n\t\t\t// If it's a string, let's try parsing it using our own functionality\r\n\t\t\tdate = this.parse(source);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tdate = $utils.anyToDate(source);\r\n\t\t}\r\n\r\n\t\t// Is it a built-in format or Intl.DateTimeFormat\r\n\t\tif ($type.isObject(format)) {\r\n\r\n\t\t\ttry {\r\n\t\t\t\tif (this.intlLocales) {\r\n\t\t\t\t\treturn new Intl.DateTimeFormat(this.intlLocales, <Intl.DateTimeFormatOptions>format).format(date);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\treturn new Intl.DateTimeFormat(undefined, <Intl.DateTimeFormatOptions>format).format(date);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tcatch (e) {\r\n\t\t\t\treturn \"Invalid\";\r\n\t\t\t}\r\n\r\n\t\t}\r\n\t\telse {\r\n\r\n\t\t\t// Clean format\r\n\t\t\tformat = $utils.cleanFormat(format);\r\n\r\n\t\t\t// get format info (it will also deal with parser caching)\r\n\t\t\tlet info = this.parseFormat(format);\r\n\r\n\t\t\t// Should we apply custom time zone?\r\n\t\t\tif ($type.hasValue(this.timezoneOffset)) {\r\n\t\t\t\tdate.setMinutes(date.getMinutes() + date.getTimezoneOffset() - this.timezoneOffset);\r\n\t\t\t}\r\n\t\t\telse if ($type.hasValue(this.timezone) && applyTimezone !== false) {\r\n\t\t\t\tdate = $time.setTimezone(date, this.timezone);\r\n\t\t\t}\r\n\r\n\t\t\t// Check if it's a valid date\r\n\t\t\tif (!$type.isNumber(date.getTime())) {\r\n\t\t\t\treturn this.language.translate(\"Invalid date\");\r\n\t\t\t}\r\n\r\n\t\t\t// Apply format\r\n\t\t\tformatted = this.applyFormat(date, info, this.language);\r\n\r\n\t\t\t// Capitalize\r\n\t\t\tif (this.capitalize) {\r\n\t\t\t\tformatted = formatted.replace(\r\n\t\t\t\t\t/^.{1}/, formatted.substr(0, 1).toUpperCase()\r\n\t\t\t\t);\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// We're done\r\n\t\treturn formatted;\r\n\t}\r\n\r\n\t/**\r\n\t * Parses format into structured infromation.\r\n\t *\r\n\t * @param format Format template\r\n\t */\r\n\tprotected parseFormat(format: string): DateFormatInfo {\r\n\r\n\t\t// Check cache\r\n\t\tlet cached = this.getCache(format);\r\n\t\tif ($type.hasValue(cached)) {\r\n\t\t\treturn cached;\r\n\t\t}\r\n\r\n\t\t// Init format parse info holder\r\n\t\tlet info: DateFormatInfo = {\r\n\t\t\t\"template\": \"\",\r\n\t\t\t\"parts\": <any>[]\r\n\t\t};\r\n\r\n\t\t// Let TextFormatter split into chunks\r\n\t\tlet chunks: ITextChunk[] = getTextFormatter().chunk(format, true);\r\n\t\tfor (let i: number = 0; i < chunks.length; i++) {\r\n\t\t\tlet chunk: ITextChunk = chunks[i];\r\n\r\n\t\t\tif (chunk.type === \"value\") {\r\n\r\n\t\t\t\t// Just \"Date\"?\r\n\t\t\t\tif (chunk.text.match(/^date$/i) && $type.isString(this._dateFormat)) {\r\n\t\t\t\t\tchunk.text = this._dateFormat;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Find all possible parts\r\n\t\t\t\tlet matches = chunk.text.match(/G|yyyy|yyy|yy|y|YYYY|YYY|YY|Y|u|q|MMMMM|MMMM|MMM|MM|M|ww|w|W|dd|d|DDD|DD|D|F|g|EEEEE|EEEE|EEE|EE|E|eeeee|eeee|eee|ee|e|aaa|aa|a|hh|h|HH|H|KK|K|kk|k|mm|m|ss|s|SSS|SS|S|A|zzzz|zzz|zz|z|ZZ|Z|t|x|nnn|nn|n|i|I/g);\r\n\r\n\t\t\t\t// Found?\r\n\t\t\t\tif (matches) {\r\n\r\n\t\t\t\t\t// Populate template\r\n\t\t\t\t\tfor (let x = 0; x < matches.length; x++) {\r\n\t\t\t\t\t\tinfo.parts.push(matches[x]);\r\n\t\t\t\t\t\tchunk.text = chunk.text.replace(matches[x], $strings.PLACEHOLDER);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// Apply to template\r\n\t\t\tinfo.template += chunk.text;\r\n\t\t}\r\n\r\n\t\t// Apply style formatting\r\n\t\t//info.template = getTextFormatter().format(info.template, this.outputFormat);\r\n\r\n\t\t// Save cache\r\n\t\tthis.setCache(format, info);\r\n\r\n\t\treturn info;\r\n\t}\r\n\r\n\t/**\r\n\t * Applies format to Date.\r\n\t *\r\n\t * @param date      Date object\r\n\t * @param info      Parsed format information\r\n\t * @param language  Language\r\n\t * @return Formatted date string\r\n\t */\r\n\tprotected applyFormat(date: Date, info: DateFormatInfo, language: Language): string {\r\n\r\n\t\t// Init return value\r\n\t\tlet res = info.template;\r\n\r\n\t\t// Get values\r\n\t\tlet fullYear: number,\r\n\t\t\tmonth: number,\r\n\t\t\tweekday: number,\r\n\t\t\tday: number,\r\n\t\t\thours: number,\r\n\t\t\tminutes: number,\r\n\t\t\tseconds: number,\r\n\t\t\tmilliseconds: number,\r\n\t\t\toffset: number = date.getTimezoneOffset(),\r\n\t\t\ttimestamp: number = date.getTime();\r\n\t\tif (this.utc) {\r\n\t\t\tfullYear = date.getUTCFullYear();\r\n\t\t\tmonth = date.getUTCMonth();\r\n\t\t\tweekday = date.getUTCDay();\r\n\t\t\tday = date.getUTCDate();\r\n\t\t\thours = date.getUTCHours();\r\n\t\t\tminutes = date.getUTCMinutes();\r\n\t\t\tseconds = date.getUTCSeconds();\r\n\t\t\tmilliseconds = date.getUTCMilliseconds();\r\n\t\t}\r\n\t\telse {\r\n\t\t\tfullYear = date.getFullYear();\r\n\t\t\tmonth = date.getMonth();\r\n\t\t\tweekday = date.getDay();\r\n\t\t\tday = date.getDate();\r\n\t\t\thours = date.getHours();\r\n\t\t\tminutes = date.getMinutes();\r\n\t\t\tseconds = date.getSeconds();\r\n\t\t\tmilliseconds = date.getMilliseconds();\r\n\t\t}\r\n\r\n\t\t// Go through each part and format/replace it in template\r\n\t\tfor (let i = 0, len = info.parts.length; i < len; i++) {\r\n\t\t\tlet value: string = \"\";\r\n\t\t\tswitch (info.parts[i]) {\r\n\r\n\t\t\t\tcase \"G\":\r\n\t\t\t\t\tvalue = language.translate(\r\n\t\t\t\t\t\tfullYear < 0\r\n\t\t\t\t\t\t\t? \"_era_bc\"\r\n\t\t\t\t\t\t\t: \"_era_ad\"\r\n\t\t\t\t\t);\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase \"yyyy\":\r\n\t\t\t\t\tvalue = Math.abs(fullYear).toString();\r\n\t\t\t\t\tif (fullYear < 0) {\r\n\t\t\t\t\t\tvalue += language.translate(\"_era_bc\");\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase \"yyy\":\r\n\t\t\t\tcase \"yy\":\r\n\t\t\t\tcase \"y\":\r\n\t\t\t\t\tvalue = Math.abs(fullYear).toString().substr(-info.parts[i].length);\r\n\t\t\t\t\tif (fullYear < 0) {\r\n\t\t\t\t\t\tvalue += language.translate(\"_era_bc\");\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase \"YYYY\":\r\n\t\t\t\tcase \"YYY\":\r\n\t\t\t\tcase \"YY\":\r\n\t\t\t\tcase \"Y\":\r\n\t\t\t\t\tlet year = $utils.getWeekYear(date);\r\n\t\t\t\t\tif (info.parts[i] == \"YYYY\") {\r\n\t\t\t\t\t\tvalue = Math.abs(year).toString();\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tvalue = Math.abs(year).toString().substr(-info.parts[i].length);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (year < 0) {\r\n\t\t\t\t\t\tvalue += language.translate(\"_era_bc\");\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase \"u\":\r\n\t\t\t\t\t// @todo\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase \"q\":\r\n\t\t\t\t\tvalue = \"\" + Math.ceil((date.getMonth() + 1) / 3);\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase \"MMMMM\":\r\n\t\t\t\t\tvalue = language.translate(this.months[month]).substr(0, 1);\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase \"MMMM\":\r\n\t\t\t\t\tvalue = language.translate(this.months[month]);\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase \"MMM\":\r\n\t\t\t\t\tvalue = language.translate(this.monthsShort[month]);\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase \"MM\":\r\n\t\t\t\t\tvalue = $utils.padString(month + 1, 2, \"0\");\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase \"M\":\r\n\t\t\t\t\tvalue = (month + 1).toString();\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase \"ww\":\r\n\t\t\t\t\tvalue = $utils.padString($utils.getWeek(date, this.utc), 2, \"0\");\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase \"w\":\r\n\t\t\t\t\tvalue = $utils.getWeek(date, this.utc).toString();\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase \"W\":\r\n\t\t\t\t\tvalue = $utils.getMonthWeek(date, this.utc).toString();\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase \"dd\":\r\n\t\t\t\t\tvalue = $utils.padString(day, 2, \"0\");\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase \"d\":\r\n\t\t\t\t\tvalue = day.toString();\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase \"DD\":\r\n\t\t\t\tcase \"DDD\":\r\n\t\t\t\t\tvalue = $utils.padString($utils.getYearDay(date, this.utc).toString(), info.parts[i].length, \"0\");\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase \"D\":\r\n\t\t\t\t\tvalue = $utils.getYearDay(date, this.utc).toString();\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase \"F\":\r\n\t\t\t\t\t// @todo\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase \"g\":\r\n\t\t\t\t\t// @todo\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase \"t\":\r\n\t\t\t\t\tvalue = language.translateFunc(\"_dateOrd\").call(this, day);\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase \"E\":\r\n\t\t\t\t\tvalue = (weekday || 7).toString();\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase \"EE\":\r\n\t\t\t\t\tvalue = $utils.padString((weekday || 7).toString(), 2, \"0\");\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase \"EEE\":\r\n\t\t\t\tcase \"eee\":\r\n\t\t\t\t\tvalue = language.translate(this.weekdaysShort[weekday]);\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase \"EEEE\":\r\n\t\t\t\tcase \"eeee\":\r\n\t\t\t\t\tvalue = language.translate(this.weekdays[weekday]);\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase \"EEEEE\":\r\n\t\t\t\tcase \"eeeee\":\r\n\t\t\t\t\tvalue = language.translate(this.weekdays[weekday]).substr(0, 1);\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase \"e\":\r\n\t\t\t\tcase \"ee\":\r\n\t\t\t\t\tvalue = (weekday - this.firstDayOfWeek + 1).toString();\r\n\t\t\t\t\tif (info.parts[i] == \"ee\") {\r\n\t\t\t\t\t\tvalue = $utils.padString(value, 2, \"0\");\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase \"a\":\r\n\t\t\t\t\tif (hours >= 12) {\r\n\t\t\t\t\t\tvalue = language.translate(\"PM\");\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tvalue = language.translate(\"AM\");\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase \"aa\":\r\n\t\t\t\t\tif (hours >= 12) {\r\n\t\t\t\t\t\tvalue = language.translate(\"P.M.\");\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tvalue = language.translate(\"A.M.\");\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase \"aaa\":\r\n\t\t\t\t\tif (hours >= 12) {\r\n\t\t\t\t\t\tvalue = language.translate(\"P\");\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tvalue = language.translate(\"A\");\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase \"h\":\r\n\t\t\t\t\tvalue = $utils.get12Hours(hours).toString();\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase \"hh\":\r\n\t\t\t\t\tvalue = $utils.padString($utils.get12Hours(hours), 2, \"0\");\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase \"H\":\r\n\t\t\t\t\tvalue = hours.toString();\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase \"HH\":\r\n\t\t\t\t\tvalue = $utils.padString(hours, 2, \"0\");\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase \"K\":\r\n\t\t\t\t\tvalue = $utils.get12Hours(hours, 0).toString();\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase \"KK\":\r\n\t\t\t\t\tvalue = $utils.padString($utils.get12Hours(hours, 0), 2, \"0\");\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase \"k\":\r\n\t\t\t\t\tvalue = (hours + 1).toString();\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase \"kk\":\r\n\t\t\t\t\tvalue = $utils.padString(hours + 1, 2, \"0\");\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase \"m\":\r\n\t\t\t\t\tvalue = minutes.toString();\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase \"mm\":\r\n\t\t\t\t\tvalue = $utils.padString(minutes, 2, \"0\");\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase \"s\":\r\n\t\t\t\t\tvalue = seconds.toString();\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase \"ss\":\r\n\t\t\t\t\tvalue = $utils.padString(seconds, 2, \"0\");\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase \"S\":\r\n\t\t\t\tcase \"SS\":\r\n\t\t\t\tcase \"SSS\":\r\n\t\t\t\t\tvalue = Math.round((milliseconds / 1000) * Math.pow(10, info.parts[i].length)).toString();\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase \"x\":\r\n\t\t\t\t\tvalue = timestamp.toString();\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase \"n\":\r\n\t\t\t\tcase \"nn\":\r\n\t\t\t\tcase \"nnn\":\r\n\t\t\t\t\tvalue = $utils.padString(milliseconds, info.parts[i].length, \"0\");\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase \"z\":\r\n\t\t\t\t\tvalue = $utils.getTimeZone(date, false, false, this.utc);\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase \"zz\":\r\n\t\t\t\t\tvalue = $utils.getTimeZone(date, true, false, this.utc);\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase \"zzz\":\r\n\t\t\t\t\tvalue = $utils.getTimeZone(date, false, true, this.utc);\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase \"zzzz\":\r\n\t\t\t\t\tvalue = $utils.getTimeZone(date, true, true, this.utc);\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase \"Z\":\r\n\t\t\t\tcase \"ZZ\":\r\n\t\t\t\t\tlet tz = Math.abs(offset) / 60;\r\n\t\t\t\t\tlet tzh = Math.floor(tz);\r\n\t\t\t\t\tlet tzm = tz * 60 - tzh * 60;\r\n\r\n\t\t\t\t\tif (this.utc) {\r\n\t\t\t\t\t\ttzh = 0;\r\n\t\t\t\t\t\ttzm = 0;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (info.parts[i] == \"Z\") {\r\n\t\t\t\t\t\tvalue = \"GMT\";\r\n\t\t\t\t\t\tvalue += offset > 0 ? \"-\" : \"+\";\r\n\t\t\t\t\t\tvalue += $utils.padString(tzh, 2) + \":\" + $utils.padString(tzm, 2);\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tvalue = offset > 0 ? \"-\" : \"+\";\r\n\t\t\t\t\t\tvalue += $utils.padString(tzh, 2) + $utils.padString(tzm, 2);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase \"i\":\r\n\t\t\t\t\tvalue = date.toISOString();\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase \"I\":\r\n\t\t\t\t\tvalue = date.toUTCString();\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t}\r\n\t\t\tres = res.replace($strings.PLACEHOLDER, value);\r\n\t\t}\r\n\r\n\t\treturn res;\r\n\t}\r\n\r\n\t/**\r\n\t * Parses any input value into Date object.\r\n\t *\r\n\t * @see {@link https://www.amcharts.com/docs/v4/concepts/formatters/formatting-date-time/#Parsing_Dates} Tutorial on date/time parsing\r\n\t * @param source  Source value\r\n\t * @param format  Source format\r\n\t * @return Date object\r\n\t */\r\n\tpublic parse(source: any, format?: string): Date {\r\n\r\n\t\t// Format set?\r\n\t\tif (!$type.hasValue(format)) {\r\n\t\t\tformat = this.inputDateFormat;\r\n\t\t}\r\n\r\n\t\t// Is it already a Date\r\n\t\tif (source instanceof Date) {\r\n\t\t\treturn source;\r\n\t\t}\r\n\r\n\t\t// Is it a numeric timestamp\r\n\t\tif (typeof source === \"number\") {\r\n\t\t\treturn new Date(source);\r\n\t\t}\r\n\r\n\t\t// No? Let's check if it's string, and try converting to it if nec\r\n\t\tif (typeof source !== \"string\") {\r\n\t\t\tsource = source.toString();\r\n\t\t}\r\n\r\n\t\t// no language?\r\n\t\tif (!this.language) {\r\n\t\t\tif (this.sprite) {\r\n\t\t\t\tthis.language = this.sprite.language;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.language = new Language;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Init return value\r\n\t\tlet res: Date;\r\n\r\n\t\t// Init RegEx for parsing\r\n\t\tlet reg: string = \"\";\r\n\r\n\t\t// Clean format\r\n\t\tformat = $utils.cleanFormat(format);\r\n\r\n\t\t// Clip format to length of the source string\r\n\t\tformat = format.substr(0, source.length);\r\n\r\n\t\t// Parse format\r\n\t\tlet info = this.parseFormat(format);\r\n\r\n\t\t// Init parsed items holder\r\n\t\tlet parsedIndexes = {\r\n\t\t\t\"year\": -1,\r\n\t\t\t\"year3\": -1,\r\n\t\t\t\"year2\": -1,\r\n\t\t\t\"year1\": -1,\r\n\t\t\t\"month\": -1,\r\n\t\t\t\"monthShort\": -1,\r\n\t\t\t\"monthLong\": -1,\r\n\t\t\t\"weekdayShort\": -1,\r\n\t\t\t\"weekdayLong\": -1,\r\n\t\t\t\"day\": -1,\r\n\t\t\t\"yearDay\": -1,\r\n\t\t\t\"week\": -1,\r\n\t\t\t\"hourBase0\": -1,\r\n\t\t\t\"hour12Base0\": -1,\r\n\t\t\t\"hourBase1\": -1,\r\n\t\t\t\"hour12Base1\": -1,\r\n\t\t\t\"minute\": -1,\r\n\t\t\t\"second\": -1,\r\n\t\t\t\"millisecond\": -1,\r\n\t\t\t\"millisecondDigits\": -1,\r\n\t\t\t\"am\": -1,\r\n\t\t\t\"zone\": -1,\r\n\t\t\t\"timestamp\": -1,\r\n\t\t\t\"iso\": -1\r\n\t\t};\r\n\r\n\t\t// Init values\r\n\t\tlet resValues = {\r\n\t\t\t\"year\": 1970,\r\n\t\t\t\"month\": 0,\r\n\t\t\t\"day\": 1,\r\n\t\t\t\"hour\": 0,\r\n\t\t\t\"minute\": 0,\r\n\t\t\t\"second\": 0,\r\n\t\t\t\"millisecond\": 0,\r\n\t\t\t\"timestamp\": <any>null,\r\n\t\t\t\"offset\": 0,\r\n\t\t\t\"utc\": this.utc\r\n\t\t}\r\n\r\n\t\t// Index adjuster\r\n\t\tlet indexAdjust: number = 0,\r\n\t\t\tindex: number = 0;\r\n\r\n\t\t// Iterate through all of the parts\r\n\t\tfor (let i: number = 0; i < info.parts.length; i++) {\r\n\r\n\t\t\t// Set current match index\r\n\t\t\tindex = i + indexAdjust + 1;\r\n\r\n\t\t\tswitch (info.parts[i]) {\r\n\r\n\t\t\t\tcase \"yyyy\":\r\n\t\t\t\tcase \"YYYY\":\r\n\t\t\t\t\treg += \"([0-9]{4})\";\r\n\t\t\t\t\tparsedIndexes.year = index;\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase \"yyy\":\r\n\t\t\t\tcase \"YYY\":\r\n\t\t\t\t\treg += \"([0-9]{3})\";\r\n\t\t\t\t\tparsedIndexes.year3 = index;\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase \"yy\":\r\n\t\t\t\tcase \"YY\":\r\n\t\t\t\t\treg += \"([0-9]{2})\";\r\n\t\t\t\t\tparsedIndexes.year2 = index;\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase \"y\":\r\n\t\t\t\tcase \"Y\":\r\n\t\t\t\t\treg += \"([0-9]{1})\";\r\n\t\t\t\t\tparsedIndexes.year1 = index;\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase \"MMMM\":\r\n\t\t\t\t\treg += \"(\" + this.getStringList(this.months).join(\"|\") + \")\";\r\n\t\t\t\t\tparsedIndexes.monthLong = index;\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase \"MMM\":\r\n\t\t\t\t\treg += \"(\" + this.getStringList(this.monthsShort).join(\"|\") + \")\";\r\n\t\t\t\t\tparsedIndexes.monthShort = index;\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase \"MM\":\r\n\t\t\t\tcase \"M\":\r\n\t\t\t\t\treg += \"([0-9]{2}|[0-9]{1})\";\r\n\t\t\t\t\tparsedIndexes.month = index;\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase \"ww\":\r\n\t\t\t\tcase \"w\":\r\n\t\t\t\t\treg += \"([0-9]{2}|[0-9]{1})\";\r\n\t\t\t\t\tparsedIndexes.week = index;\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase \"dd\":\r\n\t\t\t\tcase \"d\":\r\n\t\t\t\t\treg += \"([0-9]{2}|[0-9]{1})\";\r\n\t\t\t\t\tparsedIndexes.day = index;\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase \"DDD\":\r\n\t\t\t\tcase \"DD\":\r\n\t\t\t\tcase \"D\":\r\n\t\t\t\t\treg += \"([0-9]{3}|[0-9]{2}|[0-9]{1})\";\r\n\t\t\t\t\tparsedIndexes.yearDay = index;\r\n\t\t\t\t\tbreak;\r\n\r\n\r\n\t\t\t\tcase \"dddd\":\r\n\t\t\t\t\treg += \"(\" + this.getStringList(this.weekdays).join(\"|\") + \")\";\r\n\t\t\t\t\tparsedIndexes.weekdayLong = index;\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase \"ddd\":\r\n\t\t\t\t\treg += \"(\" + this.getStringList(this.weekdaysShort).join(\"|\") + \")\";\r\n\t\t\t\t\tparsedIndexes.weekdayShort = index;\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase \"aaa\":\r\n\t\t\t\tcase \"aa\":\r\n\t\t\t\tcase \"a\":\r\n\t\t\t\t\t// TODO: fix (escape regex)\r\n\t\t\t\t\treg += \"(\" + this.getStringList([\"AM\", \"PM\", \"A\\.M\\.\", \"P\\.M\\.\", \"A\", \"P\"]).join(\"|\") + \")\";\r\n\t\t\t\t\tparsedIndexes.am = index;\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase \"hh\":\r\n\t\t\t\tcase \"h\":\r\n\t\t\t\t\treg += \"([0-9]{2}|[0-9]{1})\";\r\n\t\t\t\t\tparsedIndexes.hour12Base1 = index;\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase \"HH\":\r\n\t\t\t\tcase \"H\":\r\n\t\t\t\t\treg += \"([0-9]{2}|[0-9]{1})\";\r\n\t\t\t\t\tparsedIndexes.hourBase0 = index;\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase \"KK\":\r\n\t\t\t\tcase \"K\":\r\n\t\t\t\t\treg += \"([0-9]{2}|[0-9]{1})\";\r\n\t\t\t\t\tparsedIndexes.hour12Base0 = index;\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase \"kk\":\r\n\t\t\t\tcase \"k\":\r\n\t\t\t\t\treg += \"([0-9]{2}|[0-9]{1})\";\r\n\t\t\t\t\tparsedIndexes.hourBase1 = index;\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase \"mm\":\r\n\t\t\t\tcase \"m\":\r\n\t\t\t\t\treg += \"([0-9]{2}|[0-9]{1})\";\r\n\t\t\t\t\tparsedIndexes.minute = index;\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase \"ss\":\r\n\t\t\t\tcase \"s\":\r\n\t\t\t\t\treg += \"([0-9]{2}|[0-9]{1})\";\r\n\t\t\t\t\tparsedIndexes.second = index;\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase \"SSS\":\r\n\t\t\t\tcase \"SS\":\r\n\t\t\t\tcase \"S\":\r\n\t\t\t\t\treg += \"([0-9]{3}|[0-9]{2}|[0-9]{1})\";\r\n\t\t\t\t\tparsedIndexes.millisecond = index;\r\n\t\t\t\t\tparsedIndexes.millisecondDigits = info.parts[i].length;\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase \"nnn\":\r\n\t\t\t\tcase \"nn\":\r\n\t\t\t\tcase \"n\":\r\n\t\t\t\t\treg += \"([0-9]{3}|[0-9]{2}|[0-9]{1})\";\r\n\t\t\t\t\tparsedIndexes.millisecond = index;\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase \"x\":\r\n\t\t\t\t\treg += \"([0-9]{1,})\";\r\n\t\t\t\t\tparsedIndexes.timestamp = index;\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase \"Z\":\r\n\t\t\t\t\treg += \"GMT([-+]+[0-9]{2}:[0-9]{2})\";\r\n\t\t\t\t\tparsedIndexes.zone = index;\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase \"ZZ\":\r\n\t\t\t\t\treg += \"([\\\\-+]+[0-9]{2}[0-9]{2})\";\r\n\t\t\t\t\tparsedIndexes.zone = index;\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase \"i\":\r\n\t\t\t\t\treg += \"([0-9]{4})-?([0-9]{2})-?([0-9]{2})T?([0-9]{2}):?([0-9]{2}):?([0-9]{2})\\.?([0-9]{0,3})([zZ]|[+\\-][0-9]{2}:?[0-9]{2}|$)\";\r\n\t\t\t\t\tparsedIndexes.iso = index;\r\n\t\t\t\t\tindexAdjust += 7;\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase \"G\":\r\n\t\t\t\tcase \"YYYY\":\r\n\t\t\t\tcase \"YYY\":\r\n\t\t\t\tcase \"YY\":\r\n\t\t\t\tcase \"Y\":\r\n\t\t\t\tcase \"MMMMM\":\r\n\t\t\t\tcase \"W\":\r\n\t\t\t\tcase \"EEEEE\":\r\n\t\t\t\tcase \"EEEE\":\r\n\t\t\t\tcase \"EEE\":\r\n\t\t\t\tcase \"EE\":\r\n\t\t\t\tcase \"E\":\r\n\t\t\t\tcase \"eeeee\":\r\n\t\t\t\tcase \"eeee\":\r\n\t\t\t\tcase \"eee\":\r\n\t\t\t\tcase \"ee\":\r\n\t\t\t\tcase \"e\":\r\n\t\t\t\tcase \"zzzz\":\r\n\t\t\t\tcase \"zzz\":\r\n\t\t\t\tcase \"zz\":\r\n\t\t\t\tcase \"z\":\r\n\t\t\t\tcase \"t\":\r\n\t\t\t\t\t// Ignore\r\n\t\t\t\t\tindexAdjust--;\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\r\n\t\t\treg += \"[^0-9]*\";\r\n\t\t}\r\n\r\n\t\t// Try matching\r\n\t\tlet regex = new RegExp(reg);\r\n\t\tlet matches: RegExpMatchArray = source.match(regex);\r\n\r\n\t\tif (matches) {\r\n\t\t\t// Populate the date object\r\n\r\n\t\t\t// Full year\r\n\t\t\tif (parsedIndexes.year > -1) {\r\n\t\t\t\tresValues.year = parseInt(matches[parsedIndexes.year]);\r\n\t\t\t}\r\n\r\n\t\t\t// 3-digit year\r\n\t\t\tif (parsedIndexes.year3 > -1) {\r\n\t\t\t\tlet val = parseInt(matches[parsedIndexes.year3]);\r\n\t\t\t\tval += 1000;\r\n\t\t\t\tresValues.year = val;\r\n\t\t\t}\r\n\r\n\t\t\t// 2-digit year\r\n\t\t\tif (parsedIndexes.year2 > -1) {\r\n\t\t\t\tlet val = parseInt(matches[parsedIndexes.year2]);\r\n\t\t\t\tif (val > 50) {\r\n\t\t\t\t\tval += 1000;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tval += 2000;\r\n\t\t\t\t}\r\n\t\t\t\tresValues.year = val;\r\n\t\t\t}\r\n\r\n\t\t\t// 1-digit year\r\n\t\t\tif (parsedIndexes.year1 > -1) {\r\n\t\t\t\tlet val = parseInt(matches[parsedIndexes.year1]);\r\n\t\t\t\tval = Math.floor((new Date().getFullYear()) / 10) * 10 + val;\r\n\t\t\t\tresValues.year = val;\r\n\t\t\t}\r\n\r\n\t\t\t// Full month\r\n\t\t\tif (parsedIndexes.monthLong > -1) {\r\n\t\t\t\tresValues.month = this.resolveMonth(<any>matches[parsedIndexes.monthLong]);\r\n\t\t\t}\r\n\r\n\t\t\t// Short month\r\n\t\t\tif (parsedIndexes.monthShort > -1) {\r\n\t\t\t\tresValues.month = this.resolveShortMonth(<any>matches[parsedIndexes.monthShort]);\r\n\t\t\t}\r\n\r\n\t\t\t// Numeric month\r\n\t\t\tif (parsedIndexes.month > -1) {\r\n\t\t\t\tresValues.month = parseInt(matches[parsedIndexes.month]) - 1;\r\n\t\t\t}\r\n\r\n\t\t\t// Weekday\r\n\t\t\t// @todo\r\n\r\n\t\t\t// Week\r\n\t\t\tif ((parsedIndexes.week > -1) && (parsedIndexes.day === -1)) {\r\n\t\t\t\t// We parse weeks ONLY if day is not explicitly set\r\n\t\t\t\t// TODO: this needs work\r\n\t\t\t\t// (but maybe later - I can hardly imagine anyone passing their dates in weeks)\r\n\t\t\t\tresValues.month = 0;\r\n\t\t\t\tresValues.day = $utils.getDayFromWeek(\r\n\t\t\t\t\tparseInt(matches[parsedIndexes.week]),\r\n\t\t\t\t\tresValues.year,\r\n\t\t\t\t\t1,\r\n\t\t\t\t\tthis.utc\r\n\t\t\t\t);\r\n\t\t\t}\r\n\r\n\t\t\t// Day\r\n\t\t\tif (parsedIndexes.day > -1) {\r\n\t\t\t\tresValues.day = parseInt(matches[parsedIndexes.day]);\r\n\t\t\t}\r\n\r\n\t\t\t// Year day\r\n\t\t\tif (parsedIndexes.yearDay > -1) {\r\n\t\t\t\tresValues.month = 0;\r\n\t\t\t\tresValues.day = parseInt(matches[parsedIndexes.yearDay]);\r\n\t\t\t}\r\n\r\n\t\t\t// 24 Hour (0-23)\r\n\t\t\tif (parsedIndexes.hourBase0 > -1) {\r\n\t\t\t\tresValues.hour = parseInt(matches[parsedIndexes.hourBase0]);\r\n\t\t\t}\r\n\r\n\t\t\t// 24 Hour (1-24)\r\n\t\t\tif (parsedIndexes.hourBase1 > -1) {\r\n\t\t\t\tresValues.hour = parseInt(matches[parsedIndexes.hourBase1]) - 1;\r\n\t\t\t}\r\n\r\n\t\t\t// 12 Hour (0-11)\r\n\t\t\tif (parsedIndexes.hour12Base0 > -1) {\r\n\t\t\t\tlet val = parseInt(matches[parsedIndexes.hour12Base0]);\r\n\t\t\t\tif (val == 11) {\r\n\t\t\t\t\tval = 0;\r\n\t\t\t\t}\r\n\t\t\t\tif ((parsedIndexes.am > -1) && !this.isAm(matches[parsedIndexes.am])) {\r\n\t\t\t\t\tval += 12;\r\n\t\t\t\t}\r\n\t\t\t\tresValues.hour = val;\r\n\t\t\t}\r\n\r\n\t\t\t// 12 Hour (1-12)\r\n\t\t\tif (parsedIndexes.hour12Base1 > -1) {\r\n\t\t\t\tlet val = parseInt(matches[parsedIndexes.hour12Base1]);\r\n\t\t\t\tif (val == 12) {\r\n\t\t\t\t\tval = 0;\r\n\t\t\t\t}\r\n\t\t\t\tif ((parsedIndexes.am > -1) && !this.isAm(matches[parsedIndexes.am])) {\r\n\t\t\t\t\tval += 12;\r\n\t\t\t\t}\r\n\t\t\t\tresValues.hour = val;\r\n\t\t\t}\r\n\r\n\t\t\t// Minute\r\n\t\t\tif (parsedIndexes.minute > -1) {\r\n\t\t\t\tresValues.minute = parseInt(matches[parsedIndexes.minute]);\r\n\t\t\t}\r\n\r\n\t\t\t// Second\r\n\t\t\tif (parsedIndexes.second > -1) {\r\n\t\t\t\tresValues.second = parseInt(matches[parsedIndexes.second]);\r\n\t\t\t}\r\n\r\n\t\t\t// Millisecond\r\n\t\t\tif (parsedIndexes.millisecond > -1) {\r\n\t\t\t\tlet val = parseInt(matches[parsedIndexes.millisecond]);\r\n\t\t\t\tif (parsedIndexes.millisecondDigits == 2) {\r\n\t\t\t\t\tval *= 10;\r\n\t\t\t\t}\r\n\t\t\t\telse if (parsedIndexes.millisecondDigits == 1) {\r\n\t\t\t\t\tval *= 100;\r\n\t\t\t\t}\r\n\t\t\t\tresValues.millisecond = val;\r\n\t\t\t}\r\n\r\n\t\t\t// Timestamp\r\n\t\t\tif (parsedIndexes.timestamp > -1) {\r\n\t\t\t\tresValues.timestamp = parseInt(matches[parsedIndexes.timestamp]);\r\n\r\n\t\t\t\tconst ts = new Date(resValues.timestamp);\r\n\t\t\t\tresValues.year = ts.getUTCFullYear();\r\n\t\t\t\tresValues.month = ts.getUTCMonth();\r\n\t\t\t\tresValues.day = ts.getUTCDate();\r\n\t\t\t\tresValues.hour = ts.getUTCHours();\r\n\t\t\t\tresValues.minute = ts.getUTCMinutes();\r\n\t\t\t\tresValues.second = ts.getUTCSeconds();\r\n\t\t\t\tresValues.millisecond = ts.getUTCMilliseconds();\r\n\t\t\t}\r\n\r\n\t\t\t// Adjust time zone\r\n\t\t\tif (parsedIndexes.zone > -1) {\r\n\t\t\t\tresValues.offset = this.resolveTimezoneOffset(new Date(resValues.year, resValues.month, resValues.day), matches[parsedIndexes.zone]);\r\n\t\t\t}\r\n\r\n\t\t\t// ISO\r\n\t\t\tif (parsedIndexes.iso > -1) {\r\n\r\n\t\t\t\tresValues.year = $type.toNumber(matches[parsedIndexes.iso + 0]);\r\n\t\t\t\tresValues.month = $type.toNumber(matches[parsedIndexes.iso + 1]) - 1;\r\n\t\t\t\tresValues.day = $type.toNumber(matches[parsedIndexes.iso + 2]);\r\n\t\t\t\tresValues.hour = $type.toNumber(matches[parsedIndexes.iso + 3]);\r\n\t\t\t\tresValues.minute = $type.toNumber(matches[parsedIndexes.iso + 4]);\r\n\t\t\t\tresValues.second = $type.toNumber(matches[parsedIndexes.iso + 5]);\r\n\t\t\t\tresValues.millisecond = $type.toNumber(matches[parsedIndexes.iso + 6]);\r\n\r\n\t\t\t\tif (matches[parsedIndexes.iso + 7] == \"Z\" || matches[parsedIndexes.iso + 7] == \"z\") {\r\n\t\t\t\t\tresValues.utc = true;\r\n\t\t\t\t}\r\n\t\t\t\telse if (matches[parsedIndexes.iso + 7] != \"\") {\r\n\t\t\t\t\tresValues.offset = this.resolveTimezoneOffset(new Date(resValues.year, resValues.month, resValues.day), matches[parsedIndexes.iso + 7]);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// Create Date object\r\n\t\t\tif (resValues.utc) {\r\n\t\t\t\tres = new Date(Date.UTC(\r\n\t\t\t\t\tresValues.year,\r\n\t\t\t\t\tresValues.month,\r\n\t\t\t\t\tresValues.day,\r\n\t\t\t\t\tresValues.hour,\r\n\t\t\t\t\tresValues.minute,\r\n\t\t\t\t\tresValues.second,\r\n\t\t\t\t\tresValues.millisecond\r\n\t\t\t\t));\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tres = new Date(\r\n\t\t\t\t\tresValues.year,\r\n\t\t\t\t\tresValues.month,\r\n\t\t\t\t\tresValues.day,\r\n\t\t\t\t\tresValues.hour,\r\n\t\t\t\t\tresValues.minute + resValues.offset,\r\n\t\t\t\t\tresValues.second,\r\n\t\t\t\t\tresValues.millisecond\r\n\t\t\t\t);\r\n\t\t\t}\r\n\r\n\t\t}\r\n\t\telse {\r\n\t\t\t// Didn't match anything\r\n\t\t\t// Let's try dropping it into Date constructor and hope for the best\r\n\t\t\tres = new Date(source);\r\n\t\t}\r\n\r\n\t\treturn res;\r\n\t}\r\n\r\n\tprotected resolveTimezoneOffset(date: Date, zone: string): number {\r\n\t\tlet value = zone.match(/([+\\-]?)([0-9]{2}):?([0-9]{2})/);\r\n\t\tif (value) {\r\n\t\t\tlet match = $type.getValue(zone.match(/([+\\-]?)([0-9]{2}):?([0-9]{2})/));\r\n\t\t\tlet dir = match[1];\r\n\t\t\tlet hour = match[2];\r\n\t\t\tlet minute = match[3];\r\n\t\t\tlet offset = parseInt(hour) * 60 + parseInt(minute);\r\n\r\n\t\t\t// Adjust offset\r\n\t\t\t// Making it negative does not seem to make sense, but it's right\r\n\t\t\t// because of how JavaScript calculates GMT offsets\r\n\t\t\tif (dir == \"+\") {\r\n\t\t\t\toffset *= -1;\r\n\t\t\t}\r\n\r\n\t\t\t// Check the difference in offset\r\n\t\t\tlet originalOffset = (date || new Date()).getTimezoneOffset();\r\n\t\t\tlet diff = offset - originalOffset;\r\n\t\t\treturn diff;\r\n\t\t}\r\n\t\treturn 0;\r\n\t}\r\n\r\n\t/**\r\n\t * Resolves month name (i.e. \"December\") into a month number (11).\r\n\t *\r\n\t * @param value  Month name\r\n\t * @return Month number\r\n\t */\r\n\tprotected resolveMonth(value: MonthNames): number {\r\n\r\n\t\t// Let's try English first\r\n\t\tlet month: number = this.months.indexOf(value);\r\n\t\tif (month > -1) {\r\n\t\t\treturn month;\r\n\t\t}\r\n\r\n\t\t// Try the translation\r\n\t\tif (this.language && !this.language.isDefault()) {\r\n\t\t\tmonth = this.language.translateAll(this.months).indexOf(value);\r\n\t\t\tif (month > -1) {\r\n\t\t\t\treturn month\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn 0;\r\n\t}\r\n\r\n\t/**\r\n\t * Resolves short month name (i.e. \"Dec\") into a month number.\r\n\t *\r\n\t * @param value  Short month name\r\n\t * @return Month number\r\n\t */\r\n\tprotected resolveShortMonth(value: ShortMonthNames): number {\r\n\r\n\t\t// Let's try English first\r\n\t\tlet month: number = this.monthsShort.indexOf(value);\r\n\t\tif (month > -1) {\r\n\t\t\treturn month;\r\n\t\t}\r\n\r\n\t\t// Maybe long month (workaround for May)\r\n\t\tmonth = this.months.indexOf(<any>value);\r\n\t\tif (month > -1) {\r\n\t\t\treturn month;\r\n\t\t}\r\n\r\n\t\t// Try the translation\r\n\t\tif (this.language && !this.language.isDefault()) {\r\n\t\t\tmonth = this.language.translateAll(this.monthsShort).indexOf(value);\r\n\t\t\tif (month > -1) {\r\n\t\t\t\treturn month\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn 0;\r\n\t}\r\n\r\n\t/**\r\n\t * Checks if passed in string represents AM/PM notation in many of its\r\n\t * versions.\r\n\t *\r\n\t * @param value  Source string\r\n\t * @return Is it AM/PM?\r\n\t */\r\n\tprotected isAm(value: string): boolean {\r\n\t\tlet list = this.getStringList([\"AM\", \"A.M.\", \"A\"]);\r\n\t\treturn list.indexOf(value.toUpperCase()) > -1;\r\n\t}\r\n\r\n\t/**\r\n\t * Invalidates related [[Sprite]] causing it to redraw.\r\n\t */\r\n\tprotected invalidateSprite(): void {\r\n\t\tif (this.sprite) {\r\n\t\t\tthis.sprite.invalidate();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Translates list of strings.\r\n\t *\r\n\t * @param list  Source strings\r\n\t * @return Translated strings\r\n\t */\r\n\tprotected getStringList(list: Array<keyof ILocaleProperties>): Array<string> {\r\n\t\tlet res: string[] = [];\r\n\t\tfor (let i: number = 0; i < list.length; i++) {\r\n\t\t\t// translate?\r\n\t\t\tif (this.language) {\r\n\t\t\t\tres.push($utils.escapeForRgex(this.language.translate(list[i])));\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tres.push($utils.escapeForRgex(list[i]));\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn res;\r\n\t}\r\n\r\n\t/**\r\n\t * Date format to use.\r\n\t *\r\n\t * If format is not supplied in-line in the string, this setting will be\r\n\t * used.\r\n\t *\r\n\t * @default \"yyyy-MM-dd\"\r\n\t * @param value Date format\r\n\t */\r\n\tpublic set dateFormat(value: string | Intl.DateTimeFormatOptions) {\r\n\t\tthis._dateFormat = value;\r\n\t\tthis.invalidateSprite();\r\n\t}\r\n\r\n\t/**\r\n\t * @return Date format\r\n\t */\r\n\tpublic get dateFormat(): string | Intl.DateTimeFormatOptions {\r\n\t\treturn this._dateFormat;\r\n\t}\r\n\r\n\t/**\r\n\t * Date format to use when parsing dates.\r\n\t *\r\n\t * @default \"yyyy-MM-dd\"\r\n\t * @param value Date format\r\n\t */\r\n\tpublic set inputDateFormat(value: string) {\r\n\t\tthis._inputDateFormat = value;\r\n\t\tthis.invalidateSprite();\r\n\t}\r\n\r\n\t/**\r\n\t * @return Date format\r\n\t */\r\n\tpublic get inputDateFormat(): string {\r\n\t\treturn this._inputDateFormat;\r\n\t}\r\n\r\n\t/**\r\n\t * Locales if you are using date formats in `Intl.DateTimeFormatOptions` syntax.\r\n\t *\r\n\t * @param value Locales\r\n\t */\r\n\tpublic set intlLocales(value: string) {\r\n\t\tthis._intlLocales = value;\r\n\t\tthis.invalidateSprite();\r\n\t}\r\n\r\n\t/**\r\n\t * @return Date format\r\n\t */\r\n\tpublic get intlLocales(): string {\r\n\t\treturn this._intlLocales;\r\n\t}\r\n\r\n\t/**\r\n\t * Should formatter use UTC functions?\r\n\t *\r\n\t * If UTC is used, all date/time values will be independent on client's\r\n\t * time zone.\r\n\t *\r\n\t * @param value Use UTC?\r\n\t */\r\n\tpublic set utc(value: boolean) {\r\n\t\tthis._utc = value;\r\n\t\tthis.invalidateSprite();\r\n\t}\r\n\r\n\t/**\r\n\t * @return Use UTC?\r\n\t */\r\n\tpublic get utc(): boolean {\r\n\t\treturn this._utc;\r\n\t}\r\n\r\n\t/**\r\n\t * If set, will apply specific offset in minutes before formatting the date\r\n\t * text.\r\n\t *\r\n\t * The value is a number of minutes from target time zone to UTC.\r\n\t *\r\n\t * E.g. `300` will recalculate Dates in \"GMT-5\" time zone.\r\n\t *\r\n\t * @param  value  Offset (minutes)\r\n\t */\r\n\tpublic set timezoneOffset(value: $type.Optional<number>) {\r\n\t\tif (this._timezoneOffset != value) {\r\n\t\t\tthis._timezoneOffset = value;\r\n\t\t\tthis.invalidateSprite();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Offset (minutes)\r\n\t */\r\n\tpublic get timezoneOffset(): $type.Optional<number> {\r\n\t\treturn this._timezoneOffset;\r\n\t}\r\n\r\n\t/**\r\n\t * If set, will format date/time in specific time zone.\r\n\t *\r\n\t * The value should be named time zone, e.g.:\r\n\t * `\"America/Vancouver\"`, `\"Australia/Sydney\"`, `\"UTC\"`.\r\n\t *\r\n\t * @since 4.10.1\r\n\t * @param  value  Timezone\r\n\t */\r\n\tpublic set timezone(value: $type.Optional<string>) {\r\n\t\tif (this._timezone != value) {\r\n\t\t\tthis._timezone = value;\r\n\t\t\tthis.timezoneMinutes = $time.getTimezoneMinutes(value);\r\n\t\t\tthis.invalidateSprite();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Timezone\r\n\t */\r\n\tpublic get timezone(): $type.Optional<string> {\r\n\t\treturn this._timezone;\r\n\t}\r\n\r\n\t/**\r\n\t * First day of the week:\r\n\t *\r\n\t * * 0 - Sunday\r\n\t * * 1 - Monday\r\n\t * * 2 - Tuesday\r\n\t *\r\n\t * Etc.\r\n\t *\r\n\t * @param value First day of week\r\n\t */\r\n\tpublic set firstDayOfWeek(value: number) {\r\n\t\tthis._firstDayOfWeek = value;\r\n\t\tthis.invalidateSprite();\r\n\t}\r\n\r\n\t/**\r\n\t * @return First day of week\r\n\t */\r\n\tpublic get firstDayOfWeek(): number {\r\n\t\treturn this._firstDayOfWeek;\r\n\t}\r\n\r\n\t/**\r\n\t * Output format for the formatted date.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param value  Format\r\n\t */\r\n\tpublic set outputFormat(value: string) {\r\n\t\tthis._outputFormat = value.toLowerCase();\r\n\t\tthis.invalidateSprite();\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @return Format\r\n\t */\r\n\tpublic get outputFormat(): string {\r\n\t\treturn this._outputFormat;\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"DateFormatter\"] = DateFormatter;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}