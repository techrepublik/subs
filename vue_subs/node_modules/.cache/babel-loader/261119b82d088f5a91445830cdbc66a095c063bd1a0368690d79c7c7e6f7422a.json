{"ast":null,"code":"import { geoProjection as projection } from \"d3-geo\";\nimport { abs, acos, cos, epsilon, pi, sin, sinci, sqrt } from \"./math.js\";\nexport function aitoffRaw(x, y) {\n  var cosy = cos(y),\n    sincia = sinci(acos(cosy * cos(x /= 2)));\n  return [2 * cosy * sin(x) * sincia, sin(y) * sincia];\n}\n\n// Abort if [x, y] is not within an ellipse centered at [0, 0] with\n// semi-major axis pi and semi-minor axis pi/2.\naitoffRaw.invert = function (x, y) {\n  if (x * x + 4 * y * y > pi * pi + epsilon) return;\n  var x1 = x,\n    y1 = y,\n    i = 25;\n  do {\n    var sinx = sin(x1),\n      sinx_2 = sin(x1 / 2),\n      cosx_2 = cos(x1 / 2),\n      siny = sin(y1),\n      cosy = cos(y1),\n      sin_2y = sin(2 * y1),\n      sin2y = siny * siny,\n      cos2y = cosy * cosy,\n      sin2x_2 = sinx_2 * sinx_2,\n      c = 1 - cos2y * cosx_2 * cosx_2,\n      e = c ? acos(cosy * cosx_2) * sqrt(f = 1 / c) : f = 0,\n      f,\n      fx = 2 * e * cosy * sinx_2 - x,\n      fy = e * siny - y,\n      dxdx = f * (cos2y * sin2x_2 + e * cosy * cosx_2 * sin2y),\n      dxdy = f * (0.5 * sinx * sin_2y - e * 2 * siny * sinx_2),\n      dydx = f * 0.25 * (sin_2y * sinx_2 - e * siny * cos2y * sinx),\n      dydy = f * (sin2y * cosx_2 + e * sin2x_2 * cosy),\n      z = dxdy * dydx - dydy * dxdx;\n    if (!z) break;\n    var dx = (fy * dxdy - fx * dydy) / z,\n      dy = (fx * dydx - fy * dxdx) / z;\n    x1 -= dx, y1 -= dy;\n  } while ((abs(dx) > epsilon || abs(dy) > epsilon) && --i > 0);\n  return [x1, y1];\n};\nexport default function () {\n  return projection(aitoffRaw).scale(152.63);\n}","map":{"version":3,"names":["geoProjection","projection","abs","acos","cos","epsilon","pi","sin","sinci","sqrt","aitoffRaw","x","y","cosy","sincia","invert","x1","y1","i","sinx","sinx_2","cosx_2","siny","sin_2y","sin2y","cos2y","sin2x_2","c","e","f","fx","fy","dxdx","dxdy","dydx","dydy","z","dx","dy","scale"],"sources":["/home/josh/Documents/projects/subs/vue_subs/node_modules/d3-geo-projection/src/aitoff.js"],"sourcesContent":["import {geoProjection as projection} from \"d3-geo\";\nimport {abs, acos, cos, epsilon, pi, sin, sinci, sqrt} from \"./math.js\";\n\nexport function aitoffRaw(x, y) {\n  var cosy = cos(y), sincia = sinci(acos(cosy * cos(x /= 2)));\n  return [2 * cosy * sin(x) * sincia, sin(y) * sincia];\n}\n\n// Abort if [x, y] is not within an ellipse centered at [0, 0] with\n// semi-major axis pi and semi-minor axis pi/2.\naitoffRaw.invert = function(x, y) {\n  if (x * x + 4 * y * y > pi * pi + epsilon) return;\n  var x1 = x, y1 = y, i = 25;\n  do {\n    var sinx = sin(x1),\n        sinx_2 = sin(x1 / 2),\n        cosx_2 = cos(x1 / 2),\n        siny = sin(y1),\n        cosy = cos(y1),\n        sin_2y = sin(2 * y1),\n        sin2y = siny * siny,\n        cos2y = cosy * cosy,\n        sin2x_2 = sinx_2 * sinx_2,\n        c = 1 - cos2y * cosx_2 * cosx_2,\n        e = c ? acos(cosy * cosx_2) * sqrt(f = 1 / c) : f = 0,\n        f,\n        fx = 2 * e * cosy * sinx_2 - x,\n        fy = e * siny - y,\n        dxdx = f * (cos2y * sin2x_2 + e * cosy * cosx_2 * sin2y),\n        dxdy = f * (0.5 * sinx * sin_2y - e * 2 * siny * sinx_2),\n        dydx = f * 0.25 * (sin_2y * sinx_2 - e * siny * cos2y * sinx),\n        dydy = f * (sin2y * cosx_2 + e * sin2x_2 * cosy),\n        z = dxdy * dydx - dydy * dxdx;\n    if (!z) break;\n    var dx = (fy * dxdy - fx * dydy) / z,\n        dy = (fx * dydx - fy * dxdx) / z;\n    x1 -= dx, y1 -= dy;\n  } while ((abs(dx) > epsilon || abs(dy) > epsilon) && --i > 0);\n  return [x1, y1];\n};\n\nexport default function() {\n  return projection(aitoffRaw)\n      .scale(152.63);\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}