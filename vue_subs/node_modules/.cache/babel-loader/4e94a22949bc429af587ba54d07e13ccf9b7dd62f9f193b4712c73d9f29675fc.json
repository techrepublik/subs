{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n/**\r\n * Defines functionality for \"Data Item\"\r\n *\r\n * A Data Item can be any object that can hold data. For example [[LineSeries]]\r\n * holds a number of values, that comprise a line graph. Each of those values\r\n * (data points) is a {DataItem}.\r\n *\r\n * Furthermore the [[LineSeries]] itself can be represented as a entry in the\r\n * legend. Since legend needs access to Line Series' value, a DataItem is\r\n * created for the series.\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\nimport { BaseObjectEvents } from \"./Base\";\nimport { Adapter } from \"./utils/Adapter\";\nimport { Animation, AnimationDisposer } from \"./utils/Animation\";\nimport * as $utils from \"./utils/Utils\";\nimport * as $array from \"./utils/Array\";\n//import * as $object from \"./utils/Object\";\nimport * as $type from \"./utils/Type\";\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\n/**\r\n * DataItem represents single element in data, for example a data point in a\r\n * Serial Chart Series, e.g. a column.\r\n *\r\n * DataItem defines relationship between structured data, required for specific\r\n * chart type or task, and raw source data.\r\n *\r\n * It also implements required calculations, updates related visual elements,\r\n * etc.\r\n *\r\n * @todo Description\r\n * @important\r\n */\nvar DataItem = /** @class */function (_super) {\n  __extends(DataItem, _super);\n  /**\r\n   * Constructor\r\n   * @todo Adding events to disposers produces errors in some cases, which means that chart is using disposed Data Items which is not right\r\n   */\n  function DataItem() {\n    var _this = _super.call(this) || this;\n    /**\r\n     * This Data Item is currently disabled.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\n    _this._disabled = false;\n    /**\r\n     * Indicates whether Data Item has any properties set.\r\n     *\r\n     * If it does not have any, the code can use this property to check whether\r\n     * they need to apply costly operation of re-applying properties, whenever\r\n     * Data Item-related element is redrawn, e.g. series.\r\n     */\n    _this.hasProperties = false;\n    /**\r\n     * An object containing calculated values.\r\n     */\n    _this.values = {};\n    /**\r\n     * An object container current working values.\r\n     */\n    //public readonly workingValues: { [index: string]: { [index: string]: number } } = {};\n    /**\r\n     * An object containing categories.\r\n     */\n    _this.categories = {};\n    /**\r\n     * An object containing dates.\r\n     */\n    _this.dates = {};\n    /**\r\n     * An object containing locations for the Data Item.\r\n     *\r\n     * A location is a position within date or category, or, in some other cases,\r\n     * where there is no single point but rather some period.\r\n     *\r\n     * @see {@link https://www.amcharts.com/docs/v4/concepts/series/#Data_item_locations} for info how data item locations work\r\n     */\n    _this.locations = {};\n    /**\r\n     * Current working locations.\r\n     */\n    _this.workingLocations = {};\n    /**\r\n     * An object containing Data Item specific appearance properties in key-value\r\n     * pairs.\r\n     *\r\n     * Sometimes a single Data Item needs to apply different properties than the\r\n     * rest of the data [[Series]] it is part of. E.g. a single column,\r\n     * represented by a Data Item needs to be filled with a different color than\r\n     * the reset of the [[ColumnSeries]] it belongs to.\r\n     *\r\n     * That's where Data Item's `properties` come into play.\r\n     *\r\n     * Please note that you should set Data Item-specific properties using\r\n     * `setProperty()` method, rather than access `properties` object directly.\r\n     */\n    _this.properties = {};\n    /**\r\n     * A list of [[Sprite]] elements that are associated with this Data Item.\r\n     *\r\n     * E.g. an [[Axis]] Data Item has several separate elements associated with\r\n     * it, like [[AxisTick]], [[AxisLabel]], and [[Grid]].\r\n     *\r\n     * Data Item keeps track of all of them, so it can toggle all related visual\r\n     * elements when it itself is toggled.\r\n     */\n    _this.sprites = [];\n    /**\r\n     * Identifies if this object is a \"template\" and should not be treated as\r\n     * real object that is drawn or actually used in the chart.\r\n     */\n    _this.isTemplate = false;\n    /**\r\n     * The current index within the dataItems\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\n    _this._index = null;\n    /**\r\n     * Is Data Item currently visible?\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\n    _this._visible = true;\n    /**\r\n     * Is Data Item currently hidden?\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\n    _this._hidden = false;\n    /**\r\n     * Should this Data Item be used when calculating data ranges and scales?\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\n    _this._ignoreMinMax = false;\n    /**\r\n     * Some of the Data Item's data fields may contain an array of children. This\r\n     * property contains an object indicating which fields hold an array, so that\r\n     * they can be processed properly.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\n    _this.hasChildren = {};\n    /**\r\n     * Indicates whether Data Item is currently animiting from visible to hidden\r\n     * state.\r\n     */\n    _this.isHiding = false;\n    /**\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\n    _this._valueAnimations = {};\n    /**\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\n    _this._locationAnimations = {};\n    _this.className = \"DataItem\";\n    _this.applyTheme();\n    return _this;\n  }\n  Object.defineProperty(DataItem.prototype, \"adapter\", {\n    /**\r\n     * Holds Adapter.\r\n     */\n    get: function () {\n      if (!this._adapterO) {\n        this._adapterO = new Adapter(this);\n      }\n      return this._adapterO;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(DataItem.prototype, \"index\", {\n    /**\r\n     * Data Item's position index in Component's data.\r\n     *\r\n     * @return Index\r\n     */\n    get: function () {\n      if (this.component) {\n        if (this._index != null) {\n          return this._index;\n        } else {\n          return -1;\n        }\n      } else {\n        return -1;\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(DataItem.prototype, \"animations\", {\n    /**\r\n     * A list of [[Animations]] objects currently mutating Data Item's values.\r\n     *\r\n     * @return [description]\r\n     */\n    get: function () {\n      if (!this._animations) {\n        this._animations = [];\n        this._disposers.push(new AnimationDisposer(this._animations));\n      }\n      return this._animations;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(DataItem.prototype, \"visible\", {\n    /**\r\n     * Returns `true` if this Data Item is currently visible.\r\n     *\r\n     * @return Visible?\r\n     */\n    get: function () {\n      if (this._hidden) {\n        return false;\n      }\n      return this._visible;\n    },\n    /**\r\n     * Sets visibility of the Data Item.\r\n     *\r\n     * @param value Visible?\r\n     */\n    set: function (value) {\n      if (value) {\n        this.hidden = false;\n      }\n      if (this._visible != value) {\n        this.setVisibility(value);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(DataItem.prototype, \"hidden\", {\n    /**\r\n     * Returns `true` if this Data Item is currently hidden.\r\n     *\r\n     * @return Hidden?\r\n     */\n    get: function () {\n      return this._hidden;\n    },\n    /**\r\n     * Sets hidden flag for data item. Mostly used to initially hide data item.\r\n     *\r\n     * @param value Hidden?\r\n     */\n    set: function (value) {\n      if (this._hidden != value) {\n        this._hidden = value;\n        if (value) {\n          this.setVisibility(false);\n        } else {\n          this.setVisibility(true, true);\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(DataItem.prototype, \"__disabled\", {\n    /**\r\n     * Is this Data Item currently disabled?\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param {boolean}\r\n     */\n    get: function () {\n      return this._disabled;\n    },\n    /**\r\n     * Disables all Sprites associated with this Data Item.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param {boolean}\r\n     */\n    set: function (value) {\n      //\tif (this._disabled != value) { // not good\n      this._disabled = value;\n      $array.each(this.sprites, function (sprite) {\n        sprite.__disabled = value;\n      });\n      //\t}\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Sets visibility of the Data Item.\r\n   *\r\n   * @param value Data Item\r\n   */\n  DataItem.prototype.setVisibility = function (value, noChangeValues) {\n    $array.each(this.sprites, function (sprite) {\n      if (value) {\n        sprite.visible = sprite.defaultState.properties.visible;\n      } else {\n        if (sprite.hiddenState) {\n          sprite.visible = sprite.hiddenState.properties.visible;\n        } else {\n          sprite.visible = false;\n        }\n      }\n    });\n    this._visible = value;\n    if (this._eventDispatcher && !this.__disabled) {\n      if (this.events.isEnabled(\"visibilitychanged\")) {\n        var event_1 = {\n          type: \"visibilitychanged\",\n          target: this,\n          visible: value\n        };\n        this.events.dispatchImmediately(\"visibilitychanged\", event_1);\n      }\n    }\n  };\n  /**\r\n   * Shows the Data Item and related visual elements.\r\n   *\r\n   * @param duration  Animation duration (ms)\r\n   * @param delay     Delay animation (ms)\r\n   * @param fields    A list of fields to set values of\r\n   */\n  DataItem.prototype.show = function (duration, delay, fields) {\n    var _this = this;\n    if (!this.hidden) {\n      this.setVisibility(true, true);\n      this.isHiding = false;\n      if (this._hideDisposer) {\n        this.removeDispose(this._hideDisposer);\n      }\n      var animation_1;\n      if (fields) {\n        $array.each(fields, function (field) {\n          animation_1 = _this.setWorkingValue(field, _this.values[field].value, duration, delay);\n        });\n      }\n      $array.each(this.sprites, function (sprite) {\n        var animation = sprite.show(duration);\n        if (animation != null && !animation.isFinished()) {\n          _this._disposers.push(animation);\n          if (delay != null && delay > 0) {\n            animation.delay(delay);\n          }\n        }\n      });\n      return animation_1;\n    }\n  };\n  /**\r\n   * Destroys this object and all related data.\r\n   */\n  DataItem.prototype.dispose = function () {\n    _super.prototype.dispose.call(this);\n    $array.each(this.sprites, function (sprite) {\n      sprite.dispose();\n    });\n    this.sprites = [];\n  };\n  /**\r\n   * Hides the Data Item and related visual elements.\r\n   *\r\n   * @param duration  Animation duration (ms)\r\n   * @param delay     Delay animation (ms)\r\n   * @param toValue   A value to set to `fields` when hiding\r\n   * @param fields    A list of data fields to set value to `toValue`\r\n   */\n  DataItem.prototype.hide = function (duration, delay, toValue, fields) {\n    var _this = this;\n    this.isHiding = true;\n    $array.each(this.sprites, function (sprite) {\n      var animation = sprite.hide(duration);\n      if (animation != null && !animation.isFinished()) {\n        _this._disposers.push(animation);\n        if (delay != null && delay > 0) {\n          animation.delay(delay);\n        }\n      }\n    });\n    if ($type.isNumber(toValue) && fields) {\n      var animation_2;\n      $array.each(fields, function (field) {\n        var anim = _this.setWorkingValue(field, toValue, duration, delay);\n        if (anim) {\n          animation_2 = anim;\n        }\n      });\n      if (animation_2 && !animation_2.isFinished()) {\n        this._hideDisposer = animation_2.events.on(\"animationended\", function () {\n          _this.setVisibility(false, true);\n          _this.isHiding = false;\n        });\n        this._disposers.push(this._hideDisposer);\n        return animation_2;\n      } else {\n        this.isHiding = false;\n        this.setVisibility(false, true);\n      }\n    } else {\n      this.isHiding = false;\n      this.setVisibility(false);\n    }\n  };\n  /**\r\n   * Returns a duration (ms) the Data Item should take to animate from one\r\n   * value to another.\r\n   *\r\n   * If the duration is not specified via parameter, this method will try to\r\n   * request a default duration from the related `Component`.\r\n   *\r\n   * @param duration  Default duration (ms)\r\n   * @return Duration (ms)\r\n   */\n  DataItem.prototype.getDuration = function (duration) {\n    if (!$type.isNumber(duration)) {\n      var component = this.component;\n      if (component) {\n        duration = component.interpolationDuration;\n      }\n    }\n    if (duration != null) {\n      if (!this._adapterO) {\n        return duration;\n      } else {\n        return this._adapterO.apply(\"duration\", duration);\n      }\n    }\n  };\n  /**\r\n   * Returns a numeric value for specific data field.\r\n   *\r\n   * If `calculated` is not set, it will return a raw value, as it is in\r\n   * source data.\r\n   *\r\n   * If `calculated` is set, it will return a pre-calculated specific value.\r\n   *\r\n   * @param name        Data field name\r\n   * @param calculated  A calculated value name\r\n   * @return Value\r\n   */\n  DataItem.prototype.getValue = function (name, calculated) {\n    if (name && this.component) {\n      if (!calculated) {\n        calculated = this.component.dataFields[name + \"Show\"];\n        if (!calculated) {\n          calculated = \"value\";\n        }\n      }\n      var value = this.values[name][calculated];\n      if (this._adapterO && this._adapterO.isEnabled(\"value\")) {\n        return this._adapterO.apply(\"value\", {\n          value: value,\n          field: name\n        }).value;\n      } else {\n        return value;\n      }\n    }\n  };\n  /**\r\n   * Returns a current working value for a specific data field.\r\n   *\r\n   * The actual value may differ from the one returned by `getValue()`. The\r\n   * latter returns static values from the data source.\r\n   *\r\n   * `getWorkingValue()` returns current value, which is usually different if\r\n   * Data Item is animating from one state to another.\r\n   *\r\n   * @param name        Data field name\r\n   * @return Value\r\n   */\n  DataItem.prototype.getWorkingValue = function (name) {\n    if (name && this.component) {\n      var realName = this.component.dataFields[name + \"Show\"];\n      if (!realName) {\n        realName = \"workingValue\";\n      }\n      if (this._adapterO) {\n        return this._adapterO.apply(\"workingValue\", {\n          workingValue: this.values[name][realName],\n          field: name\n        }).workingValue;\n      } else {\n        return this.values[name][realName];\n      }\n    }\n  };\n  /**\r\n   * @ignore\r\n   * @return Value\r\n   */\n  DataItem.prototype.getActualWorkingValue = function (name) {\n    return this.values[name].workingValue;\n  };\n  /**\r\n   * Sets a numeric value for specific data field.\r\n   *\r\n   * @param name        Data field name\r\n   * @param value       Value\r\n   * @param calculated  Calculated data field name\r\n   * @param duration    Duration (ms) to animate to new value to\r\n   * @param delay       Delay animation (ms)\r\n   */\n  DataItem.prototype.setValue = function (name, value, duration, delay) {\n    var currentValue = this.values[name].value;\n    var newDuration = this.getDuration(duration);\n    value = $type.toNumber(value);\n    if (currentValue !== value) {\n      this.values[name].value = value;\n      if (this._eventDispatcher && !this.__disabled) {\n        if (this.events.isEnabled(\"valuechanged\")) {\n          var event_2 = {\n            type: \"valuechanged\",\n            target: this,\n            property: name\n          };\n          this.events.dispatchImmediately(\"valuechanged\", event_2);\n        }\n      }\n      if (this.component) {\n        this.component.handleDataItemValueChange(this, name);\n      }\n    }\n    this.setWorkingValue(name, value, newDuration, delay);\n  };\n  DataItem.prototype.setCalculatedValue = function (name, value, calculated) {\n    var currentValue = this.values[name][calculated];\n    if (currentValue !== value && $type.isNumber(value)) {\n      this.values[name][calculated] = value;\n      if (this._eventDispatcher && !this.__disabled) {\n        if (this.events.isEnabled(\"calculatedvaluechanged\")) {\n          var event_3 = {\n            type: \"calculatedvaluechanged\",\n            target: this,\n            property: name\n          };\n          this.events.dispatchImmediately(\"calculatedvaluechanged\", event_3);\n        }\n      }\n      if (this.component) {\n        this.component.handleDataItemCalculatedValueChange(this, name);\n      }\n    }\n  };\n  /**\r\n   * Set current working numeric value for a specific data field.\r\n   *\r\n   * @param name        Data field name\r\n   * @param value       Value\r\n   * @param calculated  Calculated data field name\r\n   * @param duration    Duration (ms) to animate to new value to\r\n   * @param delay       Delay animation (ms)\r\n   * @return An [[Animation]] object used for transition to new values\r\n   */\n  DataItem.prototype.setWorkingValue = function (name, value, duration, delay) {\n    if ($type.isNumber(this.values[name].value)) {\n      var newDuration = this.getDuration(duration);\n      var workingValue = this.values[name].workingValue;\n      if (newDuration != null && newDuration > 0 && $type.isNumber(workingValue) && this.component) {\n        // sometimes NaN is passed, so only change this to != null if all cases of NaN are handled, otherwise animation won't stop\n        if (workingValue != value) {\n          var animation = this.animate({\n            childObject: this.values[name],\n            property: \"workingValue\",\n            from: workingValue,\n            to: value,\n            dummyData: name\n          }, newDuration, this.component.interpolationEasing);\n          if (delay != null) {\n            animation.delay(delay);\n          }\n          animation.events.on(\"animationstarted\", this.handleInterpolationProgress, this);\n          animation.events.on(\"animationprogress\", this.handleInterpolationProgress, this);\n          animation.events.on(\"animationended\", this.handleInterpolationProgress, this);\n          this._valueAnimations[name] = animation;\n          return animation;\n        } else {\n          var valueAnimation = this._valueAnimations[name];\n          if (valueAnimation) {\n            valueAnimation.stop();\n          }\n          this.values[name].workingValue = value;\n        }\n      } else {\n        var valueAnimation = this._valueAnimations[name];\n        if (valueAnimation) {\n          valueAnimation.stop();\n        }\n        this.values[name].workingValue = value;\n        if (this._eventDispatcher && !this.__disabled) {\n          if (this.events.isEnabled(\"workingvaluechanged\")) {\n            var event_4 = {\n              type: \"workingvaluechanged\",\n              target: this,\n              property: name\n            };\n            this.events.dispatchImmediately(\"workingvaluechanged\", event_4);\n          }\n        }\n        if (this.component) {\n          this.component.handleDataItemWorkingValueChange(this, name);\n        }\n      }\n    }\n  };\n  /**\r\n   * Sets a relative location for a data field.\r\n   *\r\n   * A location is always relative on a 0 to 1 scale, with 0 being beginning,\r\n   * 0.5 middle and 1 end.\r\n   *\r\n   * @todo Rewiew description\r\n   * @param name      Data field name\r\n   * @param value     Location (0-1)\r\n   * @param duration  Duration (ms) to animate to new value to\r\n   * @param delay     Delay animation (ms)\r\n   */\n  DataItem.prototype.setLocation = function (name, value, duration, delay) {\n    var currentLocation = this.locations[name];\n    if (currentLocation !== value) {\n      this.locations[name] = value;\n      if (this._eventDispatcher && !this.__disabled) {\n        if (this.events.isEnabled(\"locationchanged\")) {\n          var event_5 = {\n            type: \"locationchanged\",\n            target: this,\n            property: name\n          };\n          this.events.dispatchImmediately(\"locationchanged\", event_5);\n        }\n      }\n      if (this.component) {\n        this.component.handleDataItemValueChange(this, name); // correct\n      }\n      this.setWorkingLocation(name, value, duration, delay);\n    }\n  };\n  /**\r\n   * Sets a current working location for a data field.\r\n   *\r\n   * @todo Rewiew description\r\n   * @param name      Data field name\r\n   * @param value     Location (0-1)\r\n   * @param duration  Duration (ms) to animate to new value to\r\n   * @param delay     Delay animation (ms)\r\n   */\n  DataItem.prototype.setWorkingLocation = function (name, value, duration, delay) {\n    var newDuration = this.getDuration(duration);\n    var workingLocation = this.workingLocations[name];\n    if (newDuration != null && newDuration > 0 && $type.isNumber(workingLocation) && this.component) {\n      // sometimes NaN is passed, so only change this to != null if all cases of NaN are handled, otherwise animation won't stop\n      if (workingLocation != value) {\n        var animation = this.animate({\n          childObject: this.workingLocations,\n          property: name,\n          from: workingLocation,\n          to: value,\n          dummyData: name\n        }, newDuration, this.component.interpolationEasing);\n        if (delay != null) {\n          animation.delay(delay);\n        }\n        animation.events.on(\"animationstarted\", this.handleInterpolationProgress, this);\n        animation.events.on(\"animationprogress\", this.handleInterpolationProgress, this);\n        animation.events.on(\"animationended\", this.handleInterpolationProgress, this);\n        this._locationAnimations[name] = animation;\n        return animation;\n      } else {\n        var locationAnimation = this._locationAnimations[name];\n        if (locationAnimation) {\n          locationAnimation.stop();\n        }\n        this.workingLocations[name] = value;\n      }\n    } else {\n      var locationAnimation = this._locationAnimations[name];\n      if (locationAnimation) {\n        locationAnimation.stop();\n      }\n      this.workingLocations[name] = value;\n      if (this._eventDispatcher && !this.__disabled) {\n        if (this.events.isEnabled(\"workinglocationchanged\")) {\n          var event_6 = {\n            type: \"workinglocationchanged\",\n            target: this,\n            property: name\n          };\n          this.events.dispatchImmediately(\"workinglocationchanged\", event_6);\n        }\n      }\n      if (this.component) {\n        this.component.handleDataItemWorkingLocationChange(this, name);\n      }\n    }\n  };\n  /**\r\n   * Sets Date value to a data field.\r\n   *\r\n   * @param name      Data field name\r\n   * @param date      Date object\r\n   * @param duration  Duration (ms) to animate to new value to\r\n   */\n  DataItem.prototype.setDate = function (name, date, duration) {\n    if (!$type.isDate(date) && this.component) {\n      date = this.component.dateFormatter.parse(date);\n    }\n    var currentDate = this.dates[name];\n    if (currentDate !== date) {\n      this.dates[name] = date;\n      this.setValue(name, date.getTime(), duration);\n    }\n  };\n  /**\r\n   * Returns a Date value of the data field.\r\n   *\r\n   * @param name  Data field name\r\n   * @return Date object\r\n   */\n  DataItem.prototype.getDate = function (name) {\n    if (this._adapterO) {\n      return this._adapterO.apply(\"date\", {\n        date: this.dates[name],\n        field: name\n      }).date;\n    } else {\n      return this.dates[name];\n    }\n  };\n  /**\r\n   * Sets a Data Item-specific visual properties to apply to related elements.\r\n   *\r\n   * @param name   Property name\r\n   * @param value  Property value\r\n   */\n  DataItem.prototype.setProperty = function (name, value) {\n    if (this.properties[name] !== value) {\n      this.hasProperties = true;\n      this.properties[name] = value;\n      if (this._eventDispatcher && !this.__disabled) {\n        if (this.events.isEnabled(\"propertychanged\")) {\n          var event_7 = {\n            type: \"propertychanged\",\n            target: this,\n            property: name,\n            value: value\n          };\n          this.events.dispatchImmediately(\"propertychanged\", event_7);\n        }\n      }\n      if (this.component) {\n        this.component.handleDataItemPropertyChange(this, name);\n      }\n    }\n  };\n  /**\r\n   * Sets a related category for this Data Item.\r\n   *\r\n   * @todo Review description\r\n   * @param name   Data field name\r\n   * @param value  Category\r\n   */\n  DataItem.prototype.setCategory = function (name, value) {\n    if (!$type.isString(value)) {\n      value = $type.castString(value);\n    }\n    if (this.categories[name] !== value) {\n      this.categories[name] = value;\n    }\n  };\n  /**\r\n   * Clones the Data Item, including all related data.\r\n   *\r\n   * @return New Data Item clone\r\n   */\n  //public clone(cloneId?: string): this {\n  //\tlet dataItem: this = super.clone(cloneId);\n  //\tdataItem.copyFrom(this);\n  //\treturn dataItem;\n  //}\n  /**\r\n   * Copies all properties and related data from different data item.\r\n   *\r\n   * @param object Source data item\r\n   */\n  DataItem.prototype.copyFrom = function (source) {\n    _super.prototype.copyFrom.call(this, source);\n    if (source.dataContext) {\n      this.dataContext = $utils.copy(source.dataContext, {});\n    }\n    $utils.copyProperties(source.locations, this.locations);\n    /*\r\n    $utils.copyProperties(source.properties, this.properties);\r\n    $utils.copyProperties(source.categories, this.categories);\r\n    $utils.copyProperties(source.values, this.values);\r\n    $utils.copyProperties(source.dates, this.dates);\r\n      $object.each(source.values, (name, value) => {\r\n        this.values[name] = $object.copy(value);\r\n    });*/\n    if (source._adapterO) {\n      this.adapter.copyFrom(source._adapterO);\n    }\n    //this.events.copyFrom(source.events); // because copied in Base\n    this.component = source.component;\n  };\n  Object.defineProperty(DataItem.prototype, \"opacity\", {\n    /**\r\n     * Sets opacity for all Data Item's related elements (Sprites).\r\n     *\r\n     * @param value Opacity (0-1)\r\n     */\n    set: function (value) {\n      $array.each(this.sprites, function (sprite) {\n        sprite.opacity = value;\n      });\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(DataItem.prototype, \"ignoreMinMax\", {\n    /**\r\n     * Exclude from min/max calculations?\r\n     * @return Exclude from min/max calculations?\r\n     */\n    get: function () {\n      return this._ignoreMinMax;\n    },\n    /**\r\n     * Sets whether this data point should not be included in the scale and\r\n     * minimum/maximum calculations.\r\n     *\r\n     * E.g. some we may want to exclude a particular data point from influencing\r\n     * [[ValueAxis]] scale.\r\n     *\r\n     * @param value  Exclude from min/max calculations?\r\n     */\n    set: function (value) {\n      this._ignoreMinMax = value;\n      if (this._eventDispatcher && !this.__disabled) {\n        if (this.events.isEnabled(\"propertychanged\")) {\n          var event_8 = {\n            type: \"propertychanged\",\n            target: this,\n            property: \"ignoreMinMax\",\n            value: value\n          };\n          this.events.dispatchImmediately(\"propertychanged\", event_8);\n        }\n      }\n      if (this.component) {\n        this.component.handleDataItemPropertyChange(this, \"ignoreMinMax\");\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Creates and starts an [[Animation]] to interpolate (morph) Data Item's\r\n   * properties and/or values.\r\n   *\r\n   * @see {@link Animation}\r\n   * @param animationOptions  Animation options\r\n   * @param duration          Animation duration (ms)\r\n   * @param easing            Easing function\r\n   * @return Animation\r\n   */\n  DataItem.prototype.animate = function (animationOptions, duration, easing) {\n    return new Animation(this, animationOptions, duration, easing).start();\n  };\n  /**\r\n   * Handles intermediate steps when Data Item is interpolating (morphing) from\r\n   * one value to another.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param event Event object\r\n   */\n  DataItem.prototype.handleInterpolationProgress = function (event) {\n    var animation = event.target;\n    // it's always only one options, no need cycle\n    var animationOptions = animation.animationOptions[0];\n    if (animationOptions) {\n      if (this._eventDispatcher && !this.__disabled) {\n        if (this.events.isEnabled(\"workingvaluechanged\")) {\n          var event_9 = {\n            type: \"workingvaluechanged\",\n            target: this,\n            property: animationOptions.dummyData\n          };\n          this.events.dispatchImmediately(\"workingvaluechanged\", event_9);\n        }\n      }\n      if (this.component) {\n        this.component.handleDataItemWorkingValueChange(this, animationOptions.dummyData);\n      }\n    }\n  };\n  /**\r\n   * Checks whether Data Item has values set for all of the data fields,\r\n   * supplied via argument.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param fields  Field list to check\r\n   * @return Has values for all fields?\r\n   */\n  DataItem.prototype.hasValue = function (fields) {\n    // todo: what about categories?\n    for (var i = 0, len = fields.length; i < len; i++) {\n      var values = this.values[fields[i]];\n      if (!values || !$type.hasValue(values.value)) {\n        return false;\n      }\n    }\n    return true;\n  };\n  Object.defineProperty(DataItem.prototype, \"depth\", {\n    /**\r\n     * Depth of the Data Item.\r\n     *\r\n     * In nested data structures, like TreeMap, this indicates the level this\r\n     * data point is at, in relation to the parent Data Item.\r\n     *\r\n     * @return Depth\r\n     */\n    get: function () {\n      if (!this.parent) {\n        return 0;\n      } else {\n        return this.parent.depth + 1;\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(DataItem.prototype, \"dataContext\", {\n    /**\r\n     * Sets to a reference to an original object from Component's data.\r\n     *\r\n     * @return [description]\r\n     */\n    get: function () {\n      return this._dataContext;\n    },\n    /**\r\n     * A reference to an original object in Component's data, that this Data Item\r\n     * is derived from.\r\n     *\r\n     * @param value Original data object\r\n     */\n    set: function (value) {\n      this._dataContext = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * adds a sprite to dataItem.sprites array\r\n   * @ignore\r\n   */\n  DataItem.prototype.addSprite = function (sprite) {\n    if (sprite.dataItem && sprite.dataItem != this) {\n      $array.remove(sprite.dataItem.sprites, sprite);\n    }\n    if (!this.visible) {\n      sprite.hide(0);\n    }\n    if (this.isHiding) {\n      sprite.hide();\n    }\n    this.sprites.push(sprite);\n    sprite.dataItem = this;\n  };\n  return DataItem;\n}(BaseObjectEvents);\nexport { DataItem };","map":{"version":3,"names":["BaseObjectEvents","Adapter","Animation","AnimationDisposer","$utils","$array","$type","DataItem","_super","__extends","_this","call","_disabled","hasProperties","values","categories","dates","locations","workingLocations","properties","sprites","isTemplate","_index","_visible","_hidden","_ignoreMinMax","hasChildren","isHiding","_valueAnimations","_locationAnimations","className","applyTheme","Object","defineProperty","prototype","get","_adapterO","component","_animations","_disposers","push","set","value","hidden","setVisibility","each","sprite","__disabled","noChangeValues","visible","defaultState","hiddenState","_eventDispatcher","events","isEnabled","event_1","type","target","dispatchImmediately","show","duration","delay","fields","_hideDisposer","removeDispose","animation_1","field","setWorkingValue","animation","isFinished","dispose","hide","toValue","isNumber","animation_2","anim","on","getDuration","interpolationDuration","apply","getValue","name","calculated","dataFields","getWorkingValue","realName","workingValue","getActualWorkingValue","setValue","currentValue","newDuration","toNumber","event_2","property","handleDataItemValueChange","setCalculatedValue","event_3","handleDataItemCalculatedValueChange","animate","childObject","from","to","dummyData","interpolationEasing","handleInterpolationProgress","valueAnimation","stop","event_4","handleDataItemWorkingValueChange","setLocation","currentLocation","event_5","setWorkingLocation","workingLocation","locationAnimation","event_6","handleDataItemWorkingLocationChange","setDate","date","isDate","dateFormatter","parse","currentDate","getTime","getDate","setProperty","event_7","handleDataItemPropertyChange","setCategory","isString","castString","copyFrom","source","dataContext","copy","copyProperties","adapter","opacity","event_8","animationOptions","easing","start","event","event_9","hasValue","i","len","length","parent","depth","_dataContext","addSprite","dataItem","remove"],"sources":["../../../../src/.internal/core/DataItem.ts"],"sourcesContent":["/**\r\n * Defines functionality for \"Data Item\"\r\n *\r\n * A Data Item can be any object that can hold data. For example [[LineSeries]]\r\n * holds a number of values, that comprise a line graph. Each of those values\r\n * (data points) is a {DataItem}.\r\n *\r\n * Furthermore the [[LineSeries]] itself can be represented as a entry in the\r\n * legend. Since legend needs access to Line Series' value, a DataItem is\r\n * created for the series.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { BaseObjectEvents, IBaseObjectEvents } from \"./Base\";\r\nimport { AMEvent } from \"./utils/EventDispatcher\";\r\nimport { Adapter } from \"./utils/Adapter\";\r\nimport { Component, CalculatedValue } from \"./Component\";\r\nimport { IAnimatable, Animation, IAnimationOptions, IAnimationEvents, AnimationDisposer } from \"./utils/Animation\";\r\nimport { Sprite } from \"./Sprite\";\r\nimport { IDisposer } from \"./utils/Disposer\";\r\nimport * as $utils from \"./utils/Utils\";\r\nimport * as $array from \"./utils/Array\";\r\n//import * as $object from \"./utils/Object\";\r\nimport * as $type from \"./utils/Type\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n *\r\n * @todo Description\r\n  */\r\nexport interface IValues { }\r\n\r\n/**\r\n * Defines data events for [[DataItem]]\r\n */\r\nexport interface IDataItemEvents extends IBaseObjectEvents {\r\n\r\n\t/**\r\n\t * Invoked when the visibility of the Data Item changes, i.e. Series is\r\n\t * hidden\r\n\t */\r\n\tvisibilitychanged: {\r\n\t\tvisible: boolean;\r\n\t};\r\n\r\n\t/**\r\n\t * Invoked when the value is changed\r\n\t */\r\n\tvaluechanged: {\r\n\t\tproperty: string;\r\n\t};\r\n\r\n\t/**\r\n\t * Invoked when the internal/intermediate value has changed\r\n\t */\r\n\tworkingvaluechanged: {\r\n\t\tproperty: string;\r\n\t};\r\n\r\n\t/**\r\n\t * Invoked when the calculated value has changed\r\n\t */\r\n\tcalculatedvaluechanged: {\r\n\t\tproperty: string;\r\n\t};\r\n\r\n\t/**\r\n\t * Invoked when the location of Data Item changes\r\n\t */\r\n\tlocationchanged: {\r\n\t\tproperty: string;\r\n\t};\r\n\r\n\t/**\r\n\t * Invoked when working location of Data Item changes\r\n\t */\r\n\tworkinglocationchanged: {\r\n\t\tproperty: string;\r\n\t};\r\n\r\n\t/**\r\n\t * Invoked when a property of the Data Item changes\r\n\t */\r\n\tpropertychanged: {\r\n\t\tproperty: string;\r\n\t\tvalue: any; // TODO don't make this any\r\n\t};\r\n\r\n}\r\n\r\n/**\r\n * Defines adapters for [[DataItem]]\r\n * Includes both the [[Adapter]] definitions and properties\r\n * @see {@link Adapter}\r\n */\r\nexport interface IDataItemAdapters {\r\n\r\n\tduration: number;\r\n\r\n\tvalue: {\r\n\t\tvalue: number,\r\n\t\tfield: string\r\n\t};\r\n\r\n\tworkingValue: {\r\n\t\tworkingValue: number,\r\n\t\tfield: string\r\n\t};\r\n\r\n\tdate: {\r\n\t\tdate: Date,\r\n\t\tfield: string\r\n\t};\r\n\r\n}\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * DataItem represents single element in data, for example a data point in a\r\n * Serial Chart Series, e.g. a column.\r\n *\r\n * DataItem defines relationship between structured data, required for specific\r\n * chart type or task, and raw source data.\r\n *\r\n * It also implements required calculations, updates related visual elements,\r\n * etc.\r\n *\r\n * @todo Description\r\n * @important\r\n */\r\nexport class DataItem extends BaseObjectEvents implements IAnimatable {\r\n\r\n\t/**\r\n\t * When we are using a nested data structure, like for example in a TreeMap,\r\n\t * this property points to a parent Data Item of this one.\r\n\t */\r\n\tpublic parent: $type.Optional<this>;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IDataItemEvents;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IDataItemAdapters;\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic _adapterO: Adapter<this, this[\"_adapter\"]>;\r\n\r\n\t/**\r\n\t * Holds Adapter.\r\n\t */\r\n\tpublic get adapter(): Adapter<this, this[\"_adapter\"]> {\r\n\t\tif (!this._adapterO) {\r\n\t\t\tthis._adapterO = new Adapter<this, this[\"_adapter\"]>(this);\r\n\t\t}\r\n\t\treturn this._adapterO;\r\n\t}\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this Data Item is used for.\r\n\t */\r\n\tpublic _component!: Component;\r\n\r\n\t/**\r\n\t * A reference to a [[Component]] this Data Item belongs to.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic component: $type.Optional<this[\"_component\"]>;\r\n\r\n\t/**\r\n\t * A reference to the original Data Item in raw data.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected _dataContext: Object;\r\n\r\n\t/**\r\n\t * This Data Item is currently disabled.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected _disabled: boolean = false;\r\n\r\n\t/**\r\n\t * Indicates whether Data Item has any properties set.\r\n\t *\r\n\t * If it does not have any, the code can use this property to check whether\r\n\t * they need to apply costly operation of re-applying properties, whenever\r\n\t * Data Item-related element is redrawn, e.g. series.\r\n\t */\r\n\tpublic hasProperties: boolean = false;\r\n\r\n\t/**\r\n\t * An object containing calculated values.\r\n\t */\r\n\tpublic readonly values: { [index: string]: { [index: string]: number } } = {};\r\n\r\n\t/**\r\n\t * An object container current working values.\r\n\t */\r\n\t//public readonly workingValues: { [index: string]: { [index: string]: number } } = {};\r\n\r\n\t/**\r\n\t * An object containing categories.\r\n\t */\r\n\tpublic readonly categories: { [index: string]: string } = {};\r\n\r\n\t/**\r\n\t * An object containing dates.\r\n\t */\r\n\tpublic readonly dates: { [index: string]: Date } = {};\r\n\r\n\t/**\r\n\t * An object containing locations for the Data Item.\r\n\t *\r\n\t * A location is a position within date or category, or, in some other cases,\r\n\t * where there is no single point but rather some period.\r\n\t *\r\n\t * @see {@link https://www.amcharts.com/docs/v4/concepts/series/#Data_item_locations} for info how data item locations work\r\n\t */\r\n\tpublic readonly locations: { [index: string]: number } = {};\r\n\r\n\t/**\r\n\t * Current working locations.\r\n\t */\r\n\tpublic readonly workingLocations: { [index: string]: number } = {};\r\n\r\n\t/**\r\n\t * An object containing Data Item specific appearance properties in key-value\r\n\t * pairs.\r\n\t *\r\n\t * Sometimes a single Data Item needs to apply different properties than the\r\n\t * rest of the data [[Series]] it is part of. E.g. a single column,\r\n\t * represented by a Data Item needs to be filled with a different color than\r\n\t * the reset of the [[ColumnSeries]] it belongs to.\r\n\t *\r\n\t * That's where Data Item's `properties` come into play.\r\n\t *\r\n\t * Please note that you should set Data Item-specific properties using\r\n\t * `setProperty()` method, rather than access `properties` object directly.\r\n\t */\r\n\tpublic readonly properties: { [index: string]: any } = {};\r\n\r\n\t/**\r\n\t * A list of [[Sprite]] elements that are associated with this Data Item.\r\n\t *\r\n\t * E.g. an [[Axis]] Data Item has several separate elements associated with\r\n\t * it, like [[AxisTick]], [[AxisLabel]], and [[Grid]].\r\n\t *\r\n\t * Data Item keeps track of all of them, so it can toggle all related visual\r\n\t * elements when it itself is toggled.\r\n\t */\r\n\tpublic sprites: Sprite[] = [];\r\n\r\n\t/**\r\n\t * Identifies if this object is a \"template\" and should not be treated as\r\n\t * real object that is drawn or actually used in the chart.\r\n\t */\r\n\tpublic isTemplate: boolean = false;\r\n\r\n\t/**\r\n\t * List of animations currently animating Data Item's values.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected _animations: $type.Optional<Array<Animation>>;\r\n\r\n\t/**\r\n\t * The current index within the dataItems\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _index: number | null = null;\r\n\r\n\t/**\r\n\t * Is Data Item currently visible?\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected _visible: boolean = true;\r\n\r\n\t/**\r\n\t * Is Data Item currently hidden?\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected _hidden: boolean = false;\r\n\r\n\t/**\r\n\t * Should this Data Item be used when calculating data ranges and scales?\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected _ignoreMinMax: boolean = false;\r\n\r\n\t/**\r\n\t * Some of the Data Item's data fields may contain an array of children. This\r\n\t * property contains an object indicating which fields hold an array, so that\r\n\t * they can be processed properly.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic hasChildren: { [index: string]: boolean } = {};\r\n\r\n\t/**\r\n\t * Indicates whether Data Item is currently animiting from visible to hidden\r\n\t * state.\r\n\t */\r\n\tpublic isHiding: boolean = false;\r\n\r\n\t/**\r\n\t * Holds a Disposer reference to hiding [[Animation]] currently playing.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected _hideDisposer: $type.Optional<IDisposer>;\r\n\r\n\t/**\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected _valueAnimations: { [key: string]: Animation } = {};\r\n\r\n\t/**\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected _locationAnimations: { [key: string]: Animation } = {};\r\n\r\n\t/**\r\n\t * Constructor\r\n\t * @todo Adding events to disposers produces errors in some cases, which means that chart is using disposed Data Items which is not right\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"DataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Data Item's position index in Component's data.\r\n\t *\r\n\t * @return Index\r\n\t */\r\n\tpublic get index(): number {\r\n\t\tif (this.component) {\r\n\t\t\tif (this._index != null) {\r\n\t\t\t\treturn this._index;\r\n\t\t\t} else {\r\n\t\t\t\treturn -1;\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn -1;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A list of [[Animations]] objects currently mutating Data Item's values.\r\n\t *\r\n\t * @return [description]\r\n\t */\r\n\tpublic get animations(): Array<Animation> {\r\n\t\tif (!this._animations) {\r\n\t\t\tthis._animations = [];\r\n\t\t\tthis._disposers.push(new AnimationDisposer(this._animations));\r\n\t\t}\r\n\t\treturn this._animations;\r\n\t}\r\n\r\n\t/**\r\n\t * Sets visibility of the Data Item.\r\n\t *\r\n\t * @param value Visible?\r\n\t */\r\n\tpublic set visible(value: boolean) {\r\n\t\tif (value) {\r\n\t\t\tthis.hidden = false;\r\n\t\t}\r\n\t\tif (this._visible != value) {\r\n\t\t\tthis.setVisibility(value);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Sets hidden flag for data item. Mostly used to initially hide data item.\r\n\t *\r\n\t * @param value Hidden?\r\n\t */\r\n\tpublic set hidden(value: boolean) {\r\n\t\tif (this._hidden != value) {\r\n\t\t\tthis._hidden = value;\r\n\t\t\tif (value) {\r\n\t\t\t\tthis.setVisibility(false);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.setVisibility(true, true);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns `true` if this Data Item is currently hidden.\r\n\t *\r\n\t * @return Hidden?\r\n\t */\r\n\tpublic get hidden(): boolean {\r\n\t\treturn this._hidden;\r\n\t}\r\n\r\n\t/**\r\n\t * Disables all Sprites associated with this Data Item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {boolean}\r\n\t */\r\n\tpublic set __disabled(value: boolean) {\r\n\t\t//\tif (this._disabled != value) { // not good\r\n\t\tthis._disabled = value;\r\n\r\n\t\t$array.each(this.sprites, (sprite) => {\r\n\t\t\tsprite.__disabled = value;\r\n\t\t});\r\n\t\t//\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Is this Data Item currently disabled?\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {boolean}\r\n\t */\r\n\tpublic get __disabled(): boolean {\r\n\t\treturn this._disabled;\r\n\t}\r\n\r\n\t/**\r\n\t * Sets visibility of the Data Item.\r\n\t *\r\n\t * @param value Data Item\r\n\t */\r\n\tpublic setVisibility(value: boolean, noChangeValues?: boolean): void {\r\n\t\t$array.each(this.sprites, (sprite) => {\r\n\t\t\tif (value) {\r\n\t\t\t\tsprite.visible = sprite.defaultState.properties.visible;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tif (sprite.hiddenState) {\r\n\t\t\t\t\tsprite.visible = sprite.hiddenState.properties.visible;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tsprite.visible = false;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tthis._visible = value;\r\n\t\tif (this._eventDispatcher && !this.__disabled) {\r\n\t\t\tif (this.events.isEnabled(\"visibilitychanged\")) {\r\n\t\t\t\tconst event: AMEvent<this, IDataItemEvents>[\"visibilitychanged\"] = {\r\n\t\t\t\t\ttype: \"visibilitychanged\",\r\n\t\t\t\t\ttarget: this,\r\n\t\t\t\t\tvisible: value\r\n\t\t\t\t};\r\n\t\t\t\tthis.events.dispatchImmediately(\"visibilitychanged\", event);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns `true` if this Data Item is currently visible.\r\n\t *\r\n\t * @return Visible?\r\n\t */\r\n\tpublic get visible(): boolean {\r\n\t\tif (this._hidden) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\treturn this._visible;\r\n\t}\r\n\r\n\t/**\r\n\t * Shows the Data Item and related visual elements.\r\n\t *\r\n\t * @param duration  Animation duration (ms)\r\n\t * @param delay     Delay animation (ms)\r\n\t * @param fields    A list of fields to set values of\r\n\t */\r\n\tpublic show(duration?: number, delay?: number, fields?: string[]): $type.Optional<Animation> {\r\n\t\tif (!this.hidden) {\r\n\t\t\tthis.setVisibility(true, true);\r\n\r\n\t\t\tthis.isHiding = false;\r\n\r\n\t\t\tif (this._hideDisposer) {\r\n\t\t\t\tthis.removeDispose(this._hideDisposer);\r\n\t\t\t}\r\n\r\n\t\t\tlet animation: $type.Optional<Animation>;\r\n\r\n\t\t\tif (fields) {\r\n\t\t\t\t$array.each(fields, (field) => {\r\n\t\t\t\t\tanimation = this.setWorkingValue(field, this.values[field].value, duration, delay);\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\t\t\t$array.each(this.sprites, (sprite) => {\r\n\t\t\t\tlet animation = sprite.show(duration);\r\n\r\n\t\t\t\tif (animation != null && !animation.isFinished()) {\r\n\t\t\t\t\tthis._disposers.push(animation);\r\n\r\n\t\t\t\t\tif (delay != null && delay > 0) {\r\n\t\t\t\t\t\tanimation.delay(delay);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t\treturn animation;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Destroys this object and all related data.\r\n\t */\r\n\tpublic dispose() {\r\n\t\tsuper.dispose();\r\n\r\n\t\t$array.each(this.sprites, (sprite) => {\r\n\t\t\tsprite.dispose();\r\n\t\t});\r\n\r\n\t\tthis.sprites = [];\r\n\t}\r\n\r\n\t/**\r\n\t * Hides the Data Item and related visual elements.\r\n\t *\r\n\t * @param duration  Animation duration (ms)\r\n\t * @param delay     Delay animation (ms)\r\n\t * @param toValue   A value to set to `fields` when hiding\r\n\t * @param fields    A list of data fields to set value to `toValue`\r\n\t */\r\n\tpublic hide(duration?: number, delay?: number, toValue?: number, fields?: string[]): $type.Optional<Animation> {\r\n\t\tthis.isHiding = true;\r\n\r\n\t\t$array.each(this.sprites, (sprite) => {\r\n\r\n\t\t\tlet animation = sprite.hide(duration);\r\n\r\n\t\t\tif (animation != null && !animation.isFinished()) {\r\n\t\t\t\tthis._disposers.push(animation);\r\n\r\n\t\t\t\tif (delay != null && delay > 0) {\r\n\t\t\t\t\tanimation.delay(delay);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tif ($type.isNumber(toValue) && fields) {\r\n\t\t\tlet animation: $type.Optional<Animation>;\r\n\r\n\t\t\t$array.each(fields, (field) => {\r\n\t\t\t\tlet anim = this.setWorkingValue(field, toValue, duration, delay);\r\n\t\t\t\tif (anim) {\r\n\t\t\t\t\tanimation = anim;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\tif (animation && !animation.isFinished()) {\r\n\t\t\t\tthis._hideDisposer = animation.events.on(\"animationended\", () => {\r\n\t\t\t\t\tthis.setVisibility(false, true);\r\n\t\t\t\t\tthis.isHiding = false;\r\n\t\t\t\t});\r\n\r\n\t\t\t\tthis._disposers.push(this._hideDisposer);\r\n\t\t\t\treturn animation;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.isHiding = false;\r\n\t\t\t\tthis.setVisibility(false, true);\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.isHiding = false;\r\n\t\t\tthis.setVisibility(false);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a duration (ms) the Data Item should take to animate from one\r\n\t * value to another.\r\n\t *\r\n\t * If the duration is not specified via parameter, this method will try to\r\n\t * request a default duration from the related `Component`.\r\n\t *\r\n\t * @param duration  Default duration (ms)\r\n\t * @return Duration (ms)\r\n\t */\r\n\tpublic getDuration(duration?: number): $type.Optional<number> {\r\n\t\tif (!$type.isNumber(duration)) {\r\n\t\t\tlet component: $type.Optional<Component> = this.component;\r\n\t\t\tif (component) {\r\n\t\t\t\tduration = component.interpolationDuration;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (duration != null) {\r\n\t\t\tif (!this._adapterO) {\r\n\t\t\t\treturn duration;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\treturn this._adapterO.apply(\"duration\", duration);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a numeric value for specific data field.\r\n\t *\r\n\t * If `calculated` is not set, it will return a raw value, as it is in\r\n\t * source data.\r\n\t *\r\n\t * If `calculated` is set, it will return a pre-calculated specific value.\r\n\t *\r\n\t * @param name        Data field name\r\n\t * @param calculated  A calculated value name\r\n\t * @return Value\r\n\t */\r\n\tpublic getValue(name: string, calculated?: CalculatedValue): $type.Optional<number> {\r\n\t\tif (name && this.component) {\r\n\t\t\tif (!calculated) {\r\n\t\t\t\tcalculated = (<any>this.component.dataFields)[name + \"Show\"];\r\n\t\t\t\tif (!calculated) {\r\n\t\t\t\t\tcalculated = \"value\";\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tconst value = this.values[name][calculated];\r\n\r\n\t\t\tif (this._adapterO && this._adapterO.isEnabled(\"value\")) {\r\n\t\t\t\treturn this._adapterO.apply(\"value\", {\r\n\t\t\t\t\tvalue: value,\r\n\t\t\t\t\tfield: name\r\n\t\t\t\t}).value;\r\n\r\n\t\t\t} else {\r\n\t\t\t\treturn value;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a current working value for a specific data field.\r\n\t *\r\n\t * The actual value may differ from the one returned by `getValue()`. The\r\n\t * latter returns static values from the data source.\r\n\t *\r\n\t * `getWorkingValue()` returns current value, which is usually different if\r\n\t * Data Item is animating from one state to another.\r\n\t *\r\n\t * @param name        Data field name\r\n\t * @return Value\r\n\t */\r\n\tpublic getWorkingValue(name: string): $type.Optional<number> {\r\n\t\tif (name && this.component) {\r\n\t\t\tlet realName = (<any>this.component.dataFields)[name + \"Show\"];\r\n\r\n\t\t\tif (!realName) {\r\n\t\t\t\trealName = \"workingValue\";\r\n\t\t\t}\r\n\t\t\tif (this._adapterO) {\r\n\t\t\t\treturn this._adapterO.apply(\"workingValue\", {\r\n\t\t\t\t\tworkingValue: this.values[name][realName],\r\n\t\t\t\t\tfield: name\r\n\t\t\t\t}).workingValue;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\treturn this.values[name][realName];\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t * @return Value\r\n\t */\r\n\tpublic getActualWorkingValue(name: string): $type.Optional<number> {\r\n\t\treturn this.values[name].workingValue;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Sets a numeric value for specific data field.\r\n\t *\r\n\t * @param name        Data field name\r\n\t * @param value       Value\r\n\t * @param calculated  Calculated data field name\r\n\t * @param duration    Duration (ms) to animate to new value to\r\n\t * @param delay       Delay animation (ms)\r\n\t */\r\n\tpublic setValue(name: string, value: number, duration?: number, delay?: number): void {\r\n\t\tlet currentValue: number = this.values[name].value;\r\n\t\tlet newDuration: $type.Optional<number> = this.getDuration(duration);\r\n\t\tvalue = $type.toNumber(value);\r\n\t\tif (currentValue !== value) {\r\n\t\t\tthis.values[name].value = value;\r\n\t\t\tif (this._eventDispatcher && !this.__disabled) {\r\n\t\t\t\tif (this.events.isEnabled(\"valuechanged\")) {\r\n\t\t\t\t\tconst event: AMEvent<this, IDataItemEvents>[\"valuechanged\"] = {\r\n\t\t\t\t\t\ttype: \"valuechanged\",\r\n\t\t\t\t\t\ttarget: this,\r\n\t\t\t\t\t\tproperty: name\r\n\t\t\t\t\t};\r\n\t\t\t\t\tthis.events.dispatchImmediately(\"valuechanged\", event);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (this.component) {\r\n\t\t\t\tthis.component.handleDataItemValueChange(this, name);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.setWorkingValue(name, value, newDuration, delay);\r\n\t}\r\n\r\n\tsetCalculatedValue(name: string, value: number, calculated: CalculatedValue): void {\r\n\t\tlet currentValue: number = this.values[name][calculated];\r\n\r\n\t\tif (currentValue !== value && $type.isNumber(value)) {\r\n\t\t\tthis.values[name][calculated] = value;\r\n\r\n\t\t\tif (this._eventDispatcher && !this.__disabled) {\r\n\t\t\t\tif (this.events.isEnabled(\"calculatedvaluechanged\")) {\r\n\t\t\t\t\tconst event: AMEvent<this, IDataItemEvents>[\"calculatedvaluechanged\"] = {\r\n\t\t\t\t\t\ttype: \"calculatedvaluechanged\",\r\n\t\t\t\t\t\ttarget: this,\r\n\t\t\t\t\t\tproperty: name\r\n\t\t\t\t\t};\r\n\t\t\t\t\tthis.events.dispatchImmediately(\"calculatedvaluechanged\", event);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (this.component) {\r\n\t\t\t\tthis.component.handleDataItemCalculatedValueChange(this, name);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Set current working numeric value for a specific data field.\r\n\t *\r\n\t * @param name        Data field name\r\n\t * @param value       Value\r\n\t * @param calculated  Calculated data field name\r\n\t * @param duration    Duration (ms) to animate to new value to\r\n\t * @param delay       Delay animation (ms)\r\n\t * @return An [[Animation]] object used for transition to new values\r\n\t */\r\n\tpublic setWorkingValue(name: string, value: number, duration?: number, delay?: number): $type.Optional<Animation> {\r\n\t\tif ($type.isNumber(this.values[name].value)) {\r\n\t\t\tlet newDuration: $type.Optional<number> = this.getDuration(duration);\r\n\r\n\t\t\tlet workingValue: number = this.values[name].workingValue;\r\n\r\n\t\t\tif (newDuration != null && newDuration > 0 && $type.isNumber(workingValue) && this.component) { // sometimes NaN is passed, so only change this to != null if all cases of NaN are handled, otherwise animation won't stop\r\n\r\n\t\t\t\tif (workingValue != value) {\r\n\t\t\t\t\tlet animation: Animation = this.animate({ childObject: this.values[name], property: \"workingValue\", from: workingValue, to: value, dummyData: name }, newDuration, this.component.interpolationEasing);\r\n\t\t\t\t\tif (delay != null) {\r\n\t\t\t\t\t\tanimation.delay(delay);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tanimation.events.on(\"animationstarted\", this.handleInterpolationProgress, this);\r\n\t\t\t\t\tanimation.events.on(\"animationprogress\", this.handleInterpolationProgress, this);\r\n\t\t\t\t\tanimation.events.on(\"animationended\", this.handleInterpolationProgress, this);\r\n\t\t\t\t\tthis._valueAnimations[name] = animation;\r\n\t\t\t\t\treturn animation;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tlet valueAnimation = this._valueAnimations[name];\r\n\t\t\t\t\tif (valueAnimation) {\r\n\t\t\t\t\t\tvalueAnimation.stop();\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tthis.values[name].workingValue = value;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\r\n\t\t\t\tlet valueAnimation = this._valueAnimations[name];\r\n\t\t\t\tif (valueAnimation) {\r\n\t\t\t\t\tvalueAnimation.stop();\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.values[name].workingValue = value;\r\n\t\t\t\tif (this._eventDispatcher && !this.__disabled) {\r\n\t\t\t\t\tif (this.events.isEnabled(\"workingvaluechanged\")) {\r\n\t\t\t\t\t\tconst event: AMEvent<this, IDataItemEvents>[\"workingvaluechanged\"] = {\r\n\t\t\t\t\t\t\ttype: \"workingvaluechanged\",\r\n\t\t\t\t\t\t\ttarget: this,\r\n\t\t\t\t\t\t\tproperty: name\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t\tthis.events.dispatchImmediately(\"workingvaluechanged\", event);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (this.component) {\r\n\t\t\t\t\tthis.component.handleDataItemWorkingValueChange(this, name);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Sets a relative location for a data field.\r\n\t *\r\n\t * A location is always relative on a 0 to 1 scale, with 0 being beginning,\r\n\t * 0.5 middle and 1 end.\r\n\t *\r\n\t * @todo Rewiew description\r\n\t * @param name      Data field name\r\n\t * @param value     Location (0-1)\r\n\t * @param duration  Duration (ms) to animate to new value to\r\n\t * @param delay     Delay animation (ms)\r\n\t */\r\n\tpublic setLocation(name: string, value: number, duration?: number, delay?: number) {\r\n\t\tlet currentLocation: number = this.locations[name];\r\n\r\n\t\tif (currentLocation !== value) {\r\n\t\t\tthis.locations[name] = value;\r\n\t\t\tif (this._eventDispatcher && !this.__disabled) {\r\n\t\t\t\tif (this.events.isEnabled(\"locationchanged\")) {\r\n\t\t\t\t\tconst event: AMEvent<this, IDataItemEvents>[\"locationchanged\"] = {\r\n\t\t\t\t\t\ttype: \"locationchanged\",\r\n\t\t\t\t\t\ttarget: this,\r\n\t\t\t\t\t\tproperty: name\r\n\t\t\t\t\t};\r\n\t\t\t\t\tthis.events.dispatchImmediately(\"locationchanged\", event);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (this.component) {\r\n\t\t\t\tthis.component.handleDataItemValueChange(this, name); // correct\r\n\t\t\t}\r\n\r\n\t\t\tthis.setWorkingLocation(name, value, duration, delay);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Sets a current working location for a data field.\r\n\t *\r\n\t * @todo Rewiew description\r\n\t * @param name      Data field name\r\n\t * @param value     Location (0-1)\r\n\t * @param duration  Duration (ms) to animate to new value to\r\n\t * @param delay     Delay animation (ms)\r\n\t */\r\n\tpublic setWorkingLocation(name: string, value: number, duration?: number, delay?: number): $type.Optional<Animation> {\r\n\t\tlet newDuration: $type.Optional<number> = this.getDuration(duration);\r\n\t\tlet workingLocation: number = this.workingLocations[name];\r\n\r\n\t\tif (newDuration != null && newDuration > 0 && $type.isNumber(workingLocation) && this.component) { // sometimes NaN is passed, so only change this to != null if all cases of NaN are handled, otherwise animation won't stop\r\n\t\t\tif (workingLocation != value) {\r\n\t\t\t\tlet animation: Animation = this.animate({ childObject: this.workingLocations, property: name, from: workingLocation, to: value, dummyData: name }, newDuration, this.component.interpolationEasing);\r\n\t\t\t\tif (delay != null) {\r\n\t\t\t\t\tanimation.delay(delay);\r\n\t\t\t\t}\r\n\t\t\t\tanimation.events.on(\"animationstarted\", this.handleInterpolationProgress, this);\r\n\t\t\t\tanimation.events.on(\"animationprogress\", this.handleInterpolationProgress, this);\r\n\t\t\t\tanimation.events.on(\"animationended\", this.handleInterpolationProgress, this);\r\n\t\t\t\tthis._locationAnimations[name] = animation;\r\n\t\t\t\treturn animation;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tlet locationAnimation = this._locationAnimations[name];\r\n\t\t\t\tif (locationAnimation) {\r\n\t\t\t\t\tlocationAnimation.stop();\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.workingLocations[name] = value;\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\tlet locationAnimation = this._locationAnimations[name];\r\n\t\t\tif (locationAnimation) {\r\n\t\t\t\tlocationAnimation.stop();\r\n\t\t\t}\r\n\r\n\t\t\tthis.workingLocations[name] = value;\r\n\r\n\t\t\tif (this._eventDispatcher && !this.__disabled) {\r\n\t\t\t\tif (this.events.isEnabled(\"workinglocationchanged\")) {\r\n\t\t\t\t\tconst event: AMEvent<this, IDataItemEvents>[\"workinglocationchanged\"] = {\r\n\t\t\t\t\t\ttype: \"workinglocationchanged\",\r\n\t\t\t\t\t\ttarget: this,\r\n\t\t\t\t\t\tproperty: name\r\n\t\t\t\t\t};\r\n\t\t\t\t\tthis.events.dispatchImmediately(\"workinglocationchanged\", event);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (this.component) {\r\n\t\t\t\tthis.component.handleDataItemWorkingLocationChange(this, name);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Sets Date value to a data field.\r\n\t *\r\n\t * @param name      Data field name\r\n\t * @param date      Date object\r\n\t * @param duration  Duration (ms) to animate to new value to\r\n\t */\r\n\tpublic setDate(name: string, date: Date, duration?: number) {\r\n\r\n\t\tif (!$type.isDate(date) && this.component) {\r\n\t\t\tdate = this.component.dateFormatter.parse(date);\r\n\t\t}\r\n\r\n\t\tlet currentDate: Date = this.dates[name];\r\n\t\tif (currentDate !== date) {\r\n\t\t\tthis.dates[name] = date;\r\n\t\t\tthis.setValue(name, date.getTime(), duration);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a Date value of the data field.\r\n\t *\r\n\t * @param name  Data field name\r\n\t * @return Date object\r\n\t */\r\n\tpublic getDate(name: string): Date {\r\n\t\tif (this._adapterO) {\r\n\t\t\treturn this._adapterO.apply(\"date\", {\r\n\t\t\t\tdate: this.dates[name],\r\n\t\t\t\tfield: name\r\n\t\t\t}).date;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this.dates[name];\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Sets a Data Item-specific visual properties to apply to related elements.\r\n\t *\r\n\t * @param name   Property name\r\n\t * @param value  Property value\r\n\t */\r\n\tpublic setProperty(name: string, value: any) {\r\n\t\tif (this.properties[name] !== value) {\r\n\t\t\tthis.hasProperties = true;\r\n\t\t\tthis.properties[name] = value;\r\n\t\t\tif (this._eventDispatcher && !this.__disabled) {\r\n\t\t\t\tif (this.events.isEnabled(\"propertychanged\")) {\r\n\t\t\t\t\tconst event: AMEvent<this, IDataItemEvents>[\"propertychanged\"] = {\r\n\t\t\t\t\t\ttype: \"propertychanged\",\r\n\t\t\t\t\t\ttarget: this,\r\n\t\t\t\t\t\tproperty: name,\r\n\t\t\t\t\t\tvalue: value\r\n\t\t\t\t\t};\r\n\t\t\t\t\tthis.events.dispatchImmediately(\"propertychanged\", event);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (this.component) {\r\n\t\t\t\tthis.component.handleDataItemPropertyChange(this, name);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Sets a related category for this Data Item.\r\n\t *\r\n\t * @todo Review description\r\n\t * @param name   Data field name\r\n\t * @param value  Category\r\n\t */\r\n\tpublic setCategory(name: string, value: string) {\r\n\t\tif (!$type.isString(value)) {\r\n\t\t\tvalue = $type.castString(value);\r\n\t\t}\r\n\r\n\t\tif (this.categories[name] !== value) {\r\n\t\t\tthis.categories[name] = value;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Clones the Data Item, including all related data.\r\n\t *\r\n\t * @return New Data Item clone\r\n\t */\r\n\t//public clone(cloneId?: string): this {\r\n\t//\tlet dataItem: this = super.clone(cloneId);\r\n\t//\tdataItem.copyFrom(this);\r\n\t//\treturn dataItem;\r\n\t//}\r\n\r\n\t/**\r\n\t * Copies all properties and related data from different data item.\r\n\t *\r\n\t * @param object Source data item\r\n\t */\r\n\tpublic copyFrom(source: this) {\r\n\r\n\t\tsuper.copyFrom(source);\r\n\r\n\t\tif (source.dataContext) {\r\n\t\t\tthis.dataContext = $utils.copy(source.dataContext, {});\r\n\t\t}\r\n\r\n\t\t$utils.copyProperties(source.locations, this.locations);\r\n\t\t/*\r\n\t\t$utils.copyProperties(source.properties, this.properties);\r\n\t\t$utils.copyProperties(source.categories, this.categories);\r\n\t\t$utils.copyProperties(source.values, this.values);\r\n\t\t$utils.copyProperties(source.dates, this.dates);\r\n\r\n\t\t$object.each(source.values, (name, value) => {\r\n\t\t\tthis.values[name] = $object.copy(value);\r\n\t\t});*/\r\n\t\tif (source._adapterO) {\r\n\t\t\tthis.adapter.copyFrom(source._adapterO);\r\n\t\t}\r\n\t\t//this.events.copyFrom(source.events); // because copied in Base\r\n\t\tthis.component = source.component;\r\n\t}\r\n\r\n\t/**\r\n\t * Sets opacity for all Data Item's related elements (Sprites).\r\n\t *\r\n\t * @param value Opacity (0-1)\r\n\t */\r\n\tpublic set opacity(value: number) {\r\n\t\t$array.each(this.sprites, (sprite) => {\r\n\t\t\tsprite.opacity = value;\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Sets whether this data point should not be included in the scale and\r\n\t * minimum/maximum calculations.\r\n\t *\r\n\t * E.g. some we may want to exclude a particular data point from influencing\r\n\t * [[ValueAxis]] scale.\r\n\t *\r\n\t * @param value  Exclude from min/max calculations?\r\n\t */\r\n\tpublic set ignoreMinMax(value: boolean) {\r\n\t\tthis._ignoreMinMax = value;\r\n\t\tif (this._eventDispatcher && !this.__disabled) {\r\n\t\t\tif (this.events.isEnabled(\"propertychanged\")) {\r\n\t\t\t\tconst event: AMEvent<this, IDataItemEvents>[\"propertychanged\"] = {\r\n\t\t\t\t\ttype: \"propertychanged\",\r\n\t\t\t\t\ttarget: this,\r\n\t\t\t\t\tproperty: \"ignoreMinMax\",\r\n\t\t\t\t\tvalue: value\r\n\t\t\t\t};\r\n\t\t\t\tthis.events.dispatchImmediately(\"propertychanged\", event);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (this.component) {\r\n\t\t\tthis.component.handleDataItemPropertyChange(this, \"ignoreMinMax\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Exclude from min/max calculations?\r\n\t * @return Exclude from min/max calculations?\r\n\t */\r\n\tpublic get ignoreMinMax(): boolean {\r\n\t\treturn this._ignoreMinMax;\r\n\t}\r\n\r\n\t/**\r\n\t * Creates and starts an [[Animation]] to interpolate (morph) Data Item's\r\n\t * properties and/or values.\r\n\t *\r\n\t * @see {@link Animation}\r\n\t * @param animationOptions  Animation options\r\n\t * @param duration          Animation duration (ms)\r\n\t * @param easing            Easing function\r\n\t * @return Animation\r\n\t */\r\n\tpublic animate(animationOptions: IAnimationOptions[] | IAnimationOptions, duration: number, easing?: (value: number) => number): Animation {\r\n\t\treturn new Animation(this, animationOptions, duration, easing).start();\r\n\t}\r\n\r\n\t/**\r\n\t * Handles intermediate steps when Data Item is interpolating (morphing) from\r\n\t * one value to another.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param event Event object\r\n\t */\r\n\tpublic handleInterpolationProgress(event: AMEvent<Animation, IAnimationEvents>[\"animationstarted\" | \"animationended\" | \"animationprogress\"]) {\r\n\t\tlet animation: Animation = event.target;\r\n\r\n\t\t// it's always only one options, no need cycle\r\n\t\tlet animationOptions: IAnimationOptions = animation.animationOptions[0];\r\n\t\tif (animationOptions) {\r\n\t\t\tif (this._eventDispatcher && !this.__disabled) {\r\n\t\t\t\tif (this.events.isEnabled(\"workingvaluechanged\")) {\r\n\t\t\t\t\tconst event: AMEvent<this, IDataItemEvents>[\"workingvaluechanged\"] = {\r\n\t\t\t\t\t\ttype: \"workingvaluechanged\",\r\n\t\t\t\t\t\ttarget: this,\r\n\t\t\t\t\t\tproperty: animationOptions.dummyData\r\n\t\t\t\t\t};\r\n\r\n\t\t\t\t\tthis.events.dispatchImmediately(\"workingvaluechanged\", event);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (this.component) {\r\n\t\t\t\tthis.component.handleDataItemWorkingValueChange(this, animationOptions.dummyData);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Checks whether Data Item has values set for all of the data fields,\r\n\t * supplied via argument.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param fields  Field list to check\r\n\t * @return Has values for all fields?\r\n\t */\r\n\tpublic hasValue(fields: string[]): boolean {\r\n\t\t// todo: what about categories?\r\n\t\tfor (let i = 0, len = fields.length; i < len; i++) {\r\n\t\t\tlet values = this.values[fields[i]];\r\n\t\t\tif (!values || !$type.hasValue(values.value)) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * Depth of the Data Item.\r\n\t *\r\n\t * In nested data structures, like TreeMap, this indicates the level this\r\n\t * data point is at, in relation to the parent Data Item.\r\n\t *\r\n\t * @return Depth\r\n\t */\r\n\tpublic get depth(): number {\r\n\t\tif (!this.parent) {\r\n\t\t\treturn 0;\r\n\r\n\t\t} else {\r\n\t\t\treturn this.parent.depth + 1;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Sets to a reference to an original object from Component's data.\r\n\t *\r\n\t * @return [description]\r\n\t */\r\n\tpublic get dataContext(): Object {\r\n\t\treturn this._dataContext;\r\n\t}\r\n\r\n\t/**\r\n\t * A reference to an original object in Component's data, that this Data Item\r\n\t * is derived from.\r\n\t *\r\n\t * @param value Original data object\r\n\t */\r\n\tpublic set dataContext(value: Object) {\r\n\t\tthis._dataContext = value;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * adds a sprite to dataItem.sprites array\r\n\t * @ignore\r\n\t */\r\n\taddSprite(sprite: Sprite) {\r\n\t\tif (sprite.dataItem && sprite.dataItem != this) {\r\n\t\t\t$array.remove(sprite.dataItem.sprites, sprite);\r\n\t\t}\r\n\t\tif (!this.visible) {\r\n\t\t\tsprite.hide(0);\r\n\t\t}\r\n\r\n\t\tif (this.isHiding) {\r\n\t\t\tsprite.hide();\r\n\t\t}\r\n\t\tthis.sprites.push(sprite);\r\n\t\tsprite.dataItem = this;\r\n\t}\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}