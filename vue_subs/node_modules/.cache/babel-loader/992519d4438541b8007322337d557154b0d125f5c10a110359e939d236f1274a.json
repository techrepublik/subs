{"ast":null,"code":"import { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\nimport { AMElement } from \"./AMElement\";\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n/**\r\n * Creates an SVG `<g>` element.\r\n *\r\n * SVG groups are used for elements that need more elements just one.\r\n *\r\n * @see {@link https://developer.mozilla.org/en-US/docs/Web/SVG/Element/g} About `<g>` element\r\n */\nvar Group = /** @class */function (_super) {\n  __extends(Group, _super);\n  /**\r\n   * Constructor.\r\n   *\r\n   * @param elementName Element type (should be \"g\")\r\n   */\n  function Group(elementName) {\n    return _super.call(this, elementName) || this;\n  }\n  /**\r\n   * Adds an element to group.\r\n   *\r\n   * This will manipulate DOM. `element` will be physically moved into group.\r\n   *\r\n   * @param element  Element\r\n   */\n  Group.prototype.add = function (element) {\n    if (element) {\n      this.node.appendChild(element.node);\n    }\n  };\n  /**\r\n   * Adds an element to group.\r\n   *\r\n   * This will manipulate DOM. `element` will be physically moved into group.\r\n   *\r\n   * @param element  Element\r\n   */\n  Group.prototype.addToBack = function (element) {\n    if (element) {\n      var first = this.node.childNodes[0];\n      if (first) {\n        if (first != element.node) {\n          this.node.insertBefore(element.node, first);\n        }\n      } else {\n        this.node.appendChild(element.node);\n      }\n    }\n  };\n  /**\r\n   * Removes the `element` from group.\r\n   *\r\n   * Please note that this will not dispose the element itself, it will just\r\n   * remove it from the group.\r\n   *\r\n   * @param element  Element\r\n   */\n  Group.prototype.removeElement = function (element) {\n    // todo: not sure about the speed, need to investigate, maybe it's faster to check if node is a child\n    if (element) {\n      try {\n        if (element.node && element.node.parentNode == this.node) {\n          this.node.removeChild(element.node);\n        }\n      } catch (err) {}\n    }\n  };\n  /**\r\n   * Checks if this group already has the child element added\r\n   *\r\n   * @param element\r\n   * @return {boolean}\r\n   */\n  Group.prototype.hasChild = function (element) {\n    for (var i = 0; i < this.node.childNodes.length; i++) {\n      if (this.node.childNodes[i] == element.node) {\n        return true;\n      }\n    }\n    return false;\n  };\n  Object.defineProperty(Group.prototype, \"content\", {\n    /**\r\n     * @return SVG markup\r\n     */\n    get: function () {\n      return this.node.innerHTML;\n    },\n    /**\r\n     * Content of the group element.\r\n     *\r\n     * Can be used to add a lot of proprietary SVG markup into group.\r\n     *\r\n     * @param value  SVG markup\r\n     */\n    set: function (value) {\n      this.node.innerHTML = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Removes all children from the group.\r\n   */\n  Group.prototype.removeChildren = function () {\n    if (this.node.childNodes) {\n      while (this.node.childNodes.length > 0) {\n        var childNode = this.node.firstChild;\n        if (childNode && childNode.parentNode) {\n          childNode.parentNode.removeChild(childNode);\n        }\n      }\n    }\n  };\n  Group.prototype.removeChildrenByTag = function (tag) {\n    if (this.node.childNodes) {\n      var remove = this.node.getElementsByTagName(tag);\n      for (var i = 0; i < remove.length; i++) {\n        this.node.removeChild(remove[i]);\n      }\n    }\n  };\n  return Group;\n}(AMElement);\nexport { Group };","map":{"version":3,"names":["AMElement","Group","_super","__extends","elementName","call","prototype","add","element","node","appendChild","addToBack","first","childNodes","insertBefore","removeElement","parentNode","removeChild","err","hasChild","i","length","Object","defineProperty","get","innerHTML","set","value","removeChildren","childNode","firstChild","removeChildrenByTag","tag","remove","getElementsByTagName"],"sources":["../../../../../src/.internal/core/rendering/Group.ts"],"sourcesContent":["/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { AMElement } from \"./AMElement\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates an SVG `<g>` element.\r\n *\r\n * SVG groups are used for elements that need more elements just one.\r\n *\r\n * @see {@link https://developer.mozilla.org/en-US/docs/Web/SVG/Element/g} About `<g>` element\r\n */\r\nexport class Group extends AMElement {\r\n\r\n\t/**\r\n\t * Constructor.\r\n\t *\r\n\t * @param elementName Element type (should be \"g\")\r\n\t */\r\n\tconstructor(elementName: string) {\r\n\t\tsuper(elementName);\r\n\t}\r\n\r\n\t/**\r\n\t * Adds an element to group.\r\n\t *\r\n\t * This will manipulate DOM. `element` will be physically moved into group.\r\n\t *\r\n\t * @param element  Element\r\n\t */\r\n\tpublic add(element: AMElement): void {\r\n\t\tif (element) {\r\n\t\t\tthis.node.appendChild(element.node);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Adds an element to group.\r\n\t *\r\n\t * This will manipulate DOM. `element` will be physically moved into group.\r\n\t *\r\n\t * @param element  Element\r\n\t */\r\n\tpublic addToBack(element: AMElement): void {\r\n\t\tif (element) {\r\n\t\t\tlet first = this.node.childNodes[0];\r\n\t\t\tif (first) {\r\n\t\t\t\tif (first != element.node) {\r\n\t\t\t\t\tthis.node.insertBefore(element.node, first);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.node.appendChild(element.node);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Removes the `element` from group.\r\n\t *\r\n\t * Please note that this will not dispose the element itself, it will just\r\n\t * remove it from the group.\r\n\t *\r\n\t * @param element  Element\r\n\t */\r\n\tpublic removeElement(element: AMElement): void {\r\n\t\t// todo: not sure about the speed, need to investigate, maybe it's faster to check if node is a child\r\n\t\tif (element) {\r\n\t\t\ttry {\r\n\t\t\t\tif (element.node && element.node.parentNode == this.node) {\r\n\t\t\t\t\tthis.node.removeChild(element.node);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tcatch (err) {\r\n\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Checks if this group already has the child element added\r\n\t *\r\n\t * @param element\r\n\t * @return {boolean}\r\n\t */\r\n\tpublic hasChild(element:AMElement):boolean {\r\n\t\tfor(let i = 0; i < this.node.childNodes.length; i++){\r\n\t\t\tif(this.node.childNodes[i] == element.node){\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\t/**\r\n\t * Content of the group element.\r\n\t *\r\n\t * Can be used to add a lot of proprietary SVG markup into group.\r\n\t *\r\n\t * @param value  SVG markup\r\n\t */\r\n\tpublic set content(value: string) {\r\n\t\tthis.node.innerHTML = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @return SVG markup\r\n\t */\r\n\tpublic get content(): string {\r\n\t\treturn this.node.innerHTML;\r\n\t}\r\n\r\n\t/**\r\n\t * Removes all children from the group.\r\n\t */\r\n\tpublic removeChildren(): void {\r\n\t\tif (this.node.childNodes) {\r\n\t\t\twhile (this.node.childNodes.length > 0) {\r\n\t\t\t\tlet childNode = this.node.firstChild;\r\n\t\t\t\tif (childNode && childNode.parentNode) {\r\n\t\t\t\t\tchildNode.parentNode.removeChild(childNode);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tpublic removeChildrenByTag(tag: string): void {\r\n\t\tif (this.node.childNodes) {\r\n\t\t\tconst remove = this.node.getElementsByTagName(tag);\r\n\t\t\tfor(let i = 0; i < remove.length; i++) {\r\n\t\t\t\tthis.node.removeChild(remove[i]);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}