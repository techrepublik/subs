{"ast":null,"code":"import { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\nimport { ColorModifier } from \"./ColorModifier\";\nimport { registry } from \"../../Registry\";\nimport * as $math from \"../../utils/Math\";\nimport * as $type from \"../../utils/Type\";\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n/**\r\n * This class can be used to modify linear gradient steps, changing visual\r\n * properties like lightness, brightness, opacity of each set.\r\n *\r\n * It can also set offsets for each gradient step.\r\n *\r\n * E.g. if I want to fill a columns in a column series to be a solid fill from\r\n * top to 80% of height, then gradually fades out, I can use the following\r\n * gradient modifier as a `fillModifier`:\r\n *\r\n * ```TypeScript\r\n * let fillModifier = new am4core.GradientModifier();\r\n * fillModifier.opacities = [1, 1, 0];\r\n * fillModifier.offsets = [0, 0.8, 1];\r\n * columnSeries.columns.template.fillModifier = fillModifier;\r\n * ```\r\n * ```JavaScript\r\n * var fillModifier = new am4core.GradientModifier();\r\n * fillModifier.opacities = [1, 1, 0];\r\n * fillModifier.offsets = [0, 0.8, 1];\r\n * columnSeries.columns.template.fillModifier = fillModifier;\r\n * ```\r\n * ```JSON\r\n * \"series\": [{\r\n *   \"type\": \"ColumnSeries\",\r\n *   \"columns\": {\r\n *     \"fillModifier\": {\r\n *       \"type\": \"GradientModifier\",\r\n *       \"opacities\": [1, 1, 0],\r\n *       \"offsets\": [0, 0.8, 1]\r\n *     }\r\n *   }\r\n * }]\r\n * ```\r\n */\nvar GradientModifier = /** @class */function (_super) {\n  __extends(GradientModifier, _super);\n  /**\r\n   * Constructor.\r\n   */\n  function GradientModifier() {\n    var _this = _super.call(this) || this;\n    _this.lightnesses = [];\n    _this.brightnesses = [];\n    _this.opacities = [];\n    _this.offsets = [];\n    _this.className = \"GradientModifier\";\n    _this.applyTheme();\n    return _this;\n  }\n  Object.defineProperty(GradientModifier.prototype, \"lightnesses\", {\n    /**\r\n     * @return Lightness values\r\n     */\n    get: function () {\n      return this._lightnesses;\n    },\n    /**\r\n     * An array of lightness values for each step.\r\n     *\r\n     * @param value  Lightness values\r\n     */\n    set: function (value) {\n      this._lightnesses = value;\n      this._brightnesses = [];\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(GradientModifier.prototype, \"brightnesses\", {\n    /**\r\n     * @return Brightness values\r\n     */\n    get: function () {\n      return this._brightnesses;\n    },\n    /**\r\n     * An array of brightness values for each step.\r\n     *\r\n     * @param value  Brightness values\r\n     */\n    set: function (value) {\n      this._brightnesses = value;\n      this._lightnesses = [];\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(GradientModifier.prototype, \"opacities\", {\n    /**\r\n     * @return Opacity values\r\n     */\n    get: function () {\n      return this._opacities;\n    },\n    /**\r\n     * An array of opacity values for each step.\r\n     *\r\n     * @param value  Opacity values\r\n     */\n    set: function (value) {\n      this._opacities = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(GradientModifier.prototype, \"offsets\", {\n    /**\r\n     * @return Offsets\r\n     */\n    get: function () {\n      return this._offsets;\n    },\n    /**\r\n     * An array of relative position (0-1) for each step.\r\n     *\r\n     * If not set, all steps will be of equal relative length.\r\n     *\r\n     * @param value  Offsets\r\n     */\n    set: function (value) {\n      this._offsets = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Modifies the color based on step setting.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param value  Source color\r\n   * @return A gradient that matches set modification rules\r\n   */\n  GradientModifier.prototype.modify = function (value) {\n    // Clear current gradient\n    this.gradient.clear();\n    // Get step count\n    var count = 0;\n    if (this.opacities) {\n      count = $math.max(count, this.opacities.length);\n    }\n    if (this.lightnesses) {\n      count = $math.max(count, this.lightnesses.length);\n    }\n    if (this.brightnesses) {\n      count = $math.max(count, this.brightnesses.length);\n    }\n    // Init step values\n    var opacity = 1,\n      lightness,\n      brightness;\n    // Apply steps\n    for (var i = 0; i < count; i++) {\n      // Take base color\n      var color = value;\n      // Check if there are any parameters for this step\n      if (this.opacities && $type.isNumber(this.opacities[i])) {\n        opacity = this.opacities[i];\n      }\n      if (this.lightnesses && $type.isNumber(this.lightnesses[i])) {\n        lightness = this.lightnesses[i];\n        brightness = undefined;\n      }\n      if (this.brightnesses && $type.isNumber(this.brightnesses[i])) {\n        brightness = this.brightnesses[i];\n        lightness = undefined;\n      }\n      // Check if we need to brighten/lighten color\n      if ($type.isNumber(brightness)) {\n        color = value.brighten(this.brightnesses[i]);\n      } else if ($type.isNumber(lightness)) {\n        color = value.lighten(this.lightnesses[i]);\n      }\n      // Get offset (it's OK if it's undefined)\n      var offset = this.offsets[i];\n      // Apply step\n      this.gradient.addColor(color, opacity, offset);\n    }\n    return this.gradient;\n  };\n  GradientModifier.prototype.copyFrom = function (source) {\n    _super.prototype.copyFrom.call(this, source);\n    this._offsets = source.offsets;\n    this._brightnesses = source.brightnesses;\n    this._lightnesses = source.lightnesses;\n    this._opacities = source.opacities;\n  };\n  return GradientModifier;\n}(ColorModifier);\nexport { GradientModifier };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\nregistry.registeredClasses[\"GradientModifier\"] = GradientModifier;","map":{"version":3,"names":["ColorModifier","registry","$math","$type","GradientModifier","_super","__extends","_this","call","lightnesses","brightnesses","opacities","offsets","className","applyTheme","Object","defineProperty","prototype","get","_lightnesses","set","value","_brightnesses","_opacities","_offsets","modify","gradient","clear","count","max","length","opacity","lightness","brightness","i","color","isNumber","undefined","brighten","lighten","offset","addColor","copyFrom","source","registeredClasses"],"sources":["../../../../../../src/.internal/core/rendering/fills/GradientModifier.ts"],"sourcesContent":["/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { ColorModifier } from \"./ColorModifier\";\r\nimport { LinearGradient } from \"./LinearGradient\";\r\nimport { RadialGradient } from \"./RadialGradient\";\r\nimport { Color } from \"../../utils/Color\";\r\nimport { registry } from \"../../Registry\";\r\nimport * as $math from \"../../utils/Math\";\r\nimport * as $type from \"../../utils/Type\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * This class can be used to modify linear gradient steps, changing visual\r\n * properties like lightness, brightness, opacity of each set.\r\n *\r\n * It can also set offsets for each gradient step.\r\n *\r\n * E.g. if I want to fill a columns in a column series to be a solid fill from\r\n * top to 80% of height, then gradually fades out, I can use the following\r\n * gradient modifier as a `fillModifier`:\r\n *\r\n * ```TypeScript\r\n * let fillModifier = new am4core.GradientModifier();\r\n * fillModifier.opacities = [1, 1, 0];\r\n * fillModifier.offsets = [0, 0.8, 1];\r\n * columnSeries.columns.template.fillModifier = fillModifier;\r\n * ```\r\n * ```JavaScript\r\n * var fillModifier = new am4core.GradientModifier();\r\n * fillModifier.opacities = [1, 1, 0];\r\n * fillModifier.offsets = [0, 0.8, 1];\r\n * columnSeries.columns.template.fillModifier = fillModifier;\r\n * ```\r\n * ```JSON\r\n * \"series\": [{\r\n *   \"type\": \"ColumnSeries\",\r\n *   \"columns\": {\r\n *     \"fillModifier\": {\r\n *       \"type\": \"GradientModifier\",\r\n *       \"opacities\": [1, 1, 0],\r\n *       \"offsets\": [0, 0.8, 1]\r\n *     }\r\n *   }\r\n * }]\r\n * ```\r\n */\r\nexport class GradientModifier extends ColorModifier {\r\n\r\n\t/**\r\n\t * A reference to the gradient instance that this modifier is used for.\r\n\t */\r\n\tpublic gradient: LinearGradient | RadialGradient;\r\n\r\n\t/**\r\n\t * An array of lightness values for each step.\r\n\t */\r\n\tprotected _lightnesses!: number[];\r\n\r\n\t/**\r\n\t * An array of brightness values for each step.\r\n\t */\r\n\tprotected _brightnesses!: number[];\r\n\r\n\t/**\r\n\t * An array of opacity values for each step.\r\n\t */\r\n\tprotected _opacities!: number[];\r\n\r\n\t/**\r\n\t * An array of relative position (0-1) for each step.\r\n\t *\r\n\t * If not set, all steps will be of equal relative length.\r\n\t */\r\n\tprotected _offsets!: number[];\r\n\r\n\t/**\r\n\t * Constructor.\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.lightnesses = [];\r\n\t\tthis.brightnesses = [];\r\n\t\tthis.opacities = [];\r\n\t\tthis.offsets = [];\r\n\t\tthis.className = \"GradientModifier\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * An array of lightness values for each step.\r\n\t *\r\n\t * @param value  Lightness values\r\n\t */\r\n\tpublic set lightnesses(value: number[]) {\r\n\t\tthis._lightnesses = value;\r\n\t\tthis._brightnesses = [];\r\n\t}\r\n\r\n\t/**\r\n\t * @return Lightness values\r\n\t */\r\n\tpublic get lightnesses(): number[] {\r\n\t\treturn this._lightnesses;\r\n\t}\r\n\r\n\t/**\r\n\t * An array of brightness values for each step.\r\n\t *\r\n\t * @param value  Brightness values\r\n\t */\r\n\tpublic set brightnesses(value: number[]) {\r\n\t\tthis._brightnesses = value;\r\n\t\tthis._lightnesses = [];\r\n\t}\r\n\r\n\t/**\r\n\t * @return Brightness values\r\n\t */\r\n\tpublic get brightnesses(): number[] {\r\n\t\treturn this._brightnesses;\r\n\t}\r\n\r\n\t/**\r\n\t * An array of opacity values for each step.\r\n\t *\r\n\t * @param value  Opacity values\r\n\t */\r\n\tpublic set opacities(value: number[]) {\r\n\t\tthis._opacities = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @return Opacity values\r\n\t */\r\n\tpublic get opacities(): number[] {\r\n\t\treturn this._opacities;\r\n\t}\r\n\r\n\t/**\r\n\t * An array of relative position (0-1) for each step.\r\n\t *\r\n\t * If not set, all steps will be of equal relative length.\r\n\t *\r\n\t * @param value  Offsets\r\n\t */\r\n\tpublic set offsets(value: number[]) {\r\n\t\tthis._offsets = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @return Offsets\r\n\t */\r\n\tpublic get offsets(): number[] {\r\n\t\treturn this._offsets;\r\n\t}\r\n\r\n\t/**\r\n\t * Modifies the color based on step setting.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param value  Source color\r\n\t * @return A gradient that matches set modification rules\r\n\t */\r\n\tpublic modify(value: Color): Color | LinearGradient | RadialGradient {\r\n\r\n\t\t// Clear current gradient\r\n\t\tthis.gradient.clear();\r\n\r\n\t\t// Get step count\r\n\t\tlet count: number = 0;\r\n\t\tif (this.opacities) {\r\n\t\t\tcount = $math.max(count, this.opacities.length);\r\n\t\t}\r\n\t\tif (this.lightnesses) {\r\n\t\t\tcount = $math.max(count, this.lightnesses.length);\r\n\t\t}\r\n\t\tif (this.brightnesses) {\r\n\t\t\tcount = $math.max(count, this.brightnesses.length);\r\n\t\t}\r\n\r\n\t\t// Init step values\r\n\t\tlet opacity: number = 1,\r\n\t\t\tlightness: $type.Optional<number>,\r\n\t\t\tbrightness: $type.Optional<number>;\r\n\r\n\t\t// Apply steps\r\n\t\tfor (let i = 0; i < count; i++) {\r\n\r\n\t\t\t// Take base color\r\n\t\t\tlet color = value;\r\n\r\n\t\t\t// Check if there are any parameters for this step\r\n\t\t\tif (this.opacities && $type.isNumber(this.opacities[i])) {\r\n\t\t\t\topacity = this.opacities[i];\r\n\t\t\t}\r\n\t\t\tif (this.lightnesses && $type.isNumber(this.lightnesses[i])) {\r\n\t\t\t\tlightness = this.lightnesses[i];\r\n\t\t\t\tbrightness = undefined;\r\n\t\t\t}\r\n\t\t\tif (this.brightnesses && $type.isNumber(this.brightnesses[i])) {\r\n\t\t\t\tbrightness = this.brightnesses[i];\r\n\t\t\t\tlightness = undefined;\r\n\t\t\t}\r\n\r\n\t\t\t// Check if we need to brighten/lighten color\r\n\t\t\tif ($type.isNumber(brightness)) {\r\n\t\t\t\tcolor = value.brighten(this.brightnesses[i]);\r\n\t\t\t}\r\n\t\t\telse if ($type.isNumber(lightness)) {\r\n\t\t\t\tcolor = value.lighten(this.lightnesses[i]);\r\n\t\t\t}\r\n\r\n\t\t\t// Get offset (it's OK if it's undefined)\r\n\t\t\tlet offset: number = this.offsets[i];\r\n\r\n\t\t\t// Apply step\r\n\t\t\tthis.gradient.addColor(color, opacity, offset);\r\n\t\t}\r\n\t\treturn this.gradient;\r\n\t}\r\n\r\n\tpublic copyFrom(source: this) {\r\n\t\tsuper.copyFrom(source);\r\n\r\n\t\tthis._offsets = source.offsets;\r\n\t\tthis._brightnesses = source.brightnesses;\r\n\t\tthis._lightnesses = source.lightnesses;\r\n\t\tthis._opacities = source.opacities;\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"GradientModifier\"] = GradientModifier;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}