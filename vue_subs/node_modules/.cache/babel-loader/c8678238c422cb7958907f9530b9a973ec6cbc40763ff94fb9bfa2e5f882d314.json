{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n/**\r\n * This module contains ColorSet object definition\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\nimport { BaseObject } from \"../Base\";\nimport { Color, color } from \"./Color\";\nimport { registry } from \"../Registry\";\nimport * as $colors from \"./Colors\";\nimport * as $type from \"./Type\";\nimport * as $utils from \"./Utils\";\nimport * as $math from \"./Math\";\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n/**\r\n * Represents a set of colors. Can also generate colors according to set rules.\r\n *\r\n * @important\r\n * @see {@link https://www.amcharts.com/docs/v4/concepts/colors/} for color-related info\r\n */\nvar ColorSet = /** @class */function (_super) {\n  __extends(ColorSet, _super);\n  /**\r\n   * Constructor\r\n   */\n  function ColorSet() {\n    var _this = _super.call(this) || this;\n    /**\r\n     * Holds the list of the colors in this set. (preset or auto-generated)\r\n     */\n    _this._list = [];\n    /**\r\n     * Current step in a color generator's cycle.\r\n     */\n    _this._currentStep = 0;\n    /**\r\n     * If set to non-zero value, the ColorSet will start iterating colors from\r\n     * that particular index, not the first color in the list.\r\n     */\n    _this._startIndex = 0;\n    /**\r\n     * Current pass in the color generator's cycle. Normally a generator would\r\n     * cycle through all available hue range, then repeat it, alternating other\r\n     * color properties, to generate distinctive colors.\r\n     */\n    _this._currentPass = 0;\n    /**\r\n     * A base color. If there are no colors pre-set in the color list, ColorSet\r\n     * will use this color as a base when generating new ones, applying\r\n     * `stepOptions` and `passOptions` to this base color.\r\n     */\n    _this.baseColor = new Color({\n      r: 103,\n      g: 183,\n      b: 220\n    });\n    /**\r\n     * Modifications to apply with each new generated color.\r\n     */\n    _this.stepOptions = {};\n    /**\r\n     * Modifications to apply on top of `stepOptions` for each \"pass\" of the\r\n     * color generation.\r\n     *\r\n     * A \"pass\" is when ColorSet generates `minColors` number of colors.\r\n     */\n    _this.passOptions = {\n      brighten: -0.2\n    };\n    /**\r\n     * An index increment to use when iterating through color list.\r\n     *\r\n     * Default is 1, which means returning each and every color.\r\n     *\r\n     * Setting it to a bigger number will make ColorSet `next()` iterator skip\r\n     * some colors.\r\n     *\r\n     * E.g. setting to 2, will return every second color in the list.\r\n     *\r\n     * This is useful, when the color list has colors that are too close each\r\n     * other for contrast.\r\n     *\r\n     * However, having bigger number will mean that `next()` iterator will go\r\n     * through the list quicker, and the generator will kick sooner.\r\n     */\n    _this.step = 1;\n    /**\r\n     * A number of colors to generate in one \"pass\".\r\n     *\r\n     * This setting can be automatically overridden, if ColorSet has a list of\r\n     * pre-set colors. In such case ColorSet will generate exactly the same\r\n     * number of colors with each pass as there were colors in original set.\r\n     */\n    _this.minColors = 20;\n    /**\r\n     * Do not let the \"lightness\" of generated color to fall below this\r\n     * threshold.\r\n     */\n    _this.minLightness = 0.2;\n    /**\r\n     * Do not let the \"lightness\" of generated color to get above this threshold.\r\n     */\n    _this.maxLightness = 0.9;\n    /**\r\n     * Randomly shuffle generated colors.\r\n     */\n    _this.shuffle = false;\n    /**\r\n     * When colors are generated, based on `stepOptions`, each generated color\r\n     * gets either lighter or darker.\r\n     *\r\n     * If this is set to `true`, color generator will switch to opposing spectrum\r\n     * when reaching `minLightness` or `maxLightness`.\r\n     *\r\n     * E.g. if we start off with a red color, then gradually generate lighter\r\n     * colors through rose shades, then switch back to dark red and gradually\r\n     * increase the lightness of it until it reaches the starting red.\r\n     *\r\n     * If set to `false` it will stop there and cap lightness at whatever level\r\n     * we hit `minLightness` or `maxLightness`, which may result in a number of\r\n     * the same colors.\r\n     */\n    _this.wrap = true;\n    /**\r\n     * Re-use same colors in the pre-set list, when ColorSet runs out of colors,\r\n     * rather than start generating new ones.\r\n     */\n    _this.reuse = false;\n    /**\r\n     * Saturation of colors. This will change saturation of all colors of color\r\n     * set.\r\n     *\r\n     * It is recommended to set this in theme, as changing it at run time won't\r\n     * make the items to redraw and change color.\r\n     */\n    _this.saturation = 1;\n    _this.className = \"ColorSet\";\n    _this.applyTheme();\n    return _this;\n  }\n  Object.defineProperty(ColorSet.prototype, \"list\", {\n    /**\r\n     * Returns current list of colors.\r\n     *\r\n     * If there are none, a new list of colors is generated, based on various\r\n     * ColorSet settings.\r\n     *\r\n     * @return Color list\r\n     */\n    get: function () {\n      if (!this._list) {\n        this.generate(this.minColors);\n      }\n      return this._list;\n    },\n    /**\r\n     * Sets a list of pre-defined colors to use for the iterator.\r\n     *\r\n     * @param value Color list\r\n     */\n    set: function (value) {\n      this._list = value;\n      this.reset();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Gets reusable color.\r\n   *\r\n   * @param   index  Index of color\r\n   * @return         Color\r\n   */\n  ColorSet.prototype.getReusableColor = function (index) {\n    if (this._list.length == 0) {\n      this.generate(1);\n      return this.list[0];\n    } else {\n      var tmpstep = index - Math.floor(index / this._list.length) * this.list.length;\n      return this.list[tmpstep];\n    }\n  };\n  /**\r\n   * Returns next color in the list using internal iterator counter.\r\n   *\r\n   * If `step` is set to something other than 1, it may return other color than\r\n   * exact next one in the list.\r\n   *\r\n   * @return Color\r\n   */\n  ColorSet.prototype.next = function () {\n    var color;\n    if (this.list.length <= this._currentStep) {\n      if (this.reuse) {\n        color = this.getReusableColor(this._currentStep);\n      } else {\n        this.generate($math.max(this.minColors, this._currentStep + 1));\n        color = this.list[this._currentStep];\n      }\n    } else {\n      color = this.list[this._currentStep];\n    }\n    this._currentStep += this.step;\n    return color.saturate(this.saturation);\n  };\n  /**\r\n   * Returns a color at specific index in the list.\r\n   *\r\n   * @param i  Index\r\n   * @return Color\r\n   */\n  ColorSet.prototype.getIndex = function (i) {\n    var color;\n    if (this.list.length <= i) {\n      if (this.reuse) {\n        color = this.getReusableColor(i);\n      } else {\n        this.generate(this.minColors);\n        color = this.getIndex(i);\n      }\n    } else {\n      color = this.list[i];\n    }\n    return color.saturate(this.saturation);\n  };\n  /**\r\n   * Resets internal iterator.\r\n   *\r\n   * Calling `next()` after this will return the very first color in the color\r\n   * list, even if it was already returned before.\r\n   */\n  ColorSet.prototype.reset = function () {\n    this._currentStep = this._startIndex;\n  };\n  Object.defineProperty(ColorSet.prototype, \"currentStep\", {\n    /**\r\n     * @return Step\r\n     */\n    get: function () {\n      return this._currentStep;\n    },\n    /**\r\n     * Sets current color iteration. You can use this property to skip some\r\n     * colors from iteration. E.g. setting it to `10` will skip first ten\r\n     * colors.\r\n     *\r\n     * Please note that the number is zero-based.\r\n     *\r\n     * @param value  Step\r\n     */\n    set: function (value) {\n      this._currentStep = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ColorSet.prototype, \"startIndex\", {\n    /**\r\n     * @return Index\r\n     */\n    get: function () {\n      return this._startIndex;\n    },\n    /**\r\n     * If set to non-zero value, the ColorSet will start iterating colors from\r\n     * that particular index, not the first color in the list.\r\n     *\r\n     * @default 0\r\n     * @since 4.4.9\r\n     * @param  value  Index\r\n     */\n    set: function (value) {\n      this._startIndex = value;\n      this.reset();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Generates colors based on the various ColorSet settings.\r\n   *\r\n   * @param count Number of colors to generate\r\n   */\n  ColorSet.prototype.generate = function (count) {\n    // Init\n    var curColor = this.currentColor;\n    var hsl = $colors.rgbToHsl($type.getValue(curColor.rgb));\n    var hueStep = $type.hasValue(this.stepOptions.hue) ? this.stepOptions.hue : 1 / count;\n    var mods = {\n      brighten: 0,\n      lighten: 0,\n      hue: hsl.h,\n      lightness: hsl.l,\n      saturation: hsl.s\n    };\n    // Generate list of hues, and shuffle them\n    var hues = [];\n    var startIndex = this.list.length == 0 ? 0 : 1;\n    if (this.reuse) {\n      for (var i = startIndex; i <= count; i++) {\n        hues.push($colors.rgbToHsl($type.getValue(this._list[i].rgb)).h);\n      }\n    } else {\n      for (var i = startIndex; i <= count; i++) {\n        var h = hsl.h + hueStep * i;\n        if (this.wrap && h > 1) {\n          h -= 1;\n        }\n        hues.push(h);\n      }\n    }\n    // Shuffle colors randomly\n    if (this.shuffle) {\n      hues.sort(function (a, b) {\n        return Math.random() - 0.5;\n      });\n    }\n    // Generate colors by rotating hue\n    for (var i = 0; i < count; i++) {\n      // Update hue\n      if (this.reuse) {\n        hsl = $colors.rgbToHsl($type.getValue(this._list[i].rgb));\n      } else {\n        hsl.h = hues.shift();\n      }\n      // Apply HSL mods\n      this.applyStepOptions(hsl, mods, i, this._currentPass);\n      // Convert back to Color\n      var c = color($colors.hslToRgb(hsl));\n      // Apply regular color mods\n      var brighten = (this.stepOptions.brighten || 0) * i + (this.passOptions.brighten || 0) * this._currentPass;\n      if (brighten != 0) {\n        if (this.wrap) {\n          brighten = $utils.fitNumberRelative(brighten, this.minLightness, this.maxLightness);\n        } else {\n          brighten = $utils.fitNumber(brighten, this.minLightness, this.maxLightness);\n        }\n        c = c.brighten(brighten);\n      }\n      var lighten = (this.stepOptions.lighten || 0) * i + (this.passOptions.lighten || 0) * this._currentPass;\n      if (lighten != 0) {\n        if (this.wrap) {\n          lighten = $utils.fitNumberRelative(lighten, this.minLightness, this.maxLightness);\n        } else {\n          lighten = $utils.fitNumber(lighten, this.minLightness, this.maxLightness);\n        }\n        c = c.lighten(lighten);\n      }\n      this._list.push(c);\n    }\n    this._currentPass++;\n  };\n  Object.defineProperty(ColorSet.prototype, \"currentColor\", {\n    /**\r\n     * Returns current last color. It's either the last color in the list of\r\n     * colors, or `baseColor` if list is empty.\r\n     *\r\n     * @return Color\r\n     */\n    get: function () {\n      if (this._list.length == 0) {\n        return this.baseColor.saturate(this.saturation);\n      } else {\n        return this._list[this._list.length - 1].saturate(this.saturation);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Generates modifiers for color, based on what step and pass.\r\n   *\r\n   * @param hsl   Curren HSL value of the color to modify\r\n   * @param base  The modifiers that were before modification to use as a base\r\n   * @param step  Current step\r\n   * @param pass  Current pass\r\n   */\n  ColorSet.prototype.applyStepOptions = function (hsl, base, step, pass) {\n    // Process lightness\n    hsl.l = base.lightness + (this.stepOptions.lightness || 0) * step + (this.passOptions.lightness || 0) * pass;\n    if (this.wrap) {\n      if (hsl.l > 1) {\n        hsl.l = hsl.l - Math.floor(hsl.l);\n      } else if (hsl.l < 0) {\n        hsl.l = -(hsl.l - Math.floor(hsl.l));\n      }\n      hsl.l = $utils.fitNumberRelative(hsl.l, this.minLightness, this.maxLightness);\n    } else {\n      if (hsl.l > 1) {\n        hsl.l = 1;\n      } else if (hsl.l < 0) {\n        hsl.l = 0;\n      }\n      hsl.l = $utils.fitNumber(hsl.l, this.minLightness, this.maxLightness);\n    }\n  };\n  /**\r\n   * Processes JSON-based config before it is applied to the object.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param config  Config\r\n   */\n  ColorSet.prototype.processConfig = function (config) {\n    if (config) {\n      // Cast colors\n      if ($type.hasValue(config.list) && $type.isArray(config.list)) {\n        for (var i = 0, len = config.list.length; i < len; i++) {\n          if (!(config.list[i] instanceof Color)) {\n            config.list[i] = color(config.list[i]);\n          }\n        }\n      }\n      if ($type.hasValue(config.baseColor) && !(config.baseColor instanceof Color)) {\n        config.baseColor = color(config.baseColor);\n      }\n    }\n    _super.prototype.processConfig.call(this, config);\n  };\n  return ColorSet;\n}(BaseObject);\nexport { ColorSet };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\nregistry.registeredClasses[\"ColorSet\"] = ColorSet;","map":{"version":3,"names":["BaseObject","Color","color","registry","$colors","$type","$utils","$math","ColorSet","_super","__extends","_this","call","_list","_currentStep","_startIndex","_currentPass","baseColor","r","g","b","stepOptions","passOptions","brighten","step","minColors","minLightness","maxLightness","shuffle","wrap","reuse","saturation","className","applyTheme","Object","defineProperty","prototype","get","generate","set","value","reset","getReusableColor","index","length","list","tmpstep","Math","floor","next","max","saturate","getIndex","i","count","curColor","currentColor","hsl","rgbToHsl","getValue","rgb","hueStep","hasValue","hue","mods","lighten","h","lightness","l","s","hues","startIndex","push","sort","a","random","shift","applyStepOptions","c","hslToRgb","fitNumberRelative","fitNumber","base","pass","processConfig","config","isArray","len","registeredClasses"],"sources":["../../../../../src/.internal/core/utils/ColorSet.ts"],"sourcesContent":["/**\r\n * This module contains ColorSet object definition\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { BaseObject } from \"../Base\";\r\nimport { Color, color, iHSL } from \"./Color\";\r\nimport { registry } from \"../Registry\";\r\nimport * as $colors from \"./Colors\";\r\nimport * as $type from \"./Type\";\r\nimport * as $utils from \"./Utils\";\r\nimport * as $math from \"./Math\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines an interface for objects identifying a color step.\r\n *\r\n * A \"color step\" object is used when [[ColorSet]] is generating colors, when\r\n * it has ran out of pre-set colors.\r\n *\r\n * It takes the last available color, then applies one or several of the\r\n * properties, like hue, or saturation with each subsequent generated color.\r\n */\r\nexport interface IColorSetStepOptions {\r\n\thue: number;\r\n\tbrighten: number;\r\n\tlighten: number;\r\n\tlightness: number;\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tsaturation: number;\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Represents a set of colors. Can also generate colors according to set rules.\r\n *\r\n * @important\r\n * @see {@link https://www.amcharts.com/docs/v4/concepts/colors/} for color-related info\r\n */\r\nexport class ColorSet extends BaseObject {\r\n\r\n\t/**\r\n\t * Holds the list of the colors in this set. (preset or auto-generated)\r\n\t */\r\n\tprotected _list: Color[] = [];\r\n\r\n\t/**\r\n\t * Current step in a color generator's cycle.\r\n\t */\r\n\tprotected _currentStep: number = 0;\r\n\r\n\t/**\r\n\t * If set to non-zero value, the ColorSet will start iterating colors from\r\n\t * that particular index, not the first color in the list.\r\n\t */\r\n\tprotected _startIndex: number = 0;\r\n\r\n\t/**\r\n\t * Current pass in the color generator's cycle. Normally a generator would\r\n\t * cycle through all available hue range, then repeat it, alternating other\r\n\t * color properties, to generate distinctive colors.\r\n\t */\r\n\tprotected _currentPass: number = 0;\r\n\r\n\t/**\r\n\t * A base color. If there are no colors pre-set in the color list, ColorSet\r\n\t * will use this color as a base when generating new ones, applying\r\n\t * `stepOptions` and `passOptions` to this base color.\r\n\t */\r\n\tpublic baseColor: Color = new Color({\r\n\t\tr: 103,\r\n\t\tg: 183,\r\n\t\tb: 220\r\n\t});\r\n\r\n\t/**\r\n\t * Modifications to apply with each new generated color.\r\n\t */\r\n\tpublic stepOptions: Partial<IColorSetStepOptions> = {};\r\n\r\n\t/**\r\n\t * Modifications to apply on top of `stepOptions` for each \"pass\" of the\r\n\t * color generation.\r\n\t *\r\n\t * A \"pass\" is when ColorSet generates `minColors` number of colors.\r\n\t */\r\n\tpublic passOptions: Partial<IColorSetStepOptions> = {\r\n\t\tbrighten: -0.2\r\n\t};\r\n\r\n\t/**\r\n\t * An index increment to use when iterating through color list.\r\n\t *\r\n\t * Default is 1, which means returning each and every color.\r\n\t *\r\n\t * Setting it to a bigger number will make ColorSet `next()` iterator skip\r\n\t * some colors.\r\n\t *\r\n\t * E.g. setting to 2, will return every second color in the list.\r\n\t *\r\n\t * This is useful, when the color list has colors that are too close each\r\n\t * other for contrast.\r\n\t *\r\n\t * However, having bigger number will mean that `next()` iterator will go\r\n\t * through the list quicker, and the generator will kick sooner.\r\n\t */\r\n\tpublic step: number = 1;\r\n\r\n\t/**\r\n\t * A number of colors to generate in one \"pass\".\r\n\t *\r\n\t * This setting can be automatically overridden, if ColorSet has a list of\r\n\t * pre-set colors. In such case ColorSet will generate exactly the same\r\n\t * number of colors with each pass as there were colors in original set.\r\n\t */\r\n\tpublic minColors: number = 20;\r\n\r\n\t/**\r\n\t * Do not let the \"lightness\" of generated color to fall below this\r\n\t * threshold.\r\n\t */\r\n\tpublic minLightness: number = 0.2;\r\n\r\n\t/**\r\n\t * Do not let the \"lightness\" of generated color to get above this threshold.\r\n\t */\r\n\tpublic maxLightness: number = 0.9;\r\n\r\n\t/**\r\n\t * Randomly shuffle generated colors.\r\n\t */\r\n\tpublic shuffle: boolean = false;\r\n\r\n\t/**\r\n\t * When colors are generated, based on `stepOptions`, each generated color\r\n\t * gets either lighter or darker.\r\n\t *\r\n\t * If this is set to `true`, color generator will switch to opposing spectrum\r\n\t * when reaching `minLightness` or `maxLightness`.\r\n\t *\r\n\t * E.g. if we start off with a red color, then gradually generate lighter\r\n\t * colors through rose shades, then switch back to dark red and gradually\r\n\t * increase the lightness of it until it reaches the starting red.\r\n\t *\r\n\t * If set to `false` it will stop there and cap lightness at whatever level\r\n\t * we hit `minLightness` or `maxLightness`, which may result in a number of\r\n\t * the same colors.\r\n\t */\r\n\tpublic wrap: boolean = true;\r\n\r\n\t/**\r\n\t * Re-use same colors in the pre-set list, when ColorSet runs out of colors,\r\n\t * rather than start generating new ones.\r\n\t */\r\n\tpublic reuse: boolean = false;\r\n\r\n\t/**\r\n\t * Saturation of colors. This will change saturation of all colors of color\r\n\t * set.\r\n\t *\r\n\t * It is recommended to set this in theme, as changing it at run time won't\r\n\t * make the items to redraw and change color.\r\n\t */\r\n\tpublic saturation: number = 1;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"ColorSet\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Sets a list of pre-defined colors to use for the iterator.\r\n\t *\r\n\t * @param value Color list\r\n\t */\r\n\tpublic set list(value: Color[]) {\r\n\t\tthis._list = value;\r\n\t\tthis.reset();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns current list of colors.\r\n\t *\r\n\t * If there are none, a new list of colors is generated, based on various\r\n\t * ColorSet settings.\r\n\t *\r\n\t * @return Color list\r\n\t */\r\n\tpublic get list(): Color[] {\r\n\t\tif (!this._list) {\r\n\t\t\tthis.generate(this.minColors);\r\n\t\t}\r\n\t\treturn this._list;\r\n\t}\r\n\r\n\t/**\r\n\t * Gets reusable color.\r\n\t * \r\n\t * @param   index  Index of color\r\n\t * @return         Color\r\n\t */\r\n\tprotected getReusableColor(index: number): Color {\r\n\t\tif (this._list.length == 0) {\r\n\t\t\tthis.generate(1);\r\n\t\t\treturn this.list[0];\r\n\t\t}\r\n\t\telse {\r\n\t\t\tlet tmpstep = index - (Math.floor(index / this._list.length) * this.list.length);\r\n\t\t\treturn this.list[tmpstep];\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns next color in the list using internal iterator counter.\r\n\t *\r\n\t * If `step` is set to something other than 1, it may return other color than\r\n\t * exact next one in the list.\r\n\t *\r\n\t * @return Color\r\n\t */\r\n\tpublic next(): Color {\r\n\t\tlet color;\r\n\t\tif (this.list.length <= this._currentStep) {\r\n\t\t\tif (this.reuse) {\r\n\t\t\t\tcolor = this.getReusableColor(this._currentStep);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.generate($math.max(this.minColors, this._currentStep + 1));\r\n\t\t\t\tcolor = this.list[this._currentStep];\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\tcolor = this.list[this._currentStep];\r\n\t\t}\r\n\t\tthis._currentStep += this.step;\r\n\t\treturn color.saturate(this.saturation);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a color at specific index in the list.\r\n\t *\r\n\t * @param i  Index\r\n\t * @return Color\r\n\t */\r\n\tpublic getIndex(i: number): Color {\r\n\t\tlet color;\r\n\t\tif (this.list.length <= i) {\r\n\t\t\tif (this.reuse) {\r\n\t\t\t\tcolor = this.getReusableColor(i);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.generate(this.minColors);\r\n\t\t\t\tcolor = this.getIndex(i);\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\tcolor = this.list[i];\r\n\t\t}\r\n\t\treturn color.saturate(this.saturation);\r\n\t}\r\n\r\n\t/**\r\n\t * Resets internal iterator.\r\n\t *\r\n\t * Calling `next()` after this will return the very first color in the color\r\n\t * list, even if it was already returned before.\r\n\t */\r\n\tpublic reset(): void {\r\n\t\tthis._currentStep = this._startIndex;\r\n\t}\r\n\r\n\t/**\r\n\t * Sets current color iteration. You can use this property to skip some\r\n\t * colors from iteration. E.g. setting it to `10` will skip first ten\r\n\t * colors.\r\n\t *\r\n\t * Please note that the number is zero-based.\r\n\t *\r\n\t * @param value  Step\r\n\t */\r\n\tpublic set currentStep(value: number) {\r\n\t\tthis._currentStep = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @return Step\r\n\t */\r\n\tpublic get currentStep(): number {\r\n\t\treturn this._currentStep;\r\n\t}\r\n\r\n\t/**\r\n\t * If set to non-zero value, the ColorSet will start iterating colors from\r\n\t * that particular index, not the first color in the list.\r\n\t *\r\n\t * @default 0\r\n\t * @since 4.4.9\r\n\t * @param  value  Index\r\n\t */\r\n\tpublic set startIndex(value: number) {\r\n\t\tthis._startIndex = value;\r\n\t\tthis.reset();\r\n\t}\r\n\r\n\t/**\r\n\t * @return Index\r\n\t */\r\n\tpublic get startIndex(): number {\r\n\t\treturn this._startIndex;\r\n\t}\r\n\r\n\t/**\r\n\t * Generates colors based on the various ColorSet settings.\r\n\t *\r\n\t * @param count Number of colors to generate\r\n\t */\r\n\tpublic generate(count: number): void {\r\n\r\n\t\t// Init\r\n\t\tlet curColor = this.currentColor;\r\n\t\tlet hsl = $colors.rgbToHsl($type.getValue(curColor.rgb));\r\n\t\tlet hueStep = $type.hasValue(this.stepOptions.hue) ? this.stepOptions.hue : 1 / count;\r\n\t\tlet mods: IColorSetStepOptions = {\r\n\t\t\tbrighten: 0,\r\n\t\t\tlighten: 0,\r\n\t\t\thue: hsl.h,\r\n\t\t\tlightness: hsl.l,\r\n\t\t\tsaturation: hsl.s\r\n\t\t};\r\n\r\n\t\t// Generate list of hues, and shuffle them\r\n\t\tlet hues: number[] = [];\r\n\t\tconst startIndex = this.list.length == 0 ? 0 : 1;\r\n\t\tif (this.reuse) {\r\n\t\t\tfor (let i = startIndex; i <= count; i++) {\r\n\t\t\t\thues.push($colors.rgbToHsl($type.getValue(this._list[i].rgb)).h);\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\tfor (let i = startIndex; i <= count; i++) {\r\n\t\t\t\tlet h = hsl.h + hueStep * i;\r\n\t\t\t\tif (this.wrap && (h > 1)) {\r\n\t\t\t\t\th -= 1;\r\n\t\t\t\t}\r\n\t\t\t\thues.push(h);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Shuffle colors randomly\r\n\t\tif (this.shuffle) {\r\n\t\t\thues.sort((a: number, b: number) => {\r\n\t\t\t\treturn Math.random() - 0.5;\r\n\t\t\t});\r\n\t\t}\r\n\r\n\r\n\t\t// Generate colors by rotating hue\r\n\t\tfor (let i = 0; i < count; i++) {\r\n\r\n\t\t\t// Update hue\r\n\t\t\tif (this.reuse) {\r\n\t\t\t\thsl = $colors.rgbToHsl($type.getValue(this._list[i].rgb));\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\thsl.h = <number>hues.shift();\r\n\t\t\t}\r\n\r\n\t\t\t// Apply HSL mods\r\n\t\t\tthis.applyStepOptions(hsl, mods, i, this._currentPass);\r\n\r\n\t\t\t// Convert back to Color\r\n\t\t\tlet c = color($colors.hslToRgb(hsl));\r\n\r\n\t\t\t// Apply regular color mods\r\n\t\t\tlet brighten = (this.stepOptions.brighten || 0) * i + (this.passOptions.brighten || 0) * this._currentPass;\r\n\t\t\tif (brighten != 0) {\r\n\t\t\t\tif (this.wrap) {\r\n\t\t\t\t\tbrighten = $utils.fitNumberRelative(brighten, this.minLightness, this.maxLightness);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tbrighten = $utils.fitNumber(brighten, this.minLightness, this.maxLightness);\r\n\t\t\t\t}\r\n\t\t\t\tc = c.brighten(brighten);\r\n\t\t\t}\r\n\r\n\t\t\tlet lighten = (this.stepOptions.lighten || 0) * i + (this.passOptions.lighten || 0) * this._currentPass;\r\n\t\t\tif (lighten != 0) {\r\n\t\t\t\tif (this.wrap) {\r\n\t\t\t\t\tlighten = $utils.fitNumberRelative(lighten, this.minLightness, this.maxLightness);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tlighten = $utils.fitNumber(lighten, this.minLightness, this.maxLightness);\r\n\t\t\t\t}\r\n\t\t\t\tc = c.lighten(lighten);\r\n\t\t\t}\r\n\r\n\t\t\tthis._list.push(c);\r\n\t\t}\r\n\r\n\t\tthis._currentPass++;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns current last color. It's either the last color in the list of\r\n\t * colors, or `baseColor` if list is empty.\r\n\t *\r\n\t * @return Color\r\n\t */\r\n\tprotected get currentColor(): Color {\r\n\t\tif (this._list.length == 0) {\r\n\t\t\treturn this.baseColor.saturate(this.saturation);\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this._list[this._list.length - 1].saturate(this.saturation);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Generates modifiers for color, based on what step and pass.\r\n\t *\r\n\t * @param hsl   Curren HSL value of the color to modify\r\n\t * @param base  The modifiers that were before modification to use as a base\r\n\t * @param step  Current step\r\n\t * @param pass  Current pass\r\n\t */\r\n\tprotected applyStepOptions(hsl: iHSL, base: IColorSetStepOptions, step: number, pass: number): void {\r\n\r\n\t\t// Process lightness\r\n\t\thsl.l = base.lightness + (this.stepOptions.lightness || 0) * step + (this.passOptions.lightness || 0) * pass;\r\n\r\n\t\tif (this.wrap) {\r\n\t\t\tif (hsl.l > 1) {\r\n\t\t\t\thsl.l = hsl.l - Math.floor(hsl.l);\r\n\t\t\t}\r\n\t\t\telse if (hsl.l < 0) {\r\n\t\t\t\thsl.l = -(hsl.l - Math.floor(hsl.l));\r\n\t\t\t}\r\n\t\t\thsl.l = $utils.fitNumberRelative(hsl.l, this.minLightness, this.maxLightness);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tif (hsl.l > 1) {\r\n\t\t\t\thsl.l = 1\r\n\t\t\t}\r\n\t\t\telse if (hsl.l < 0) {\r\n\t\t\t\thsl.l = 0;\r\n\t\t\t}\r\n\t\t\thsl.l = $utils.fitNumber(hsl.l, this.minLightness, this.maxLightness);\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Processes JSON-based config before it is applied to the object.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param config  Config\r\n\t */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\tif (config) {\r\n\r\n\t\t\t// Cast colors\r\n\t\t\tif ($type.hasValue(config.list) && $type.isArray(config.list)) {\r\n\t\t\t\tfor (let i = 0, len = config.list.length; i < len; i++) {\r\n\t\t\t\t\tif (!(config.list[i] instanceof Color)) {\r\n\t\t\t\t\t\tconfig.list[i] = color(config.list[i]);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif ($type.hasValue(config.baseColor) && !(config.baseColor instanceof Color)) {\r\n\t\t\t\tconfig.baseColor = color(config.baseColor);\r\n\t\t\t}\r\n\r\n\t\t}\r\n\t\tsuper.processConfig(config);\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"ColorSet\"] = ColorSet;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}