{"ast":null,"code":"import { geoProjectionMutator as projectionMutator } from \"d3-geo\";\nimport { abs, atan2, cos, degrees, epsilon, radians, sin, tan } from \"./math.js\";\nexport function armadilloRaw(phi0) {\n  var sinPhi0 = sin(phi0),\n    cosPhi0 = cos(phi0),\n    sPhi0 = phi0 >= 0 ? 1 : -1,\n    tanPhi0 = tan(sPhi0 * phi0),\n    k = (1 + sinPhi0 - cosPhi0) / 2;\n  function forward(lambda, phi) {\n    var cosPhi = cos(phi),\n      cosLambda = cos(lambda /= 2);\n    return [(1 + cosPhi) * sin(lambda), (sPhi0 * phi > -atan2(cosLambda, tanPhi0) - 1e-3 ? 0 : -sPhi0 * 10) + k + sin(phi) * cosPhi0 - (1 + cosPhi) * sinPhi0 * cosLambda // TODO D3 core should allow null or [NaN, NaN] to be returned.\n    ];\n  }\n  forward.invert = function (x, y) {\n    var lambda = 0,\n      phi = 0,\n      i = 50;\n    do {\n      var cosLambda = cos(lambda),\n        sinLambda = sin(lambda),\n        cosPhi = cos(phi),\n        sinPhi = sin(phi),\n        A = 1 + cosPhi,\n        fx = A * sinLambda - x,\n        fy = k + sinPhi * cosPhi0 - A * sinPhi0 * cosLambda - y,\n        dxdLambda = A * cosLambda / 2,\n        dxdPhi = -sinLambda * sinPhi,\n        dydLambda = sinPhi0 * A * sinLambda / 2,\n        dydPhi = cosPhi0 * cosPhi + sinPhi0 * cosLambda * sinPhi,\n        denominator = dxdPhi * dydLambda - dydPhi * dxdLambda,\n        dLambda = (fy * dxdPhi - fx * dydPhi) / denominator / 2,\n        dPhi = (fx * dydLambda - fy * dxdLambda) / denominator;\n      if (abs(dPhi) > 2) dPhi /= 2;\n      lambda -= dLambda, phi -= dPhi;\n    } while ((abs(dLambda) > epsilon || abs(dPhi) > epsilon) && --i > 0);\n    return sPhi0 * phi > -atan2(cos(lambda), tanPhi0) - 1e-3 ? [lambda * 2, phi] : null;\n  };\n  return forward;\n}\nexport default function () {\n  var phi0 = 20 * radians,\n    sPhi0 = phi0 >= 0 ? 1 : -1,\n    tanPhi0 = tan(sPhi0 * phi0),\n    m = projectionMutator(armadilloRaw),\n    p = m(phi0),\n    stream_ = p.stream;\n  p.parallel = function (_) {\n    if (!arguments.length) return phi0 * degrees;\n    tanPhi0 = tan((sPhi0 = (phi0 = _ * radians) >= 0 ? 1 : -1) * phi0);\n    return m(phi0);\n  };\n  p.stream = function (stream) {\n    var rotate = p.rotate(),\n      rotateStream = stream_(stream),\n      sphereStream = (p.rotate([0, 0]), stream_(stream)),\n      precision = p.precision();\n    p.rotate(rotate);\n    rotateStream.sphere = function () {\n      sphereStream.polygonStart(), sphereStream.lineStart();\n      for (var lambda = sPhi0 * -180; sPhi0 * lambda < 180; lambda += sPhi0 * 90) sphereStream.point(lambda, sPhi0 * 90);\n      if (phi0) while (sPhi0 * (lambda -= 3 * sPhi0 * precision) >= -180) {\n        sphereStream.point(lambda, sPhi0 * -atan2(cos(lambda * radians / 2), tanPhi0) * degrees);\n      }\n      sphereStream.lineEnd(), sphereStream.polygonEnd();\n    };\n    return rotateStream;\n  };\n  return p.scale(218.695).center([0, 28.0974]);\n}","map":{"version":3,"names":["geoProjectionMutator","projectionMutator","abs","atan2","cos","degrees","epsilon","radians","sin","tan","armadilloRaw","phi0","sinPhi0","cosPhi0","sPhi0","tanPhi0","k","forward","lambda","phi","cosPhi","cosLambda","invert","x","y","i","sinLambda","sinPhi","A","fx","fy","dxdLambda","dxdPhi","dydLambda","dydPhi","denominator","dLambda","dPhi","m","p","stream_","stream","parallel","_","arguments","length","rotate","rotateStream","sphereStream","precision","sphere","polygonStart","lineStart","point","lineEnd","polygonEnd","scale","center"],"sources":["/home/josh/Documents/projects/subs/vue_subs/node_modules/d3-geo-projection/src/armadillo.js"],"sourcesContent":["import {geoProjectionMutator as projectionMutator} from \"d3-geo\";\nimport {abs, atan2, cos, degrees, epsilon, radians, sin, tan} from \"./math.js\";\n\nexport function armadilloRaw(phi0) {\n  var sinPhi0 = sin(phi0),\n      cosPhi0 = cos(phi0),\n      sPhi0 = phi0 >= 0 ? 1 : -1,\n      tanPhi0 = tan(sPhi0 * phi0),\n      k = (1 + sinPhi0 - cosPhi0) / 2;\n\n  function forward(lambda, phi) {\n    var cosPhi = cos(phi),\n        cosLambda = cos(lambda /= 2);\n    return [\n      (1 + cosPhi) * sin(lambda),\n      (sPhi0 * phi > -atan2(cosLambda, tanPhi0) - 1e-3 ? 0 : -sPhi0 * 10) + k + sin(phi) * cosPhi0 - (1 + cosPhi) * sinPhi0 * cosLambda // TODO D3 core should allow null or [NaN, NaN] to be returned.\n    ];\n  }\n\n  forward.invert = function(x, y) {\n    var lambda = 0,\n        phi = 0,\n        i = 50;\n    do {\n      var cosLambda = cos(lambda),\n          sinLambda = sin(lambda),\n          cosPhi = cos(phi),\n          sinPhi = sin(phi),\n          A = 1 + cosPhi,\n          fx = A * sinLambda - x,\n          fy = k + sinPhi * cosPhi0 - A * sinPhi0 * cosLambda - y,\n          dxdLambda = A * cosLambda / 2,\n          dxdPhi = -sinLambda * sinPhi,\n          dydLambda = sinPhi0 * A * sinLambda / 2,\n          dydPhi = cosPhi0 * cosPhi + sinPhi0 * cosLambda * sinPhi,\n          denominator = dxdPhi * dydLambda - dydPhi * dxdLambda,\n          dLambda = (fy * dxdPhi - fx * dydPhi) / denominator / 2,\n          dPhi = (fx * dydLambda - fy * dxdLambda) / denominator;\n      if (abs(dPhi) > 2) dPhi /= 2;\n      lambda -= dLambda, phi -= dPhi;\n    } while ((abs(dLambda) > epsilon || abs(dPhi) > epsilon) && --i > 0);\n    return sPhi0 * phi > -atan2(cos(lambda), tanPhi0) - 1e-3 ? [lambda * 2, phi] : null;\n  };\n\n  return forward;\n}\n\nexport default function() {\n  var phi0 = 20 * radians,\n      sPhi0 = phi0 >= 0 ? 1 : -1,\n      tanPhi0 = tan(sPhi0 * phi0),\n      m = projectionMutator(armadilloRaw),\n      p = m(phi0),\n      stream_ = p.stream;\n\n  p.parallel = function(_) {\n    if (!arguments.length) return phi0 * degrees;\n    tanPhi0 = tan((sPhi0 = (phi0 = _ * radians) >= 0 ? 1 : -1) * phi0);\n    return m(phi0);\n  };\n\n  p.stream = function(stream) {\n    var rotate = p.rotate(),\n        rotateStream = stream_(stream),\n        sphereStream = (p.rotate([0, 0]), stream_(stream)),\n        precision = p.precision();\n    p.rotate(rotate);\n    rotateStream.sphere = function() {\n      sphereStream.polygonStart(), sphereStream.lineStart();\n      for (var lambda = sPhi0 * -180; sPhi0 * lambda < 180; lambda += sPhi0 * 90)\n        sphereStream.point(lambda, sPhi0 * 90);\n      if (phi0) while (sPhi0 * (lambda -= 3 * sPhi0 * precision) >= -180) {\n        sphereStream.point(lambda, sPhi0 * -atan2(cos(lambda * radians / 2), tanPhi0) * degrees);\n      }\n      sphereStream.lineEnd(), sphereStream.polygonEnd();\n    };\n    return rotateStream;\n  };\n\n  return p\n      .scale(218.695)\n      .center([0, 28.0974]);\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}