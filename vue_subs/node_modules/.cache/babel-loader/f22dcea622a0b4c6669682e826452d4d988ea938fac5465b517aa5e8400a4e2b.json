{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n/**\r\n * Polyspline (smoothed line) module.\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\nimport { Polyline } from \"./Polyline\";\nimport { registry } from \"../Registry\";\nimport * as $math from \"../../core/utils/Math\";\nimport * as $type from \"../../core/utils/Type\";\nimport * as $path from \"../../core/rendering/Path\";\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n/**\r\n * Draws a polysline. (smoothed multi-sigment line)\r\n *\r\n * @see {@link IPolysplineEvents} for a list of available events\r\n * @see {@link IPolysplineAdapters} for a list of available Adapters\r\n */\nvar Polyspline = /** @class */function (_super) {\n  __extends(Polyspline, _super);\n  /**\r\n   * Constructor\r\n   */\n  function Polyspline() {\n    var _this = _super.call(this) || this;\n    _this.className = \"Polyspline\";\n    _this.tensionX = 0.5;\n    _this.tensionY = 0.5;\n    _this.applyTheme();\n    return _this;\n  }\n  /**\r\n   * Creats and adds an SVG path for the arc.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  Polyspline.prototype.makePath = function () {\n    this._distance = 0;\n    var segments = this.segments;\n    var tensionX = this.tensionX;\n    var tensionY = this.tensionY;\n    this.allPoints = [];\n    if (segments && segments.length > 0) {\n      var path = \"\";\n      this._realSegments = [];\n      for (var i = 0, len = segments.length; i < len; i++) {\n        var points = segments[i];\n        var realPoints = [];\n        this._realSegments.push(realPoints);\n        if (points.length > 0) {\n          var first = points[0];\n          var last = points[points.length - 1];\n          var closed_1 = false;\n          if ($math.round(first.x, 3) == $math.round(last.x) && $math.round(first.y) == $math.round(last.y)) {\n            closed_1 = true;\n          }\n          path += $path.moveTo(points[0]);\n          for (var p = 0; p < points.length - 1; p++) {\n            var p0 = points[p - 1];\n            var p1 = points[p];\n            var p2 = points[p + 1];\n            var p3 = points[p + 2];\n            if (p === 0) {\n              p0 = points[p];\n            } else if (p == points.length - 2) {\n              p3 = points[p + 1];\n            }\n            if (!p3) {\n              p3 = p2;\n            }\n            if (p === 0) {\n              if (closed_1) {\n                p0 = points[points.length - 2];\n              } else {\n                p0 = points[i];\n              }\n            } else if (p == points.length - 2) {\n              if (closed_1) {\n                p3 = points[1];\n              } else {\n                p3 = points[p + 1];\n              }\n            }\n            var controlPointA = $math.getCubicControlPointA(p0, p1, p2, p3, tensionX, tensionY);\n            var controlPointB = $math.getCubicControlPointB(p0, p1, p2, p3, tensionX, tensionY);\n            path += $path.cubicCurveTo(p2, controlPointA, controlPointB);\n            // now split to small segments so that we could have positionToPoint later\n            var stepCount = Math.ceil($math.getCubicCurveDistance(p1, p2, controlPointA, controlPointB, 20)) * 1.2;\n            var prevPoint = p1;\n            if (stepCount > 0) {\n              // not good for curved charts\n              //this.allPoints[0] = { x: points[0].x, y: points[0].y, angle: $math.getAngle(points[0], points[1]) };\n              //realPoints.push(this.allPoints[0]);\n              for (var s = 0; s <= stepCount; s++) {\n                var point = $math.getPointOnCubicCurve(p1, p2, controlPointA, controlPointB, s / stepCount);\n                if (point.x == prevPoint.x && point.y == prevPoint.y) {\n                  continue;\n                }\n                realPoints.push(point);\n                var angle = $math.round($math.getAngle(prevPoint, point), 5);\n                //this.allPoints.push({ x: point.x, y: point.y, angle: angle });\n                this._distance += $math.getDistance(prevPoint, point);\n                this.allPoints[Math.floor(this._distance)] = {\n                  x: point.x,\n                  y: point.y,\n                  angle: angle\n                };\n                prevPoint = point;\n              }\n            } else {\n              realPoints.push(p0);\n            }\n          }\n        }\n        var allPoints = this.allPoints;\n        if (allPoints.length > 1) {\n          for (var i_1 = 0; i_1 < allPoints.length; i_1++) {\n            if (!allPoints[i_1]) {\n              if (i_1 > 1) {\n                allPoints[i_1] = allPoints[i_1 - 1];\n              } else {\n                for (var k = 1; k < allPoints.length; k++) {\n                  if (allPoints[k]) {\n                    allPoints[i_1] = allPoints[k];\n                    break;\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n      this.path = path;\n    }\n  };\n  /**\r\n   * Returns an index of the point that is closest to specified coordinates.\r\n   *\r\n   * @param   point  Reference point\r\n   * @return         Index\r\n   */\n  Polyspline.prototype.getClosestPointIndex = function (point) {\n    var points = this.allPoints;\n    var index;\n    var closest = Infinity;\n    if (points.length > 1) {\n      for (var p = 1; p < points.length; p++) {\n        var distance = $math.getDistance(point, points[p]);\n        if (distance < closest) {\n          index = p;\n          closest = distance;\n        }\n      }\n    }\n    return index;\n  };\n  Object.defineProperty(Polyspline.prototype, \"tensionX\", {\n    /**\r\n     * @return Tension\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"tensionX\");\n    },\n    /**\r\n     * Horizontal tension for the spline.\r\n     *\r\n     * Used by the line smoothing algorithm.\r\n     *\r\n     * @default 0.5\r\n     * @param value  Tension\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"tensionX\", value);\n      this.makePath();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Polyspline.prototype, \"tensionY\", {\n    /**\r\n     * @return Tension\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"tensionY\");\n    },\n    /**\r\n     * Vertical tension for the spline.\r\n     *\r\n     * Used by the line smoothing algorithm.\r\n     *\r\n     * @default 0.5\r\n     * @param value  Tensions\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"tensionY\", value, true);\n      this.makePath();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Converts relative position along the line (0-1) into pixel coordinates.\r\n   *\r\n   * @param position  Position (0-1)\r\n   * @return Coordinates\r\n   */\n  Polyspline.prototype.positionToPoint = function (position, extend) {\n    var deltaAngle = 0;\n    var allPoints = this.allPoints;\n    var len = allPoints.length;\n    if (!$type.isNumber(position)) {\n      position = 0;\n    }\n    if (len > 1) {\n      if (extend && len > 3) {\n        if (position < 0) {\n          if (position < -0.01) {\n            position = -0.01;\n          }\n          var f0 = allPoints[0];\n          var f1 = allPoints[1];\n          var x = f0.x - (f0.x - f1.x) * len * position;\n          var y = f0.y - (f0.y - f1.y) * len * position;\n          return {\n            x: x,\n            y: y,\n            angle: $math.getAngle(f0, f1)\n          };\n        } else if (position > 1) {\n          if (position > 1.01) {\n            position = 1.01;\n          }\n          var f0 = allPoints[allPoints.length - 2];\n          var f1 = allPoints[allPoints.length - 3];\n          var x = f0.x + (f0.x - f1.x) * len * (position - 1);\n          var y = f0.y + (f0.y - f1.y) * len * (position - 1);\n          return {\n            x: x,\n            y: y,\n            angle: $math.getAngle(f0, {\n              x: x,\n              y: y\n            })\n          };\n        } else if (position == 1) {\n          var point_1 = allPoints[allPoints.length - 1];\n          return {\n            x: point_1.x,\n            y: point_1.y,\n            angle: point_1.angle\n          };\n        }\n      } else {\n        if (position < 0) {\n          position = Math.abs(position);\n          deltaAngle = 180;\n        }\n        if (position >= 1) {\n          position = 0.9999999999999;\n        }\n      }\n      var point = allPoints[Math.floor(position * len)];\n      return {\n        x: point.x,\n        y: point.y,\n        angle: point.angle + deltaAngle\n      };\n    } else if (len == 1) {\n      var point = allPoints[0];\n      return {\n        x: point.x,\n        y: point.y,\n        angle: point.angle\n      };\n    } else {\n      return {\n        x: 0,\n        y: 0,\n        angle: 0\n      };\n    }\n  };\n  return Polyspline;\n}(Polyline);\nexport { Polyspline };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\nregistry.registeredClasses[\"Polyspline\"] = Polyspline;","map":{"version":3,"names":["Polyline","registry","$math","$type","$path","Polyspline","_super","__extends","_this","call","className","tensionX","tensionY","applyTheme","prototype","makePath","_distance","segments","allPoints","length","path","_realSegments","i","len","points","realPoints","push","first","last","closed_1","round","x","y","moveTo","p","p0","p1","p2","p3","controlPointA","getCubicControlPointA","controlPointB","getCubicControlPointB","cubicCurveTo","stepCount","Math","ceil","getCubicCurveDistance","prevPoint","s","point","getPointOnCubicCurve","angle","getAngle","getDistance","floor","i_1","k","getClosestPointIndex","index","closest","Infinity","distance","Object","defineProperty","get","getPropertyValue","set","value","setPropertyValue","positionToPoint","position","extend","deltaAngle","isNumber","f0","f1","point_1","abs","registeredClasses"],"sources":["../../../../../src/.internal/core/elements/Polyspline.ts"],"sourcesContent":["/**\r\n * Polyspline (smoothed line) module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Polyline, IPolylineProperties, IPolylineAdapters, IPolylineEvents } from \"./Polyline\";\r\nimport { IPoint, IOrientationPoint } from \"../../core/defs/IPoint\";\r\nimport { registry } from \"../Registry\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[Polyspline]].\r\n */\r\nexport interface IPolysplineProperties extends IPolylineProperties {\r\n\r\n\t/**\r\n\t * Horizontal tension for the spline.\r\n\t *\r\n\t * Used by the line smoothing algorithm.\r\n\t *\r\n\t * @default 0.5\r\n\t */\r\n\ttensionX: number;\r\n\r\n\t/**\r\n\t * Vertical tension for the spline.\r\n\t *\r\n\t * Used by the line smoothing algorithm.\r\n\t *\r\n\t * @default 0.5\r\n\t */\r\n\ttensionY: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[Polyspline]].\r\n */\r\nexport interface IPolysplineEvents extends IPolylineEvents { }\r\n\r\n/**\r\n * Defines adapters\r\n * Includes both the [[Adapter]] definitions and properties\r\n * @see {@link Adapter}\r\n */\r\nexport interface IPolysplineAdapters extends IPolylineAdapters, IPolysplineProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Draws a polysline. (smoothed multi-sigment line)\r\n *\r\n * @see {@link IPolysplineEvents} for a list of available events\r\n * @see {@link IPolysplineAdapters} for a list of available Adapters\r\n */\r\nexport class Polyspline extends Polyline {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tpublic _properties!: IPolysplineProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tpublic _adapter!: IPolysplineAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IPolysplineEvents;\r\n\r\n\t/**\r\n\t * Array of points of a spline with 1 px increment. used to get point by position\r\n\t */\r\n\tpublic allPoints: IOrientationPoint[];\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"Polyspline\";\r\n\r\n\t\tthis.tensionX = 0.5;\r\n\t\tthis.tensionY = 0.5;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Creats and adds an SVG path for the arc.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic makePath(): void {\r\n\t\tthis._distance = 0;\r\n\t\tlet segments = this.segments;\r\n\r\n\t\tlet tensionX: number = this.tensionX;\r\n\t\tlet tensionY: number = this.tensionY;\r\n\r\n\t\tthis.allPoints = [];\r\n\r\n\t\tif (segments && segments.length > 0) {\r\n\t\t\tlet path: string = \"\";\r\n\t\t\tthis._realSegments = [];\r\n\r\n\t\t\tfor (let i = 0, len = segments.length; i < len; i++) {\r\n\t\t\t\tlet points: IPoint[] = segments[i];\r\n\t\t\t\tlet realPoints: IPoint[] = [];\r\n\t\t\t\tthis._realSegments.push(realPoints);\r\n\r\n\t\t\t\tif (points.length > 0) {\r\n\r\n\t\t\t\t\tlet first: IPoint = points[0];\r\n\t\t\t\t\tlet last: IPoint = points[points.length - 1];\r\n\r\n\t\t\t\t\tlet closed: boolean = false;\r\n\r\n\t\t\t\t\tif ($math.round(first.x, 3) == $math.round(last.x) && $math.round(first.y) == $math.round(last.y)) {\r\n\t\t\t\t\t\tclosed = true;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tpath += $path.moveTo(points[0]);\r\n\r\n\t\t\t\t\tfor (let p = 0; p < points.length - 1; p++) {\r\n\r\n\t\t\t\t\t\tlet p0: IPoint = points[p - 1];\r\n\r\n\t\t\t\t\t\tlet p1: IPoint = points[p];\r\n\r\n\t\t\t\t\t\tlet p2: IPoint = points[p + 1];\r\n\r\n\t\t\t\t\t\tlet p3: IPoint = points[p + 2];\r\n\r\n\t\t\t\t\t\tif (p === 0) {\r\n\t\t\t\t\t\t\tp0 = points[p];\r\n\t\t\t\t\t\t} else if (p == points.length - 2) {\r\n\t\t\t\t\t\t\tp3 = points[p + 1];\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tif (!p3) {\r\n\t\t\t\t\t\t\tp3 = p2;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tif (p === 0) {\r\n\t\t\t\t\t\t\tif (closed) {\r\n\t\t\t\t\t\t\t\tp0 = points[points.length - 2];\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\tp0 = points[i];\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t} else if (p == points.length - 2) {\r\n\t\t\t\t\t\t\tif (closed) {\r\n\t\t\t\t\t\t\t\tp3 = points[1];\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\tp3 = points[p + 1];\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tlet controlPointA: IPoint = $math.getCubicControlPointA(p0, p1, p2, p3, tensionX, tensionY);\r\n\t\t\t\t\t\tlet controlPointB: IPoint = $math.getCubicControlPointB(p0, p1, p2, p3, tensionX, tensionY);\r\n\r\n\t\t\t\t\t\tpath += $path.cubicCurveTo(p2, controlPointA, controlPointB);\r\n\r\n\t\t\t\t\t\t// now split to small segments so that we could have positionToPoint later\r\n\t\t\t\t\t\tlet stepCount: number = Math.ceil($math.getCubicCurveDistance(p1, p2, controlPointA, controlPointB, 20)) * 1.2;\r\n\t\t\t\t\t\tlet prevPoint: IPoint = p1;\r\n\r\n\r\n\t\t\t\t\t\tif (stepCount > 0) {\r\n\r\n\t\t\t\t\t\t\t// not good for curved charts\r\n\t\t\t\t\t\t\t//this.allPoints[0] = { x: points[0].x, y: points[0].y, angle: $math.getAngle(points[0], points[1]) };\r\n\t\t\t\t\t\t\t//realPoints.push(this.allPoints[0]);\r\n\r\n\r\n\t\t\t\t\t\t\tfor (let s = 0; s <= stepCount; s++) {\r\n\r\n\t\t\t\t\t\t\t\tlet point = $math.getPointOnCubicCurve(p1, p2, controlPointA, controlPointB, s / stepCount);\r\n\r\n\t\t\t\t\t\t\t\tif (point.x == prevPoint.x && point.y == prevPoint.y) {\r\n\t\t\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\trealPoints.push(point);\r\n\r\n\t\t\t\t\t\t\t\tlet angle = $math.round($math.getAngle(prevPoint, point), 5);\r\n\r\n\t\t\t\t\t\t\t\t//this.allPoints.push({ x: point.x, y: point.y, angle: angle });\r\n\t\t\t\t\t\t\t\tthis._distance += $math.getDistance(prevPoint, point);\r\n\r\n\t\t\t\t\t\t\t\tthis.allPoints[Math.floor(this._distance)] = { x: point.x, y: point.y, angle: angle };\r\n\t\t\t\t\t\t\t\tprevPoint = point;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\trealPoints.push(p0);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet allPoints = this.allPoints;\r\n\t\t\t\tif (allPoints.length > 1) {\r\n\t\t\t\t\tfor (let i = 0; i < allPoints.length; i++) {\r\n\t\t\t\t\t\tif (!allPoints[i]) {\r\n\t\t\t\t\t\t\tif (i > 1) {\r\n\t\t\t\t\t\t\t\tallPoints[i] = allPoints[i - 1];\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\tfor (let k = 1; k < allPoints.length; k++) {\r\n\t\t\t\t\t\t\t\t\tif (allPoints[k]) {\r\n\t\t\t\t\t\t\t\t\t\tallPoints[i] = allPoints[k];\r\n\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tthis.path = path;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an index of the point that is closest to specified coordinates.\r\n\t * \r\n\t * @param   point  Reference point\r\n\t * @return         Index\r\n\t */\r\n\tpublic getClosestPointIndex(point: IPoint): number {\r\n\t\tlet points = this.allPoints;\r\n\r\n\t\tlet index: number;\r\n\r\n\t\tlet closest: number = Infinity;\r\n\t\tif (points.length > 1) {\r\n\t\t\tfor (let p = 1; p < points.length; p++) {\r\n\t\t\t\tlet distance = $math.getDistance(point, points[p]);\r\n\t\t\t\tif (distance < closest) {\r\n\t\t\t\t\tindex = p;\r\n\t\t\t\t\tclosest = distance;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn index;\r\n\t}\r\n\r\n\t/**\r\n\t * Horizontal tension for the spline.\r\n\t *\r\n\t * Used by the line smoothing algorithm.\r\n\t *\r\n\t * @default 0.5\r\n\t * @param value  Tension\r\n\t */\r\n\tpublic set tensionX(value: number) {\r\n\t\tthis.setPropertyValue(\"tensionX\", value);\r\n\t\tthis.makePath();\r\n\t}\r\n\r\n\t/**\r\n\t * @return Tension\r\n\t */\r\n\tpublic get tensionX(): number {\r\n\t\treturn this.getPropertyValue(\"tensionX\");\r\n\t}\r\n\r\n\t/**\r\n\t * Vertical tension for the spline.\r\n\t *\r\n\t * Used by the line smoothing algorithm.\r\n\t *\r\n\t * @default 0.5\r\n\t * @param value  Tensions\r\n\t */\r\n\tpublic set tensionY(value: number) {\r\n\t\tthis.setPropertyValue(\"tensionY\", value, true);\r\n\t\tthis.makePath();\r\n\t}\r\n\r\n\t/**\r\n\t * @return Tension\r\n\t */\r\n\tpublic get tensionY(): number {\r\n\t\treturn this.getPropertyValue(\"tensionY\");\r\n\t}\r\n\r\n\t/**\r\n\t * Converts relative position along the line (0-1) into pixel coordinates.\r\n\t *\r\n\t * @param position  Position (0-1)\r\n\t * @return Coordinates\r\n\t */\r\n\r\n\tpublic positionToPoint(position: number, extend?: boolean): IOrientationPoint {\r\n\r\n\t\tlet deltaAngle: number = 0;\r\n\r\n\t\tlet allPoints = this.allPoints;\r\n\t\tlet len = allPoints.length;\r\n\r\n\t\tif (!$type.isNumber(position)) {\r\n\t\t\tposition = 0;\r\n\t\t}\r\n\r\n\t\tif (len > 1) {\r\n\r\n\t\t\tif (extend && len > 3) {\r\n\t\t\t\tif (position < 0) {\r\n\r\n\t\t\t\t\tif (position < -0.01) {\r\n\t\t\t\t\t\tposition = -0.01;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tlet f0 = allPoints[0];\r\n\t\t\t\t\tlet f1 = allPoints[1];\r\n\r\n\t\t\t\t\tlet x = f0.x - (f0.x - f1.x) * len * position;\r\n\t\t\t\t\tlet y = f0.y - (f0.y - f1.y) * len * position;\r\n\r\n\t\t\t\t\treturn { x: x, y: y, angle: $math.getAngle(f0, f1) };\r\n\t\t\t\t}\r\n\t\t\t\telse if (position > 1) {\r\n\r\n\t\t\t\t\tif (position > 1.01) {\r\n\t\t\t\t\t\tposition = 1.01;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tlet f0 = allPoints[allPoints.length - 2];\r\n\t\t\t\t\tlet f1 = allPoints[allPoints.length - 3];\r\n\r\n\t\t\t\t\tlet x = f0.x + (f0.x - f1.x) * len * (position - 1);\r\n\t\t\t\t\tlet y = f0.y + (f0.y - f1.y) * len * (position - 1);\r\n\r\n\t\t\t\t\treturn { x: x, y: y, angle: $math.getAngle(f0, { x: x, y: y }) };\r\n\t\t\t\t}\r\n\t\t\t\telse if (position == 1) {\r\n\t\t\t\t\tlet point = allPoints[allPoints.length - 1]\r\n\t\t\t\t\treturn { x: point.x, y: point.y, angle: point.angle };\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tif (position < 0) {\r\n\t\t\t\t\tposition = Math.abs(position);\r\n\t\t\t\t\tdeltaAngle = 180;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (position >= 1) {\r\n\t\t\t\t\tposition = 0.9999999999999;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\r\n\t\t\tlet point = allPoints[Math.floor(position * len)];\r\n\t\t\treturn { x: point.x, y: point.y, angle: point.angle + deltaAngle };\r\n\t\t}\r\n\t\telse if (len == 1) {\r\n\t\t\tlet point = allPoints[0];\r\n\t\t\treturn { x: point.x, y: point.y, angle: point.angle };\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn { x: 0, y: 0, angle: 0 };\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Polyspline\"] = Polyspline;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}