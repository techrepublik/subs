{"ast":null,"code":"/**\r\n * Data Loader is responsible for loading and parsing external data\r\n */\nimport { CSVParser } from \"./CSVParser\";\nimport { JSONParser } from \"./JSONParser\";\nimport { Adapter } from \"../utils/Adapter\";\nimport * as $net from \"../utils/Net\";\nimport * as $array from \"../utils/Array\";\n;\n/**\r\n * Data Loader is responsible for loading and parsing external data.\r\n *\r\n * There is just one instance of DataLoader per system. Unless you have a\r\n * speicific reason, do not instantiate additional instances.\r\n *\r\n * The global instance of Data Loader is accessible via:\r\n *\r\n * ```TypeScript\r\n * am4core.dataLoader;\r\n * ```\r\n * ```JavaScript\r\n * am4core.dataLoader;\r\n * ```\r\n *\r\n * A loading of specific data source is done via [[DataSource]].\r\n *\r\n     Please refer to [[DataSource]] for information how to use it.\r\n *\r\n * @see {@link IDataLoaderAdapters} for a list of available Adapters\r\n */\nvar DataLoader = /** @class */function () {\n  function DataLoader() {\n    /**\r\n     * Adapter.\r\n     */\n    this.adapter = new Adapter(this);\n  }\n  /**\r\n   * Loads a supplied [[DataSource]] or an array of data sources, then calls\r\n   * their respective `parse` methods.\r\n   *\r\n   * @param source  A single data source or an array of multiple of data sources\r\n   */\n  DataLoader.prototype.load = function (source) {\n    var sources = Array.isArray(source) ? source : [source];\n    // Add each Source to the list to be loaded simultaneously\n    var promises = $array.map(sources, function (x) {\n      // Dispatch events\n      x.dispatchImmediately(\"started\");\n      x.dispatchImmediately(\"loadstarted\");\n      return $net.load(x.url, x, x.requestOptions);\n    });\n    // Run all promises in parallel\n    Promise.all(promises).then(function (res) {\n      // Process each loaded source\n      $array.each(res, function (result) {\n        // Get Source\n        var source = result.target;\n        // Dispatch events\n        source.dispatchImmediately(\"loadended\");\n        if (result.error) {\n          if (source.events.isEnabled(\"error\")) {\n            source.events.dispatchImmediately(\"error\", {\n              type: \"error\",\n              code: result.xhr.status,\n              message: source.language.translate(\"Unable to load file: %1\", null, source.url),\n              target: source\n            });\n          }\n        } else {\n          // Initiate parsing of the loaded data\n          source.processData(result.response, result.type);\n        }\n        source.dispatchImmediately(\"ended\");\n      });\n    }).catch(function (res) {\n      if (res.target) {\n        res.target.dispatchImmediately(\"loadended\");\n        if (res.target.events.isEnabled(\"error\")) {\n          res.target.events.dispatchImmediately(\"error\", {\n            type: \"error\",\n            code: res.xhr.status,\n            message: res.target.language.translate(\"Unable to load file: %1\", null, res.target.url),\n            target: res.target\n          });\n        }\n        res.target.dispatchImmediately(\"ended\");\n      }\n    });\n  };\n  /**\r\n   * Instantiates a [[DataParser]] object based on the data type.\r\n   * Built-in parser types are as follows:\r\n   *\r\n   * * \"csv\" or \"text/csv\"\r\n   * * \"json\" or \"application/json\"\r\n   *\r\n   * @param contentType  A format type\r\n   * @return A parser object\r\n   */\n  DataLoader.prototype.getParserByType = function (contentType) {\n    // Let some plugin decide\n    var parser = this.adapter.apply(\"getParserByType\", {\n      parser: null,\n      type: contentType\n    }).parser;\n    if (parser) {\n      return parser;\n    }\n    if (contentType == \"csv\" || contentType == \"text/csv\" || contentType == \"application/vnd.ms-excel\") {\n      return new CSVParser();\n    }\n    if (contentType == \"json\" || contentType == \"application/json\") {\n      return new JSONParser();\n    }\n    return;\n  };\n  /**\r\n   * Tries to determine a parser out of content type and/or actual data.\r\n   *\r\n   * @param data         Data\r\n   * @param contentType  Content-type\r\n   * @return Parser instance\r\n   */\n  DataLoader.prototype.getParserByData = function (data, contentType) {\n    // Let some plugin decide\n    var parser = this.adapter.apply(\"getParserByData\", {\n      parser: null,\n      data: data,\n      type: contentType\n    }).parser;\n    // Check if we have parser from outside code\n    if (!parser) {\n      // No, let's try to figure it out\n      parser = this.getParserByType(contentType);\n      if (parser) {\n        // We're able to figure out parser by content-type\n        return parser;\n      } else if (JSONParser.isJSON(data)) {\n        return this.getParserByType(\"json\");\n      } else if (CSVParser.isCSV(data)) {\n        return this.getParserByType(\"csv\");\n      }\n    }\n    return parser;\n  };\n  return DataLoader;\n}();\nexport { DataLoader };\n/**\r\n * Create instance of Data Loader\r\n */\nexport var dataLoader = new DataLoader();","map":{"version":3,"names":["CSVParser","JSONParser","Adapter","$net","$array","DataLoader","adapter","prototype","load","source","sources","Array","isArray","promises","map","x","dispatchImmediately","url","requestOptions","Promise","all","then","res","each","result","target","error","events","isEnabled","type","code","xhr","status","message","language","translate","processData","response","catch","getParserByType","contentType","parser","apply","getParserByData","data","isJSON","isCSV","dataLoader"],"sources":["../../../../../src/.internal/core/data/DataLoader.ts"],"sourcesContent":["/**\r\n * Data Loader is responsible for loading and parsing external data\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { DataSource } from \"./DataSource\";\r\nimport { DataParser } from \"./DataParser\";\r\nimport { CSVParser } from \"./CSVParser\";\r\nimport { JSONParser } from \"./JSONParser\";\r\nimport { Adapter } from \"../utils/Adapter\";\r\nimport * as $net from \"../utils/Net\";\r\nimport * as $array from \"../utils/Array\";\r\n\r\n/**\r\n * Represents a list of available adapters for Sprite\r\n */\r\nexport interface IDataLoaderAdapters {\r\n\r\n\t/**\r\n\t * Applied after the Data Loader determines suitable parser type by data\r\n\t * source's URL extension.\r\n\t */\r\n\tgetParserByType: {\r\n\t\tparser: DataParser,\r\n\t\ttype?: string\r\n\t},\r\n\r\n\t/**\r\n\t * Applied after the Data Loader determines suitable parser type based on\r\n\t * its data examination.\r\n\t */\r\n\tgetParserByData: {\r\n\t\tparser: DataParser,\r\n\t\tdata?: string,\r\n\t\ttype?: string\r\n\t}\r\n\r\n};\r\n\r\n/**\r\n * Data Loader is responsible for loading and parsing external data.\r\n *\r\n * There is just one instance of DataLoader per system. Unless you have a\r\n * speicific reason, do not instantiate additional instances.\r\n *\r\n * The global instance of Data Loader is accessible via:\r\n *\r\n * ```TypeScript\r\n * am4core.dataLoader;\r\n * ```\r\n * ```JavaScript\r\n * am4core.dataLoader;\r\n * ```\r\n *\r\n * A loading of specific data source is done via [[DataSource]].\r\n *\r\n \t Please refer to [[DataSource]] for information how to use it.\r\n *\r\n * @see {@link IDataLoaderAdapters} for a list of available Adapters\r\n */\r\nexport class DataLoader {\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IDataLoaderAdapters;\r\n\r\n\t/**\r\n\t * Adapter.\r\n\t */\r\n\tpublic adapter: Adapter<DataLoader, IDataLoaderAdapters> = new Adapter<DataLoader, IDataLoaderAdapters>(this);\r\n\r\n\t/**\r\n\t * Loads a supplied [[DataSource]] or an array of data sources, then calls\r\n\t * their respective `parse` methods.\r\n\t *\r\n\t * @param source  A single data source or an array of multiple of data sources\r\n\t */\r\n\tpublic load(source: DataSource | DataSource[]): void {\r\n\t\tlet sources = Array.isArray(source) ? source : [source];\r\n\r\n\t\t// Add each Source to the list to be loaded simultaneously\r\n\t\tlet promises = $array.map(sources, (x) => {\r\n\t\t\t// Dispatch events\r\n\t\t\tx.dispatchImmediately(\"started\");\r\n\t\t\tx.dispatchImmediately(\"loadstarted\");\r\n\r\n\t\t\treturn $net.load(x.url, x, x.requestOptions);\r\n\t\t});\r\n\r\n\t\t// Run all promises in parallel\r\n\t\tPromise.all(promises).then((res) => {\r\n\t\t\t// Process each loaded source\r\n\t\t\t$array.each(res, (result) => {\r\n\t\t\t\t// Get Source\r\n\t\t\t\tlet source = result.target;\r\n\r\n\t\t\t\t// Dispatch events\r\n\t\t\t\tsource.dispatchImmediately(\"loadended\");\r\n\r\n\t\t\t\tif (result.error) {\r\n\t\t\t\t\tif (source.events.isEnabled(\"error\")) {\r\n\t\t\t\t\t\tsource.events.dispatchImmediately(\"error\", {\r\n\t\t\t\t\t\t\ttype: \"error\",\r\n\t\t\t\t\t\t\tcode: result.xhr.status,\r\n\t\t\t\t\t\t\tmessage: source.language.translate(\"Unable to load file: %1\", null, source.url),\r\n\t\t\t\t\t\t\ttarget: source\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\r\n\t\t\t\t\t// Initiate parsing of the loaded data\r\n\t\t\t\t\tsource.processData(result.response, result.type);\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tsource.dispatchImmediately(\"ended\");\r\n\t\t\t});\r\n\t\t}).catch((res) => {\r\n\r\n\t\t\tif (res.target) {\r\n\r\n\t\t\t\tres.target.dispatchImmediately(\"loadended\");\r\n\r\n\t\t\t\tif (res.target.events.isEnabled(\"error\")) {\r\n\t\t\t\t\tres.target.events.dispatchImmediately(\"error\", {\r\n\t\t\t\t\t\ttype: \"error\",\r\n\t\t\t\t\t\tcode: res.xhr.status,\r\n\t\t\t\t\t\tmessage: res.target.language.translate(\"Unable to load file: %1\", null, res.target.url),\r\n\t\t\t\t\t\ttarget: res.target\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\r\n\t\t\t\tres.target.dispatchImmediately(\"ended\");\r\n\r\n\t\t\t}\r\n\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Instantiates a [[DataParser]] object based on the data type.\r\n\t * Built-in parser types are as follows:\r\n\t *\r\n\t * * \"csv\" or \"text/csv\"\r\n\t * * \"json\" or \"application/json\"\r\n\t *\r\n\t * @param contentType  A format type\r\n\t * @return A parser object\r\n\t */\r\n\tpublic getParserByType(contentType: string): DataParser {\r\n\r\n\t\t// Let some plugin decide\r\n\t\tlet parser = this.adapter.apply(\"getParserByType\", {\r\n\t\t\tparser: null,\r\n\t\t\ttype: contentType\r\n\t\t}).parser;\r\n\r\n\t\tif (parser) {\r\n\t\t\treturn parser;\r\n\t\t}\r\n\r\n\t\tif (contentType == \"csv\" || contentType == \"text/csv\" || contentType == \"application/vnd.ms-excel\") {\r\n\t\t\treturn new CSVParser();\r\n\t\t}\r\n\t\tif (contentType == \"json\" || contentType == \"application/json\") {\r\n\t\t\treturn new JSONParser();\r\n\t\t}\r\n\t\treturn;\r\n\t}\r\n\r\n\t/**\r\n\t * Tries to determine a parser out of content type and/or actual data.\r\n\t *\r\n\t * @param data         Data\r\n\t * @param contentType  Content-type\r\n\t * @return Parser instance\r\n\t */\r\n\tpublic getParserByData(data: string, contentType?: string): DataParser {\r\n\r\n\t\t// Let some plugin decide\r\n\t\tlet parser = this.adapter.apply(\"getParserByData\", {\r\n\t\t\tparser: null,\r\n\t\t\tdata: data,\r\n\t\t\ttype: contentType\r\n\t\t}).parser;\r\n\r\n\t\t// Check if we have parser from outside code\r\n\t\tif (!parser) {\r\n\t\t\t// No, let's try to figure it out\r\n\t\t\tparser = this.getParserByType(contentType)\r\n\r\n\t\t\tif (parser) {\r\n\t\t\t\t// We're able to figure out parser by content-type\r\n\t\t\t\treturn parser;\r\n\t\t\t}\r\n\t\t\telse if (JSONParser.isJSON(data)) {\r\n\t\t\t\treturn this.getParserByType(\"json\");\r\n\t\t\t}\r\n\t\t\telse if (CSVParser.isCSV(data)) {\r\n\t\t\t\treturn this.getParserByType(\"csv\");\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn parser;\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Create instance of Data Loader\r\n */\r\nexport let dataLoader: DataLoader = new DataLoader();\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}