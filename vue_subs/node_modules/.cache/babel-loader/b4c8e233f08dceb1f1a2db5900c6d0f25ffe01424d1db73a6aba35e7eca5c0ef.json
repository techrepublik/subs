{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\nimport { registry } from \"../Registry\";\nimport * as $path from \"./Path\";\nimport * as $array from \"../utils/Array\";\nimport * as $utils from \"../utils/Utils\";\nimport * as $math from \"../utils/Math\";\n/**\r\n * @ignore Exclude from docs\r\n * @todo Description\r\n */\nvar Tension = /** @class */function () {\n  /**\r\n   * Constructor.\r\n   *\r\n   * @param tensionX [description]\r\n   * @param tensionY [description]\r\n   */\n  function Tension(tensionX, tensionY) {\n    this._tensionX = tensionX;\n    this._tensionY = tensionY;\n  }\n  /**\r\n   * [smooth description]\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @todo Description\r\n   * @param points  [description]\r\n   * @return [description]\r\n   */\n  Tension.prototype.smooth = function (points) {\n    for (var i = points.length - 1; i > 0; i--) {\n      var p0 = points[i];\n      var p1 = points[i - 1];\n      if (Math.abs(p0.x - p1.x) < 0.1 && Math.abs(p0.y - p1.y) < 0.1) {\n        points.splice(i - 1, 1);\n      }\n    }\n    var tensionX = this._tensionX;\n    var tensionY = this._tensionY;\n    if (points.length < 3 || tensionX >= 1 && tensionY >= 1) {\n      return $path.polyline(points);\n    }\n    var first = points[0];\n    var last = points[points.length - 1];\n    var closed = false;\n    if ($math.round(first.x, 3) == $math.round(last.x) && $math.round(first.y) == $math.round(last.y)) {\n      closed = true;\n    }\n    // Can't moveTo here, as it wont be possible to have fill then.\n    var path = \"\";\n    for (var i = 0, len = points.length - 1; i < len; i++) {\n      var p0 = points[i - 1];\n      var p1 = points[i];\n      var p2 = points[i + 1];\n      var p3 = points[i + 2];\n      if (i === 0) {\n        if (closed) {\n          p0 = points[points.length - 2];\n        } else {\n          p0 = points[i];\n        }\n      } else if (i == points.length - 2) {\n        if (closed) {\n          p3 = points[1];\n        } else {\n          p3 = points[i + 1];\n        }\n      }\n      var controlPointA = $math.getCubicControlPointA(p0, p1, p2, p3, tensionX, tensionY);\n      var controlPointB = $math.getCubicControlPointB(p0, p1, p2, p3, tensionX, tensionY);\n      path += $path.cubicCurveTo(p2, controlPointA, controlPointB);\n    }\n    return path;\n  };\n  return Tension;\n}();\nexport { Tension };\n/**\r\n * Returns a waved line SVG path between two points.\r\n *\r\n * @ignore Exclude from docs\r\n * @param point1            Starting point\r\n * @param point2            Ending point\r\n * @param waveLength        Wave length\r\n * @param waveHeight        Wave height\r\n * @param adjustWaveLength  Adjust wave length based on the actual line length\r\n * @return SVG path\r\n */\nexport function wavedLine(point1, point2, waveLength, waveHeight, tension, adjustWaveLength) {\n  var x1 = point1.x;\n  var y1 = point1.y;\n  var x2 = point2.x;\n  var y2 = point2.y;\n  var distance = $math.getDistance(point1, point2);\n  if (adjustWaveLength) {\n    waveLength = distance / Math.round(distance / waveLength);\n  }\n  var d = registry.getCache($utils.stringify([\"wavedLine\", point1.x, point2.x, point1.y, point2.y, waveLength, waveHeight]));\n  if (!d) {\n    if (distance > 0) {\n      var angle = Math.atan2(y2 - y1, x2 - x1);\n      var cos = Math.cos(angle);\n      var sin = Math.sin(angle);\n      var waveLengthX = waveLength * cos;\n      var waveLengthY = waveLength * sin;\n      if (waveLength <= 1 || waveHeight <= 1) {\n        d = $path.lineTo(point2);\n      } else {\n        var halfWaveCount = Math.round(2 * distance / waveLength);\n        var points = [];\n        var sign_1 = 1;\n        if (x2 < x1) {\n          sign_1 *= -1;\n        }\n        if (y2 < y1) {\n          sign_1 *= -1;\n        }\n        for (var i = 0; i <= halfWaveCount; i++) {\n          sign_1 *= -1;\n          var x = x1 + i * waveLengthX / 2 + sign_1 * waveHeight / 2 * sin;\n          var y = y1 + i * waveLengthY / 2 - sign_1 * waveHeight / 2 * cos;\n          points.push({\n            x: x,\n            y: y\n          });\n        }\n        d = new Tension(tension, tension).smooth(points);\n      }\n    } else {\n      d = \"\";\n    }\n    registry.setCache($utils.stringify([\"wavedLine\", point1.x, point2.x, point1.y, point2.y, waveLength, waveHeight]), d);\n  }\n  return d;\n}\nvar Monotone = /** @class */function () {\n  function Monotone(reversed, info) {\n    this._reversed = reversed;\n    this._closed = info.closed;\n  }\n  // According to https://en.wikipedia.org/wiki/Cubic_Hermite_spline#Representations\n  // \"you can express cubic Hermite interpolation in terms of cubic BÃ©zier curves\n  // with respect to the four values p0, p0 + m0 / 3, p1 - m1 / 3, p1\".\n  Monotone.prototype._curve = function (x0, x1, y0, y1, t0, t1) {\n    var dx = (x1 - x0) / 3;\n    if (this._reversed) {\n      return $path.cubicCurveTo({\n        x: y1,\n        y: x1\n      }, {\n        x: y0 + dx * t0,\n        y: x0 + dx\n      }, {\n        x: y1 - dx * t1,\n        y: x1 - dx\n      });\n    } else {\n      return $path.cubicCurveTo({\n        x: x1,\n        y: y1\n      }, {\n        x: x0 + dx,\n        y: y0 + dx * t0\n      }, {\n        x: x1 - dx,\n        y: y1 - dx * t1\n      });\n    }\n  };\n  Monotone.prototype.smooth = function (points) {\n    var _this = this;\n    var x0 = NaN;\n    var x1 = NaN;\n    var y0 = NaN;\n    var y1 = NaN;\n    var t0 = NaN;\n    var point = 0;\n    var output = \"\";\n    $array.each(points, function (_a) {\n      var x = _a.x,\n        y = _a.y;\n      if (_this._reversed) {\n        var temp = x;\n        x = y;\n        y = temp;\n      }\n      var t1 = NaN;\n      if (!(x === x1 && y === y1)) {\n        switch (point) {\n          case 0:\n            point = 1;\n            if (_this._reversed) {\n              output += $path.lineTo({\n                x: y,\n                y: x\n              });\n            } else {\n              output += $path.lineTo({\n                x: x,\n                y: y\n              });\n            }\n            break;\n          case 1:\n            point = 2;\n            break;\n          case 2:\n            point = 3;\n            output += _this._curve(x0, x1, y0, y1, slope2(x0, x1, y0, y1, t1 = slope3(x0, x1, y0, y1, x, y)), t1);\n            break;\n          default:\n            output += _this._curve(x0, x1, y0, y1, t0, t1 = slope3(x0, x1, y0, y1, x, y));\n            break;\n        }\n        x0 = x1;\n        x1 = x;\n        y0 = y1;\n        y1 = y;\n        t0 = t1;\n      }\n    });\n    switch (point) {\n      case 2:\n        if (this._reversed) {\n          output += $path.lineTo({\n            x: y1,\n            y: x1\n          });\n        } else {\n          output += $path.lineTo({\n            x: x1,\n            y: y1\n          });\n        }\n        break;\n      case 3:\n        output += this._curve(x0, x1, y0, y1, t0, slope2(x0, x1, y0, y1, t0));\n        break;\n    }\n    if (this._closed) {\n      output += $path.closePath();\n    }\n    return output;\n  };\n  return Monotone;\n}();\nexport { Monotone };\n// TODO move this someplace else\nfunction sign(x) {\n  return x < 0 ? -1 : 1;\n}\nfunction slope2(x0, x1, y0, y1, t) {\n  var h = x1 - x0;\n  return h ? (3 * (y1 - y0) / h - t) / 2 : t;\n}\nfunction slope3(x0, x1, y0, y1, x2, y2) {\n  var h0 = x1 - x0;\n  var h1 = x2 - x1;\n  var s0 = (y1 - y0) / (h0 || h1 < 0 && -0);\n  var s1 = (y2 - y1) / (h1 || h0 < 0 && -0);\n  var p = (s0 * h1 + s1 * h0) / (h0 + h1);\n  return (sign(s0) + sign(s1)) * Math.min(Math.abs(s0), Math.abs(s1), 0.5 * Math.abs(p)) || 0;\n}\nvar MonotoneX = /** @class */function (_super) {\n  __extends(MonotoneX, _super);\n  function MonotoneX(info) {\n    return _super.call(this, false, info) || this;\n  }\n  return MonotoneX;\n}(Monotone);\nexport { MonotoneX };\nvar MonotoneY = /** @class */function (_super) {\n  __extends(MonotoneY, _super);\n  function MonotoneY(info) {\n    return _super.call(this, true, info) || this;\n  }\n  return MonotoneY;\n}(Monotone);\nexport { MonotoneY };\n/**\r\n * @ignore Exclude from docs\r\n * @todo Description\r\n */\nvar Basis = /** @class */function () {\n  /**\r\n   * Constructor.\r\n   *\r\n   * @param info  [description]\r\n   */\n  function Basis(info) {\n    this._closed = info.closed;\n  }\n  /**\r\n   * [smooth description]\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @todo Description\r\n   * @param points  [description]\r\n   * @return [description]\r\n   */\n  Basis.prototype.smooth = function (points) {\n    var _this = this;\n    var x0 = NaN;\n    var x1 = NaN;\n    var x2 = NaN;\n    var x3 = NaN;\n    var x4 = NaN;\n    var y0 = NaN;\n    var y1 = NaN;\n    var y2 = NaN;\n    var y3 = NaN;\n    var y4 = NaN;\n    var point = 0;\n    var output = \"\";\n    var pushCurve = function (x, y) {\n      output += $path.cubicCurveTo({\n        x: (x0 + 4 * x1 + x) / 6,\n        y: (y0 + 4 * y1 + y) / 6\n      }, {\n        x: (2 * x0 + x1) / 3,\n        y: (2 * y0 + y1) / 3\n      }, {\n        x: (x0 + 2 * x1) / 3,\n        y: (y0 + 2 * y1) / 3\n      });\n    };\n    var pushPoint = function (_a) {\n      var x = _a.x,\n        y = _a.y;\n      switch (point) {\n        case 0:\n          point = 1;\n          if (_this._closed) {\n            x2 = x;\n            y2 = y;\n          } else {\n            output += $path.lineTo({\n              x: x,\n              y: y\n            });\n          }\n          break;\n        case 1:\n          point = 2;\n          if (_this._closed) {\n            x3 = x;\n            y3 = y;\n          }\n          break;\n        case 2:\n          point = 3;\n          if (_this._closed) {\n            x4 = x;\n            y4 = y;\n            output += $path.moveTo({\n              x: (x0 + 4 * x1 + x) / 6,\n              y: (y0 + 4 * y1 + y) / 6\n            });\n            break;\n          } else {\n            output += $path.lineTo({\n              x: (5 * x0 + x1) / 6,\n              y: (5 * y0 + y1) / 6\n            });\n            // fall-through\n          }\n        default:\n          pushCurve(x, y);\n          break;\n      }\n      x0 = x1;\n      x1 = x;\n      y0 = y1;\n      y1 = y;\n    };\n    $array.each(points, pushPoint);\n    if (this._closed) {\n      switch (point) {\n        case 1:\n          output += $path.moveTo({\n            x: x2,\n            y: y2\n          });\n          output += $path.closePath();\n          break;\n        case 2:\n          output += $path.moveTo({\n            x: (x2 + 2 * x3) / 3,\n            y: (y2 + 2 * y3) / 3\n          });\n          output += $path.lineTo({\n            x: (x3 + 2 * x2) / 3,\n            y: (y3 + 2 * y2) / 3\n          });\n          output += $path.closePath();\n          break;\n        case 3:\n          pushPoint({\n            x: x2,\n            y: y2\n          });\n          pushPoint({\n            x: x3,\n            y: y3\n          });\n          pushPoint({\n            x: x4,\n            y: y4\n          });\n          break;\n      }\n    } else {\n      switch (point) {\n        case 3:\n          pushCurve(x1, y1);\n        // fall-through\n        case 2:\n          output += $path.lineTo({\n            x: x1,\n            y: y1\n          });\n          break;\n      }\n      output += $path.closePath();\n    }\n    return output;\n  };\n  return Basis;\n}();\nexport { Basis };","map":{"version":3,"names":["registry","$path","$array","$utils","$math","Tension","tensionX","tensionY","_tensionX","_tensionY","prototype","smooth","points","i","length","p0","p1","Math","abs","x","y","splice","polyline","first","last","closed","round","path","len","p2","p3","controlPointA","getCubicControlPointA","controlPointB","getCubicControlPointB","cubicCurveTo","wavedLine","point1","point2","waveLength","waveHeight","tension","adjustWaveLength","x1","y1","x2","y2","distance","getDistance","d","getCache","stringify","angle","atan2","cos","sin","waveLengthX","waveLengthY","lineTo","halfWaveCount","sign_1","push","setCache","Monotone","reversed","info","_reversed","_closed","_curve","x0","y0","t0","t1","dx","_this","NaN","point","output","each","_a","temp","slope2","slope3","closePath","sign","t","h","h0","h1","s0","s1","p","min","MonotoneX","_super","__extends","call","MonotoneY","Basis","x3","x4","y3","y4","pushCurve","pushPoint","moveTo"],"sources":["../../../../../src/.internal/core/rendering/Smoothing.ts"],"sourcesContent":["/**\n * ============================================================================\n * IMPORTS\n * ============================================================================\n * @hidden\n */\nimport { registry } from \"../Registry\";\nimport * as $path from \"./Path\";\nimport * as $array from \"../utils/Array\";\nimport * as $utils from \"../utils/Utils\";\nimport * as $math from \"../utils/Math\";\nimport { IPoint } from \"../defs/IPoint\";\n\n\n/**\n * ============================================================================\n * PATH FUNCTIONS\n * ============================================================================\n * @hidden\n */\n\n/**\n * @ignore Exclude from docs\n * @todo Description\n */\nexport interface ISmoothing {\n\tsmooth(points: Array<IPoint>): string;\n}\n\n/**\n * @ignore Exclude from docs\n * @todo Description\n */\nexport class Tension implements ISmoothing {\n\n\t/**\n\t * [_tensionX description]\n\t *\n\t * @todo Description\n\t */\n\tprivate _tensionX: number;\n\n\t/**\n\t * [_tensionY description]\n\t *\n\t * @todo Description\n\t */\n\tprivate _tensionY: number;\n\n\t/**\n\t * Constructor.\n\t *\n\t * @param tensionX [description]\n\t * @param tensionY [description]\n\t */\n\tconstructor(tensionX: number, tensionY: number) {\n\t\tthis._tensionX = tensionX;\n\t\tthis._tensionY = tensionY;\n\t}\n\n\t/**\n\t * [smooth description]\n\t *\n\t * @ignore Exclude from docs\n\t * @todo Description\n\t * @param points  [description]\n\t * @return [description]\n\t */\n\tpublic smooth(points: Array<IPoint>): string {\n\n\t\tfor (let i = points.length - 1; i > 0; i--) {\n\t\t\tlet p0 = points[i];\n\t\t\tlet p1 = points[i - 1];\n\n\t\t\tif (Math.abs(p0.x - p1.x) < 0.1 && Math.abs(p0.y - p1.y) < 0.1) {\n\t\t\t\tpoints.splice(i - 1, 1);\n\t\t\t}\n\t\t}\n\n\n\t\tlet tensionX = this._tensionX;\n\t\tlet tensionY = this._tensionY;\n\n\t\tif (points.length < 3 || (tensionX >= 1 && tensionY >= 1)) {\n\t\t\treturn $path.polyline(points);\n\t\t}\n\n\t\tlet first: IPoint = points[0];\n\t\tlet last: IPoint = points[points.length - 1];\n\n\t\tlet closed: boolean = false;\n\n\t\tif ($math.round(first.x, 3) == $math.round(last.x) && $math.round(first.y) == $math.round(last.y)) {\n\t\t\tclosed = true;\n\t\t}\n\n\t\t// Can't moveTo here, as it wont be possible to have fill then.\n\t\tlet path: string = \"\";\n\n\t\tfor (let i = 0, len = points.length - 1; i < len; i++) {\n\t\t\tlet p0: IPoint = points[i - 1];\n\n\t\t\tlet p1: IPoint = points[i];\n\n\t\t\tlet p2: IPoint = points[i + 1];\n\n\t\t\tlet p3: IPoint = points[i + 2];\n\n\t\t\tif (i === 0) {\n\t\t\t\tif (closed) {\n\t\t\t\t\tp0 = points[points.length - 2];\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tp0 = points[i];\n\t\t\t\t}\n\t\t\t} else if (i == points.length - 2) {\n\t\t\t\tif (closed) {\n\t\t\t\t\tp3 = points[1];\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tp3 = points[i + 1];\n\t\t\t\t}\n\t\t\t}\n\n\n\t\t\tlet controlPointA: IPoint = $math.getCubicControlPointA(p0, p1, p2, p3, tensionX, tensionY);\n\t\t\tlet controlPointB: IPoint = $math.getCubicControlPointB(p0, p1, p2, p3, tensionX, tensionY);\n\n\t\t\tpath += $path.cubicCurveTo(p2, controlPointA, controlPointB);\n\t\t}\n\n\t\treturn path;\n\t}\n}\n\n\n/**\n * Returns a waved line SVG path between two points.\n *\n * @ignore Exclude from docs\n * @param point1            Starting point\n * @param point2            Ending point\n * @param waveLength        Wave length\n * @param waveHeight        Wave height\n * @param adjustWaveLength  Adjust wave length based on the actual line length\n * @return SVG path\n */\nexport function wavedLine(point1: IPoint, point2: IPoint, waveLength: number, waveHeight: number, tension: number, adjustWaveLength?: boolean): string {\n\n\tlet x1: number = point1.x;\n\tlet y1: number = point1.y;\n\n\tlet x2: number = point2.x;\n\tlet y2: number = point2.y;\n\n\tlet distance: number = $math.getDistance(point1, point2);\n\n\tif (adjustWaveLength) {\n\t\twaveLength = distance / Math.round(distance / waveLength);\n\t}\n\n\tlet d: string = registry.getCache($utils.stringify([\"wavedLine\", point1.x, point2.x, point1.y, point2.y, waveLength, waveHeight]));\n\tif (!d) {\n\t\tif (distance > 0) {\n\t\t\tlet angle: number = Math.atan2(y2 - y1, x2 - x1);\n\n\t\t\tlet cos: number = Math.cos(angle);\n\t\t\tlet sin: number = Math.sin(angle);\n\n\t\t\tlet waveLengthX: number = waveLength * cos;\n\t\t\tlet waveLengthY: number = waveLength * sin;\n\n\t\t\tif (waveLength <= 1 || waveHeight <= 1) {\n\t\t\t\td = $path.lineTo(point2);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tlet halfWaveCount: number = Math.round(2 * distance / waveLength);\n\n\t\t\t\tlet points: IPoint[] = [];\n\t\t\t\tlet sign: number = 1;\n\n\t\t\t\tif (x2 < x1) {\n\t\t\t\t\tsign *= -1;\n\t\t\t\t}\n\n\t\t\t\tif (y2 < y1) {\n\t\t\t\t\tsign *= -1;\n\t\t\t\t}\n\n\t\t\t\tfor (let i: number = 0; i <= halfWaveCount; i++) {\n\t\t\t\t\tsign *= -1;\n\t\t\t\t\tlet x: number = x1 + i * waveLengthX / 2 + sign * waveHeight / 2 * sin;\n\t\t\t\t\tlet y: number = y1 + i * waveLengthY / 2 - sign * waveHeight / 2 * cos;\n\t\t\t\t\tpoints.push({ x: x, y: y });\n\t\t\t\t}\n\n\t\t\t\td = new Tension(tension, tension).smooth(points);\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\td = \"\";\n\t\t}\n\n\t\tregistry.setCache($utils.stringify([\"wavedLine\", point1.x, point2.x, point1.y, point2.y, waveLength, waveHeight]), d);\n\t}\n\n\treturn d;\n}\n\n\nexport class Monotone implements ISmoothing {\n\tprivate _reversed: boolean;\n\tprivate _closed: boolean;\n\n\tconstructor(reversed: boolean, info: { closed: boolean }) {\n\t\tthis._reversed = reversed;\n\t\tthis._closed = info.closed;\n\t}\n\n\t// According to https://en.wikipedia.org/wiki/Cubic_Hermite_spline#Representations\n\t// \"you can express cubic Hermite interpolation in terms of cubic BÃ©zier curves\n\t// with respect to the four values p0, p0 + m0 / 3, p1 - m1 / 3, p1\".\n\tprivate _curve(x0: number, x1: number, y0: number, y1: number, t0: number, t1: number): string {\n\t\tconst dx = (x1 - x0) / 3;\n\n\t\tif (this._reversed) {\n\t\t\treturn $path.cubicCurveTo(\n\t\t\t\t{ x: y1, y: x1 },\n\t\t\t\t{ x: y0 + dx * t0, y: x0 + dx },\n\t\t\t\t{ x: y1 - dx * t1, y: x1 - dx }\n\t\t\t);\n\n\t\t} else {\n\t\t\treturn $path.cubicCurveTo(\n\t\t\t\t{ x: x1, y: y1 },\n\t\t\t\t{ x: x0 + dx, y: y0 + dx * t0 },\n\t\t\t\t{ x: x1 - dx, y: y1 - dx * t1 }\n\t\t\t);\n\t\t}\n\t}\n\n\tpublic smooth(points: Array<IPoint>): string {\n\t\tlet x0: number = NaN;\n\t\tlet x1: number = NaN;\n\t\tlet y0: number = NaN;\n\t\tlet y1: number = NaN;\n\t\tlet t0: number = NaN;\n\t\tlet point: number = 0;\n\n\t\tlet output = \"\";\n\n\t\t$array.each(points, ({ x, y }) => {\n\t\t\tif (this._reversed) {\n\t\t\t\tlet temp = x;\n\t\t\t\tx = y;\n\t\t\t\ty = temp;\n\t\t\t}\n\n\t\t\tlet t1 = NaN;\n\n\t\t\tif (!(x === x1 && y === y1)) {\n\t\t\t\tswitch (point) {\n\t\t\t\tcase 0:\n\t\t\t\t\tpoint = 1;\n\n\t\t\t\t\tif (this._reversed) {\n\t\t\t\t\t\toutput += $path.lineTo({ x: y, y: x });\n\n\t\t\t\t\t} else {\n\t\t\t\t\t\toutput += $path.lineTo({ x, y });\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 1:\n\t\t\t\t\tpoint = 2;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 2:\n\t\t\t\t\tpoint = 3;\n\t\t\t\t\toutput += this._curve(x0, x1, y0, y1, slope2(x0, x1, y0, y1, t1 = slope3(x0, x1, y0, y1, x, y)), t1);\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\toutput += this._curve(x0, x1, y0, y1, t0, t1 = slope3(x0, x1, y0, y1, x, y));\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tx0 = x1;\n\t\t\t\tx1 = x;\n\t\t\t\ty0 = y1;\n\t\t\t\ty1 = y;\n\t\t\t\tt0 = t1;\n\t\t\t}\n\t\t});\n\n\t\tswitch (point) {\n\t\tcase 2:\n\t\t\tif (this._reversed) {\n\t\t\t\toutput += $path.lineTo({ x: y1, y: x1 });\n\n\t\t\t} else {\n\t\t\t\toutput += $path.lineTo({ x: x1, y: y1 });\n\t\t\t}\n\t\t\tbreak;\n\t\tcase 3:\n\t\t\toutput += this._curve(x0, x1, y0, y1, t0, slope2(x0, x1, y0, y1, t0));\n\t\t\tbreak;\n\t\t}\n\n\t\tif (this._closed) {\n\t\t\toutput += $path.closePath();\n\t\t}\n\n\t\treturn output;\n\t}\n}\n\n\n// TODO move this someplace else\nfunction sign(x: number): -1 | 1 {\n\treturn x < 0 ? -1 : 1;\n}\n\n\nfunction slope2(x0: number, x1: number, y0: number, y1: number, t: number): number {\n\tconst h = x1 - x0;\n\treturn h ? (3 * (y1 - y0) / h - t) / 2 : t;\n}\n\n\nfunction slope3(x0: number, x1: number, y0: number, y1: number, x2: number, y2: number): number {\n\tconst h0 = x1 - x0;\n\tconst h1 = x2 - x1;\n\tconst s0 = (y1 - y0) / (h0 || h1 < 0 && -0);\n\tconst s1 = (y2 - y1) / (h1 || h0 < 0 && -0);\n\tconst p = (s0 * h1 + s1 * h0) / (h0 + h1);\n\treturn (sign(s0) + sign(s1)) * Math.min(Math.abs(s0), Math.abs(s1), 0.5 * Math.abs(p)) || 0;\n}\n\n\nexport class MonotoneX extends Monotone {\n\tconstructor(info: { closed: boolean }) {\n\t\tsuper(false, info);\n\t}\n}\n\nexport class MonotoneY extends Monotone {\n\tconstructor(info: { closed: boolean }) {\n\t\tsuper(true, info);\n\t}\n}\n\n\n/**\n * @ignore Exclude from docs\n * @todo Description\n */\nexport class Basis implements ISmoothing {\n\n\t/**\n\t * [_closed description]\n\t *\n\t * @ignore Exclude from docs\n\t * @todo Description\n\t */\n\tprivate _closed: boolean;\n\n\t/**\n\t * Constructor.\n\t *\n\t * @param info  [description]\n\t */\n\tconstructor(info: { closed: boolean }) {\n\t\tthis._closed = info.closed;\n\t}\n\n\t/**\n\t * [smooth description]\n\t *\n\t * @ignore Exclude from docs\n\t * @todo Description\n\t * @param points  [description]\n\t * @return [description]\n\t */\n\tpublic smooth(points: Array<IPoint>): string {\n\t\tlet x0: number = NaN;\n\t\tlet x1: number = NaN;\n\t\tlet x2: number = NaN;\n\t\tlet x3: number = NaN;\n\t\tlet x4: number = NaN;\n\t\tlet y0: number = NaN;\n\t\tlet y1: number = NaN;\n\t\tlet y2: number = NaN;\n\t\tlet y3: number = NaN;\n\t\tlet y4: number = NaN;\n\t\tlet point: number = 0;\n\n\t\tlet output = \"\";\n\n\t\tconst pushCurve = (x: number, y: number): void => {\n\t\t\toutput += $path.cubicCurveTo(\n\t\t\t\t{\n\t\t\t\t\tx: (x0 + 4 * x1 + x) / 6\n\t\t\t\t\t, y: (y0 + 4 * y1 + y) / 6\n\t\t\t\t},\n\n\t\t\t\t{\n\t\t\t\t\tx: (2 * x0 + x1) / 3\n\t\t\t\t\t, y: (2 * y0 + y1) / 3\n\t\t\t\t},\n\n\t\t\t\t{\n\t\t\t\t\tx: (x0 + 2 * x1) / 3\n\t\t\t\t\t, y: (y0 + 2 * y1) / 3\n\t\t\t\t}\n\t\t\t);\n\t\t};\n\n\t\tconst pushPoint = ({ x, y }: IPoint): void => {\n\t\t\tswitch (point) {\n\t\t\t\tcase 0:\n\t\t\t\t\tpoint = 1;\n\n\t\t\t\t\tif (this._closed) {\n\t\t\t\t\t\tx2 = x;\n\t\t\t\t\t\ty2 = y;\n\n\t\t\t\t\t} else {\n\t\t\t\t\t\toutput += $path.lineTo({ x, y });\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 1:\n\t\t\t\t\tpoint = 2;\n\n\t\t\t\t\tif (this._closed) {\n\t\t\t\t\t\tx3 = x;\n\t\t\t\t\t\ty3 = y;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 2:\n\t\t\t\t\tpoint = 3;\n\n\t\t\t\t\tif (this._closed) {\n\t\t\t\t\t\tx4 = x;\n\t\t\t\t\t\ty4 = y;\n\t\t\t\t\t\toutput += $path.moveTo({ x: (x0 + 4 * x1 + x) / 6, y: (y0 + 4 * y1 + y) / 6 });\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t} else {\n\t\t\t\t\t\toutput += $path.lineTo({ x: (5 * x0 + x1) / 6, y: (5 * y0 + y1) / 6 });\n\t\t\t\t\t\t// fall-through\n\t\t\t\t\t}\n\n\t\t\t\tdefault:\n\t\t\t\t\tpushCurve(x, y);\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tx0 = x1;\n\t\t\tx1 = x;\n\t\t\ty0 = y1;\n\t\t\ty1 = y;\n\t\t};\n\n\t\t$array.each(points, pushPoint);\n\n\t\tif (this._closed) {\n\t\t\tswitch (point) {\n\t\t\t\tcase 1:\n\t\t\t\t\toutput += $path.moveTo({ x: x2, y: y2 });\n\t\t\t\t\toutput += $path.closePath();\n\t\t\t\t\tbreak;\n\t\t\t\tcase 2:\n\t\t\t\t\toutput += $path.moveTo({ x: (x2 + 2 * x3) / 3, y: (y2 + 2 * y3) / 3 });\n\t\t\t\t\toutput += $path.lineTo({ x: (x3 + 2 * x2) / 3, y: (y3 + 2 * y2) / 3 });\n\t\t\t\t\toutput += $path.closePath();\n\t\t\t\t\tbreak;\n\t\t\t\tcase 3:\n\t\t\t\t\tpushPoint({ x: x2, y: y2 });\n\t\t\t\t\tpushPoint({ x: x3, y: y3 });\n\t\t\t\t\tpushPoint({ x: x4, y: y4 });\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t} else {\n\t\t\tswitch (point) {\n\t\t\t\tcase 3:\n\t\t\t\t\tpushCurve(x1, y1);\n\t\t\t\t// fall-through\n\t\t\t\tcase 2:\n\t\t\t\t\toutput += $path.lineTo({ x: x1, y: y1 });\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\toutput += $path.closePath();\n\t\t}\n\n\t\treturn output;\n\t}\n\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}