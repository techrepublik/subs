{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n/**\r\n * This module contains PatternSet object definition\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\nimport { BaseObject } from \"../Base\";\nimport { Color } from \"./Color\";\nimport { InterfaceColorSet } from \"./InterfaceColorSet\";\nimport { LinePattern } from \"../rendering/fills/LinePattern\";\nimport { RectPattern } from \"../rendering/fills/RectPattern\";\nimport { CirclePattern } from \"../rendering/fills/CirclePattern\";\nimport { registry } from \"../Registry\";\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n/**\r\n * Defines an interable list of distinctive patterns that can be used in\r\n * conjunction to colors to generate various fill patterns.\r\n *\r\n * @important\r\n * @since 4.7.5\r\n * @see {@link https://www.amcharts.com/docs/v4/concepts/colors/} for color-related info\r\n */\nvar PatternSet = /** @class */function (_super) {\n  __extends(PatternSet, _super);\n  /**\r\n   * Constructor\r\n   */\n  function PatternSet() {\n    var _this = _super.call(this) || this;\n    /**\r\n     * Holds the list of the colors in this set. (preset or auto-generated)\r\n     */\n    _this._list = [];\n    /**\r\n     * Current step.\r\n     */\n    _this._currentStep = 0;\n    /**\r\n     * If set to non-zero value, the PatternSet will start iterating patterns from\r\n     * that particular index, not the first pattern in the list.\r\n     */\n    _this._startIndex = 0;\n    /**\r\n     * Current pass in cycle. Once all patterns in the list are iterated,\r\n     * iteration restarts from beginning and currentPass is incremented.\r\n     */\n    _this._currentPass = 0;\n    /**\r\n     * A base color. If there are no colors pre-set in the color list, ColorSet\r\n     * will use this color as a base when generating new ones, applying\r\n     * `stepOptions` and `passOptions` to this base color.\r\n     */\n    _this.baseColor = new Color({\n      r: 103,\n      g: 183,\n      b: 220\n    });\n    _this.className = \"PatternSet\";\n    // Set base color to be used for pattern elements\n    var interfaceColors = new InterfaceColorSet();\n    // Set default patterns\n    _this.list = [_this.getLinePattern(1000, 45, 1, 6), _this.getRectPattern(10, 0, 4), _this.getLinePattern(1000, -45, 1, 6), _this.getCirclePattern(11, 2, true), _this.getLinePattern(6, 90, 1), _this.getRectPattern(12, 45, 6, true), _this.getLinePattern(6, 0, 1), _this.getRectPattern(7, 0, 4), _this.getLinePattern(1000, 45, 2, 3, \"4,2\"), _this.getCirclePattern(9, 3, false), _this.getLinePattern(1000, -45, 2, 3, \"4,2\"), _this.getRectPattern(10, 45, Math.sqrt(50)), _this.getLinePattern(1000, -45, 2, 1), _this.getRectPattern(10, 0, 9), _this.getLinePattern(1000, 45, 2, 1), _this.getLinePattern(1000, 0, 3, 1), _this.getRectPattern(10, 45, 10), _this.getLinePattern(1000, 90, 3, 1)];\n    _this.baseColor = interfaceColors.getFor(\"stroke\");\n    _this.applyTheme();\n    return _this;\n  }\n  PatternSet.prototype.getLinePattern = function (size, rotation, thickness, gap, strokeDashArray) {\n    var pattern = new LinePattern();\n    pattern.width = size;\n    pattern.height = size;\n    pattern.stroke = this.baseColor;\n    pattern.gap = gap;\n    pattern.strokeDasharray = strokeDashArray;\n    pattern.strokeWidth = thickness;\n    pattern.rotation = rotation;\n    return pattern;\n  };\n  PatternSet.prototype.getRectPattern = function (size, rotation, thickness, outline) {\n    var pattern = new RectPattern();\n    pattern.width = size;\n    pattern.height = size;\n    pattern.rectWidth = thickness;\n    pattern.rectHeight = thickness;\n    if (outline) {\n      pattern.stroke = this.baseColor;\n      pattern.strokeWidth = 1;\n      pattern.fillOpacity = 0;\n    } else {\n      pattern.fill = this.baseColor;\n      pattern.strokeWidth = 0;\n    }\n    if (rotation != 0) {\n      pattern.shapeRendering = \"auto\";\n    }\n    pattern.rotation = rotation;\n    return pattern;\n  };\n  PatternSet.prototype.getCirclePattern = function (size, radius, outline) {\n    var pattern = new CirclePattern();\n    pattern.width = size;\n    pattern.height = size;\n    pattern.shapeRendering = \"auto\";\n    pattern.radius = radius;\n    if (outline) {\n      pattern.stroke = this.baseColor;\n      pattern.strokeWidth = 1;\n      pattern.fillOpacity = 0;\n    } else {\n      pattern.fill = this.baseColor;\n      pattern.strokeWidth = 0;\n    }\n    return pattern;\n  };\n  Object.defineProperty(PatternSet.prototype, \"list\", {\n    /**\r\n     * @return Pattern list\r\n     */\n    get: function () {\n      return this._list;\n    },\n    /**\r\n     * List of pre-defined patterns to be used in set.\r\n     *\r\n     * @param value Pattern list\r\n     */\n    set: function (value) {\n      this._list = value;\n      this.reset();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Returns the next pattern in list.\r\n   *\r\n   * @return Pattern\r\n   */\n  PatternSet.prototype.next = function () {\n    var pattern = this.getIndex(this.currentStep);\n    this._currentStep++;\n    return pattern;\n  };\n  /**\r\n   * Returns a color at specific index in the list.\r\n   *\r\n   * @param  i  Index\r\n   * @return Pattern\r\n   */\n  PatternSet.prototype.getIndex = function (i) {\n    var pattern;\n    while (this.list.length <= i) {\n      this.generatePatterns();\n    }\n    pattern = this.list[i];\n    return pattern.clone();\n  };\n  /**\r\n   * Generates a new set of patterns.\r\n   */\n  PatternSet.prototype.generatePatterns = function () {\n    var count = this.list.length / (this._currentPass + 1);\n    this._currentPass++;\n    for (var i = 0; i < count; i++) {\n      this.list.push(this.list[i].clone());\n    }\n  };\n  /**\r\n   * Resets internal iterator.\r\n   *\r\n   * Calling `next()` after this will return the very first color in the color\r\n   * list, even if it was already returned before.\r\n   */\n  PatternSet.prototype.reset = function () {\n    this._currentStep = this._startIndex;\n  };\n  Object.defineProperty(PatternSet.prototype, \"currentStep\", {\n    /**\r\n     * @return Step\r\n     */\n    get: function () {\n      return this._currentStep;\n    },\n    /**\r\n     * Sets current color iteration. You can use this property to skip some\r\n     * colors from iteration. E.g. setting it to `10` will skip first ten\r\n     * colors.\r\n     *\r\n     * Please note that the number is zero-based.\r\n     *\r\n     * @param value  Step\r\n     */\n    set: function (value) {\n      this._currentStep = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PatternSet.prototype, \"startIndex\", {\n    /**\r\n     * @return Index\r\n     */\n    get: function () {\n      return this._startIndex;\n    },\n    /**\r\n     * If set to non-zero value, the ColorSet will start iterating colors from\r\n     * that particular index, not the first color in the list.\r\n     *\r\n     * @default 0\r\n     * @param  value  Index\r\n     */\n    set: function (value) {\n      this._startIndex = value;\n      this.reset();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Processes JSON-based config before it is applied to the object.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param config  Config\r\n   */\n  PatternSet.prototype.processConfig = function (config) {\n    // if (config) {\n    // \t// Set up axis ranges\n    // \tif ($type.hasValue(config.list) && $type.isArray(config.list)) {\n    // \t\tfor (let i = 0, len = config.list.length; i < len; i++) {\n    // \t\t\tif (!(config.list[i] instanceof Color)) {\n    // \t\t\t\tconfig.list[i] = color(config.list[i]);\n    // \t\t\t}\n    // \t\t}\n    // \t}\n    // }\n    _super.prototype.processConfig.call(this, config);\n  };\n  return PatternSet;\n}(BaseObject);\nexport { PatternSet };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\nregistry.registeredClasses[\"PatternSet\"] = PatternSet;","map":{"version":3,"names":["BaseObject","Color","InterfaceColorSet","LinePattern","RectPattern","CirclePattern","registry","PatternSet","_super","__extends","_this","call","_list","_currentStep","_startIndex","_currentPass","baseColor","r","g","b","className","interfaceColors","list","getLinePattern","getRectPattern","getCirclePattern","Math","sqrt","getFor","applyTheme","prototype","size","rotation","thickness","gap","strokeDashArray","pattern","width","height","stroke","strokeDasharray","strokeWidth","outline","rectWidth","rectHeight","fillOpacity","fill","shapeRendering","radius","Object","defineProperty","get","set","value","reset","next","getIndex","currentStep","i","length","generatePatterns","clone","count","push","processConfig","config","registeredClasses"],"sources":["../../../../../src/.internal/core/utils/PatternSet.ts"],"sourcesContent":["/**\r\n * This module contains PatternSet object definition\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { BaseObject } from \"../Base\";\r\nimport { Color } from \"./Color\";\r\nimport { InterfaceColorSet } from \"./InterfaceColorSet\";\r\nimport { Pattern } from \"../rendering/fills/Pattern\";\r\nimport { LinePattern } from \"../rendering/fills/LinePattern\";\r\nimport { RectPattern } from \"../rendering/fills/RectPattern\";\r\nimport { CirclePattern } from \"../rendering/fills/CirclePattern\";\r\nimport { registry } from \"../Registry\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines an interable list of distinctive patterns that can be used in\r\n * conjunction to colors to generate various fill patterns.\r\n *\r\n * @important\r\n * @since 4.7.5\r\n * @see {@link https://www.amcharts.com/docs/v4/concepts/colors/} for color-related info\r\n */\r\nexport class PatternSet extends BaseObject {\r\n\r\n\t/**\r\n\t * Holds the list of the colors in this set. (preset or auto-generated)\r\n\t */\r\n\tprotected _list: Pattern[] = [];\r\n\r\n\t/**\r\n\t * Current step.\r\n\t */\r\n\tprotected _currentStep: number = 0;\r\n\r\n\t/**\r\n\t * If set to non-zero value, the PatternSet will start iterating patterns from\r\n\t * that particular index, not the first pattern in the list.\r\n\t */\r\n\tprotected _startIndex: number = 0;\r\n\r\n\t/**\r\n\t * Current pass in cycle. Once all patterns in the list are iterated,\r\n\t * iteration restarts from beginning and currentPass is incremented.\r\n\t */\r\n\tprotected _currentPass: number = 0;\r\n\r\n\t/**\r\n\t * A base color. If there are no colors pre-set in the color list, ColorSet\r\n\t * will use this color as a base when generating new ones, applying\r\n\t * `stepOptions` and `passOptions` to this base color.\r\n\t */\r\n\tpublic baseColor: Color = new Color({\r\n\t\tr: 103,\r\n\t\tg: 183,\r\n\t\tb: 220\r\n\t});\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"PatternSet\";\r\n\r\n\t\t// Set base color to be used for pattern elements\r\n\t\tconst interfaceColors = new InterfaceColorSet();\r\n\r\n\t\t// Set default patterns\r\n\t\tthis.list = [\r\n\t\t\tthis.getLinePattern(1000, 45, 1, 6),\r\n\t\t\tthis.getRectPattern(10, 0, 4),\r\n\t\t\tthis.getLinePattern(1000, -45, 1, 6),\r\n\t\t\tthis.getCirclePattern(11, 2, true),\r\n\t\t\tthis.getLinePattern(6, 90, 1),\r\n\t\t\tthis.getRectPattern(12, 45, 6, true),\r\n\t\t\tthis.getLinePattern(6, 0, 1),\r\n\t\t\tthis.getRectPattern(7, 0, 4),\r\n\t\t\tthis.getLinePattern(1000, 45, 2, 3, \"4,2\"),\r\n\t\t\tthis.getCirclePattern(9, 3, false),\r\n\t\t\tthis.getLinePattern(1000, -45, 2, 3, \"4,2\"),\r\n\t\t\tthis.getRectPattern(10, 45, Math.sqrt(50)),\r\n\t\t\tthis.getLinePattern(1000, -45, 2, 1),\r\n\t\t\tthis.getRectPattern(10, 0, 9),\r\n\t\t\tthis.getLinePattern(1000, 45, 2, 1),\r\n\t\t\tthis.getLinePattern(1000, 0, 3, 1),\r\n\t\t\tthis.getRectPattern(10, 45, 10),\r\n\t\t\tthis.getLinePattern(1000, 90, 3, 1)\r\n\t\t];\r\n\r\n\t\tthis.baseColor = interfaceColors.getFor(\"stroke\");\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\tpublic getLinePattern(size: number, rotation: number, thickness: number, gap?: number, strokeDashArray?: string): LinePattern {\r\n\t\tlet pattern = new LinePattern();\r\n\t\tpattern.width = size;\r\n\t\tpattern.height = size;\r\n\t\tpattern.stroke = this.baseColor;\r\n\t\tpattern.gap = gap;\r\n\t\tpattern.strokeDasharray = strokeDashArray;\r\n\t\tpattern.strokeWidth = thickness;\r\n\t\tpattern.rotation = rotation;\r\n\t\treturn pattern;\r\n\t}\r\n\r\n\tpublic getRectPattern(size: number, rotation: number, thickness: number, outline?:boolean): RectPattern {\r\n\t\tlet pattern = new RectPattern();\r\n\t\tpattern.width = size;\r\n\t\tpattern.height = size;\r\n\t\tpattern.rectWidth = thickness;\r\n\t\tpattern.rectHeight = thickness;\r\n\r\n\t\tif(outline){\r\n\t\t\tpattern.stroke = this.baseColor;\r\n\t\t\tpattern.strokeWidth = 1;\r\n\t\t\tpattern.fillOpacity = 0;\r\n\t\t}\r\n\t\telse{\r\n\t\t\tpattern.fill = this.baseColor;\r\n\t\t\tpattern.strokeWidth = 0;\r\n\t\t}\r\n\r\n\t\tif(rotation != 0){\r\n\t\t\tpattern.shapeRendering = \"auto\";\r\n\t\t}\r\n\r\n\t\tpattern.rotation = rotation;\r\n\t\treturn pattern;\r\n\t}\r\n\r\n\tpublic getCirclePattern(size: number, radius: number, outline:boolean): CirclePattern {\r\n\t\tlet pattern = new CirclePattern();\r\n\t\tpattern.width = size;\r\n\t\tpattern.height = size;\r\n\t\tpattern.shapeRendering = \"auto\";\r\n\t\tpattern.radius = radius;\r\n\t\tif(outline){\r\n\t\t\tpattern.stroke = this.baseColor;\r\n\t\t\tpattern.strokeWidth = 1;\r\n\t\t\tpattern.fillOpacity = 0;\r\n\t\t}\r\n\t\telse{\r\n\t\t\tpattern.fill = this.baseColor;\r\n\t\t\tpattern.strokeWidth = 0;\r\n\t\t}\r\n\t\treturn pattern;\r\n\t}\r\n\r\n\t/**\r\n\t * List of pre-defined patterns to be used in set.\r\n\t *\r\n\t * @param value Pattern list\r\n\t */\r\n\tpublic set list(value: Pattern[]) {\r\n\t\tthis._list = value;\r\n\t\tthis.reset();\r\n\t}\r\n\r\n\t/**\r\n\t * @return Pattern list\r\n\t */\r\n\tpublic get list(): Pattern[] {\r\n\t\treturn this._list;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the next pattern in list.\r\n\t *\r\n\t * @return Pattern\r\n\t */\r\n\tpublic next(): Pattern {\r\n\t\tconst pattern = this.getIndex(this.currentStep);\r\n\t\tthis._currentStep++;\r\n\t\treturn pattern;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a color at specific index in the list.\r\n\t *\r\n\t * @param  i  Index\r\n\t * @return Pattern\r\n\t */\r\n\tpublic getIndex(i: number): Pattern {\r\n\t\tlet pattern;\r\n\t\twhile (this.list.length <= i) {\r\n\t\t\tthis.generatePatterns();\r\n\t\t}\r\n\t\tpattern = this.list[i];\r\n\t\treturn pattern.clone();\r\n\t}\r\n\r\n\t/**\r\n\t * Generates a new set of patterns.\r\n\t */\r\n\tprivate generatePatterns(): void {\r\n\t\tconst count = this.list.length / (this._currentPass + 1);\r\n\t\tthis._currentPass++;\r\n\t\tfor (let i = 0; i < count; i++) {\r\n\t\t\tthis.list.push(this.list[i].clone());\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Resets internal iterator.\r\n\t *\r\n\t * Calling `next()` after this will return the very first color in the color\r\n\t * list, even if it was already returned before.\r\n\t */\r\n\tpublic reset(): void {\r\n\t\tthis._currentStep = this._startIndex;\r\n\t}\r\n\r\n\t/**\r\n\t * Sets current color iteration. You can use this property to skip some\r\n\t * colors from iteration. E.g. setting it to `10` will skip first ten\r\n\t * colors.\r\n\t *\r\n\t * Please note that the number is zero-based.\r\n\t *\r\n\t * @param value  Step\r\n\t */\r\n\tpublic set currentStep(value: number) {\r\n\t\tthis._currentStep = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @return Step\r\n\t */\r\n\tpublic get currentStep(): number {\r\n\t\treturn this._currentStep;\r\n\t}\r\n\r\n\t/**\r\n\t * If set to non-zero value, the ColorSet will start iterating colors from\r\n\t * that particular index, not the first color in the list.\r\n\t *\r\n\t * @default 0\r\n\t * @param  value  Index\r\n\t */\r\n\tpublic set startIndex(value: number) {\r\n\t\tthis._startIndex = value;\r\n\t\tthis.reset();\r\n\t}\r\n\r\n\t/**\r\n\t * @return Index\r\n\t */\r\n\tpublic get startIndex(): number {\r\n\t\treturn this._startIndex;\r\n\t}\r\n\r\n\t/**\r\n\t * Processes JSON-based config before it is applied to the object.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param config  Config\r\n\t */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\t// if (config) {\r\n\r\n\t\t// \t// Set up axis ranges\r\n\t\t// \tif ($type.hasValue(config.list) && $type.isArray(config.list)) {\r\n\t\t// \t\tfor (let i = 0, len = config.list.length; i < len; i++) {\r\n\t\t// \t\t\tif (!(config.list[i] instanceof Color)) {\r\n\t\t// \t\t\t\tconfig.list[i] = color(config.list[i]);\r\n\t\t// \t\t\t}\r\n\t\t// \t\t}\r\n\t\t// \t}\r\n\t\t// }\r\n\t\tsuper.processConfig(config);\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"PatternSet\"] = PatternSet;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}