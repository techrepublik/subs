{"ast":null,"code":"/**\r\n * Functionality for drawing rectangles.\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\nimport { Sprite } from \"../Sprite\";\nimport { registry } from \"../Registry\";\nimport * as $math from \"../utils/Math\";\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n/**\r\n * Used to draw a rectangle.\r\n *\r\n * @see {@link IRectangleEvents} for a list of available events\r\n * @see {@link IRectangleAdapters} for a list of available Adapters\r\n */\nvar Rectangle = /** @class */function (_super) {\n  __extends(Rectangle, _super);\n  /**\r\n   * Constructor\r\n   * * Creates a `<rect>` element\r\n   * * Creates default state\r\n   */\n  function Rectangle() {\n    var _this = _super.call(this) || this;\n    _this.className = \"Rectangle\";\n    _this.element = _this.paper.add(\"rect\");\n    //this.pixelPerfect = false;\n    _this.applyTheme();\n    return _this;\n  }\n  /**\r\n   * Draws the element.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  Rectangle.prototype.draw = function () {\n    _super.prototype.draw.call(this);\n    var precision = this._positionPrecision;\n    if (this.pixelPerfect) {\n      precision = 0;\n    }\n    var w = $math.round(this.innerWidth, precision);\n    var h = $math.round(this.innerHeight, precision);\n    this.element.attr({\n      \"width\": w,\n      \"height\": h\n    });\n  };\n  /**\r\n   * Measures the element.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  Rectangle.prototype.measureElement = function () {};\n  Object.defineProperty(Rectangle.prototype, \"bbox\", {\n    /**\r\n     * Returns bounding box (square) for this element.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\n    get: function () {\n      if (this.definedBBox) {\n        return this.definedBBox;\n      }\n      if (this.isMeasured) {\n        return {\n          x: 0,\n          y: 0,\n          width: this.innerWidth,\n          height: this.innerHeight\n        };\n      } else {\n        return {\n          x: 0,\n          y: 0,\n          width: 0,\n          height: 0\n        };\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return Rectangle;\n}(Sprite);\nexport { Rectangle };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\nregistry.registeredClasses[\"Rectangle\"] = Rectangle;","map":{"version":3,"names":["Sprite","registry","$math","Rectangle","_super","__extends","_this","call","className","element","paper","add","applyTheme","prototype","draw","precision","_positionPrecision","pixelPerfect","w","round","innerWidth","h","innerHeight","attr","measureElement","Object","defineProperty","get","definedBBox","isMeasured","x","y","width","height","registeredClasses"],"sources":["../../../../../src/.internal/core/elements/Rectangle.ts"],"sourcesContent":["/**\r\n * Functionality for drawing rectangles.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Sprite, ISpriteProperties, ISpriteAdapters, ISpriteEvents } from \"../Sprite\";\r\nimport { registry } from \"../Registry\";\r\nimport * as $math from \"../utils/Math\";\r\nimport { IRectangle } from \"../defs/IRectangle\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[Rectangle]].\r\n */\r\nexport interface IRectangleProperties extends ISpriteProperties { }\r\n\r\n/**\r\n * Defines events for [[Rectangle]].\r\n */\r\nexport interface IRectangleEvents extends ISpriteEvents { }\r\n\r\n/**\r\n * Defines adapters for [[Rectangle]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IRectangleAdapters extends ISpriteAdapters, IRectangleProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Used to draw a rectangle.\r\n *\r\n * @see {@link IRectangleEvents} for a list of available events\r\n * @see {@link IRectangleAdapters} for a list of available Adapters\r\n */\r\nexport class Rectangle extends Sprite {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IRectangleProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IRectangleAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IRectangleEvents;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t * * Creates a `<rect>` element\r\n\t * * Creates default state\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"Rectangle\";\r\n\t\tthis.element = this.paper.add(\"rect\");\r\n\t\t//this.pixelPerfect = false;\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Draws the element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic draw(): void {\r\n\t\tsuper.draw();\r\n\r\n\t\tlet precision: number = this._positionPrecision;\r\n\t\tif (this.pixelPerfect) {\r\n\t\t\tprecision = 0;\r\n\t\t}\r\n\r\n\t\tlet w: number = $math.round(this.innerWidth, precision);\r\n\t\tlet h: number = $math.round(this.innerHeight, precision);\r\n\r\n\t\tthis.element.attr({\r\n\t\t\t\"width\": w,\r\n\t\t\t\"height\": h\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Measures the element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic measureElement(): void {\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns bounding box (square) for this element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic get bbox(): IRectangle {\r\n\t\tif (this.definedBBox) {\r\n\t\t\treturn this.definedBBox;\r\n\t\t}\r\n\r\n\t\tif (this.isMeasured) {\r\n\t\t\treturn {\r\n\t\t\t\tx: 0,\r\n\t\t\t\ty: 0,\r\n\t\t\t\twidth: this.innerWidth,\r\n\t\t\t\theight: this.innerHeight\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn { x: 0, y: 0, width: 0, height: 0 };\r\n\t\t}\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Rectangle\"] = Rectangle;\r\n"],"mappings":"AAAA;;;;AAIA;;;;;;AAMA,SAASA,MAAM,QAA2D,WAAW;AACrF,SAASC,QAAQ,QAAQ,aAAa;AACtC,OAAO,KAAKC,KAAK,MAAM,eAAe;AA6BtC;;;;;;AAOA;;;;;;AAMA,IAAAC,SAAA,0BAAAC,MAAA;EAA+BC,SAAA,CAAAF,SAAA,EAAAC,MAAA;EAiB9B;;;;;EAKA,SAAAD,UAAA;IAAA,IAAAG,KAAA,GACCF,MAAA,CAAAG,IAAA,MAAO;IACPD,KAAI,CAACE,SAAS,GAAG,WAAW;IAC5BF,KAAI,CAACG,OAAO,GAAGH,KAAI,CAACI,KAAK,CAACC,GAAG,CAAC,MAAM,CAAC;IACrC;IACAL,KAAI,CAACM,UAAU,EAAE;;EAClB;EAEA;;;;;EAKOT,SAAA,CAAAU,SAAA,CAAAC,IAAI,GAAX;IACCV,MAAA,CAAAS,SAAA,CAAMC,IAAI,CAAAP,IAAA,MAAE;IAEZ,IAAIQ,SAAS,GAAW,IAAI,CAACC,kBAAkB;IAC/C,IAAI,IAAI,CAACC,YAAY,EAAE;MACtBF,SAAS,GAAG,CAAC;;IAGd,IAAIG,CAAC,GAAWhB,KAAK,CAACiB,KAAK,CAAC,IAAI,CAACC,UAAU,EAAEL,SAAS,CAAC;IACvD,IAAIM,CAAC,GAAWnB,KAAK,CAACiB,KAAK,CAAC,IAAI,CAACG,WAAW,EAAEP,SAAS,CAAC;IAExD,IAAI,CAACN,OAAO,CAACc,IAAI,CAAC;MACjB,OAAO,EAAEL,CAAC;MACV,QAAQ,EAAEG;KACV,CAAC;EACH,CAAC;EAED;;;;;EAKOlB,SAAA,CAAAU,SAAA,CAAAW,cAAc,GAArB,aAEA,CAAC;EAODC,MAAA,CAAAC,cAAA,CAAWvB,SAAA,CAAAU,SAAA,QAAI;IALf;;;;;SAKA,SAAAc,CAAA;MACC,IAAI,IAAI,CAACC,WAAW,EAAE;QACrB,OAAO,IAAI,CAACA,WAAW;;MAGxB,IAAI,IAAI,CAACC,UAAU,EAAE;QACpB,OAAO;UACNC,CAAC,EAAE,CAAC;UACJC,CAAC,EAAE,CAAC;UACJC,KAAK,EAAE,IAAI,CAACZ,UAAU;UACtBa,MAAM,EAAE,IAAI,CAACX;SACb;OACD,MACI;QACJ,OAAO;UAAEQ,CAAC,EAAE,CAAC;UAAEC,CAAC,EAAE,CAAC;UAAEC,KAAK,EAAE,CAAC;UAAEC,MAAM,EAAE;QAAC,CAAE;;IAE5C,CAAC;;;;EAEF,OAAA9B,SAAC;AAAD,CAAC,CApF8BH,MAAM;;AAsFrC;;;;;;AAMAC,QAAQ,CAACiC,iBAAiB,CAAC,WAAW,CAAC,GAAG/B,SAAS","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}