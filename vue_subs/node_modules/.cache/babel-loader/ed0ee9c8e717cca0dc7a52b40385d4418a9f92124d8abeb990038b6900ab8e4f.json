{"ast":null,"code":"import { geoProjectionMutator as projectionMutator } from \"d3-geo\";\nimport { asin, cos, degrees, pi, radians, sign, sin, sqrt } from \"./math.js\";\nimport { solve } from \"./newton.js\";\nexport function hufnagelRaw(a, b, psiMax, ratio) {\n  var k = sqrt(4 * pi / (2 * psiMax + (1 + a - b / 2) * sin(2 * psiMax) + (a + b) / 2 * sin(4 * psiMax) + b / 2 * sin(6 * psiMax))),\n    c = sqrt(ratio * sin(psiMax) * sqrt((1 + a * cos(2 * psiMax) + b * cos(4 * psiMax)) / (1 + a + b))),\n    M = psiMax * mapping(1);\n  function radius(psi) {\n    return sqrt(1 + a * cos(2 * psi) + b * cos(4 * psi));\n  }\n  function mapping(t) {\n    var psi = t * psiMax;\n    return (2 * psi + (1 + a - b / 2) * sin(2 * psi) + (a + b) / 2 * sin(4 * psi) + b / 2 * sin(6 * psi)) / psiMax;\n  }\n  function inversemapping(psi) {\n    return radius(psi) * sin(psi);\n  }\n  var forward = function (lambda, phi) {\n    var psi = psiMax * solve(mapping, M * sin(phi) / psiMax, phi / pi);\n    if (isNaN(psi)) psi = psiMax * sign(phi);\n    var kr = k * radius(psi);\n    return [kr * c * lambda / pi * cos(psi), kr / c * sin(psi)];\n  };\n  forward.invert = function (x, y) {\n    var psi = solve(inversemapping, y * c / k);\n    return [x * pi / (cos(psi) * k * c * radius(psi)), asin(psiMax * mapping(psi / psiMax) / M)];\n  };\n  if (psiMax === 0) {\n    k = sqrt(ratio / pi);\n    forward = function (lambda, phi) {\n      return [lambda * k, sin(phi) / k];\n    };\n    forward.invert = function (x, y) {\n      return [x / k, asin(y * k)];\n    };\n  }\n  return forward;\n}\nexport default function () {\n  var a = 1,\n    b = 0,\n    psiMax = 45 * radians,\n    ratio = 2,\n    mutate = projectionMutator(hufnagelRaw),\n    projection = mutate(a, b, psiMax, ratio);\n  projection.a = function (_) {\n    return arguments.length ? mutate(a = +_, b, psiMax, ratio) : a;\n  };\n  projection.b = function (_) {\n    return arguments.length ? mutate(a, b = +_, psiMax, ratio) : b;\n  };\n  projection.psiMax = function (_) {\n    return arguments.length ? mutate(a, b, psiMax = +_ * radians, ratio) : psiMax * degrees;\n  };\n  projection.ratio = function (_) {\n    return arguments.length ? mutate(a, b, psiMax, ratio = +_) : ratio;\n  };\n  return projection.scale(180.739);\n}","map":{"version":3,"names":["geoProjectionMutator","projectionMutator","asin","cos","degrees","pi","radians","sign","sin","sqrt","solve","hufnagelRaw","a","b","psiMax","ratio","k","c","M","mapping","radius","psi","t","inversemapping","forward","lambda","phi","isNaN","kr","invert","x","y","mutate","projection","_","arguments","length","scale"],"sources":["/Users/admin/Desktop/techrepublik/pro/subs/vue_subs/node_modules/d3-geo-projection/src/hufnagel.js"],"sourcesContent":["import { geoProjectionMutator as projectionMutator } from \"d3-geo\";\nimport { asin, cos, degrees, pi, radians, sign, sin, sqrt } from \"./math.js\";\nimport { solve } from \"./newton.js\";\n\nexport function hufnagelRaw(a, b, psiMax, ratio) {\n  var k = sqrt(\n      (4 * pi) /\n        (2 * psiMax +\n          (1 + a - b / 2) * sin(2 * psiMax) +\n          ((a + b) / 2) * sin(4 * psiMax) +\n          (b / 2) * sin(6 * psiMax))\n    ),\n    c = sqrt(\n      ratio *\n        sin(psiMax) *\n        sqrt((1 + a * cos(2 * psiMax) + b * cos(4 * psiMax)) / (1 + a + b))\n    ),\n    M = psiMax * mapping(1);\n\n  function radius(psi) {\n    return sqrt(1 + a * cos(2 * psi) + b * cos(4 * psi));\n  }\n\n  function mapping(t) {\n    var psi = t * psiMax;\n    return (\n      (2 * psi +\n        (1 + a - b / 2) * sin(2 * psi) +\n        ((a + b) / 2) * sin(4 * psi) +\n        (b / 2) * sin(6 * psi)) /\n      psiMax\n    );\n  }\n\n  function inversemapping(psi) {\n    return radius(psi) * sin(psi);\n  }\n\n  var forward = function(lambda, phi) {\n    var psi = psiMax * solve(mapping, (M * sin(phi)) / psiMax, phi / pi);\n    if (isNaN(psi)) psi = psiMax * sign(phi);\n    var kr = k * radius(psi);\n    return [((kr * c * lambda) / pi) * cos(psi), (kr / c) * sin(psi)];\n  };\n\n  forward.invert = function(x, y) {\n    var psi = solve(inversemapping, (y * c) / k);\n    return [\n      (x * pi) / (cos(psi) * k * c * radius(psi)),\n      asin((psiMax * mapping(psi / psiMax)) / M)\n    ];\n  };\n\n  if (psiMax === 0) {\n    k = sqrt(ratio / pi);\n    forward = function(lambda, phi) {\n      return [lambda * k, sin(phi) / k];\n    };\n    forward.invert = function(x, y) {\n      return [x / k, asin(y * k)];\n    };\n  }\n\n  return forward;\n}\n\nexport default function() {\n  var a = 1,\n    b = 0,\n    psiMax = 45 * radians,\n    ratio = 2,\n    mutate = projectionMutator(hufnagelRaw),\n    projection = mutate(a, b, psiMax, ratio);\n\n  projection.a = function(_) {\n    return arguments.length ? mutate((a = +_), b, psiMax, ratio) : a;\n  };\n  projection.b = function(_) {\n    return arguments.length ? mutate(a, (b = +_), psiMax, ratio) : b;\n  };\n  projection.psiMax = function(_) {\n    return arguments.length\n      ? mutate(a, b, (psiMax = +_ * radians), ratio)\n      : psiMax * degrees;\n  };\n  projection.ratio = function(_) {\n    return arguments.length ? mutate(a, b, psiMax, (ratio = +_)) : ratio;\n  };\n\n  return projection.scale(180.739);\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}