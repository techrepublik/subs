{"ast":null,"code":"/**\r\n * Functionality for drawing waved lines.\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\nimport { Line } from \"./Line\";\nimport { color } from \"../utils/Color\";\nimport { wavedLine } from \"../rendering/Smoothing\";\nimport * as $path from \"../rendering/Path\";\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n/**\r\n * Draws a waved line.\r\n *\r\n * @see {@link IWavedLineEvents} for a list of available events\r\n * @see {@link IWavedLineAdapters} for a list of available Adapters\r\n */\nvar WavedLine = /** @class */function (_super) {\n  __extends(WavedLine, _super);\n  /**\r\n   * Constructor\r\n   */\n  function WavedLine() {\n    var _this = _super.call(this) || this;\n    _this.className = \"WavedLine\";\n    _this.element = _this.paper.add(\"path\");\n    _this.waveLength = 16;\n    _this.waveHeight = 4;\n    _this.tension = 0.8;\n    _this.pixelPerfect = false;\n    _this.fill = color();\n    _this.applyTheme();\n    return _this;\n  }\n  /**\r\n   * Draws the waved line.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  WavedLine.prototype.draw = function () {\n    //super.draw();\n    var p1 = {\n      x: this.x1,\n      y: this.y1\n    };\n    var p2 = {\n      x: this.x2,\n      y: this.y2\n    };\n    this.path = $path.moveTo(p1) + wavedLine(p1, p2, this.waveLength, this.waveHeight, this.tension, true);\n  };\n  Object.defineProperty(WavedLine.prototype, \"waveLength\", {\n    /**\r\n     * @return Wave length (px)\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"waveLength\");\n    },\n    /**\r\n     * Wave length in pixels.\r\n     *\r\n     * @default 16\r\n     * @param value  Wave length (px)\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"waveLength\", value);\n      this.invalidate();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(WavedLine.prototype, \"waveHeight\", {\n    /**\r\n     * @return Wave height (px)\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"waveHeight\");\n    },\n    /**\r\n     * Wave height in pixels.\r\n     *\r\n     * @default 4\r\n     * @param value  Wave height (px)\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"waveHeight\", value);\n      this.invalidate();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(WavedLine.prototype, \"tension\", {\n    /**\r\n     * @return Tension\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"tension\");\n    },\n    /**\r\n     * Tension of the wave.\r\n     *\r\n     * @default 0.8\r\n     * @param value  Tension\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"tension\", value);\n      this.invalidate();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return WavedLine;\n}(Line);\nexport { WavedLine };","map":{"version":3,"names":["Line","color","wavedLine","$path","WavedLine","_super","__extends","_this","call","className","element","paper","add","waveLength","waveHeight","tension","pixelPerfect","fill","applyTheme","prototype","draw","p1","x","x1","y","y1","p2","x2","y2","path","moveTo","Object","defineProperty","get","getPropertyValue","set","value","setPropertyValue","invalidate"],"sources":["../../../../../src/.internal/core/elements/WavedLine.ts"],"sourcesContent":["/**\r\n * Functionality for drawing waved lines.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Line, ILineProperties, ILineAdapters, ILineEvents } from \"./Line\";\r\nimport { IPoint } from \"../defs/IPoint\";\r\nimport { IWavedShape } from \"../defs/IWavedShape\";\r\nimport { color } from \"../utils/Color\";\r\nimport { wavedLine } from \"../rendering/Smoothing\";\r\nimport * as $path from \"../rendering/Path\";\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines available properties for [[WavedLine]].\r\n */\r\nexport interface IWavedLineProperties extends ILineProperties {\r\n\r\n\t/**\r\n\t * Wave length in pixels.\r\n\t *\r\n\t * @default 16\r\n\t */\r\n\twaveLength?: number;\r\n\r\n\t/**\r\n\t * Wave height in pixels.\r\n\t *\r\n\t * @default 4\r\n\t */\r\n\twaveHeight?: number;\r\n\r\n\t/**\r\n\t * Wave tension.\r\n\t *\r\n\t * @default 0.8\r\n\t */\r\n\ttension?: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[WavedLine]].\r\n */\r\nexport interface IWavedLineEvents extends ILineEvents { }\r\n\r\n/**\r\n * Defines adapters for [[WavedLine]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IWavedLineAdapters extends ILineAdapters, IWavedLineProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Draws a waved line.\r\n *\r\n * @see {@link IWavedLineEvents} for a list of available events\r\n * @see {@link IWavedLineAdapters} for a list of available Adapters\r\n */\r\nexport class WavedLine extends Line implements IWavedShape {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IWavedLineProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IWavedLineAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IWavedLineEvents;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"WavedLine\";\r\n\t\tthis.element = this.paper.add(\"path\");\r\n\t\tthis.waveLength = 16;\r\n\t\tthis.waveHeight = 4;\r\n\t\tthis.tension = 0.8;\r\n\t\tthis.pixelPerfect = false;\r\n\r\n\t\tthis.fill = color();\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Draws the waved line.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic draw(): void {\r\n\t\t//super.draw();\r\n\t\tlet p1: IPoint = { x: this.x1, y: this.y1 };\r\n\t\tlet p2: IPoint = { x: this.x2, y: this.y2 };\r\n\r\n\t\tthis.path = $path.moveTo(p1) + wavedLine(p1, p2, this.waveLength, this.waveHeight, this.tension, true);\r\n\t}\r\n\r\n\t/**\r\n\t * Wave length in pixels.\r\n\t *\r\n\t * @default 16\r\n\t * @param value  Wave length (px)\r\n\t */\r\n\tpublic set waveLength(value: number) {\r\n\t\tthis.setPropertyValue(\"waveLength\", value);\r\n\t\tthis.invalidate();\r\n\t}\r\n\r\n\t/**\r\n\t * @return Wave length (px)\r\n\t */\r\n\tpublic get waveLength(): number {\r\n\t\treturn this.getPropertyValue(\"waveLength\");\r\n\t}\r\n\r\n\t/**\r\n\t * Wave height in pixels.\r\n\t *\r\n\t * @default 4\r\n\t * @param value  Wave height (px)\r\n\t */\r\n\tpublic set waveHeight(value: number) {\r\n\t\tthis.setPropertyValue(\"waveHeight\", value);\r\n\t\tthis.invalidate();\r\n\t}\r\n\r\n\t/**\r\n\t * @return Wave height (px)\r\n\t */\r\n\tpublic get waveHeight(): number {\r\n\t\treturn this.getPropertyValue(\"waveHeight\");\r\n\t}\r\n\r\n\t/**\r\n\t * Tension of the wave.\r\n\t *\r\n\t * @default 0.8\r\n\t * @param value  Tension\r\n\t */\r\n\tpublic set tension(value: number) {\r\n\t\tthis.setPropertyValue(\"tension\", value);\r\n\t\tthis.invalidate();\r\n\t}\r\n\r\n\t/**\r\n\t * @return Tension\r\n\t */\r\n\tpublic get tension(): number {\r\n\t\treturn this.getPropertyValue(\"tension\");\r\n\t}\r\n\r\n}\r\n"],"mappings":"AAAA;;;;AAIA;;;;;;AAMA,SAASA,IAAI,QAAqD,QAAQ;AAG1E,SAASC,KAAK,QAAQ,gBAAgB;AACtC,SAASC,SAAS,QAAQ,wBAAwB;AAClD,OAAO,KAAKC,KAAK,MAAM,mBAAmB;AAkD1C;;;;;;AAOA;;;;;;AAMA,IAAAC,SAAA,0BAAAC,MAAA;EAA+BC,SAAA,CAAAF,SAAA,EAAAC,MAAA;EAiB9B;;;EAGA,SAAAD,UAAA;IAAA,IAAAG,KAAA,GACCF,MAAA,CAAAG,IAAA,MAAO;IACPD,KAAI,CAACE,SAAS,GAAG,WAAW;IAC5BF,KAAI,CAACG,OAAO,GAAGH,KAAI,CAACI,KAAK,CAACC,GAAG,CAAC,MAAM,CAAC;IACrCL,KAAI,CAACM,UAAU,GAAG,EAAE;IACpBN,KAAI,CAACO,UAAU,GAAG,CAAC;IACnBP,KAAI,CAACQ,OAAO,GAAG,GAAG;IAClBR,KAAI,CAACS,YAAY,GAAG,KAAK;IAEzBT,KAAI,CAACU,IAAI,GAAGhB,KAAK,EAAE;IAEnBM,KAAI,CAACW,UAAU,EAAE;;EAClB;EAEA;;;;;EAKOd,SAAA,CAAAe,SAAA,CAAAC,IAAI,GAAX;IACC;IACA,IAAIC,EAAE,GAAW;MAAEC,CAAC,EAAE,IAAI,CAACC,EAAE;MAAEC,CAAC,EAAE,IAAI,CAACC;IAAE,CAAE;IAC3C,IAAIC,EAAE,GAAW;MAAEJ,CAAC,EAAE,IAAI,CAACK,EAAE;MAAEH,CAAC,EAAE,IAAI,CAACI;IAAE,CAAE;IAE3C,IAAI,CAACC,IAAI,GAAG1B,KAAK,CAAC2B,MAAM,CAACT,EAAE,CAAC,GAAGnB,SAAS,CAACmB,EAAE,EAAEK,EAAE,EAAE,IAAI,CAACb,UAAU,EAAE,IAAI,CAACC,UAAU,EAAE,IAAI,CAACC,OAAO,EAAE,IAAI,CAAC;EACvG,CAAC;EAQDgB,MAAA,CAAAC,cAAA,CAAW5B,SAAA,CAAAe,SAAA,cAAU;IAKrB;;;SAGA,SAAAc,CAAA;MACC,OAAO,IAAI,CAACC,gBAAgB,CAAC,YAAY,CAAC;IAC3C,CAAC;IAhBD;;;;;;SAMA,SAAAC,CAAsBC,KAAa;MAClC,IAAI,CAACC,gBAAgB,CAAC,YAAY,EAAED,KAAK,CAAC;MAC1C,IAAI,CAACE,UAAU,EAAE;IAClB,CAAC;;;;EAeDP,MAAA,CAAAC,cAAA,CAAW5B,SAAA,CAAAe,SAAA,cAAU;IAKrB;;;SAGA,SAAAc,CAAA;MACC,OAAO,IAAI,CAACC,gBAAgB,CAAC,YAAY,CAAC;IAC3C,CAAC;IAhBD;;;;;;SAMA,SAAAC,CAAsBC,KAAa;MAClC,IAAI,CAACC,gBAAgB,CAAC,YAAY,EAAED,KAAK,CAAC;MAC1C,IAAI,CAACE,UAAU,EAAE;IAClB,CAAC;;;;EAeDP,MAAA,CAAAC,cAAA,CAAW5B,SAAA,CAAAe,SAAA,WAAO;IAKlB;;;SAGA,SAAAc,CAAA;MACC,OAAO,IAAI,CAACC,gBAAgB,CAAC,SAAS,CAAC;IACxC,CAAC;IAhBD;;;;;;SAMA,SAAAC,CAAmBC,KAAa;MAC/B,IAAI,CAACC,gBAAgB,CAAC,SAAS,EAAED,KAAK,CAAC;MACvC,IAAI,CAACE,UAAU,EAAE;IAClB,CAAC;;;;EASF,OAAAlC,SAAC;AAAD,CAAC,CArG8BJ,IAAI","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}