{"ast":null,"code":"/**\r\n * Map object module\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\nimport { Container } from \"../../core/Container\";\nimport { registry } from \"../../core/Registry\";\nimport * as $math from \"../../core/utils/Math\";\nimport * as d3geo from \"d3-geo\";\nimport * as $type from \"../../core/utils/Type\";\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n/**\r\n * A base class for all map objects: lines, images, etc.\r\n *\r\n * @see {@link IMapObjectEvents} for a list of available events\r\n * @see {@link IMapObjectAdapters} for a list of available Adapters\r\n */\nvar MapObject = /** @class */function (_super) {\n  __extends(MapObject, _super);\n  /**\r\n   * Constructor\r\n   */\n  function MapObject() {\n    var _this =\n    // Init\n    _super.call(this) || this;\n    _this.className = \"MapObject\";\n    // Set defaults\n    _this.isMeasured = false;\n    _this.layout = \"none\";\n    _this.clickable = true;\n    // Apply theme\n    _this.applyTheme();\n    return _this;\n  }\n  /**\r\n   * (Re)validates this object, forcing it to redraw.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  MapObject.prototype.validate = function () {\n    if (this.series && this.series.itemReaderText) {\n      this.readerTitle = this.series.itemReaderText;\n    }\n    _super.prototype.validate.call(this);\n  };\n  /**\r\n   * Updates the item's bounding coordinates: coordinates of the East, West,\r\n   * North, and South-most points.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  MapObject.prototype.updateExtremes = function () {\n    var feature = this.getFeature();\n    if (feature) {\n      var geometry = feature.geometry;\n      if (geometry) {\n        var bounds = d3geo.geoBounds(geometry);\n        var west = bounds[0][0];\n        var south = bounds[0][1];\n        var north = bounds[1][1];\n        var east = bounds[1][0];\n        var changed = false;\n        if (north != this.north) {\n          this._north = $math.round(north, 8);\n          changed = true;\n        }\n        if (south != this.south) {\n          this._south = $math.round(south);\n          changed = true;\n        }\n        if (east != this.east) {\n          this._east = $math.round(east);\n          changed = true;\n        }\n        if (west != this.west) {\n          this._west = $math.round(west);\n          changed = true;\n        }\n        if (changed) {\n          this.dispatch(\"geoBoundsChanged\");\n          if (this.series) {\n            this.series.invalidateDataItems();\n          }\n        }\n      }\n    }\n  };\n  /**\r\n   * @ignore\r\n   */\n  MapObject.prototype.getFeature = function () {\n    return {};\n  };\n  Object.defineProperty(MapObject.prototype, \"east\", {\n    /**\r\n     * Longitude of the East-most point of the element.\r\n     */\n    get: function () {\n      if ($type.isNumber(this._east)) {\n        return this._east;\n      } else if (this.dataItem) {\n        return this.dataItem.east;\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MapObject.prototype, \"west\", {\n    /**\r\n     * Longitude of the West-most point of the element.\r\n     */\n    get: function () {\n      if ($type.isNumber(this._west)) {\n        return this._west;\n      } else if (this.dataItem) {\n        return this.dataItem.west;\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MapObject.prototype, \"south\", {\n    /**\r\n     * Latitude of the South-most point of the element.\r\n     */\n    get: function () {\n      if ($type.isNumber(this._south)) {\n        return this._south;\n      } else if (this.dataItem) {\n        return this.dataItem.south;\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MapObject.prototype, \"north\", {\n    /**\r\n     * Latitude of the North-most point of the element.\r\n     */\n    get: function () {\n      if ($type.isNumber(this._north)) {\n        return this._north;\n      } else if (this.dataItem) {\n        return this.dataItem.north;\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Shows the element's [[Tooltip]].\r\n   *\r\n   * A tooltip will be populated using text templates in either `tooltipHTML` or\r\n   * `tooltipText` as well as data in `tooltipDataItem`.\r\n   *\r\n   * @see {@link Tooltip}\r\n   * @param optional point (sprite-related) to which tooltip must point.\r\n   * @return returns true if the tooltip was shown and false if it wasn't (no text was found)\r\n   */\n  MapObject.prototype.showTooltip = function (point) {\n    var res = _super.prototype.showTooltip.call(this, point);\n    if (res && this.showTooltipOn == \"always\" && !this.series.chart.events.has(\"mappositionchanged\", this.handleTooltipMove, this)) {\n      this.addDisposer(this.series.chart.events.on(\"mappositionchanged\", this.handleTooltipMove, this));\n    }\n    return res;\n  };\n  MapObject.prototype.handleTooltipMove = function (ev) {\n    if (!this.tooltip.isHidden) {\n      this.showTooltip();\n    }\n  };\n  /**\r\n   * Sets a [[DataItem]].\r\n   * @param dataItem DataItem\r\n   */\n  MapObject.prototype.setDataItem = function (dataItem) {\n    _super.prototype.setDataItem.call(this, dataItem);\n    this.applyAccessibility();\n  };\n  return MapObject;\n}(Container);\nexport { MapObject };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\nregistry.registeredClasses[\"MapObject\"] = MapObject;","map":{"version":3,"names":["Container","registry","$math","d3geo","$type","MapObject","_super","__extends","_this","call","className","isMeasured","layout","clickable","applyTheme","prototype","validate","series","itemReaderText","readerTitle","updateExtremes","feature","getFeature","geometry","bounds","geoBounds","west","south","north","east","changed","_north","round","_south","_east","_west","dispatch","invalidateDataItems","Object","defineProperty","get","isNumber","dataItem","showTooltip","point","res","showTooltipOn","chart","events","has","handleTooltipMove","addDisposer","on","ev","tooltip","isHidden","setDataItem","applyAccessibility","registeredClasses"],"sources":["../../../../../src/.internal/charts/map/MapObject.ts"],"sourcesContent":["/**\r\n * Map object module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Container, IContainerProperties, IContainerAdapters, IContainerEvents } from \"../../core/Container\";\r\nimport { MapSeries, MapSeriesDataItem } from \"./MapSeries\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { IGeoPoint } from \"../../core/defs/IGeoPoint\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as d3geo from \"d3-geo\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines propeties for [[MapObject]].\r\n */\r\nexport interface IMapObjectProperties extends IContainerProperties {\r\n\r\n\t/**\r\n\t * A custom zoom level to use when `zoomToMapObject()` is called on this\r\n\t * map object.\r\n\t */\r\n\tzoomLevel?: number;\r\n\r\n\t/**\r\n\t * A custom point to use when `zoomToMapObject()` is called on this map\r\n\t * object.\r\n\t */\r\n\tzoomGeoPoint?: IGeoPoint;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[MapObject]].\r\n */\r\nexport interface IMapObjectEvents extends IContainerEvents {\r\n\tgeoBoundsChanged: {}\r\n}\r\n\r\n/**\r\n * Defines adapters for [[MapObject]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IMapObjectAdapters extends IContainerAdapters, IMapObjectProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * A base class for all map objects: lines, images, etc.\r\n *\r\n * @see {@link IMapObjectEvents} for a list of available events\r\n * @see {@link IMapObjectAdapters} for a list of available Adapters\r\n */\r\nexport class MapObject extends Container {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IMapObjectProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IMapObjectAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IMapObjectEvents;\r\n\r\n\t/**\r\n\t * A map series this object belongs to.\r\n\t */\r\n\tpublic series: MapSeries;\r\n\r\n\tpublic _dataItem: MapSeriesDataItem;\r\n\r\n\r\n\t/**\r\n\t * Longitude of the East-most point of the element.\r\n\t */\r\n\tprotected _east: number;\r\n\r\n\t/**\r\n\t * Longitude of the West-most point of the element.\r\n\t */\r\n\tprotected _west: number;\r\n\r\n\t/**\r\n\t * Latitude of the South-most point of the element.\r\n\t */\r\n\tprotected _south: number;\r\n\r\n\t/**\r\n\t * Latitude of the North-most point of the element.\r\n\t */\r\n\tprotected _north: number;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"MapObject\";\r\n\r\n\t\t// Set defaults\r\n\t\tthis.isMeasured = false;\r\n\t\tthis.layout = \"none\";\r\n\t\tthis.clickable = true;\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates this object, forcing it to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\t\tif (this.series && this.series.itemReaderText) {\r\n\t\t\tthis.readerTitle = this.series.itemReaderText;\r\n\t\t}\r\n\t\tsuper.validate();\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Updates the item's bounding coordinates: coordinates of the East, West,\r\n\t * North, and South-most points.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateExtremes(): void {\r\n\t\tlet feature = this.getFeature();\r\n\t\tif (feature) {\r\n\t\t\tlet geometry = feature.geometry;\r\n\r\n\t\t\tif (geometry) {\t\t\t\t\r\n\t\t\t\tlet bounds = d3geo.geoBounds(geometry);\r\n\r\n\t\t\t\tlet west = bounds[0][0];\r\n\t\t\t\tlet south = bounds[0][1];\r\n\r\n\t\t\t\tlet north = bounds[1][1];\r\n\t\t\t\tlet east = bounds[1][0];\r\n\r\n\t\t\t\tlet changed = false;\r\n\t\t\t\tif (north != this.north) {\r\n\t\t\t\t\tthis._north = $math.round(north, 8);\r\n\t\t\t\t\tchanged = true;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (south != this.south) {\r\n\t\t\t\t\tthis._south = $math.round(south);\r\n\t\t\t\t\tchanged = true;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (east != this.east) {\r\n\t\t\t\t\tthis._east = $math.round(east);\r\n\t\t\t\t\tchanged = true;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (west != this.west) {\r\n\t\t\t\t\tthis._west = $math.round(west);\r\n\t\t\t\t\tchanged = true;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (changed) {\r\n\t\t\t\t\tthis.dispatch(\"geoBoundsChanged\");\r\n\t\t\t\t\tif(this.series){\r\n\t\t\t\t\t\tthis.series.invalidateDataItems();\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic getFeature(): any {\r\n\t\treturn {};\r\n\t}\r\n\r\n\t/**\r\n\t * Longitude of the East-most point of the element.\r\n\t */\r\n\tpublic get east(): number {\r\n\t\tif ($type.isNumber(this._east)) {\r\n\t\t\treturn this._east;\r\n\t\t}\r\n\t\telse if (this.dataItem) {\r\n\t\t\treturn this.dataItem.east;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Longitude of the West-most point of the element.\r\n\t */\r\n\tpublic get west(): number {\r\n\t\tif ($type.isNumber(this._west)) {\r\n\t\t\treturn this._west;\r\n\t\t}\r\n\t\telse if (this.dataItem) {\r\n\t\t\treturn this.dataItem.west;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Latitude of the South-most point of the element.\r\n\t */\r\n\tpublic get south(): number {\r\n\t\tif ($type.isNumber(this._south)) {\r\n\t\t\treturn this._south;\r\n\t\t}\r\n\t\telse if (this.dataItem) {\r\n\t\t\treturn this.dataItem.south;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Latitude of the North-most point of the element.\r\n\t */\r\n\tpublic get north(): number {\r\n\t\tif ($type.isNumber(this._north)) {\r\n\t\t\treturn this._north;\r\n\t\t}\r\n\t\telse if (this.dataItem) {\r\n\t\t\treturn this.dataItem.north;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Shows the element's [[Tooltip]].\r\n\t *\r\n\t * A tooltip will be populated using text templates in either `tooltipHTML` or\r\n\t * `tooltipText` as well as data in `tooltipDataItem`.\r\n\t *\r\n\t * @see {@link Tooltip}\r\n\t * @param optional point (sprite-related) to which tooltip must point.\r\n\t * @return returns true if the tooltip was shown and false if it wasn't (no text was found)\r\n\t */\r\n\tpublic showTooltip(point?: IPoint): boolean {\r\n\t\tconst res = super.showTooltip(point);\r\n\t\tif (res && this.showTooltipOn == \"always\" && !this.series.chart.events.has(\"mappositionchanged\", this.handleTooltipMove, this)) {\r\n\t\t\tthis.addDisposer(this.series.chart.events.on(\"mappositionchanged\", this.handleTooltipMove, this));\r\n\t\t}\r\n\t\treturn res;\r\n\t}\r\n\r\n\tprotected handleTooltipMove(ev: any): void {\r\n\t\tif(!this.tooltip.isHidden){\r\n\t\t\tthis.showTooltip();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Sets a [[DataItem]].\r\n\t * @param dataItem DataItem\r\n\t */\r\n\tprotected setDataItem(dataItem: MapSeriesDataItem) {\r\n\t\tsuper.setDataItem(dataItem);\r\n\t\tthis.applyAccessibility();\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"MapObject\"] = MapObject;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}