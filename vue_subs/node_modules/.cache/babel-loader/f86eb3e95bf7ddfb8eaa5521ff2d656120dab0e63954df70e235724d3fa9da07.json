{"ast":null,"code":"/**\r\n * Map line module\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\nimport { Container } from \"../../core/Container\";\nimport { registry } from \"../../core/Registry\";\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n/**\r\n * Draws a line on the map.\r\n *\r\n * @see {@link IMapLineObjectEvents} for a list of available events\r\n * @see {@link IMapLineObjectAdapters} for a list of available Adapters\r\n */\nvar MapLineObject = /** @class */function (_super) {\n  __extends(MapLineObject, _super);\n  /**\r\n   * Constructor\r\n   */\n  function MapLineObject() {\n    var _this = _super.call(this) || this;\n    _this.adjustRotation = true;\n    _this.className = \"MapLineObject\";\n    _this.isMeasured = false;\n    _this.layout = \"none\";\n    _this.applyTheme();\n    return _this;\n  }\n  /**\r\n   * (Re)validates element's position.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  MapLineObject.prototype.validatePosition = function () {\n    var mapLine = this.mapLine;\n    if (mapLine) {\n      var point = mapLine.positionToPoint(this.position);\n      this.x = point.x;\n      this.y = point.y;\n      if (this.adjustRotation) {\n        this.rotation = point.angle;\n      }\n      var dataItem = this.mapLine.dataItem;\n      if (dataItem) {\n        var series = this.mapLine.dataItem.component;\n        this.scale = 1 / series.scale;\n      }\n      // hide out of bounds\n      if (mapLine.shortestDistance) {\n        var projection = this.mapLine.series.chart.projection;\n        var geoPoint = projection.positionToGeoPoint(mapLine.multiGeoLine, this.position);\n        var visible = projection.d3Path({\n          type: 'Point',\n          coordinates: [geoPoint.longitude, geoPoint.latitude]\n        });\n        if (!visible) {\n          this.__disabled = true;\n        } else {\n          this.__disabled = false;\n        }\n      }\n    }\n    _super.prototype.validatePosition.call(this);\n  };\n  Object.defineProperty(MapLineObject.prototype, \"position\", {\n    /**\r\n     * @return Position within the line\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"position\");\n    },\n    /**\r\n     * Sets object's relative position (0-1) within the line.\r\n     *\r\n     * `0` will place the object at the beginning of the line. `1` - at the end.\r\n     *\r\n     * Any intermediate number will place the object at some point within the\r\n     * line.\r\n     *\r\n     * @param value  Position within the line (0-1)\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"position\", value, false, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MapLineObject.prototype, \"adjustRotation\", {\n    /**\r\n     * @return Auto-rotate\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"adjustRotation\");\n    },\n    /**\r\n     * If set to `true`, the object will be automatically rotated to face the\r\n     * direction of the line at the specific position.\r\n     *\r\n     * This allows creating images that has its \"front\" always facing the logical\r\n     * direction of the line.\r\n     *\r\n     * @default false\r\n     * @param value  Auto-rotate\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"adjustRotation\", value, false, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return MapLineObject;\n}(Container);\nexport { MapLineObject };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\nregistry.registeredClasses[\"MapLineObject\"] = MapLineObject;","map":{"version":3,"names":["Container","registry","MapLineObject","_super","__extends","_this","call","adjustRotation","className","isMeasured","layout","applyTheme","prototype","validatePosition","mapLine","point","positionToPoint","position","x","y","rotation","angle","dataItem","series","component","scale","shortestDistance","projection","chart","geoPoint","positionToGeoPoint","multiGeoLine","visible","d3Path","type","coordinates","longitude","latitude","__disabled","Object","defineProperty","get","getPropertyValue","set","value","setPropertyValue","registeredClasses"],"sources":["../../../../../src/.internal/charts/map/MapLineObject.ts"],"sourcesContent":["/**\r\n * Map line module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Container, IContainerProperties, IContainerAdapters, IContainerEvents } from \"../../core/Container\";\r\nimport { MapLine } from \"./MapLine\";\r\nimport { IOrientationPoint } from \"../../core/defs/IPoint\";\r\nimport { registry } from \"../../core/Registry\";\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[MapLineObject]].\r\n */\r\nexport interface IMapLineObjectProperties extends IContainerProperties {\r\n\r\n\t/**\r\n\t * Sets object's relative position (0-1) within the line.\r\n\t *\r\n\t * `0` will place the object at the beginning of the line. `1` - at the end.\r\n\t *\r\n\t * Any intermediate number will place the object at some point within the\r\n\t * line.\r\n\t */\r\n\tposition?: number;\r\n\r\n\t/**\r\n\t * If set to `true`, the object will be automatically rotated to face the\r\n\t * direction of the line at the specific position.\r\n\t *\r\n\t * This allows creating images that has its \"front\" always facing the logical\r\n\t * direction of the line.\r\n\t *\r\n\t * @default false\r\n\t */\r\n\tadjustRotation?: boolean;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[MapLineObject]].\r\n */\r\nexport interface IMapLineObjectEvents extends IContainerEvents { }\r\n\r\n/**\r\n * Defines adapters for [[MapLineObject]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IMapLineObjectAdapters extends IContainerAdapters, IMapLineObjectProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Draws a line on the map.\r\n *\r\n * @see {@link IMapLineObjectEvents} for a list of available events\r\n * @see {@link IMapLineObjectAdapters} for a list of available Adapters\r\n */\r\nexport class MapLineObject extends Container {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IMapLineObjectProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IMapLineObjectAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IMapLineObjectEvents;\r\n\r\n\t/**\r\n\t * A reference to the [[MapLine]] object this object is attached to.\r\n\t *\r\n\t * @todo Review if necessary (same as parent)\r\n\t */\r\n\tpublic mapLine: MapLine;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.adjustRotation = true;\r\n\t\tthis.className = \"MapLineObject\";\r\n\t\tthis.isMeasured = false;\r\n\t\tthis.layout = \"none\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates element's position.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validatePosition() {\r\n\r\n\t\tlet mapLine = this.mapLine;\r\n\r\n\t\tif (mapLine) {\r\n\r\n\t\t\tlet point: IOrientationPoint = mapLine.positionToPoint(this.position);\r\n\r\n\t\t\tthis.x = point.x;\r\n\t\t\tthis.y = point.y;\r\n\r\n\t\t\tif (this.adjustRotation) {\r\n\t\t\t\tthis.rotation = point.angle;\r\n\t\t\t}\r\n\r\n\t\t\tlet dataItem = this.mapLine.dataItem;\r\n\t\t\tif (dataItem) {\r\n\t\t\t\tlet series = this.mapLine.dataItem.component;\r\n\t\t\t\tthis.scale = 1 / series.scale;\r\n\t\t\t}\r\n\r\n\t\t\t// hide out of bounds\r\n\t\t\tif (mapLine.shortestDistance) {\r\n\r\n\t\t\t\tlet projection = this.mapLine.series.chart.projection;\r\n\r\n\t\t\t\tlet geoPoint = projection.positionToGeoPoint(mapLine.multiGeoLine, this.position);\r\n\r\n\t\t\t\tlet visible: any = projection.d3Path({ type: 'Point', coordinates: [geoPoint.longitude, geoPoint.latitude] });\r\n\r\n\t\t\t\tif (!visible) {\r\n\t\t\t\t\tthis.__disabled = true;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis.__disabled = false;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tsuper.validatePosition();\r\n\t}\r\n\r\n\t/**\r\n\t * Sets object's relative position (0-1) within the line.\r\n\t *\r\n\t * `0` will place the object at the beginning of the line. `1` - at the end.\r\n\t *\r\n\t * Any intermediate number will place the object at some point within the\r\n\t * line.\r\n\t *\r\n\t * @param value  Position within the line (0-1)\r\n\t */\r\n\tpublic set position(value: number) {\r\n\t\tthis.setPropertyValue(\"position\", value, false, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Position within the line\r\n\t */\r\n\tpublic get position(): number {\r\n\t\treturn this.getPropertyValue(\"position\");\r\n\t}\r\n\r\n\t/**\r\n\t * If set to `true`, the object will be automatically rotated to face the\r\n\t * direction of the line at the specific position.\r\n\t *\r\n\t * This allows creating images that has its \"front\" always facing the logical\r\n\t * direction of the line.\r\n\t *\r\n\t * @default false\r\n\t * @param value  Auto-rotate\r\n\t */\r\n\tpublic set adjustRotation(value: boolean) {\r\n\t\tthis.setPropertyValue(\"adjustRotation\", value, false, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Auto-rotate\r\n\t */\r\n\tpublic get adjustRotation(): boolean {\r\n\t\treturn this.getPropertyValue(\"adjustRotation\");\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"MapLineObject\"] = MapLineObject;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}