{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n/**\r\n * A collection of color-related functions\r\n */\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\nimport * as $math from \"./Math\";\nimport * as $type from \"./Type\";\n/**\r\n * Define named colors for easy resolution to RGB.\r\n */\nvar namedColors = {\n  aliceblue: {\n    r: 240,\n    g: 248,\n    b: 255\n  },\n  antiquewhite: {\n    r: 250,\n    g: 235,\n    b: 215\n  },\n  aqua: {\n    r: 0,\n    g: 255,\n    b: 255\n  },\n  aquamarine: {\n    r: 127,\n    g: 255,\n    b: 212\n  },\n  azure: {\n    r: 240,\n    g: 255,\n    b: 255\n  },\n  beige: {\n    r: 245,\n    g: 245,\n    b: 220\n  },\n  bisque: {\n    r: 255,\n    g: 228,\n    b: 196\n  },\n  black: {\n    r: 0,\n    g: 0,\n    b: 0\n  },\n  blanchedalmond: {\n    r: 255,\n    g: 235,\n    b: 205\n  },\n  blue: {\n    r: 0,\n    g: 0,\n    b: 255\n  },\n  blueviolet: {\n    r: 138,\n    g: 43,\n    b: 226\n  },\n  brown: {\n    r: 165,\n    g: 42,\n    b: 42\n  },\n  burlywood: {\n    r: 222,\n    g: 184,\n    b: 135\n  },\n  cadetblue: {\n    r: 95,\n    g: 158,\n    b: 160\n  },\n  chartreuse: {\n    r: 127,\n    g: 255,\n    b: 0\n  },\n  chocolate: {\n    r: 210,\n    g: 105,\n    b: 30\n  },\n  coral: {\n    r: 255,\n    g: 127,\n    b: 80\n  },\n  cornflowerblue: {\n    r: 100,\n    g: 149,\n    b: 237\n  },\n  cornsilk: {\n    r: 255,\n    g: 248,\n    b: 220\n  },\n  crimson: {\n    r: 220,\n    g: 20,\n    b: 60\n  },\n  cyan: {\n    r: 0,\n    g: 255,\n    b: 255\n  },\n  darkblue: {\n    r: 0,\n    g: 0,\n    b: 139\n  },\n  darkcyan: {\n    r: 0,\n    g: 139,\n    b: 139\n  },\n  darkgoldenrod: {\n    r: 184,\n    g: 134,\n    b: 11\n  },\n  darkgray: {\n    r: 169,\n    g: 169,\n    b: 169\n  },\n  darkgrey: {\n    r: 169,\n    g: 169,\n    b: 169\n  },\n  darkgreen: {\n    r: 0,\n    g: 100,\n    b: 0\n  },\n  darkkhaki: {\n    r: 189,\n    g: 183,\n    b: 107\n  },\n  darkmagenta: {\n    r: 139,\n    g: 0,\n    b: 139\n  },\n  darkolivegreen: {\n    r: 85,\n    g: 107,\n    b: 47\n  },\n  darkorange: {\n    r: 255,\n    g: 140,\n    b: 0\n  },\n  darkorchid: {\n    r: 153,\n    g: 50,\n    b: 204\n  },\n  darkred: {\n    r: 139,\n    g: 0,\n    b: 0\n  },\n  darksalmon: {\n    r: 233,\n    g: 150,\n    b: 122\n  },\n  darkseagreen: {\n    r: 143,\n    g: 188,\n    b: 143\n  },\n  darkslateblue: {\n    r: 72,\n    g: 61,\n    b: 139\n  },\n  darkslategray: {\n    r: 47,\n    g: 79,\n    b: 79\n  },\n  darkslategrey: {\n    r: 47,\n    g: 79,\n    b: 79\n  },\n  darkturquoise: {\n    r: 0,\n    g: 206,\n    b: 209\n  },\n  darkviolet: {\n    r: 148,\n    g: 0,\n    b: 211\n  },\n  deeppink: {\n    r: 255,\n    g: 20,\n    b: 147\n  },\n  deepskyblue: {\n    r: 0,\n    g: 191,\n    b: 255\n  },\n  dimgray: {\n    r: 105,\n    g: 105,\n    b: 105\n  },\n  dimgrey: {\n    r: 105,\n    g: 105,\n    b: 105\n  },\n  dodgerblue: {\n    r: 30,\n    g: 144,\n    b: 255\n  },\n  firebrick: {\n    r: 178,\n    g: 34,\n    b: 34\n  },\n  floralwhite: {\n    r: 255,\n    g: 250,\n    b: 240\n  },\n  forestgreen: {\n    r: 34,\n    g: 139,\n    b: 34\n  },\n  fuchsia: {\n    r: 255,\n    g: 0,\n    b: 255\n  },\n  gainsboro: {\n    r: 220,\n    g: 220,\n    b: 220\n  },\n  ghostwhite: {\n    r: 248,\n    g: 248,\n    b: 255\n  },\n  gold: {\n    r: 255,\n    g: 215,\n    b: 0\n  },\n  goldenrod: {\n    r: 218,\n    g: 165,\n    b: 32\n  },\n  gray: {\n    r: 128,\n    g: 128,\n    b: 128\n  },\n  grey: {\n    r: 128,\n    g: 128,\n    b: 128\n  },\n  green: {\n    r: 0,\n    g: 128,\n    b: 0\n  },\n  greenyellow: {\n    r: 173,\n    g: 255,\n    b: 47\n  },\n  honeydew: {\n    r: 240,\n    g: 255,\n    b: 240\n  },\n  hotpink: {\n    r: 255,\n    g: 105,\n    b: 180\n  },\n  indianred: {\n    r: 205,\n    g: 92,\n    b: 92\n  },\n  indigo: {\n    r: 75,\n    g: 0,\n    b: 130\n  },\n  ivory: {\n    r: 255,\n    g: 255,\n    b: 240\n  },\n  khaki: {\n    r: 240,\n    g: 230,\n    b: 140\n  },\n  lavender: {\n    r: 230,\n    g: 230,\n    b: 250\n  },\n  lavenderblush: {\n    r: 255,\n    g: 240,\n    b: 245\n  },\n  lawngreen: {\n    r: 124,\n    g: 252,\n    b: 0\n  },\n  lemonchiffon: {\n    r: 255,\n    g: 250,\n    b: 205\n  },\n  lightblue: {\n    r: 173,\n    g: 216,\n    b: 230\n  },\n  lightcoral: {\n    r: 240,\n    g: 128,\n    b: 128\n  },\n  lightcyan: {\n    r: 224,\n    g: 255,\n    b: 255\n  },\n  lightgoldenrodyellow: {\n    r: 250,\n    g: 250,\n    b: 210\n  },\n  lightgray: {\n    r: 211,\n    g: 211,\n    b: 211\n  },\n  lightgrey: {\n    r: 211,\n    g: 211,\n    b: 211\n  },\n  lightgreen: {\n    r: 144,\n    g: 238,\n    b: 144\n  },\n  lightpink: {\n    r: 255,\n    g: 182,\n    b: 193\n  },\n  lightsalmon: {\n    r: 255,\n    g: 160,\n    b: 122\n  },\n  lightseagreen: {\n    r: 32,\n    g: 178,\n    b: 170\n  },\n  lightskyblue: {\n    r: 135,\n    g: 206,\n    b: 250\n  },\n  lightslategray: {\n    r: 119,\n    g: 136,\n    b: 153\n  },\n  lightslategrey: {\n    r: 119,\n    g: 136,\n    b: 153\n  },\n  lightsteelblue: {\n    r: 176,\n    g: 196,\n    b: 222\n  },\n  lightyellow: {\n    r: 255,\n    g: 255,\n    b: 224\n  },\n  lime: {\n    r: 0,\n    g: 255,\n    b: 0\n  },\n  limegreen: {\n    r: 50,\n    g: 205,\n    b: 50\n  },\n  linen: {\n    r: 250,\n    g: 240,\n    b: 230\n  },\n  magenta: {\n    r: 255,\n    g: 0,\n    b: 255\n  },\n  maroon: {\n    r: 128,\n    g: 0,\n    b: 0\n  },\n  mediumaquamarine: {\n    r: 102,\n    g: 205,\n    b: 170\n  },\n  mediumblue: {\n    r: 0,\n    g: 0,\n    b: 205\n  },\n  mediumorchid: {\n    r: 186,\n    g: 85,\n    b: 211\n  },\n  mediumpurple: {\n    r: 147,\n    g: 112,\n    b: 219\n  },\n  mediumseagreen: {\n    r: 60,\n    g: 179,\n    b: 113\n  },\n  mediumslateblue: {\n    r: 123,\n    g: 104,\n    b: 238\n  },\n  mediumspringgreen: {\n    r: 0,\n    g: 250,\n    b: 154\n  },\n  mediumturquoise: {\n    r: 72,\n    g: 209,\n    b: 204\n  },\n  mediumvioletred: {\n    r: 199,\n    g: 21,\n    b: 133\n  },\n  midnightblue: {\n    r: 25,\n    g: 25,\n    b: 112\n  },\n  mintcream: {\n    r: 245,\n    g: 255,\n    b: 250\n  },\n  mistyrose: {\n    r: 255,\n    g: 228,\n    b: 225\n  },\n  moccasin: {\n    r: 255,\n    g: 228,\n    b: 181\n  },\n  navajowhite: {\n    r: 255,\n    g: 222,\n    b: 173\n  },\n  navy: {\n    r: 0,\n    g: 0,\n    b: 128\n  },\n  oldlace: {\n    r: 253,\n    g: 245,\n    b: 230\n  },\n  olive: {\n    r: 128,\n    g: 128,\n    b: 0\n  },\n  olivedrab: {\n    r: 107,\n    g: 142,\n    b: 35\n  },\n  orange: {\n    r: 255,\n    g: 165,\n    b: 0\n  },\n  orangered: {\n    r: 255,\n    g: 69,\n    b: 0\n  },\n  orchid: {\n    r: 218,\n    g: 112,\n    b: 214\n  },\n  palegoldenrod: {\n    r: 238,\n    g: 232,\n    b: 170\n  },\n  palegreen: {\n    r: 152,\n    g: 251,\n    b: 152\n  },\n  paleturquoise: {\n    r: 175,\n    g: 238,\n    b: 238\n  },\n  palevioletred: {\n    r: 219,\n    g: 112,\n    b: 147\n  },\n  papayawhip: {\n    r: 255,\n    g: 239,\n    b: 213\n  },\n  peachpuff: {\n    r: 255,\n    g: 218,\n    b: 185\n  },\n  peru: {\n    r: 205,\n    g: 133,\n    b: 63\n  },\n  pink: {\n    r: 255,\n    g: 192,\n    b: 203\n  },\n  plum: {\n    r: 221,\n    g: 160,\n    b: 221\n  },\n  powderblue: {\n    r: 176,\n    g: 224,\n    b: 230\n  },\n  purple: {\n    r: 128,\n    g: 0,\n    b: 128\n  },\n  rebeccapurple: {\n    r: 102,\n    g: 51,\n    b: 153\n  },\n  red: {\n    r: 255,\n    g: 0,\n    b: 0\n  },\n  rosybrown: {\n    r: 188,\n    g: 143,\n    b: 143\n  },\n  royalblue: {\n    r: 65,\n    g: 105,\n    b: 225\n  },\n  saddlebrown: {\n    r: 139,\n    g: 69,\n    b: 19\n  },\n  salmon: {\n    r: 250,\n    g: 128,\n    b: 114\n  },\n  sandybrown: {\n    r: 244,\n    g: 164,\n    b: 96\n  },\n  seagreen: {\n    r: 46,\n    g: 139,\n    b: 87\n  },\n  seashell: {\n    r: 255,\n    g: 245,\n    b: 238\n  },\n  sienna: {\n    r: 160,\n    g: 82,\n    b: 45\n  },\n  silver: {\n    r: 192,\n    g: 192,\n    b: 192\n  },\n  skyblue: {\n    r: 135,\n    g: 206,\n    b: 235\n  },\n  slateblue: {\n    r: 106,\n    g: 90,\n    b: 205\n  },\n  slategray: {\n    r: 112,\n    g: 128,\n    b: 144\n  },\n  slategrey: {\n    r: 112,\n    g: 128,\n    b: 144\n  },\n  snow: {\n    r: 255,\n    g: 250,\n    b: 250\n  },\n  springgreen: {\n    r: 0,\n    g: 255,\n    b: 127\n  },\n  steelblue: {\n    r: 70,\n    g: 130,\n    b: 180\n  },\n  tan: {\n    r: 210,\n    g: 180,\n    b: 140\n  },\n  teal: {\n    r: 0,\n    g: 128,\n    b: 128\n  },\n  thistle: {\n    r: 216,\n    g: 191,\n    b: 216\n  },\n  tomato: {\n    r: 255,\n    g: 99,\n    b: 71\n  },\n  turquoise: {\n    r: 64,\n    g: 224,\n    b: 208\n  },\n  violet: {\n    r: 238,\n    g: 130,\n    b: 238\n  },\n  wheat: {\n    r: 245,\n    g: 222,\n    b: 179\n  },\n  white: {\n    r: 255,\n    g: 255,\n    b: 255\n  },\n  whitesmoke: {\n    r: 245,\n    g: 245,\n    b: 245\n  },\n  yellow: {\n    r: 255,\n    g: 255,\n    b: 0\n  },\n  yellowgreen: {\n    r: 154,\n    g: 205,\n    b: 50\n  }\n};\n/**\r\n * Tries to resolve a named color into a hex color representation.\r\n *\r\n * @ignore Exclude from docs\r\n * @param value  Color name\r\n * @return Color\r\n * @deprecated\r\n * @hidden\r\n */\n/*export function resolveNamedColor(value: string): Color {\r\n    return (<any>namedColors)[value] ? (<any>namedColors)[value] : undefined;\r\n}*/\n/**\r\n * Converts a proper color hex code (i.e. \"#FF5500\") or named color (i.e. \"red\")\r\n * into an {iRGB} object. If the code is not correctly formatted, an RGB of\r\n * black is returned.\r\n *\r\n * @ignore Exclude from docs\r\n * @param color  Color code\r\n * @param alpha  Alpha (0-1)\r\n * @return RGB\r\n */\nexport function rgb(color, alpha) {\n  // Init return value\n  var rgb;\n  // Try resolving color format\n  // Named color?\n  if (namedColors[color]) {\n    rgb = namedColors[color];\n  }\n  // Hex code?\n  else if (color.charAt(0) === \"#\") {\n    rgb = hexToRgb(color);\n  }\n  // rgb() format?\n  else if (color.match(/^rgba?\\(/)) {\n    rgb = rgbaToRgb(color);\n  }\n  // Was not able to resolve?\n  if (!rgb) {\n    rgb = {\n      r: 0,\n      g: 0,\n      b: 0,\n      a: 1\n    };\n  }\n  // Set alpha\n  if ($type.hasValue(alpha)) {\n    rgb.a = alpha;\n  }\n  return rgb;\n}\n/**\r\n * Converts a hex color code (i.e. \"#FF5500\") to an [[iRGB]] object.\r\n *\r\n * @ignore Exclude from docs\r\n * @param hex  Hex color code\r\n * @return RGB\r\n */\nexport function hexToRgb(hex) {\n  // Expand shorthand form (e.g. \"03F\") to full form (e.g. \"0033FF\")\n  var shorthandRegex = /^#?([a-f\\d])([a-f\\d])([a-f\\d])$/i;\n  hex = hex.replace(shorthandRegex, function (m, r, g, b) {\n    return r + r + g + g + b + b;\n  });\n  var result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n  return result ? {\n    r: parseInt(result[1], 16),\n    g: parseInt(result[2], 16),\n    b: parseInt(result[3], 16)\n  } : hexToRgbWithAlpha(hex);\n}\n/**\r\n * Converts a hex color code with alpha (i.e. \"#FF5500128\") to an [[iRGB]] object.\r\n *\r\n * @ignore Exclude from docs\r\n * @param hex  Hex color code\r\n * @return RGB\r\n */\nexport function hexToRgbWithAlpha(hex) {\n  // Expand shorthand form (e.g. \"03FA\") to full form (e.g. \"0033FFAA\")\n  var shorthandRegex = /^#?([a-f\\d])([a-f\\d])([a-f\\d])([a-f\\d])$/i;\n  hex = hex.replace(shorthandRegex, function (m, r, g, b, a) {\n    return r + r + g + g + b + b + a + a;\n  });\n  var result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n  return result ? {\n    r: parseInt(result[1], 16),\n    g: parseInt(result[2], 16),\n    b: parseInt(result[3], 16),\n    a: parseInt(result[4], 16) / 256\n  } : undefined;\n}\n/**\r\n * Converts color strings in format like `rgb()` and `rgba()` to [[iRGB]].\r\n *\r\n * @ignore Exclude from docs\r\n * @param color  Color code\r\n * @return RGB\r\n */\nexport function rgbaToRgb(color) {\n  color = color.replace(/[ ]/g, \"\");\n  // Init\n  var matches = color.match(/^rgb\\(([0-9]*),([0-9]*),([0-9]*)\\)/i);\n  // Try rgb() format\n  if (matches) {\n    matches.push(\"1\");\n  } else {\n    matches = color.match(/^rgba\\(([0-9]*),([0-9]*),([0-9]*),([.0-9]*)\\)/i);\n    if (!matches) {\n      return;\n    }\n  }\n  return {\n    r: parseInt(matches[1]),\n    g: parseInt(matches[2]),\n    b: parseInt(matches[3]),\n    a: parseFloat(matches[4])\n  };\n}\n/**\r\n * Converts an [[iRGB]] object into a hex color code.\r\n *\r\n * @ignore Exclude from docs\r\n * @param rgb  RGB\r\n * @return Hex color code\r\n */\nexport function rgbToHex(rgb) {\n  return \"#\" + pad2(rgb.r.toString(16)) + pad2(rgb.g.toString(16)) + pad2(rgb.b.toString(16));\n}\n/**\r\n * Converts an [[iRGB]] object into its `rgb()` or `rgba()` representation.\r\n *\r\n * @ignore Exclude from docs\r\n * @param rgb  RGB\r\n * @return `rgba()` syntax\r\n */\nexport function rgbToRGBA(rgb) {\n  if ($type.hasValue(rgb.a) && rgb.a !== 1) {\n    return \"rgba(\" + rgb.r + \",\" + rgb.g + \",\" + rgb.b + \",\" + rgb.a + \")\";\n  } else {\n    return \"rgb(\" + rgb.r + \",\" + rgb.g + \",\" + rgb.b + \")\";\n  }\n}\n/**\r\n * Pads a 1-digit string with a zero.\r\n *\r\n * @ignore Exclude from docs\r\n * @param c  Input string\r\n * @return Padded string\r\n */\nexport function pad2(c) {\n  return c.length == 1 ? \"0\" + c : \"\" + c;\n}\n/**\r\n * Returns an intermediate color between two colors based on the relative\r\n * position. Position needs to be in range between 0 and 1. Zero meaning the\r\n * resulting color will be closest to the first reference color.\r\n *\r\n * @ignore Exclude from docs\r\n * @param color1   First reference color\r\n * @param color2   Second reference color\r\n * @param percent  Relative position (0-1)\r\n * @return Interpolated color\r\n */\nexport function interpolate(rgb1, rgb2, percent) {\n  percent = $math.fitToRange(percent, 0, 1);\n  if (rgb1) {\n    if (rgb2) {\n      return {\n        r: rgb1.r + Math.round((rgb2.r - rgb1.r) * percent),\n        g: rgb1.g + Math.round((rgb2.g - rgb1.g) * percent),\n        b: rgb1.b + Math.round((rgb2.b - rgb1.b) * percent),\n        a: (rgb1.a || 1) + Math.round(((rgb2.a || 1) - (rgb1.a || 1)) * percent)\n      };\n    } else {\n      return rgb1;\n    }\n  } else if (rgb2) {\n    return rgb2;\n  } else {\n    return rgb1;\n  }\n}\n/**\r\n * Returns a color that is `percent` brighter than the reference color.\r\n *\r\n * @ignore Exclude from docs\r\n * @param color    Reference color\r\n * @param percent  Brightness percent\r\n * @return Hex code of the new color\r\n */\nexport function lighten(rgb, percent) {\n  if (rgb) {\n    return {\n      r: Math.max(0, Math.min(255, rgb.r + getLightnessStep(rgb.r, percent))),\n      g: Math.max(0, Math.min(255, rgb.g + getLightnessStep(rgb.g, percent))),\n      b: Math.max(0, Math.min(255, rgb.b + getLightnessStep(rgb.b, percent))),\n      a: rgb.a\n    };\n  } else {\n    // TODO is this correct ?\n    return rgb;\n  }\n}\n;\n/**\r\n * Gets lightness step.\r\n *\r\n * @ignore Exclude from docs\r\n * @param value    Value\r\n * @param percent  Percent\r\n * @return Step\r\n */\nexport function getLightnessStep(value, percent) {\n  var base = percent > 0 ? 255 - value : value;\n  return Math.round(base * percent);\n}\n/**\r\n * Returns a color that is `percent` brighter than the source `color`.\r\n *\r\n * @ignore Exclude from docs\r\n * @param color    Source color\r\n * @param percent  Brightness percent\r\n * @return New color\r\n */\nexport function brighten(rgb, percent) {\n  if (rgb) {\n    var base = Math.min(Math.max(rgb.r, rgb.g, rgb.b), 230);\n    //let base = Math.max(rgb.r, rgb.g, rgb.b);\n    var step = getLightnessStep(base, percent);\n    return {\n      r: Math.max(0, Math.min(255, Math.round(rgb.r + step))),\n      g: Math.max(0, Math.min(255, Math.round(rgb.g + step))),\n      b: Math.max(0, Math.min(255, Math.round(rgb.b + step))),\n      a: rgb.a\n    };\n  } else {\n    // TODO is this correct ?\n    return rgb;\n  }\n}\n;\n/**\r\n * Returns brightness step.\r\n *\r\n * @ignore Exclude from docs\r\n * @param value    Value\r\n * @param percent  Percent\r\n * @return Step\r\n */\nexport function getBrightnessStep(value, percent) {\n  var base = 255; //percent > 0 ? 255 - value : value;\n  return Math.round(base * percent);\n}\n/**\r\n * Returns a new [[iRGB]] object based on `rgb` parameter with specific\r\n * saturation applied.\r\n *\r\n * `saturation` can be in the range of 0 (fully desaturated) to 1 (fully\r\n * saturated).\r\n *\r\n * @ignore Exclude from docs\r\n * @param color       Base color\r\n * @param saturation  Saturation (0-1)\r\n * @return New color\r\n */\nexport function saturate(rgb, saturation) {\n  if (rgb == null || saturation == 1) {\n    return rgb;\n  }\n  var hsl = rgbToHsl(rgb);\n  hsl.s = saturation;\n  return hslToRgb(hsl);\n}\n/*\r\n// not used\r\nexport function rgbToMatrix(rgb: iRGB): string {\r\n    let r = $type.toText($math.round((rgb.r || 0) / 255, 10));\r\n    let g = $type.toText($math.round((rgb.g || 0) / 255, 10));\r\n    let b = $type.toText($math.round((rgb.b || 0) / 255, 10));\r\n    let a = $type.toText(rgb.a || 1);\r\n    return\t      r + \" 0 0 0 0\" +\r\n                    \" 0 \" + g + \" 0 0 0\" +\r\n                    \" 0 0 \" + b + \" 0 0\" +\r\n                    \" 0 0 0 \" + a + \" 0\";\r\n}\r\n*/\n/**\r\n * The functions below are taken and adapted from Garry Tan's blog post:\r\n * http://axonflux.com/handy-rgb-to-hsl-and-rgb-to-hsv-color-model-c\r\n *\r\n * The further attributions go mjijackson.com, which now seems to be defunct.\r\n */\n/**\r\n * Converts an HSL color value to RGB. Conversion formula\r\n * adapted from http://en.wikipedia.org/wiki/HSL_color_space.\r\n * Assumes h, s, and l are contained in the set [0, 1] and\r\n * returns r, g, and b in the set [0, 255].\r\n *\r\n * Function adapted from:\r\n * http://axonflux.com/handy-rgb-to-hsl-and-rgb-to-hsv-color-model-c\r\n *\r\n * @ignore Exclude from docs\r\n * @param h       The hue\r\n * @param s       The saturation\r\n * @param l       The lightness\r\n * @return The RGB representation\r\n */\nexport function hslToRgb(color) {\n  var r, g, b;\n  var h = color.h;\n  var s = color.s;\n  var l = color.l;\n  if (s == 0) {\n    r = g = b = l; // achromatic\n  } else {\n    var hue2rgb = function hue2rgb(p, q, t) {\n      if (t < 0) {\n        t += 1;\n      }\n      if (t > 1) {\n        t -= 1;\n      }\n      if (t < 1 / 6) {\n        return p + (q - p) * 6 * t;\n      }\n      if (t < 1 / 2) {\n        return q;\n      }\n      if (t < 2 / 3) {\n        return p + (q - p) * (2 / 3 - t) * 6;\n      }\n      return p;\n    };\n    var q = l < 0.5 ? l * (1 + s) : l + s - l * s;\n    var p = 2 * l - q;\n    r = hue2rgb(p, q, h + 1 / 3);\n    g = hue2rgb(p, q, h);\n    b = hue2rgb(p, q, h - 1 / 3);\n  }\n  return {\n    r: Math.round(r * 255),\n    g: Math.round(g * 255),\n    b: Math.round(b * 255)\n  };\n}\n/**\r\n * Converts an RGB color value to HSL. Conversion formula\r\n * adapted from http://en.wikipedia.org/wiki/HSL_color_space.\r\n * Assumes r, g, and b are contained in the set [0, 255] and\r\n * returns h, s, and l in the set [0, 1].\r\n *\r\n * Function adapted from:\r\n * http://axonflux.com/handy-rgb-to-hsl-and-rgb-to-hsv-color-model-c\r\n *\r\n * @ignore Exclude from docs\r\n * @param r       The red color value\r\n * @param g       The green color value\r\n * @param b       The blue color value\r\n * @return The HSL representation\r\n */\nexport function rgbToHsl(color) {\n  var r = color.r / 255;\n  var g = color.g / 255;\n  var b = color.b / 255;\n  var max = Math.max(r, g, b);\n  var min = Math.min(r, g, b);\n  var h = 0;\n  var s = 0;\n  var l = (max + min) / 2;\n  if (max === min) {\n    h = s = 0; // achromatic\n  } else {\n    var d = max - min;\n    s = l > 0.5 ? d / (2 - max - min) : d / (max + min);\n    switch (max) {\n      case r:\n        h = (g - b) / d + (g < b ? 6 : 0);\n        break;\n      case g:\n        h = (b - r) / d + 2;\n        break;\n      case b:\n        h = (r - g) / d + 4;\n        break;\n    }\n    h /= 6;\n  }\n  return {\n    h: h,\n    s: s,\n    l: l\n  };\n}\n/**\r\n * Converts an RGB color value to HSV. Conversion formula\r\n * adapted from http://en.wikipedia.org/wiki/HSV_color_space.\r\n * Assumes r, g, and b are contained in the set [0, 255] and\r\n * returns h, s, and v in the set [0, 1].\r\n *\r\n * @ignore Exclude from docs\r\n * @param   Number  r       The red color value\r\n * @param   Number  g       The green color value\r\n * @param   Number  b       The blue color value\r\n * @return  Array           The HSV representation\r\n */\nexport function rgbToHsv(color) {\n  var r = color.r / 255;\n  var g = color.g / 255;\n  var b = color.b / 255;\n  var max = Math.max(r, g, b),\n    min = Math.min(r, g, b);\n  var h = 0;\n  var s = 0;\n  var v = max;\n  var d = max - min;\n  s = max == 0 ? 0 : d / max;\n  if (max == min) {\n    h = 0; // achromatic\n  } else {\n    switch (max) {\n      case r:\n        h = (g - b) / d + (g < b ? 6 : 0);\n        break;\n      case g:\n        h = (b - r) / d + 2;\n        break;\n      case b:\n        h = (r - g) / d + 4;\n        break;\n    }\n    h /= 6;\n  }\n  return {\n    h: h,\n    s: s,\n    v: v\n  };\n}\n/**\r\n * Converts an HSV color value to RGB. Conversion formula\r\n * adapted from http://en.wikipedia.org/wiki/HSV_color_space.\r\n * Assumes h, s, and v are contained in the set [0, 1] and\r\n * returns r, g, and b in the set [0, 255].\r\n *\r\n * @ignore Exclude from docs\r\n * @param   Number  h       The hue\r\n * @param   Number  s       The saturation\r\n * @param   Number  v       The value\r\n * @return  Array           The RGB representation\r\n */\nexport function hsvToRgb(color) {\n  var r = 0;\n  var g = 0;\n  var b = 0;\n  var h = color.h;\n  var s = color.s;\n  var v = color.v;\n  var i = Math.floor(h * 6);\n  var f = h * 6 - i;\n  var p = v * (1 - s);\n  var q = v * (1 - f * s);\n  var t = v * (1 - (1 - f) * s);\n  switch (i % 6) {\n    case 0:\n      r = v;\n      g = t;\n      b = p;\n      break;\n    case 1:\n      r = q;\n      g = v;\n      b = p;\n      break;\n    case 2:\n      r = p;\n      g = v;\n      b = t;\n      break;\n    case 3:\n      r = p;\n      g = q;\n      b = v;\n      break;\n    case 4:\n      r = t;\n      g = p;\n      b = v;\n      break;\n    case 5:\n      r = v;\n      g = p;\n      b = q;\n      break;\n  }\n  return {\n    r: Math.round(r * 255),\n    g: Math.round(g * 255),\n    b: Math.round(b * 255)\n  };\n}\n/**\r\n * Returns `true` if color is \"light\". Useful indetermining which contrasting\r\n * color to use for elements over this color. E.g.: you would want to use\r\n * black text over light background, and vice versa.\r\n *\r\n * @ignore Exclude from docs\r\n * @param color  Source color\r\n * @return Light?\r\n */\nexport function isLight(color) {\n  return (color.r * 299 + color.g * 587 + color.b * 114) / 1000 >= 128;\n}","map":{"version":3,"names":["$math","$type","namedColors","aliceblue","r","g","b","antiquewhite","aqua","aquamarine","azure","beige","bisque","black","blanchedalmond","blue","blueviolet","brown","burlywood","cadetblue","chartreuse","chocolate","coral","cornflowerblue","cornsilk","crimson","cyan","darkblue","darkcyan","darkgoldenrod","darkgray","darkgrey","darkgreen","darkkhaki","darkmagenta","darkolivegreen","darkorange","darkorchid","darkred","darksalmon","darkseagreen","darkslateblue","darkslategray","darkslategrey","darkturquoise","darkviolet","deeppink","deepskyblue","dimgray","dimgrey","dodgerblue","firebrick","floralwhite","forestgreen","fuchsia","gainsboro","ghostwhite","gold","goldenrod","gray","grey","green","greenyellow","honeydew","hotpink","indianred","indigo","ivory","khaki","lavender","lavenderblush","lawngreen","lemonchiffon","lightblue","lightcoral","lightcyan","lightgoldenrodyellow","lightgray","lightgrey","lightgreen","lightpink","lightsalmon","lightseagreen","lightskyblue","lightslategray","lightslategrey","lightsteelblue","lightyellow","lime","limegreen","linen","magenta","maroon","mediumaquamarine","mediumblue","mediumorchid","mediumpurple","mediumseagreen","mediumslateblue","mediumspringgreen","mediumturquoise","mediumvioletred","midnightblue","mintcream","mistyrose","moccasin","navajowhite","navy","oldlace","olive","olivedrab","orange","orangered","orchid","palegoldenrod","palegreen","paleturquoise","palevioletred","papayawhip","peachpuff","peru","pink","plum","powderblue","purple","rebeccapurple","red","rosybrown","royalblue","saddlebrown","salmon","sandybrown","seagreen","seashell","sienna","silver","skyblue","slateblue","slategray","slategrey","snow","springgreen","steelblue","tan","teal","thistle","tomato","turquoise","violet","wheat","white","whitesmoke","yellow","yellowgreen","rgb","color","alpha","charAt","hexToRgb","match","rgbaToRgb","a","hasValue","hex","shorthandRegex","replace","m","result","exec","parseInt","hexToRgbWithAlpha","undefined","matches","push","parseFloat","rgbToHex","pad2","toString","rgbToRGBA","c","length","interpolate","rgb1","rgb2","percent","fitToRange","Math","round","lighten","max","min","getLightnessStep","value","base","brighten","step","getBrightnessStep","saturate","saturation","hsl","rgbToHsl","s","hslToRgb","h","l","hue2rgb","p","q","t","d","rgbToHsv","v","hsvToRgb","i","floor","f","isLight"],"sources":["../../../../../src/.internal/core/utils/Colors.ts"],"sourcesContent":["/**\r\n * A collection of color-related functions\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport * as $math from \"./Math\";\r\nimport * as $type from \"./Type\";\r\n\r\n/**\r\n * Define named colors for easy resolution to RGB.\r\n */\r\nlet namedColors = {\r\n\taliceblue: { r: 240, g: 248, b: 255 },\r\n\tantiquewhite: { r: 250, g: 235, b: 215 },\r\n\taqua: { r: 0, g: 255, b: 255 },\r\n\taquamarine: { r: 127, g: 255, b: 212 },\r\n\tazure: { r: 240, g: 255, b: 255 },\r\n\tbeige: { r: 245, g: 245, b: 220 },\r\n\tbisque: { r: 255, g: 228, b: 196 },\r\n\tblack: { r: 0, g: 0, b: 0 },\r\n\tblanchedalmond: { r: 255, g: 235, b: 205 },\r\n\tblue: { r: 0, g: 0, b: 255 },\r\n\tblueviolet: { r: 138, g: 43, b: 226 },\r\n\tbrown: { r: 165, g: 42, b: 42 },\r\n\tburlywood: { r: 222, g: 184, b: 135 },\r\n\tcadetblue: { r: 95, g: 158, b: 160 },\r\n\tchartreuse: { r: 127, g: 255, b: 0 },\r\n\tchocolate: { r: 210, g: 105, b: 30 },\r\n\tcoral: { r: 255, g: 127, b: 80 },\r\n\tcornflowerblue: { r: 100, g: 149, b: 237 },\r\n\tcornsilk: { r: 255, g: 248, b: 220 },\r\n\tcrimson: { r: 220, g: 20, b: 60 },\r\n\tcyan: { r: 0, g: 255, b: 255 },\r\n\tdarkblue: { r: 0, g: 0, b: 139 },\r\n\tdarkcyan: { r: 0, g: 139, b: 139 },\r\n\tdarkgoldenrod: { r: 184, g: 134, b: 11 },\r\n\tdarkgray: { r: 169, g: 169, b: 169 },\r\n\tdarkgrey: { r: 169, g: 169, b: 169 },\r\n\tdarkgreen: { r: 0, g: 100, b: 0 },\r\n\tdarkkhaki: { r: 189, g: 183, b: 107 },\r\n\tdarkmagenta: { r: 139, g: 0, b: 139 },\r\n\tdarkolivegreen: { r: 85, g: 107, b: 47 },\r\n\tdarkorange: { r: 255, g: 140, b: 0 },\r\n\tdarkorchid: { r: 153, g: 50, b: 204 },\r\n\tdarkred: { r: 139, g: 0, b: 0 },\r\n\tdarksalmon: { r: 233, g: 150, b: 122 },\r\n\tdarkseagreen: { r: 143, g: 188, b: 143 },\r\n\tdarkslateblue: { r: 72, g: 61, b: 139 },\r\n\tdarkslategray: { r: 47, g: 79, b: 79 },\r\n\tdarkslategrey: { r: 47, g: 79, b: 79 },\r\n\tdarkturquoise: { r: 0, g: 206, b: 209 },\r\n\tdarkviolet: { r: 148, g: 0, b: 211 },\r\n\tdeeppink: { r: 255, g: 20, b: 147 },\r\n\tdeepskyblue: { r: 0, g: 191, b: 255 },\r\n\tdimgray: { r: 105, g: 105, b: 105 },\r\n\tdimgrey: { r: 105, g: 105, b: 105 },\r\n\tdodgerblue: { r: 30, g: 144, b: 255 },\r\n\tfirebrick: { r: 178, g: 34, b: 34 },\r\n\tfloralwhite: { r: 255, g: 250, b: 240 },\r\n\tforestgreen: { r: 34, g: 139, b: 34 },\r\n\tfuchsia: { r: 255, g: 0, b: 255 },\r\n\tgainsboro: { r: 220, g: 220, b: 220 },\r\n\tghostwhite: { r: 248, g: 248, b: 255 },\r\n\tgold: { r: 255, g: 215, b: 0 },\r\n\tgoldenrod: { r: 218, g: 165, b: 32 },\r\n\tgray: { r: 128, g: 128, b: 128 },\r\n\tgrey: { r: 128, g: 128, b: 128 },\r\n\tgreen: { r: 0, g: 128, b: 0 },\r\n\tgreenyellow: { r: 173, g: 255, b: 47 },\r\n\thoneydew: { r: 240, g: 255, b: 240 },\r\n\thotpink: { r: 255, g: 105, b: 180 },\r\n\tindianred: { r: 205, g: 92, b: 92 },\r\n\tindigo: { r: 75, g: 0, b: 130 },\r\n\tivory: { r: 255, g: 255, b: 240 },\r\n\tkhaki: { r: 240, g: 230, b: 140 },\r\n\tlavender: { r: 230, g: 230, b: 250 },\r\n\tlavenderblush: { r: 255, g: 240, b: 245 },\r\n\tlawngreen: { r: 124, g: 252, b: 0 },\r\n\tlemonchiffon: { r: 255, g: 250, b: 205 },\r\n\tlightblue: { r: 173, g: 216, b: 230 },\r\n\tlightcoral: { r: 240, g: 128, b: 128 },\r\n\tlightcyan: { r: 224, g: 255, b: 255 },\r\n\tlightgoldenrodyellow: { r: 250, g: 250, b: 210 },\r\n\tlightgray: { r: 211, g: 211, b: 211 },\r\n\tlightgrey: { r: 211, g: 211, b: 211 },\r\n\tlightgreen: { r: 144, g: 238, b: 144 },\r\n\tlightpink: { r: 255, g: 182, b: 193 },\r\n\tlightsalmon: { r: 255, g: 160, b: 122 },\r\n\tlightseagreen: { r: 32, g: 178, b: 170 },\r\n\tlightskyblue: { r: 135, g: 206, b: 250 },\r\n\tlightslategray: { r: 119, g: 136, b: 153 },\r\n\tlightslategrey: { r: 119, g: 136, b: 153 },\r\n\tlightsteelblue: { r: 176, g: 196, b: 222 },\r\n\tlightyellow: { r: 255, g: 255, b: 224 },\r\n\tlime: { r: 0, g: 255, b: 0 },\r\n\tlimegreen: { r: 50, g: 205, b: 50 },\r\n\tlinen: { r: 250, g: 240, b: 230 },\r\n\tmagenta: { r: 255, g: 0, b: 255 },\r\n\tmaroon: { r: 128, g: 0, b: 0 },\r\n\tmediumaquamarine: { r: 102, g: 205, b: 170 },\r\n\tmediumblue: { r: 0, g: 0, b: 205 },\r\n\tmediumorchid: { r: 186, g: 85, b: 211 },\r\n\tmediumpurple: { r: 147, g: 112, b: 219 },\r\n\tmediumseagreen: { r: 60, g: 179, b: 113 },\r\n\tmediumslateblue: { r: 123, g: 104, b: 238 },\r\n\tmediumspringgreen: { r: 0, g: 250, b: 154 },\r\n\tmediumturquoise: { r: 72, g: 209, b: 204 },\r\n\tmediumvioletred: { r: 199, g: 21, b: 133 },\r\n\tmidnightblue: { r: 25, g: 25, b: 112 },\r\n\tmintcream: { r: 245, g: 255, b: 250 },\r\n\tmistyrose: { r: 255, g: 228, b: 225 },\r\n\tmoccasin: { r: 255, g: 228, b: 181 },\r\n\tnavajowhite: { r: 255, g: 222, b: 173 },\r\n\tnavy: { r: 0, g: 0, b: 128 },\r\n\toldlace: { r: 253, g: 245, b: 230 },\r\n\tolive: { r: 128, g: 128, b: 0 },\r\n\tolivedrab: { r: 107, g: 142, b: 35 },\r\n\torange: { r: 255, g: 165, b: 0 },\r\n\torangered: { r: 255, g: 69, b: 0 },\r\n\torchid: { r: 218, g: 112, b: 214 },\r\n\tpalegoldenrod: { r: 238, g: 232, b: 170 },\r\n\tpalegreen: { r: 152, g: 251, b: 152 },\r\n\tpaleturquoise: { r: 175, g: 238, b: 238 },\r\n\tpalevioletred: { r: 219, g: 112, b: 147 },\r\n\tpapayawhip: { r: 255, g: 239, b: 213 },\r\n\tpeachpuff: { r: 255, g: 218, b: 185 },\r\n\tperu: { r: 205, g: 133, b: 63 },\r\n\tpink: { r: 255, g: 192, b: 203 },\r\n\tplum: { r: 221, g: 160, b: 221 },\r\n\tpowderblue: { r: 176, g: 224, b: 230 },\r\n\tpurple: { r: 128, g: 0, b: 128 },\r\n\trebeccapurple: { r: 102, g: 51, b: 153 },\r\n\tred: { r: 255, g: 0, b: 0 },\r\n\trosybrown: { r: 188, g: 143, b: 143 },\r\n\troyalblue: { r: 65, g: 105, b: 225 },\r\n\tsaddlebrown: { r: 139, g: 69, b: 19 },\r\n\tsalmon: { r: 250, g: 128, b: 114 },\r\n\tsandybrown: { r: 244, g: 164, b: 96 },\r\n\tseagreen: { r: 46, g: 139, b: 87 },\r\n\tseashell: { r: 255, g: 245, b: 238 },\r\n\tsienna: { r: 160, g: 82, b: 45 },\r\n\tsilver: { r: 192, g: 192, b: 192 },\r\n\tskyblue: { r: 135, g: 206, b: 235 },\r\n\tslateblue: { r: 106, g: 90, b: 205 },\r\n\tslategray: { r: 112, g: 128, b: 144 },\r\n\tslategrey: { r: 112, g: 128, b: 144 },\r\n\tsnow: { r: 255, g: 250, b: 250 },\r\n\tspringgreen: { r: 0, g: 255, b: 127 },\r\n\tsteelblue: { r: 70, g: 130, b: 180 },\r\n\ttan: { r: 210, g: 180, b: 140 },\r\n\tteal: { r: 0, g: 128, b: 128 },\r\n\tthistle: { r: 216, g: 191, b: 216 },\r\n\ttomato: { r: 255, g: 99, b: 71 },\r\n\tturquoise: { r: 64, g: 224, b: 208 },\r\n\tviolet: { r: 238, g: 130, b: 238 },\r\n\twheat: { r: 245, g: 222, b: 179 },\r\n\twhite: { r: 255, g: 255, b: 255 },\r\n\twhitesmoke: { r: 245, g: 245, b: 245 },\r\n\tyellow: { r: 255, g: 255, b: 0 },\r\n\tyellowgreen: { r: 154, g: 205, b: 50 }\r\n};\r\n\r\n\r\n/**\r\n * Tries to resolve a named color into a hex color representation.\r\n *\r\n * @ignore Exclude from docs\r\n * @param value  Color name\r\n * @return Color\r\n * @deprecated\r\n * @hidden\r\n */\r\n/*export function resolveNamedColor(value: string): Color {\r\n\treturn (<any>namedColors)[value] ? (<any>namedColors)[value] : undefined;\r\n}*/\r\n\r\n/**\r\n * Converts a proper color hex code (i.e. \"#FF5500\") or named color (i.e. \"red\")\r\n * into an {iRGB} object. If the code is not correctly formatted, an RGB of\r\n * black is returned.\r\n *\r\n * @ignore Exclude from docs\r\n * @param color  Color code\r\n * @param alpha  Alpha (0-1)\r\n * @return RGB\r\n */\r\nexport function rgb(color: string, alpha?: number): iRGB {\r\n\r\n\t// Init return value\r\n\tlet rgb: $type.Optional<iRGB>;\r\n\r\n\t// Try resolving color format\r\n\r\n\t// Named color?\r\n\tif ((<any>namedColors)[color]) {\r\n\t\trgb = (<any>namedColors)[color];\r\n\t}\r\n\r\n\t// Hex code?\r\n\telse if (color.charAt(0) === \"#\") {\r\n\t\trgb = hexToRgb(color);\r\n\t}\r\n\r\n\t// rgb() format?\r\n\telse if (color.match(/^rgba?\\(/)) {\r\n\t\trgb = rgbaToRgb(color);\r\n\t}\r\n\r\n\t// Was not able to resolve?\r\n\tif (!rgb) {\r\n\t\trgb = { r: 0, g: 0, b: 0, a: 1 };\r\n\t}\r\n\r\n\t// Set alpha\r\n\tif ($type.hasValue(alpha)) {\r\n\t\trgb.a = alpha;\r\n\t}\r\n\r\n\treturn rgb;\r\n}\r\n\r\n/**\r\n * Converts a hex color code (i.e. \"#FF5500\") to an [[iRGB]] object.\r\n *\r\n * @ignore Exclude from docs\r\n * @param hex  Hex color code\r\n * @return RGB\r\n */\r\nexport function hexToRgb(hex: string): $type.Optional<iRGB> {\r\n\t// Expand shorthand form (e.g. \"03F\") to full form (e.g. \"0033FF\")\r\n\tlet shorthandRegex = /^#?([a-f\\d])([a-f\\d])([a-f\\d])$/i;\r\n\thex = hex.replace(shorthandRegex, function(m, r, g, b) {\r\n\t\treturn r + r + g + g + b + b;\r\n\t});\r\n\r\n\tlet result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\r\n\treturn result ? {\r\n\t\tr: parseInt(result[1], 16),\r\n\t\tg: parseInt(result[2], 16),\r\n\t\tb: parseInt(result[3], 16)\r\n\t} : hexToRgbWithAlpha(hex);\r\n}\r\n\r\n/**\r\n * Converts a hex color code with alpha (i.e. \"#FF5500128\") to an [[iRGB]] object.\r\n *\r\n * @ignore Exclude from docs\r\n * @param hex  Hex color code\r\n * @return RGB\r\n */\r\nexport function hexToRgbWithAlpha(hex: string): $type.Optional<iRGB> {\r\n\t// Expand shorthand form (e.g. \"03FA\") to full form (e.g. \"0033FFAA\")\r\n\tlet shorthandRegex = /^#?([a-f\\d])([a-f\\d])([a-f\\d])([a-f\\d])$/i;\r\n\thex = hex.replace(shorthandRegex, function(m, r, g, b, a) {\r\n\t\treturn r + r + g + g + b + b + a + a;\r\n\t});\r\n\r\n\tlet result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\r\n\treturn result ? {\r\n\t\tr: parseInt(result[1], 16),\r\n\t\tg: parseInt(result[2], 16),\r\n\t\tb: parseInt(result[3], 16),\r\n\t\ta: parseInt(result[4], 16) / 256\r\n\t} : undefined;\r\n}\r\n\r\n/**\r\n * Converts color strings in format like `rgb()` and `rgba()` to [[iRGB]].\r\n *\r\n * @ignore Exclude from docs\r\n * @param color  Color code\r\n * @return RGB\r\n */\r\nexport function rgbaToRgb(color: string): $type.Optional<iRGB> {\r\n\tcolor = color.replace(/[ ]/g, \"\");\r\n\r\n\t// Init\r\n\tlet matches: string[] | null = color.match(/^rgb\\(([0-9]*),([0-9]*),([0-9]*)\\)/i);\r\n\r\n\t// Try rgb() format\r\n\tif (matches) {\r\n\t\tmatches.push(\"1\");\r\n\r\n\t} else {\r\n\t\tmatches = color.match(/^rgba\\(([0-9]*),([0-9]*),([0-9]*),([.0-9]*)\\)/i);\r\n\r\n\t\tif (!matches) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t}\r\n\r\n\treturn {\r\n\t\tr: parseInt(matches[1]),\r\n\t\tg: parseInt(matches[2]),\r\n\t\tb: parseInt(matches[3]),\r\n\t\ta: parseFloat(matches[4])\r\n\t};\r\n}\r\n\r\n/**\r\n * Converts an [[iRGB]] object into a hex color code.\r\n *\r\n * @ignore Exclude from docs\r\n * @param rgb  RGB\r\n * @return Hex color code\r\n */\r\nexport function rgbToHex(rgb: iRGB): string {\r\n\treturn \"#\" + pad2(rgb.r.toString(16)) + pad2(rgb.g.toString(16)) + pad2(rgb.b.toString(16));\r\n}\r\n\r\n/**\r\n * Converts an [[iRGB]] object into its `rgb()` or `rgba()` representation.\r\n *\r\n * @ignore Exclude from docs\r\n * @param rgb  RGB\r\n * @return `rgba()` syntax\r\n */\r\nexport function rgbToRGBA(rgb: iRGB): string {\r\n\tif ($type.hasValue(rgb.a) && rgb.a !== 1) {\r\n\t\treturn \"rgba(\" + rgb.r + \",\" + rgb.g + \",\" + rgb.b + \",\" + rgb.a + \")\";\r\n\t}\r\n\telse {\r\n\t\treturn \"rgb(\" + rgb.r + \",\" + rgb.g + \",\" + rgb.b + \")\";\r\n\t}\r\n}\r\n\r\n/**\r\n * Pads a 1-digit string with a zero.\r\n *\r\n * @ignore Exclude from docs\r\n * @param c  Input string\r\n * @return Padded string\r\n */\r\nexport function pad2(c: string): string {\r\n\treturn c.length == 1 ? \"0\" + c : \"\" + c;\r\n}\r\n\r\n/**\r\n * Returns an intermediate color between two colors based on the relative\r\n * position. Position needs to be in range between 0 and 1. Zero meaning the\r\n * resulting color will be closest to the first reference color.\r\n *\r\n * @ignore Exclude from docs\r\n * @param color1   First reference color\r\n * @param color2   Second reference color\r\n * @param percent  Relative position (0-1)\r\n * @return Interpolated color\r\n */\r\nexport function interpolate(rgb1: $type.Optional<iRGB>, rgb2: $type.Optional<iRGB>, percent: number): $type.Optional<iRGB> {\r\n\tpercent = $math.fitToRange(percent, 0, 1);\r\n\r\n\tif (rgb1) {\r\n\t\tif (rgb2) {\r\n\t\t\treturn {\r\n\t\t\t\tr: rgb1.r + Math.round((rgb2.r - rgb1.r) * percent),\r\n\t\t\t\tg: rgb1.g + Math.round((rgb2.g - rgb1.g) * percent),\r\n\t\t\t\tb: rgb1.b + Math.round((rgb2.b - rgb1.b) * percent),\r\n\t\t\t\ta: (rgb1.a || 1) + Math.round(((rgb2.a || 1) - (rgb1.a || 1)) * percent)\r\n\t\t\t};\r\n\r\n\t\t} else {\r\n\t\t\treturn rgb1;\r\n\t\t}\r\n\r\n\t} else if (rgb2) {\r\n\t\treturn rgb2;\r\n\r\n\t} else {\r\n\t\treturn rgb1;\r\n\t}\r\n}\r\n\r\n/**\r\n * Returns a color that is `percent` brighter than the reference color.\r\n *\r\n * @ignore Exclude from docs\r\n * @param color    Reference color\r\n * @param percent  Brightness percent\r\n * @return Hex code of the new color\r\n */\r\nexport function lighten(rgb: $type.Optional<iRGB>, percent: number): $type.Optional<iRGB> {\r\n\tif (rgb) {\r\n\t\treturn {\r\n\t\t\tr: Math.max(0, Math.min(255, rgb.r + getLightnessStep(rgb.r, percent))),\r\n\t\t\tg: Math.max(0, Math.min(255, rgb.g + getLightnessStep(rgb.g, percent))),\r\n\t\t\tb: Math.max(0, Math.min(255, rgb.b + getLightnessStep(rgb.b, percent))),\r\n\t\t\ta: rgb.a\r\n\t\t};\r\n\r\n\t} else {\r\n\t\t// TODO is this correct ?\r\n\t\treturn rgb;\r\n\t}\r\n};\r\n\r\n/**\r\n * Gets lightness step.\r\n *\r\n * @ignore Exclude from docs\r\n * @param value    Value\r\n * @param percent  Percent\r\n * @return Step\r\n */\r\nexport function getLightnessStep(value: number, percent: number): number {\r\n\tlet base = percent > 0 ? 255 - value : value;\r\n\treturn Math.round(base * percent);\r\n}\r\n\r\n/**\r\n * Returns a color that is `percent` brighter than the source `color`.\r\n *\r\n * @ignore Exclude from docs\r\n * @param color    Source color\r\n * @param percent  Brightness percent\r\n * @return New color\r\n */\r\nexport function brighten(rgb: $type.Optional<iRGB>, percent: number): $type.Optional<iRGB> {\r\n\tif (rgb) {\r\n\t\tlet base = Math.min(Math.max(rgb.r, rgb.g, rgb.b), 230);\r\n\t\t//let base = Math.max(rgb.r, rgb.g, rgb.b);\r\n\t\tlet step = getLightnessStep(base, percent);\r\n\t\treturn {\r\n\t\t\tr: Math.max(0, Math.min(255, Math.round(rgb.r + step))),\r\n\t\t\tg: Math.max(0, Math.min(255, Math.round(rgb.g + step))),\r\n\t\t\tb: Math.max(0, Math.min(255, Math.round(rgb.b + step))),\r\n\t\t\ta: rgb.a\r\n\t\t};\r\n\r\n\t} else {\r\n\t\t// TODO is this correct ?\r\n\t\treturn rgb;\r\n\t}\r\n};\r\n\r\n/**\r\n * Returns brightness step.\r\n *\r\n * @ignore Exclude from docs\r\n * @param value    Value\r\n * @param percent  Percent\r\n * @return Step\r\n */\r\nexport function getBrightnessStep(value: number, percent: number): number {\r\n\tlet base = 255; //percent > 0 ? 255 - value : value;\r\n\treturn Math.round(base * percent);\r\n}\r\n\r\n/**\r\n * Returns a new [[iRGB]] object based on `rgb` parameter with specific\r\n * saturation applied.\r\n *\r\n * `saturation` can be in the range of 0 (fully desaturated) to 1 (fully\r\n * saturated).\r\n *\r\n * @ignore Exclude from docs\r\n * @param color       Base color\r\n * @param saturation  Saturation (0-1)\r\n * @return New color\r\n */\r\nexport function saturate(rgb: $type.Optional<iRGB>, saturation: number): $type.Optional<iRGB> {\r\n\tif (rgb == null || saturation == 1) {\r\n\t\treturn rgb;\r\n\t}\r\n\r\n\tlet hsl = rgbToHsl(rgb);\r\n\thsl.s = saturation;\r\n\treturn hslToRgb(hsl);\r\n}\r\n\r\n/*\r\n// not used\r\nexport function rgbToMatrix(rgb: iRGB): string {\r\n\tlet r = $type.toText($math.round((rgb.r || 0) / 255, 10));\r\n\tlet g = $type.toText($math.round((rgb.g || 0) / 255, 10));\r\n\tlet b = $type.toText($math.round((rgb.b || 0) / 255, 10));\r\n\tlet a = $type.toText(rgb.a || 1);\r\n\treturn\t      r + \" 0 0 0 0\" +\r\n\t\t\t\t\t\" 0 \" + g + \" 0 0 0\" +\r\n\t\t\t\t\t\" 0 0 \" + b + \" 0 0\" +\r\n\t\t\t\t\t\" 0 0 0 \" + a + \" 0\";\r\n}\r\n*/\r\n\r\n/**\r\n * The functions below are taken and adapted from Garry Tan's blog post:\r\n * http://axonflux.com/handy-rgb-to-hsl-and-rgb-to-hsv-color-model-c\r\n *\r\n * The further attributions go mjijackson.com, which now seems to be defunct.\r\n */\r\n\r\n/**\r\n * Converts an HSL color value to RGB. Conversion formula\r\n * adapted from http://en.wikipedia.org/wiki/HSL_color_space.\r\n * Assumes h, s, and l are contained in the set [0, 1] and\r\n * returns r, g, and b in the set [0, 255].\r\n *\r\n * Function adapted from:\r\n * http://axonflux.com/handy-rgb-to-hsl-and-rgb-to-hsv-color-model-c\r\n *\r\n * @ignore Exclude from docs\r\n * @param h       The hue\r\n * @param s       The saturation\r\n * @param l       The lightness\r\n * @return The RGB representation\r\n */\r\nexport function hslToRgb(color: iHSL): iRGB {\r\n\tlet r, g, b;\r\n\tlet h = color.h;\r\n\tlet s = color.s;\r\n\tlet l = color.l;\r\n\r\n\tif (s == 0) {\r\n\t\tr = g = b = l; // achromatic\r\n\t} else {\r\n\t\tlet hue2rgb = function hue2rgb(p: number, q: number, t: number) {\r\n\t\t\tif (t < 0) { t += 1; }\r\n\t\t\tif (t > 1) { t -= 1; }\r\n\t\t\tif (t < 1 / 6) { return p + (q - p) * 6 * t; }\r\n\t\t\tif (t < 1 / 2) { return q; }\r\n\t\t\tif (t < 2 / 3) { return p + (q - p) * (2 / 3 - t) * 6; }\r\n\t\t\treturn p;\r\n\t\t}\r\n\r\n\t\tlet q = l < 0.5 ? l * (1 + s) : l + s - l * s;\r\n\t\tlet p = 2 * l - q;\r\n\t\tr = hue2rgb(p, q, h + 1 / 3);\r\n\t\tg = hue2rgb(p, q, h);\r\n\t\tb = hue2rgb(p, q, h - 1 / 3);\r\n\t}\r\n\r\n\treturn {\r\n\t\tr: Math.round(r * 255),\r\n\t\tg: Math.round(g * 255),\r\n\t\tb: Math.round(b * 255)\r\n\t};\r\n}\r\n\r\n/**\r\n * Converts an RGB color value to HSL. Conversion formula\r\n * adapted from http://en.wikipedia.org/wiki/HSL_color_space.\r\n * Assumes r, g, and b are contained in the set [0, 255] and\r\n * returns h, s, and l in the set [0, 1].\r\n *\r\n * Function adapted from:\r\n * http://axonflux.com/handy-rgb-to-hsl-and-rgb-to-hsv-color-model-c\r\n *\r\n * @ignore Exclude from docs\r\n * @param r       The red color value\r\n * @param g       The green color value\r\n * @param b       The blue color value\r\n * @return The HSL representation\r\n */\r\nexport function rgbToHsl(color: iRGB): iHSL {\r\n\tlet r = color.r / 255;\r\n\tlet g = color.g / 255;\r\n\tlet b = color.b / 255;\r\n\tlet max = Math.max(r, g, b);\r\n\tlet min = Math.min(r, g, b);\r\n\tlet h = 0;\r\n\tlet s = 0;\r\n\tlet l = (max + min) / 2;\r\n\r\n\tif (max === min) {\r\n\t\th = s = 0; // achromatic\r\n\r\n\t} else {\r\n\t\tlet d = max - min;\r\n\r\n\t\ts = l > 0.5 ? d / (2 - max - min) : d / (max + min);\r\n\r\n\t\tswitch (max) {\r\n\t\t\tcase r: h = (g - b) / d + (g < b ? 6 : 0); break;\r\n\t\t\tcase g: h = (b - r) / d + 2; break;\r\n\t\t\tcase b: h = (r - g) / d + 4; break;\r\n\t\t}\r\n\r\n\t\th /= 6;\r\n\t}\r\n\r\n\treturn {\r\n\t\th: h,\r\n\t\ts: s,\r\n\t\tl: l\r\n\t};\r\n}\r\n\r\n/**\r\n * Converts an RGB color value to HSV. Conversion formula\r\n * adapted from http://en.wikipedia.org/wiki/HSV_color_space.\r\n * Assumes r, g, and b are contained in the set [0, 255] and\r\n * returns h, s, and v in the set [0, 1].\r\n *\r\n * @ignore Exclude from docs\r\n * @param   Number  r       The red color value\r\n * @param   Number  g       The green color value\r\n * @param   Number  b       The blue color value\r\n * @return  Array           The HSV representation\r\n */\r\nexport function rgbToHsv(color: iRGB): iHSV {\r\n\tlet r = color.r / 255;\r\n\tlet g = color.g / 255;\r\n\tlet b = color.b / 255;\r\n\tlet max = Math.max(r, g, b), min = Math.min(r, g, b);\r\n\tlet h = 0;\r\n\tlet s = 0;\r\n\tlet v = max;\r\n\r\n\tlet d = max - min;\r\n\ts = max == 0 ? 0 : d / max;\r\n\r\n\tif (max == min) {\r\n\t\th = 0; // achromatic\r\n\r\n\t} else {\r\n\t\tswitch (max) {\r\n\t\t\tcase r: h = (g - b) / d + (g < b ? 6 : 0); break;\r\n\t\t\tcase g: h = (b - r) / d + 2; break;\r\n\t\t\tcase b: h = (r - g) / d + 4; break;\r\n\t\t}\r\n\t\th /= 6;\r\n\t}\r\n\r\n\treturn {\r\n\t\th: h,\r\n\t\ts: s,\r\n\t\tv: v\r\n\t};\r\n}\r\n\r\n/**\r\n * Converts an HSV color value to RGB. Conversion formula\r\n * adapted from http://en.wikipedia.org/wiki/HSV_color_space.\r\n * Assumes h, s, and v are contained in the set [0, 1] and\r\n * returns r, g, and b in the set [0, 255].\r\n *\r\n * @ignore Exclude from docs\r\n * @param   Number  h       The hue\r\n * @param   Number  s       The saturation\r\n * @param   Number  v       The value\r\n * @return  Array           The RGB representation\r\n */\r\nexport function hsvToRgb(color: iHSV): iRGB {\r\n\tlet r = 0;\r\n\tlet g = 0;\r\n\tlet b = 0;\r\n\tlet h = color.h;\r\n\tlet s = color.s;\r\n\tlet v = color.v;\r\n\r\n\tlet i = Math.floor(h * 6);\r\n\tlet f = h * 6 - i;\r\n\tlet p = v * (1 - s);\r\n\tlet q = v * (1 - f * s);\r\n\tlet t = v * (1 - (1 - f) * s);\r\n\r\n\tswitch (i % 6) {\r\n\t\tcase 0:\r\n\t\t\tr = v;\r\n\t\t\tg = t;\r\n\t\t\tb = p;\r\n\t\t\tbreak;\r\n\t\tcase 1:\r\n\t\t\tr = q;\r\n\t\t\tg = v;\r\n\t\t\tb = p;\r\n\t\t\tbreak;\r\n\t\tcase 2:\r\n\t\t\tr = p;\r\n\t\t\tg = v;\r\n\t\t\tb = t;\r\n\t\t\tbreak;\r\n\t\tcase 3:\r\n\t\t\tr = p;\r\n\t\t\tg = q;\r\n\t\t\tb = v;\r\n\t\t\tbreak;\r\n\t\tcase 4:\r\n\t\t\tr = t;\r\n\t\t\tg = p;\r\n\t\t\tb = v;\r\n\t\t\tbreak;\r\n\t\tcase 5:\r\n\t\t\tr = v;\r\n\t\t\tg = p;\r\n\t\t\tb = q;\r\n\t\t\tbreak;\r\n\t}\r\n\r\n\treturn {\r\n\t\tr: Math.round(r * 255),\r\n\t\tg: Math.round(g * 255),\r\n\t\tb: Math.round(b * 255)\r\n\t};\r\n}\r\n\r\n/**\r\n * Returns `true` if color is \"light\". Useful indetermining which contrasting\r\n * color to use for elements over this color. E.g.: you would want to use\r\n * black text over light background, and vice versa.\r\n *\r\n * @ignore Exclude from docs\r\n * @param color  Source color\r\n * @return Light?\r\n */\r\nexport function isLight(color: iRGB): boolean {\r\n\treturn ((color.r * 299) + (color.g * 587) + (color.b * 114)) / 1000 >= 128;\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * COLOR CONVERSION\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Represents an interface for an object that represents an RGB color.\r\n */\r\nexport interface iRGB {\r\n\tr: number;\r\n\tg: number;\r\n\tb: number;\r\n\ta?: number;\r\n}\r\n\r\n/**\r\n * Represents an interface for an object that represents an HSL color.\r\n */\r\nexport interface iHSL {\r\n\th: number;\r\n\ts: number;\r\n\tl: number;\r\n\ta?: number;\r\n}\r\n\r\n/**\r\n * Represents an interface for an object that represents an HSV color.\r\n */\r\nexport interface iHSV {\r\n\th: number;\r\n\ts: number;\r\n\tv: number;\r\n\ta?: number;\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}