{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n/**\r\n * Slice module.\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\nimport { Container } from \"../Container\";\nimport { Sprite } from \"../Sprite\";\nimport { registry } from \"../Registry\";\nimport * as $math from \"../utils/Math\";\nimport * as $path from \"../rendering/Path\";\nimport * as $type from \"../utils/Type\";\nimport * as $utils from \"../utils/Utils\";\nimport { Percent } from \"../utils/Percent\";\nimport { RadialGradient } from \"../rendering/fills/RadialGradient\";\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n/**\r\n * Draws a wedged semi-circle - slice. Usually used for Pie/Donut charts.\r\n *\r\n * @see {@link ISliceEvents} for a list of available events\r\n * @see {@link ISliceAdapters} for a list of available Adapters\r\n */\nvar Slice = /** @class */function (_super) {\n  __extends(Slice, _super);\n  /**\r\n   * Constructor\r\n   */\n  function Slice() {\n    var _this =\n    // Init\n    _super.call(this) || this;\n    _this.className = \"Slice\";\n    // Set defaults\n    _this.setPropertyValue(\"cornerRadius\", 0);\n    _this.setPropertyValue(\"startAngle\", 0);\n    _this.setPercentProperty(\"innerRadius\", 0);\n    _this.setPercentProperty(\"radius\", 0);\n    _this.setPropertyValue(\"arc\", 0);\n    _this.setPropertyValue(\"shiftRadius\", 0);\n    _this.strokeOpacity = 1;\n    _this.setPropertyValue(\"layout\", \"none\");\n    // Create a slice wedge element\n    _this.slice = _this.createChild(Sprite);\n    _this.slice.isMeasured = false;\n    _this._disposers.push(_this.slice);\n    //this.element.attr({ \"stroke-linejoin\": \"round\" });\n    //this.element.attr({ \"stroke-linecap\": \"round\" });\n    // Apply theme\n    _this.applyTheme();\n    return _this;\n  }\n  /**\r\n   * Draws the element.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  Slice.prototype.draw = function () {\n    _super.prototype.draw.call(this);\n    var radiusY = this.radiusY;\n    if (this.radius > 0 && radiusY == 0) {\n      radiusY = 0.01;\n    }\n    this.slice.path = $path.arc(this.startAngle, this.arc, this.radius, this.pixelInnerRadius, radiusY, this.cornerRadius, this.innerCornerRadius);\n    this.slice.invalidate();\n    this.shiftRadius = this.shiftRadius;\n    if (this.realFill instanceof RadialGradient) {\n      this.updateGradient(this.realFill);\n    }\n    if (this.realStroke instanceof RadialGradient) {\n      this.updateGradient(this.realStroke);\n    }\n  };\n  Slice.prototype.updateGradient = function (gradient) {\n    gradient.element.attr({\n      \"gradientUnits\": \"userSpaceOnUse\"\n    });\n    gradient.element.attr({\n      \"r\": this.radius\n    });\n    gradient.cx = 0;\n    gradient.cy = 0;\n    gradient.element.attr({\n      radius: this.radius\n    });\n  };\n  Object.defineProperty(Slice.prototype, \"bbox\", {\n    /**\r\n     * Returns bounding box (square) for this element.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\n    get: function () {\n      if (this.definedBBox) {\n        return this.definedBBox;\n      }\n      if (this.isMeasured) {\n        var innerRect = $math.getArcRect(this.startAngle, this.startAngle + this.arc, this.pixelInnerRadius);\n        var outerRect = $math.getArcRect(this.startAngle, this.startAngle + this.arc, this.radius);\n        return $math.getCommonRectangle([innerRect, outerRect]);\n      } else {\n        return {\n          x: 0,\n          y: 0,\n          width: 0,\n          height: 0\n        };\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Slice.prototype, \"startAngle\", {\n    /**\r\n     * @return Angle (0-360)\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"startAngle\");\n    },\n    /**\r\n     * The angle at which left edge of the slice is drawn. (0-360)\r\n     *\r\n     * 0 is to the right of the center.\r\n     *\r\n     * @param value  Angle (0-360)\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"startAngle\", $math.normalizeAngle(value), true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Slice.prototype, \"arc\", {\n    /**\r\n     * @return [description]\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"arc\");\n    },\n    /**\r\n     * [arc description]\r\n     *\r\n     * @todo Description\r\n     * @param value [description]\r\n     */\n    set: function (value) {\n      if (!$type.isNumber(value)) {\n        value = 0;\n      }\n      this.setPropertyValue(\"arc\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Slice.prototype, \"radius\", {\n    /**\r\n     * @return Radius (px)\r\n     */\n    get: function () {\n      var radius = this.getPropertyValue(\"radius\");\n      if (!$type.isNumber(radius)) {\n        radius = 0;\n      }\n      return radius;\n    },\n    /**\r\n     * Radius of the slice in pixels.\r\n     *\r\n     * @param value  Radius (px)\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"radius\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Slice.prototype, \"radiusY\", {\n    /**\r\n     * @return Vertical radius (0-1)\r\n     */\n    get: function () {\n      var value = this.getPropertyValue(\"radiusY\");\n      if (!$type.isNumber(value)) {\n        value = this.radius;\n      }\n      return value;\n    },\n    /**\r\n     * Vertical radius for creating skewed slices.\r\n     *\r\n     * This is relevant to `radius`, e.g. 0.5 will set vertical radius to half\r\n     * the `radius`.\r\n     *\r\n     * @param value Vertical radius (0-1)\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"radiusY\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Slice.prototype, \"innerRadius\", {\n    /**\r\n     * @return Radius (px or %)\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"innerRadius\");\n    },\n    /**\r\n     * Inner radius of the slice for creating cut out (donut) slices.\r\n     *\r\n     * @default 0\r\n     * @param value  Radius (px or %)\r\n     */\n    set: function (value) {\n      this.setPercentProperty(\"innerRadius\", value, true, false, 10, false);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Slice.prototype, \"pixelInnerRadius\", {\n    /**\r\n     * @return Radius px\r\n     */\n    get: function () {\n      return $utils.relativeToValue(this.innerRadius, this.radius);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Slice.prototype, \"cornerRadius\", {\n    /**\r\n     * @return Radius (px)\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"cornerRadius\");\n    },\n    /**\r\n     * Radius of slice's outer corners in pixels.\r\n     *\r\n     * @default 0\r\n     * @param value  Radius (px)\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"cornerRadius\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Slice.prototype, \"innerCornerRadius\", {\n    /**\r\n     * @return Radius (px)\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"innerCornerRadius\");\n    },\n    /**\r\n     * Radius of slice's inner corners in pixels.\r\n     *\r\n     * @default 0\r\n     * @param value  Radius (px)\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"innerCornerRadius\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Slice.prototype, \"shiftRadius\", {\n    /**\r\n     * @return Radius shift\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"shiftRadius\");\n    },\n    /**\r\n     * Indicates how far (relatively to center) a slice should be moved.\r\n     *\r\n     * The value is relative to the radius of the slice. Meaning 0 no shift,\r\n     * 1 - slice shifted outside by whole of its radius.\r\n     *\r\n     * @param  value  Radius shift\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"shiftRadius\", value);\n      value = this.getPropertyValue(\"shiftRadius\");\n      this.dx = value * this.radius * this.ix;\n      this.dy = value * this.radiusY * this.iy;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Slice.prototype, \"ix\", {\n    /**\r\n     * [ix description]\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @todo Description\r\n     * @return [description]\r\n     */\n    get: function () {\n      return $math.cos(this.middleAngle);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Slice.prototype, \"iy\", {\n    /**\r\n     * [iy description]\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @todo Description\r\n     * @return [description]\r\n     */\n    get: function () {\n      return $math.sin(this.middleAngle);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Slice.prototype, \"middleAngle\", {\n    /**\r\n     * An angle of the slice's middle.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @return Angle\r\n     */\n    get: function () {\n      return this.startAngle + this.arc / 2;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * X coordinate for the slice tooltip.\r\n   *\r\n   * @return X\r\n   */\n  Slice.prototype.getTooltipX = function () {\n    var value = this.getPropertyValue(\"tooltipX\");\n    if ($type.isNumber(value)) {\n      return value;\n    }\n    var p = 0.5;\n    if (value instanceof Percent) {\n      p = value.value;\n    }\n    var innerRadius = $utils.relativeToValue(this.innerRadius, this.radius);\n    return this.ix * (innerRadius + (this.radius - innerRadius) * p);\n  };\n  /**\r\n   * Y coordinate for the slice tooltip.\r\n   *\r\n   * @return Y\r\n   */\n  Slice.prototype.getTooltipY = function () {\n    var value = this.getPropertyValue(\"tooltipY\");\n    if ($type.isNumber(value)) {\n      return value;\n    }\n    var p = 0.5;\n    if (value instanceof Percent) {\n      p = value.value;\n    }\n    var innerRadius = $utils.relativeToValue(this.innerRadius, this.radius);\n    return this.iy * (innerRadius + (this.radius - innerRadius) * p) + this.slice.dy;\n  };\n  return Slice;\n}(Container);\nexport { Slice };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\nregistry.registeredClasses[\"Slice\"] = Slice;","map":{"version":3,"names":["Container","Sprite","registry","$math","$path","$type","$utils","Percent","RadialGradient","Slice","_super","__extends","_this","call","className","setPropertyValue","setPercentProperty","strokeOpacity","slice","createChild","isMeasured","_disposers","push","applyTheme","prototype","draw","radiusY","radius","path","arc","startAngle","pixelInnerRadius","cornerRadius","innerCornerRadius","invalidate","shiftRadius","realFill","updateGradient","realStroke","gradient","element","attr","cx","cy","Object","defineProperty","get","definedBBox","innerRect","getArcRect","outerRect","getCommonRectangle","x","y","width","height","getPropertyValue","set","value","normalizeAngle","isNumber","relativeToValue","innerRadius","dx","ix","dy","iy","cos","middleAngle","sin","getTooltipX","p","getTooltipY","registeredClasses"],"sources":["../../../../../src/.internal/core/elements/Slice.ts"],"sourcesContent":["/**\r\n * Slice module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Container, IContainerProperties, IContainerAdapters, IContainerEvents } from \"../Container\";\r\nimport { Sprite } from \"../Sprite\";\r\nimport { registry } from \"../Registry\";\r\nimport * as $math from \"../utils/Math\";\r\nimport * as $path from \"../rendering/Path\";\r\nimport * as $type from \"../utils/Type\";\r\nimport * as $utils from \"../utils/Utils\";\r\nimport { Percent } from \"../utils/Percent\";\r\nimport { IRectangle } from \"../defs/IRectangle\";\r\nimport { RadialGradient } from \"../rendering/fills/RadialGradient\";\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[Slice]].\r\n */\r\nexport interface ISliceProperties extends IContainerProperties {\r\n\r\n\t/**\r\n\t * Radius of the slice in pixels.\r\n\t */\r\n\tradius?: number;\r\n\r\n\t/**\r\n\t * Vertical radius for creating skewed slices.\r\n\t *\r\n\t * This is relevant to `radius`, e.g. 0.5 will set vertical radius to half\r\n\t * the `radius`.\r\n\t */\r\n\tradiusY?: number;\r\n\r\n\t/**\r\n\t * Inner radius of the slice for creating cut out (donut) slices, in px or %\r\n\t */\r\n\tinnerRadius?: number | Percent;\r\n\r\n\t/**\r\n\t * The angle at which left edge of the slice is drawn. (0-360)\r\n\t *\r\n\t * 0 is to the right of the center.\r\n\t */\r\n\tstartAngle?: number;\r\n\r\n\t/**\r\n\t * [arc description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tarc?: number;\r\n\r\n\t/**\r\n\t * [shiftRadius description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tshiftRadius?: number;\r\n\r\n\t/**\r\n\t * Radius of slice's outer corners in pixels.\r\n\t *\r\n\t * @default 0\r\n\t */\r\n\tcornerRadius?: number;\r\n\r\n\t/**\r\n\t * Radius of slice's inner corners in pixels.\r\n\t *\r\n\t * @default 0\r\n\t */\r\n\tinnerCornerRadius?: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[Slice]].\r\n */\r\nexport interface ISliceEvents extends IContainerEvents { }\r\n\r\n/**\r\n * Defines adapters for [[Slice]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ISliceAdapters extends IContainerAdapters, ISliceProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Draws a wedged semi-circle - slice. Usually used for Pie/Donut charts.\r\n *\r\n * @see {@link ISliceEvents} for a list of available events\r\n * @see {@link ISliceAdapters} for a list of available Adapters\r\n */\r\nexport class Slice extends Container {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: ISliceProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: ISliceAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: ISliceEvents;\r\n\r\n\t/**\r\n\t * Main slice element.\r\n\t *\r\n\t * Slice itself is a [[Container]] so that [[Slice3D]] could extend it and\r\n\t * add 3D elements to it.\r\n\t */\r\n\tpublic slice: Sprite;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"Slice\";\r\n\r\n\t\t// Set defaults\r\n\t\tthis.setPropertyValue(\"cornerRadius\", 0);\r\n\t\tthis.setPropertyValue(\"startAngle\", 0);\r\n\t\tthis.setPercentProperty(\"innerRadius\", 0);\r\n\t\tthis.setPercentProperty(\"radius\", 0);\r\n\t\tthis.setPropertyValue(\"arc\", 0);\r\n\t\tthis.setPropertyValue(\"shiftRadius\", 0);\r\n\t\tthis.strokeOpacity = 1;\r\n\t\tthis.setPropertyValue(\"layout\", \"none\");\r\n\r\n\t\t// Create a slice wedge element\r\n\t\tthis.slice = this.createChild(Sprite);\r\n\t\tthis.slice.isMeasured = false;\r\n\r\n\t\tthis._disposers.push(this.slice);\r\n\r\n\t\t//this.element.attr({ \"stroke-linejoin\": \"round\" });\r\n\t\t//this.element.attr({ \"stroke-linecap\": \"round\" });\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Draws the element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic draw(): void {\r\n\t\tsuper.draw();\r\n\t\tlet radiusY = this.radiusY;\r\n\t\tif(this.radius > 0 && radiusY == 0){\r\n\t\t\tradiusY = 0.01;\r\n\t\t}\r\n\t\tthis.slice.path = $path.arc(this.startAngle, this.arc, this.radius, this.pixelInnerRadius, radiusY, this.cornerRadius, this.innerCornerRadius);\r\n\t\tthis.slice.invalidate();\r\n\t\tthis.shiftRadius = this.shiftRadius;\r\n\r\n\t\tif (this.realFill instanceof RadialGradient) {\r\n\t\t\tthis.updateGradient(this.realFill);\r\n\t\t}\r\n\t\tif (this.realStroke instanceof RadialGradient) {\r\n\t\t\tthis.updateGradient(this.realStroke);\r\n\t\t}\r\n\t}\r\n\r\n\tprotected updateGradient(gradient: RadialGradient) {\r\n\t\tgradient.element.attr({ \"gradientUnits\": \"userSpaceOnUse\" });\r\n\t\tgradient.element.attr({ \"r\": this.radius });\r\n\t\tgradient.cx = 0;\r\n\t\tgradient.cy = 0;\r\n\t\tgradient.element.attr({ radius: this.radius });\r\n\t}\r\n\r\n\r\n\r\n\t/**\r\n\t * Returns bounding box (square) for this element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic get bbox(): IRectangle {\r\n\t\tif (this.definedBBox) {\r\n\t\t\treturn this.definedBBox;\r\n\t\t}\r\n\r\n\t\tif (this.isMeasured) {\r\n\t\t\tlet innerRect = $math.getArcRect(this.startAngle, this.startAngle + this.arc, this.pixelInnerRadius);\r\n\t\t\tlet outerRect = $math.getArcRect(this.startAngle, this.startAngle + this.arc, this.radius);\r\n\t\t\treturn $math.getCommonRectangle([innerRect, outerRect]);\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn { x: 0, y: 0, width: 0, height: 0 };\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * The angle at which left edge of the slice is drawn. (0-360)\r\n\t *\r\n\t * 0 is to the right of the center.\r\n\t *\r\n\t * @param value  Angle (0-360)\r\n\t */\r\n\tpublic set startAngle(value: number) {\r\n\t\tthis.setPropertyValue(\"startAngle\", $math.normalizeAngle(value), true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Angle (0-360)\r\n\t */\r\n\tpublic get startAngle(): number {\r\n\t\treturn this.getPropertyValue(\"startAngle\");\r\n\t}\r\n\r\n\t/**\r\n\t * [arc description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param value [description]\r\n\t */\r\n\tpublic set arc(value: number) {\r\n\t\tif (!$type.isNumber(value)) {\r\n\t\t\tvalue = 0;\r\n\t\t}\r\n\t\tthis.setPropertyValue(\"arc\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return [description]\r\n\t */\r\n\tpublic get arc(): number {\r\n\t\treturn this.getPropertyValue(\"arc\");\r\n\t}\r\n\r\n\t/**\r\n\t * Radius of the slice in pixels.\r\n\t *\r\n\t * @param value  Radius (px)\r\n\t */\r\n\tpublic set radius(value: number) {\r\n\t\tthis.setPropertyValue(\"radius\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Radius (px)\r\n\t */\r\n\tpublic get radius(): number {\r\n\t\tlet radius: number = this.getPropertyValue(\"radius\");\r\n\t\tif (!$type.isNumber(radius)) {\r\n\t\t\tradius = 0;\r\n\t\t}\r\n\t\treturn radius;\r\n\t}\r\n\r\n\t/**\r\n\t * Vertical radius for creating skewed slices.\r\n\t *\r\n\t * This is relevant to `radius`, e.g. 0.5 will set vertical radius to half\r\n\t * the `radius`.\r\n\t *\r\n\t * @param value Vertical radius (0-1)\r\n\t */\r\n\tpublic set radiusY(value: number) {\r\n\t\tthis.setPropertyValue(\"radiusY\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Vertical radius (0-1)\r\n\t */\r\n\tpublic get radiusY(): number {\r\n\t\tlet value: number = this.getPropertyValue(\"radiusY\");\r\n\r\n\t\tif (!$type.isNumber(value)) {\r\n\t\t\tvalue = this.radius;\r\n\t\t}\r\n\t\treturn value;\r\n\t}\r\n\r\n\t/**\r\n\t * Inner radius of the slice for creating cut out (donut) slices.\r\n\t *\r\n\t * @default 0\r\n\t * @param value  Radius (px or %)\r\n\t */\r\n\tpublic set innerRadius(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"innerRadius\", value, true, false, 10, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Radius (px or %)\r\n\t */\r\n\tpublic get innerRadius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"innerRadius\");\r\n\t}\r\n\r\n\t/**\r\n\t * @return Radius px\r\n\t */\r\n\tpublic get pixelInnerRadius(): number {\r\n\t\treturn $utils.relativeToValue(this.innerRadius, this.radius);\r\n\t}\r\n\r\n\t/**\r\n\t * Radius of slice's outer corners in pixels.\r\n\t *\r\n\t * @default 0\r\n\t * @param value  Radius (px)\r\n\t */\r\n\tpublic set cornerRadius(value: number) {\r\n\t\tthis.setPropertyValue(\"cornerRadius\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Radius (px)\r\n\t */\r\n\tpublic get cornerRadius(): number {\r\n\t\treturn this.getPropertyValue(\"cornerRadius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Radius of slice's inner corners in pixels.\r\n\t *\r\n\t * @default 0\r\n\t * @param value  Radius (px)\r\n\t */\r\n\tpublic set innerCornerRadius(value: number) {\r\n\t\tthis.setPropertyValue(\"innerCornerRadius\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Radius (px)\r\n\t */\r\n\tpublic get innerCornerRadius(): number {\r\n\t\treturn this.getPropertyValue(\"innerCornerRadius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Indicates how far (relatively to center) a slice should be moved.\r\n\t *\r\n\t * The value is relative to the radius of the slice. Meaning 0 no shift,\r\n\t * 1 - slice shifted outside by whole of its radius.\r\n\t *\r\n\t * @param  value  Radius shift\r\n\t */\r\n\tpublic set shiftRadius(value: number) {\r\n\t\tthis.setPropertyValue(\"shiftRadius\", value);\r\n\r\n\t\tvalue = this.getPropertyValue(\"shiftRadius\");\r\n\r\n\t\tthis.dx = value * this.radius * this.ix;\r\n\t\tthis.dy = value * this.radiusY * this.iy;\r\n\t}\r\n\r\n\t/**\r\n\t * @return Radius shift\r\n\t */\r\n\tpublic get shiftRadius(): number {\r\n\t\treturn this.getPropertyValue(\"shiftRadius\");\r\n\t}\r\n\r\n\t/**\r\n\t * [ix description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @return [description]\r\n\t */\r\n\tpublic get ix(): number {\r\n\t\treturn $math.cos(this.middleAngle);\r\n\t}\r\n\r\n\t/**\r\n\t * [iy description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @return [description]\r\n\t */\r\n\tpublic get iy(): number {\r\n\t\treturn $math.sin(this.middleAngle);\r\n\t}\r\n\r\n\t/**\r\n\t * An angle of the slice's middle.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @return Angle\r\n\t */\r\n\tpublic get middleAngle(): number {\r\n\t\treturn this.startAngle + this.arc / 2;\r\n\t}\r\n\r\n\t/**\r\n\t * X coordinate for the slice tooltip.\r\n\t *\r\n\t * @return X\r\n\t */\r\n\tpublic getTooltipX(): number {\r\n\t\tlet value = this.getPropertyValue(\"tooltipX\");\r\n\r\n\t\tif($type.isNumber(value)){\r\n\t\t\treturn value;\r\n\t\t}\r\n\t\tlet p = 0.5;\r\n\t\tif(value instanceof Percent){\r\n\t\t\tp = value.value;\r\n\t\t}\r\n\t\tlet innerRadius = $utils.relativeToValue(this.innerRadius, this.radius);\r\n\t\treturn this.ix * (innerRadius + (this.radius - innerRadius) * p);\r\n\t}\r\n\r\n\t/**\r\n\t * Y coordinate for the slice tooltip.\r\n\t *\r\n\t * @return Y\r\n\t */\r\n\tpublic getTooltipY(): number {\r\n\t\tlet value = this.getPropertyValue(\"tooltipY\");\r\n\r\n\t\tif($type.isNumber(value)){\r\n\t\t\treturn value;\r\n\t\t}\r\n\t\tlet p = 0.5;\r\n\t\tif(value instanceof Percent){\r\n\t\t\tp = value.value;\r\n\t\t}\r\n\t\tlet innerRadius = $utils.relativeToValue(this.innerRadius, this.radius);\r\n\t\treturn this.iy * (innerRadius + (this.radius - innerRadius) * p) + this.slice.dy;\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Slice\"] = Slice;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}