{"ast":null,"code":"/**\r\n * Polyline module\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\nimport { Sprite } from \"../Sprite\";\nimport { color } from \"../utils/Color\";\nimport { registry } from \"../Registry\";\nimport * as $path from \"../rendering/Path\";\nimport * as $math from \"../utils/Math\";\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n/**\r\n * Draws a polyline.\r\n *\r\n * @see {@link IPolylineEvents} for a list of available events\r\n * @see {@link IPolylineAdapters} for a list of available Adapters\r\n */\nvar Polyline = /** @class */function (_super) {\n  __extends(Polyline, _super);\n  /**\r\n   * Constructor\r\n   */\n  function Polyline() {\n    var _this = _super.call(this) || this;\n    /**\r\n     * [_distance description]\r\n     *\r\n     * @todo Description\r\n     */\n    _this._distance = 0;\n    _this.className = \"Polyline\";\n    _this.element = _this.paper.add(\"path\");\n    _this.shapeRendering = \"auto\";\n    _this.fill = color();\n    _this.strokeOpacity = 1;\n    _this.applyTheme();\n    return _this;\n  }\n  /**\r\n   * Creats and adds an SVG path for the arc.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  Polyline.prototype.makePath = function () {\n    this._distance = 0;\n    var segments = this.segments;\n    if (segments && segments.length > 0) {\n      var path = \"\";\n      for (var i = 0, len = segments.length; i < len; i++) {\n        var points = segments[i];\n        if (points.length > 0) {\n          path += $path.moveTo(points[0]);\n          for (var p = 1; p < points.length; p++) {\n            var point = points[p];\n            path += $path.lineTo(point);\n            this._distance += $math.getDistance(points[p - 1], point);\n          }\n        }\n      }\n      this.path = path;\n    }\n    this._realSegments = segments;\n  };\n  Object.defineProperty(Polyline.prototype, \"segments\", {\n    /**\r\n     * @return Segments\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"segments\");\n    },\n    /**\r\n     * A list of segment coordinates for the multi-part line.\r\n     *\r\n     * @todo Example\r\n     * @param segments  Segments\r\n     */\n    set: function (segments) {\n      this.setPropertyValue(\"segments\", segments);\n      this.makePath();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Polyline.prototype, \"distance\", {\n    /**\r\n     * [distance description]\r\n     *\r\n     * @todo Description\r\n     * @return [description]\r\n     */\n    get: function () {\n      return this._distance;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Converts relative position along the line (0-1) into pixel coordinates.\r\n   *\r\n   * @param position  Position (0-1)\r\n   * @return Coordinates\r\n   */\n  Polyline.prototype.positionToPoint = function (position) {\n    var deltaAngle = 0;\n    if (position < 0) {\n      position = Math.abs(position);\n      deltaAngle = 180;\n    }\n    var segments = this._realSegments;\n    if (segments) {\n      var totalDistance = this.distance;\n      var currentDistance = 0;\n      var distanceAB = void 0;\n      var positionA = 0;\n      var positionB = 0;\n      var pointA = void 0;\n      var pointB = void 0;\n      for (var s = 0; s < segments.length; s++) {\n        var points = segments[s];\n        if (points.length > 1) {\n          for (var p = 1; p < points.length; p++) {\n            pointA = points[p - 1];\n            pointB = points[p];\n            positionA = currentDistance / totalDistance;\n            distanceAB = $math.getDistance(pointA, pointB);\n            currentDistance += distanceAB;\n            positionB = currentDistance / totalDistance;\n            if (positionA <= position && positionB > position) {\n              s = segments.length;\n              break;\n            }\n          }\n        } else if (points.length == 1) {\n          pointA = points[0];\n          pointB = points[0];\n          positionA = 0;\n          positionB = 1;\n        }\n      }\n      if (pointA && pointB) {\n        var positionAB = (position - positionA) / (positionB - positionA);\n        var midPoint = $math.getMidPoint(pointA, pointB, positionAB);\n        return {\n          x: midPoint.x,\n          y: midPoint.y,\n          angle: deltaAngle + $math.getAngle(pointA, pointB)\n        };\n      }\n    }\n    return {\n      x: 0,\n      y: 0,\n      angle: 0\n    };\n  };\n  Object.defineProperty(Polyline.prototype, \"realSegments\", {\n    /**\r\n     * @ignore\r\n     */\n    get: function () {\n      return this._realSegments;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return Polyline;\n}(Sprite);\nexport { Polyline };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\nregistry.registeredClasses[\"Polyline\"] = Polyline;","map":{"version":3,"names":["Sprite","color","registry","$path","$math","Polyline","_super","__extends","_this","call","_distance","className","element","paper","add","shapeRendering","fill","strokeOpacity","applyTheme","prototype","makePath","segments","length","path","i","len","points","moveTo","p","point","lineTo","getDistance","_realSegments","Object","defineProperty","get","getPropertyValue","set","setPropertyValue","positionToPoint","position","deltaAngle","Math","abs","totalDistance","distance","currentDistance","distanceAB","positionA","positionB","pointA","pointB","s","positionAB","midPoint","getMidPoint","x","y","angle","getAngle","registeredClasses"],"sources":["../../../../../src/.internal/core/elements/Polyline.ts"],"sourcesContent":["/**\r\n * Polyline module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Sprite, ISpriteProperties, ISpriteAdapters, ISpriteEvents } from \"../Sprite\";\r\nimport { IPoint, IOrientationPoint } from \"../defs/IPoint\";\r\nimport { color } from \"../utils/Color\";\r\nimport { registry } from \"../Registry\";\r\nimport * as $path from \"../rendering/Path\";\r\nimport * as $math from \"../utils/Math\";\r\nimport * as $type from \"../utils/Type\";\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[Polyline]].\r\n */\r\nexport interface IPolylineProperties extends ISpriteProperties {\r\n\r\n\t/**\r\n\t * A list of segment coordinates for the multi-part line.\r\n\t */\r\n\tsegments?: Array<Array<IPoint>>;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[Polyline]].\r\n */\r\nexport interface IPolylineEvents extends ISpriteEvents { }\r\n\r\n/**\r\n * Defines adapters for [[Polyline]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IPolylineAdapters extends ISpriteAdapters, IPolylineProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Draws a polyline.\r\n *\r\n * @see {@link IPolylineEvents} for a list of available events\r\n * @see {@link IPolylineAdapters} for a list of available Adapters\r\n */\r\nexport class Polyline extends Sprite {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IPolylineProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IPolylineAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IPolylineEvents;\r\n\r\n\t/**\r\n\t * [_distance description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _distance: number = 0;\r\n\r\n\t/**\r\n\t * [_realSegments]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _realSegments: $type.Optional<Array<Array<IPoint>>>;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"Polyline\";\r\n\t\tthis.element = this.paper.add(\"path\");\r\n\t\tthis.shapeRendering = \"auto\";\r\n\t\tthis.fill = color();\r\n\t\tthis.strokeOpacity = 1;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Creats and adds an SVG path for the arc.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic makePath(): void {\r\n\t\tthis._distance = 0;\r\n\t\tlet segments = this.segments;\r\n\r\n\t\tif (segments && segments.length > 0) {\r\n\t\t\tlet path: string = \"\";\r\n\r\n\t\t\tfor (let i = 0, len = segments.length; i < len; i++) {\r\n\t\t\t\tlet points: IPoint[] = segments[i];\r\n\t\t\t\tif (points.length > 0) {\r\n\t\t\t\t\tpath += $path.moveTo(points[0]);\r\n\r\n\t\t\t\t\tfor (let p = 1; p < points.length; p++) {\r\n\t\t\t\t\t\tlet point: IPoint = points[p];\r\n\t\t\t\t\t\tpath += $path.lineTo(point);\r\n\t\t\t\t\t\tthis._distance += $math.getDistance(points[p - 1], point);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tthis.path = path;\r\n\t\t}\r\n\r\n\t\tthis._realSegments = segments;\r\n\t}\r\n\r\n\t/**\r\n\t * A list of segment coordinates for the multi-part line.\r\n\t *\r\n\t * @todo Example\r\n\t * @param segments  Segments\r\n\t */\r\n\tpublic set segments(segments: $type.Optional<Array<Array<IPoint>>>) {\r\n\t\tthis.setPropertyValue(\"segments\", segments);\r\n\t\tthis.makePath();\r\n\t}\r\n\r\n\t/**\r\n\t * @return Segments\r\n\t */\r\n\tpublic get segments(): $type.Optional<Array<Array<IPoint>>> {\r\n\t\treturn this.getPropertyValue(\"segments\");\r\n\t}\r\n\r\n\t/**\r\n\t * [distance description]\r\n\t *\r\n\t * @todo Description\r\n\t * @return [description]\r\n\t */\r\n\tpublic get distance(): number {\r\n\t\treturn this._distance;\r\n\t}\r\n\r\n\t/**\r\n\t * Converts relative position along the line (0-1) into pixel coordinates.\r\n\t *\r\n\t * @param position  Position (0-1)\r\n\t * @return Coordinates\r\n\t */\r\n\tpublic positionToPoint(position: number): IOrientationPoint {\r\n\r\n\t\tlet deltaAngle: number = 0;\r\n\r\n\t\tif (position < 0) {\r\n\t\t\tposition = Math.abs(position);\r\n\t\t\tdeltaAngle = 180;\r\n\t\t}\r\n\r\n\t\tlet segments: $type.Optional<Array<Array<IPoint>>> = this._realSegments;\r\n\t\tif (segments) {\r\n\t\t\tlet totalDistance: number = this.distance;\r\n\t\t\tlet currentDistance: number = 0;\r\n\r\n\t\t\tlet distanceAB: number;\r\n\t\t\tlet positionA: number = 0;\r\n\t\t\tlet positionB: number = 0;\r\n\t\t\tlet pointA: IPoint;\r\n\t\t\tlet pointB: IPoint;\r\n\r\n\t\t\tfor (let s = 0; s < segments.length; s++) {\r\n\t\t\t\tlet points: IPoint[] = segments[s];\r\n\t\t\t\tif (points.length > 1) {\r\n\t\t\t\t\tfor (let p = 1; p < points.length; p++) {\r\n\t\t\t\t\t\tpointA = points[p - 1];\r\n\t\t\t\t\t\tpointB = points[p];\r\n\r\n\t\t\t\t\t\tpositionA = currentDistance / totalDistance;\r\n\t\t\t\t\t\tdistanceAB = $math.getDistance(pointA, pointB);\r\n\t\t\t\t\t\tcurrentDistance += distanceAB;\r\n\t\t\t\t\t\tpositionB = currentDistance / totalDistance;\r\n\r\n\t\t\t\t\t\tif (positionA <= position && positionB > position) {\r\n\t\t\t\t\t\t\ts = segments.length;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse if (points.length == 1) {\r\n\t\t\t\t\tpointA = points[0];\r\n\t\t\t\t\tpointB = points[0];\r\n\t\t\t\t\tpositionA = 0;\r\n\t\t\t\t\tpositionB = 1;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (pointA && pointB) {\r\n\t\t\t\tlet positionAB: number = (position - positionA) / (positionB - positionA);\r\n\t\t\t\tlet midPoint: IPoint = $math.getMidPoint(pointA, pointB, positionAB);\r\n\t\t\t\treturn { x: midPoint.x, y: midPoint.y, angle: deltaAngle + $math.getAngle(pointA, pointB) };\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn { x: 0, y: 0, angle: 0 };\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic get realSegments():IPoint[][]{\r\n\t\treturn this._realSegments;\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Polyline\"] = Polyline;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}