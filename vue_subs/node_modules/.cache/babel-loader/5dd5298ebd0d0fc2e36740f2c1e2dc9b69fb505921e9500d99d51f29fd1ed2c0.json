{"ast":null,"code":"/**\r\n * A plugin base class.\r\n */\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n/**\r\n * This is a base class that provides core functionality for plugins.\r\n *\r\n * The easiest way to start off with a new plugin is to extend this class.\r\n *\r\n * It will provide all the mandatory functionality, such as disposers.\r\n *\r\n * @since 4.2.2\r\n */\nvar Plugin = /** @class */function () {\n  /**\r\n   * Constructor\r\n   */\n  function Plugin() {\n    /**\r\n     * Is this object disposed?\r\n     */\n    this._disposed = false;\n    /**\r\n     * List of IDisposer which will be disposed when the BaseObject is disposed.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\n    this._disposers = [];\n    // Nothing to do here\n  }\n  /**\r\n   * Decorates series with required events and adapters used to hijack its\r\n   * data.\r\n   */\n  Plugin.prototype.init = function () {\n    // Does nothing\n    // Override it\n  };\n  /**\r\n   * Returns if this element is already disposed.\r\n   *\r\n   * @return Is disposed?\r\n   */\n  Plugin.prototype.isDisposed = function () {\n    return this._disposed;\n  };\n  /**\r\n   * Disposes this object and related stuff.\r\n   */\n  Plugin.prototype.dispose = function () {\n    if (!this._disposed) {\n      this._disposed = true;\n      var a = this._disposers;\n      this._disposers = null;\n      while (a.length !== 0) {\n        var disposer = a.shift();\n        disposer.dispose();\n      }\n    }\n  };\n  return Plugin;\n}();\nexport { Plugin };","map":{"version":3,"names":["Plugin","_disposed","_disposers","prototype","init","isDisposed","dispose","a","length","disposer","shift"],"sources":["../../../../../src/.internal/core/utils/Plugin.ts"],"sourcesContent":["/**\r\n * A plugin base class.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Optional } from \"./Type\";\r\nimport { IDisposer } from \"./Disposer\";\r\nimport { Sprite } from \"../Sprite\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\nexport interface IPlugin extends IDisposer {\r\n\ttarget: Optional<Sprite>;\r\n\tinit(): void;\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * This is a base class that provides core functionality for plugins.\r\n *\r\n * The easiest way to start off with a new plugin is to extend this class.\r\n *\r\n * It will provide all the mandatory functionality, such as disposers.\r\n *\r\n * @since 4.2.2\r\n */\r\nexport class Plugin implements IPlugin {\r\n\r\n\r\n\t/**\r\n\t * A target object plugin is for.\r\n\t */\r\n\tpublic target: Optional<Sprite>;\r\n\r\n\t/**\r\n\t * Is this object disposed?\r\n\t */\r\n\tprotected _disposed: boolean = false;\r\n\r\n\t/**\r\n\t * List of IDisposer which will be disposed when the BaseObject is disposed.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected _disposers: Array<IDisposer> = [];\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\t// Nothing to do here\r\n\t}\r\n\r\n\t/**\r\n\t * Decorates series with required events and adapters used to hijack its\r\n\t * data.\r\n\t */\r\n\tpublic init(): void {\r\n\t\t// Does nothing\r\n\t\t// Override it\r\n\t}\r\n\r\n\t/**\r\n\t * Returns if this element is already disposed.\r\n\t *\r\n\t * @return Is disposed?\r\n\t */\r\n\tpublic isDisposed(): boolean {\r\n\t\treturn this._disposed;\r\n\t}\r\n\r\n\t/**\r\n\t * Disposes this object and related stuff.\r\n\t */\r\n\tpublic dispose(): void {\r\n\t\tif (!this._disposed) {\r\n\t\t\tthis._disposed = true;\r\n\r\n\t\t\tconst a = this._disposers;\r\n\r\n\t\t\tthis._disposers = <any>null;\r\n\r\n\t\t\twhile (a.length !== 0) {\r\n\t\t\t\tconst disposer = a.shift();\r\n\t\t\t\tdisposer.dispose();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n}\r\n"],"mappings":"AAAA;;;AA2BA;;;;;;AAOA;;;;;;;;;AASA,IAAAA,MAAA;EAoBC;;;EAGA,SAAAA,OAAA;IAfA;;;IAGU,KAAAC,SAAS,GAAY,KAAK;IAEpC;;;;;IAKU,KAAAC,UAAU,GAAqB,EAAE;IAM1C;EACD;EAEA;;;;EAIOF,MAAA,CAAAG,SAAA,CAAAC,IAAI,GAAX;IACC;IACA;EAAA,CACA;EAED;;;;;EAKOJ,MAAA,CAAAG,SAAA,CAAAE,UAAU,GAAjB;IACC,OAAO,IAAI,CAACJ,SAAS;EACtB,CAAC;EAED;;;EAGOD,MAAA,CAAAG,SAAA,CAAAG,OAAO,GAAd;IACC,IAAI,CAAC,IAAI,CAACL,SAAS,EAAE;MACpB,IAAI,CAACA,SAAS,GAAG,IAAI;MAErB,IAAMM,CAAC,GAAG,IAAI,CAACL,UAAU;MAEzB,IAAI,CAACA,UAAU,GAAQ,IAAI;MAE3B,OAAOK,CAAC,CAACC,MAAM,KAAK,CAAC,EAAE;QACtB,IAAMC,QAAQ,GAAGF,CAAC,CAACG,KAAK,EAAE;QAC1BD,QAAQ,CAACH,OAAO,EAAE;;;EAGrB,CAAC;EAEF,OAAAN,MAAC;AAAD,CAAC,CA/DD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}