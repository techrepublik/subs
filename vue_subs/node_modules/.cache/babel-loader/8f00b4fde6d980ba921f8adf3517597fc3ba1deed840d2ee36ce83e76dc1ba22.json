{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n/**\r\n * Module, defining Axis Renderer for vertical axes.\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\nimport { AxisRenderer } from \"./AxisRenderer\";\nimport { WavedLine } from \"../../core/elements/WavedLine\";\nimport { WavedRectangle } from \"../../core/elements/WavedRectangle\";\nimport { registry } from \"../../core/Registry\";\nimport { percent, Percent } from \"../../core/utils/Percent\";\nimport * as $math from \"../../core/utils/Math\";\nimport * as $path from \"../../core/rendering/Path\";\nimport * as $utils from \"../../core/utils/Utils\";\nimport * as $type from \"../../core/utils/Type\";\nimport { defaultRules, ResponsiveBreakpoints } from \"../../core/utils/Responsive\";\nimport { AxisBullet } from \"./AxisBullet\";\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n/**\r\n * A renderer for vertical axis.\r\n *\r\n * @see {@link IAxisRendererYEvents} for a list of available events\r\n * @see {@link IAxisRendererYAdapters} for a list of available Adapters\r\n */\nvar AxisRendererY = /** @class */function (_super) {\n  __extends(AxisRendererY, _super);\n  /**\r\n   * Constructor.\r\n   *\r\n   * @param axis Related axis\r\n   */\n  function AxisRendererY() {\n    var _this = _super.call(this) || this;\n    _this.className = \"AxisRendererY\";\n    _this.minGridDistance = 40;\n    _this.opposite = false;\n    _this.height = percent(100);\n    _this.labels.template.verticalCenter = \"middle\";\n    _this.applyTheme();\n    return _this;\n  }\n  /**\r\n  * @ignore\r\n  */\n  AxisRendererY.prototype.setAxis = function (axis) {\n    _super.prototype.setAxis.call(this, axis);\n    axis.layout = \"horizontal\";\n  };\n  /**\r\n   * @ignore\r\n   */\n  AxisRendererY.prototype.updateGridContainer = function () {\n    var axis = this.axis;\n    if (axis) {\n      var gridContainer = this.gridContainer;\n      gridContainer.y = axis.pixelY;\n      gridContainer.height = axis.axisLength;\n    }\n  };\n  /**\r\n   * @ignore\r\n   */\n  AxisRendererY.prototype.toAxisPosition = function (value) {\n    var axis = this.axis;\n    if (axis) {\n      var inversedPosition = 1 - value;\n      var relativePositionSprite = axis.relativePositionSprite;\n      var y = axis.pixelY;\n      if (relativePositionSprite) {\n        y = $utils.spritePointToSprite({\n          x: 0,\n          y: this.pixelY\n        }, this.parent, relativePositionSprite).y;\n      } else {\n        relativePositionSprite = axis.parent;\n      }\n      if (relativePositionSprite) {\n        var relativeY = y / relativePositionSprite.innerHeight;\n        var relativeHeight = axis.axisLength / relativePositionSprite.innerHeight;\n        return 1 - (inversedPosition - relativeY) / relativeHeight;\n      }\n    }\n    return value;\n  };\n  /**\r\n   * Called when rendered is attached to an Axis, as well as a property of\r\n   * Axis that might affect the appearance is updated.\r\n   *\r\n   * E.g. `axis.opposite`, `axis.inside`, etc.\r\n   *\r\n   * This method is called **before** draw, so that any related setting\r\n   * changed in this method can be changed.\r\n   *\r\n   * @todo Description (review)\r\n   * @ignore Exclude from docs\r\n   */\n  AxisRendererY.prototype.processRenderer = function () {\n    _super.prototype.processRenderer.call(this);\n    var axis = this.axis;\n    if (axis) {\n      var title = axis.title;\n      title.valign = \"middle\";\n      if (!(axis.height instanceof Percent)) {\n        axis.height = percent(100);\n      }\n      if (this.opposite) {\n        title.rotation = 90;\n        this.line.toBack();\n        title.toFront();\n      } else {\n        title.rotation = -90;\n        title.toBack();\n        this.line.toFront();\n      }\n    }\n  };\n  /**\r\n   * Updates some of the Axis tooltip's visual properties, related to\r\n   * rendering of the Axis.\r\n   *\r\n   * @todo Description (review)\r\n   * @ignore Exclude from docs\r\n   */\n  AxisRendererY.prototype.updateTooltip = function () {\n    var axis = this.axis;\n    if (axis) {\n      var bigNum = 2000;\n      var bbx = 0;\n      var bby = 0;\n      var bbw = bigNum;\n      var bbh = this.axisLength;\n      // right\n      if (this.opposite) {\n        if (this.inside) {\n          bbx = -bigNum;\n          bbw = bigNum;\n        }\n      }\n      // left\n      else {\n        if (!this.inside) {\n          bbx = -bigNum;\n          bbw = bigNum;\n        }\n      }\n      this.axis.updateTooltip(\"horizontal\", {\n        x: bbx,\n        y: bby,\n        width: bbw,\n        height: bbh\n      });\n    }\n  };\n  Object.defineProperty(AxisRendererY.prototype, \"axisLength\", {\n    /**\r\n     * Returns actual length of the Axis, in pixels.\r\n     *\r\n     * @return Length (px)\r\n     */\n    get: function () {\n      var axis = this.axis;\n      return axis.measuredHeight - axis.pixelPaddingTop - axis.pixelPaddingBottom || 0;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Converts relative position on axis to point coordinates.\r\n   *\r\n   * @param position  Position (0-1)\r\n   * @param position2  Position (0-1) Position on the second axis\r\n   * @return Point\r\n   */\n  AxisRendererY.prototype.positionToPoint = function (position, position2) {\n    return {\n      x: 0,\n      y: this.positionToCoordinate(position)\n    };\n  };\n  /**\r\n   * Converts a point at specific coordinates to a relative position (0-1)\r\n   * on the axis.\r\n   *\r\n   * @param point  Point\r\n   * @return Position (0-1)\r\n   */\n  AxisRendererY.prototype.pointToPosition = function (point) {\n    return this.coordinateToPosition(point.y, point.x);\n  };\n  /**\r\n   * Converts a coordinate in pixels to a relative position. (0-1)\r\n   *\r\n   * @param coordinate  Coordinate (px)\r\n   * @param coordinate2  Coordinate of a second axis, only needed for complex axes systems, like timeline (px)\r\n   * @return Position (0-1)\r\n   */\n  AxisRendererY.prototype.coordinateToPosition = function (coordinate, coordinate2) {\n    var position;\n    var axis = this.axis;\n    var axisFullLength = axis.axisFullLength;\n    if (axis.renderer.inversed) {\n      position = 1 - axis.start - coordinate / axisFullLength;\n    } else {\n      position = coordinate / axisFullLength + (1 - axis.end);\n    }\n    return $math.round(position, 5);\n  };\n  /**\r\n   * [getPositionRangePath description]\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @todo Description\r\n   * @param startPosition  Starting position\r\n   * @param endPosition    End position\r\n   * @return SVG path\r\n   */\n  AxisRendererY.prototype.getPositionRangePath = function (startPosition, endPosition) {\n    var y1 = $math.fitToRange(this.positionToCoordinate(startPosition), 0, this.axisLength);\n    var y2 = $math.fitToRange(this.positionToCoordinate(endPosition), 0, this.axisLength);\n    var h = Math.abs(y2 - y1);\n    var w = this.getWidth();\n    var y = Math.min(y1, y2);\n    var x = 0;\n    return $path.rectToPath({\n      x: x,\n      y: y,\n      width: w,\n      height: h\n    }, true);\n  };\n  /**\r\n   * Updates and positions a grid element.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param grid         Grid element\r\n   * @param position     Starting position\r\n   * @param endPosition  End position\r\n   */\n  AxisRendererY.prototype.updateGridElement = function (grid, position, endPosition) {\n    position = position + (endPosition - position) * grid.location;\n    var point = this.positionToPoint(position);\n    //\tpoint.y = $utils.spritePointToSprite({ x: 0, y: point.y }, this, this.gridContainer).y;\n    grid.path = $path.moveTo({\n      x: 0,\n      y: 0\n    }) + $path.lineTo({\n      x: this.getWidth(),\n      y: 0\n    });\n    this.positionItem(grid, point);\n    this.toggleVisibility(grid, position, 0, 1);\n  };\n  /**\r\n   * Updates and positions a tick element.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param tick         Tick element\r\n   * @param position     Starting position\r\n   * @param endPosition  End position\r\n   */\n  AxisRendererY.prototype.updateTickElement = function (tick, position, endPosition) {\n    position = position + (endPosition - position) * tick.location;\n    var point = this.positionToPoint(position);\n    var tickLength = tick.length;\n    try {\n      $utils.used(this.axis.title.measuredWidth);\n    } catch (_a) {\n      // void\n    }\n    point.x = $utils.spritePointToSprite({\n      x: this.line.pixelX,\n      y: 0\n    }, this.line.parent, this.gridContainer).x;\n    if (!this.opposite) {\n      tickLength *= tick.inside ? 1 : -1;\n    } else {\n      tickLength *= tick.inside ? -1 : 1;\n    }\n    tick.path = $path.moveTo({\n      x: 0,\n      y: 0\n    }) + $path.lineTo({\n      x: tickLength,\n      y: 0\n    });\n    this.positionItem(tick, point);\n    this.toggleVisibility(tick, position, 0, 1);\n  };\n  /**\r\n   * Updates and positions the axis line element.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  AxisRendererY.prototype.updateAxisLine = function () {\n    this.line.path = $path.moveTo({\n      x: 0,\n      y: 0\n    }) + $path.lineTo({\n      x: 0,\n      y: this.axisLength\n    });\n  };\n  /**\r\n   * Updates and positions the base grid element.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  AxisRendererY.prototype.updateBaseGridElement = function () {\n    _super.prototype.updateBaseGridElement.call(this);\n    var axis = this.axis;\n    var w = this.getWidth();\n    var h = this.axisLength;\n    var y = axis.basePoint.y;\n    var baseGrid = this.baseGrid;\n    if (y < -0.2 || y > h + 0.2) {\n      baseGrid.hide(0);\n    } else {\n      var x = $utils.spritePointToSprite({\n        x: 0,\n        y: 0\n      }, this.gridContainer, baseGrid.parent).x;\n      baseGrid.path = $path.moveTo({\n        x: 0,\n        y: 0\n      }) + $path.lineTo({\n        x: w,\n        y: 0\n      });\n      baseGrid.moveTo({\n        x: x,\n        y: y\n      });\n      baseGrid.show(0);\n    }\n  };\n  /**\r\n   * Updates and positions a label element.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param label        Label element\r\n   * @param position     Starting position\r\n   * @param endPosition  Ending position\r\n   */\n  AxisRendererY.prototype.updateLabelElement = function (label, position, endPosition, location) {\n    if (!$type.hasValue(location)) {\n      location = label.location;\n    }\n    position = position + (endPosition - position) * location;\n    label.isMeasured = !label.inside;\n    var point = this.positionToPoint(position);\n    var horizontalCenter;\n    var deltaX = 0;\n    var maxWidth = this.gridContainer.maxWidth;\n    if (this.opposite) {\n      if (label.inside) {\n        horizontalCenter = \"right\";\n        if (label.align == \"left\") {\n          deltaX = -maxWidth;\n          horizontalCenter = \"left\";\n        }\n        if (label.align == \"center\") {\n          deltaX = -maxWidth / 2;\n          horizontalCenter = \"middle\";\n        }\n      } else {\n        horizontalCenter = \"left\";\n      }\n      point.x = 0 + deltaX;\n    } else {\n      if (label.inside) {\n        horizontalCenter = \"left\";\n        if (label.align == \"right\") {\n          deltaX = maxWidth;\n          horizontalCenter = \"right\";\n        }\n        if (label.align == \"center\") {\n          deltaX = maxWidth / 2;\n          horizontalCenter = \"middle\";\n        }\n      } else {\n        horizontalCenter = \"right\";\n      }\n      point.x = this.measuredWidth + deltaX;\n    }\n    if (label.rotation == 0) {\n      // Apply fuzzy logic to verticalCenter only if labels are not rotated\n      label.horizontalCenter = horizontalCenter;\n    }\n    this.positionItem(label, point);\n    this.toggleVisibility(label, position, this.minLabelPosition, this.maxLabelPosition);\n  };\n  /**\r\n   * Updates and positions an axis break element.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param axisBreak Break element\r\n   */\n  AxisRendererY.prototype.updateBreakElement = function (axisBreak) {\n    _super.prototype.updateBreakElement.call(this, axisBreak);\n    var startLine = axisBreak.startLine;\n    var endLine = axisBreak.endLine;\n    var fillShape = axisBreak.fillShape;\n    var startPoint = axisBreak.startPoint;\n    var endPoint = axisBreak.endPoint;\n    var x1 = axisBreak.pixelMarginLeft;\n    var x2 = this.getWidth() - axisBreak.pixelMarginLeft - axisBreak.pixelMarginRight;\n    startPoint.y = $math.fitToRange(startPoint.y, -1, this.axisLength + 1);\n    endPoint.y = $math.fitToRange(endPoint.y, -1, this.axisLength + 1);\n    if (startPoint.y == endPoint.y && (startPoint.y < 0 || startPoint.y > this.axisLength)) {\n      axisBreak.fillShape.__disabled = true;\n    } else {\n      axisBreak.fillShape.__disabled = false;\n    }\n    var w = Math.abs(x2 - x1);\n    startLine.x = x1;\n    startLine.height = 0;\n    startLine.width = w;\n    endLine.x = x1;\n    endLine.height = 0;\n    endLine.width = w;\n    fillShape.width = w;\n    fillShape.height = Math.abs(endPoint.y - startPoint.y);\n    fillShape.x = x1;\n    fillShape.y = endPoint.y;\n  };\n  /**\r\n   * Creates visual elements for and axis break.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param axisBreak Axis break\r\n   */\n  AxisRendererY.prototype.createBreakSprites = function (axisBreak) {\n    axisBreak.startLine = new WavedLine();\n    axisBreak.endLine = new WavedLine();\n    var wavedRectangle = new WavedRectangle();\n    wavedRectangle.setWavedSides(true, false, true, false);\n    axisBreak.fillShape = wavedRectangle;\n  };\n  /**\r\n   * Converts a position on the axis to a coordinate in pixels.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param position  Position (0-1)\r\n   * @return Coordinate (px)\r\n   */\n  AxisRendererY.prototype.positionToCoordinate = function (position) {\n    var coordinate;\n    var axis = this.axis;\n    var axisFullLength = axis.axisFullLength;\n    if (!axis.renderer.inversed) {\n      coordinate = (axis.end - position) * axisFullLength;\n    } else {\n      coordinate = (position - axis.start) * axisFullLength;\n    }\n    return coordinate;\n  };\n  /**\r\n   * Updates and positions axis bullets.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param bullet       AxisBullet element\r\n   * @param position     Starting position\r\n   * @param endPosition  End position\r\n   */\n  AxisRendererY.prototype.updateBullet = function (bullet, position, endPosition) {\n    var location = 0.5;\n    if (bullet instanceof AxisBullet) {\n      location = bullet.location;\n    }\n    position = position + (endPosition - position) * location;\n    var point = this.positionToPoint(position);\n    point.x = $utils.spritePointToSprite({\n      x: this.line.pixelX,\n      y: 0\n    }, this.line.parent, this.gridContainer).x;\n    this.positionItem(bullet, point);\n    this.toggleVisibility(bullet, position, 0, 1);\n  };\n  return AxisRendererY;\n}(AxisRenderer);\nexport { AxisRendererY };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\nregistry.registeredClasses[\"AxisRendererY\"] = AxisRendererY;\n/**\r\n * Add default responsive rules\r\n */\n/**\r\n * Put labels inside plot area.\r\n * Disable first and last labels.\r\n */\ndefaultRules.push({\n  relevant: ResponsiveBreakpoints.widthS,\n  state: function (target, stateId) {\n    if (target instanceof AxisRendererY) {\n      var state = target.states.create(stateId);\n      state.properties.inside = true;\n      state.properties.maxLabelPosition = 0.9;\n      state.properties.minLabelPosition = 0.1;\n      return state;\n    }\n    return null;\n  }\n});\n/**\r\n * Disable labels altogather on very small charts\r\n */\ndefaultRules.push({\n  relevant: ResponsiveBreakpoints.widthXS,\n  state: function (target, stateId) {\n    if (target instanceof AxisRendererY) {\n      var state = target.states.create(stateId);\n      state.properties.disabled = true;\n      return state;\n    }\n    return null;\n  }\n});","map":{"version":3,"names":["AxisRenderer","WavedLine","WavedRectangle","registry","percent","Percent","$math","$path","$utils","$type","defaultRules","ResponsiveBreakpoints","AxisBullet","AxisRendererY","_super","__extends","_this","call","className","minGridDistance","opposite","height","labels","template","verticalCenter","applyTheme","prototype","setAxis","axis","layout","updateGridContainer","gridContainer","y","pixelY","axisLength","toAxisPosition","value","inversedPosition","relativePositionSprite","spritePointToSprite","x","parent","relativeY","innerHeight","relativeHeight","processRenderer","title","valign","rotation","line","toBack","toFront","updateTooltip","bigNum","bbx","bby","bbw","bbh","inside","width","Object","defineProperty","get","measuredHeight","pixelPaddingTop","pixelPaddingBottom","positionToPoint","position","position2","positionToCoordinate","pointToPosition","point","coordinateToPosition","coordinate","coordinate2","axisFullLength","renderer","inversed","start","end","round","getPositionRangePath","startPosition","endPosition","y1","fitToRange","y2","h","Math","abs","w","getWidth","min","rectToPath","updateGridElement","grid","location","path","moveTo","lineTo","positionItem","toggleVisibility","updateTickElement","tick","tickLength","length","used","measuredWidth","_a","pixelX","updateAxisLine","updateBaseGridElement","basePoint","baseGrid","hide","show","updateLabelElement","label","hasValue","isMeasured","horizontalCenter","deltaX","maxWidth","align","minLabelPosition","maxLabelPosition","updateBreakElement","axisBreak","startLine","endLine","fillShape","startPoint","endPoint","x1","pixelMarginLeft","x2","pixelMarginRight","__disabled","createBreakSprites","wavedRectangle","setWavedSides","updateBullet","bullet","registeredClasses","push","relevant","widthS","state","target","stateId","states","create","properties","widthXS","disabled"],"sources":["../../../../../src/.internal/charts/axes/AxisRendererY.ts"],"sourcesContent":["/**\r\n * Module, defining Axis Renderer for vertical axes.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { AxisRenderer, IAxisRendererProperties, IAxisRendererAdapters, IAxisRendererEvents } from \"./AxisRenderer\";\r\nimport { Sprite } from \"../../core/Sprite\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { Axis } from \"./Axis\";\r\nimport { HorizontalCenter } from \"../../core/defs/HorizontalCenter\";\r\nimport { Label } from \"../../core/elements/Label\";\r\nimport { Grid } from \"./Grid\";\r\nimport { AxisTick } from \"./AxisTick\";\r\nimport { AxisLabel } from \"./AxisLabel\";\r\nimport { AxisBreak } from \"./AxisBreak\";\r\nimport { WavedLine } from \"../../core/elements/WavedLine\";\r\nimport { WavedRectangle } from \"../../core/elements/WavedRectangle\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { percent, Percent } from \"../../core/utils/Percent\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport { defaultRules, ResponsiveBreakpoints } from \"../../core/utils/Responsive\";\r\nimport { AxisBullet } from \"./AxisBullet\";\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[AxisRendererY]].\r\n */\r\nexport interface IAxisRendererYProperties extends IAxisRendererProperties { }\r\n\r\n/**\r\n * Defines events for [[AxisRendererY]].\r\n */\r\nexport interface IAxisRendererYEvents extends IAxisRendererEvents { }\r\n\r\n/**\r\n * Defines adapters for [[AxisRenderer]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IAxisRendererYAdapters extends IAxisRendererAdapters, IAxisRendererYProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * A renderer for vertical axis.\r\n *\r\n * @see {@link IAxisRendererYEvents} for a list of available events\r\n * @see {@link IAxisRendererYAdapters} for a list of available Adapters\r\n */\r\nexport class AxisRendererY extends AxisRenderer {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IAxisRendererYProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IAxisRendererYAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IAxisRendererYEvents;\r\n\r\n\t/**\r\n\t * Constructor.\r\n\t *\r\n\t * @param axis Related axis\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"AxisRendererY\";\r\n\t\tthis.minGridDistance = 40;\r\n\t\tthis.opposite = false;\r\n\t\tthis.height = percent(100);\r\n\t\tthis.labels.template.verticalCenter = \"middle\";\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t* @ignore\r\n\t*/\r\n\tpublic setAxis(axis: Axis) {\r\n\t\tsuper.setAxis(axis);\r\n\t\taxis.layout = \"horizontal\";\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic updateGridContainer() {\r\n\t\tlet axis = this.axis;\r\n\t\tif (axis) {\r\n\t\t\tlet gridContainer = this.gridContainer;\r\n\t\t\tgridContainer.y = axis.pixelY;\r\n\t\t\tgridContainer.height = axis.axisLength;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic toAxisPosition(value: number): number {\r\n\t\tlet axis = this.axis;\r\n\t\tif (axis) {\r\n\t\t\tlet inversedPosition = 1 - value;\r\n\t\t\tlet relativePositionSprite = axis.relativePositionSprite;\r\n\r\n\t\t\tlet y = axis.pixelY;\r\n\t\t\tif (relativePositionSprite) {\r\n\t\t\t\ty = $utils.spritePointToSprite({ x: 0, y: this.pixelY }, this.parent, relativePositionSprite).y;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\trelativePositionSprite = axis.parent;\r\n\t\t\t}\r\n\t\t\tif (relativePositionSprite) {\r\n\t\t\t\tlet relativeY = y / relativePositionSprite.innerHeight;\r\n\t\t\t\tlet relativeHeight = axis.axisLength / relativePositionSprite.innerHeight;\r\n\r\n\t\t\t\treturn 1 - (inversedPosition - relativeY) / relativeHeight;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn value;\r\n\t}\r\n\r\n\t/**\r\n\t * Called when rendered is attached to an Axis, as well as a property of\r\n\t * Axis that might affect the appearance is updated.\r\n\t *\r\n\t * E.g. `axis.opposite`, `axis.inside`, etc.\r\n\t *\r\n\t * This method is called **before** draw, so that any related setting\r\n\t * changed in this method can be changed.\r\n\t *\r\n\t * @todo Description (review)\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic processRenderer(): void {\r\n\t\tsuper.processRenderer();\r\n\r\n\t\tlet axis = this.axis;\r\n\r\n\t\tif (axis) {\r\n\r\n\t\t\tlet title: Label = axis.title;\r\n\t\t\ttitle.valign = \"middle\";\r\n\r\n\t\t\tif (!(axis.height instanceof Percent)) {\r\n\t\t\t\taxis.height = percent(100);\r\n\t\t\t}\r\n\r\n\t\t\tif (this.opposite) {\r\n\t\t\t\ttitle.rotation = 90;\r\n\t\t\t\tthis.line.toBack();\r\n\t\t\t\ttitle.toFront();\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\ttitle.rotation = -90;\r\n\t\t\t\ttitle.toBack();\r\n\t\t\t\tthis.line.toFront();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates some of the Axis tooltip's visual properties, related to\r\n\t * rendering of the Axis.\r\n\t *\r\n\t * @todo Description (review)\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateTooltip(): void {\r\n\t\tlet axis: Axis = this.axis;\r\n\t\tif (axis) {\r\n\r\n\t\t\tlet bigNum: number = 2000;\r\n\t\t\tlet bbx: number = 0;\r\n\t\t\tlet bby: number = 0;\r\n\t\t\tlet bbw: number = bigNum;\r\n\t\t\tlet bbh: number = this.axisLength;\r\n\r\n\t\t\t// right\r\n\t\t\tif (this.opposite) {\r\n\t\t\t\tif (this.inside) {\r\n\t\t\t\t\tbbx = - bigNum;\r\n\t\t\t\t\tbbw = bigNum;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t// left\r\n\t\t\telse {\r\n\t\t\t\tif (!this.inside) {\r\n\t\t\t\t\tbbx = - bigNum;\r\n\t\t\t\t\tbbw = bigNum;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tthis.axis.updateTooltip(\"horizontal\", { x: bbx, y: bby, width: bbw, height: bbh });\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns actual length of the Axis, in pixels.\r\n\t *\r\n\t * @return Length (px)\r\n\t */\r\n\tpublic get axisLength(): number {\r\n\t\tlet axis = this.axis;\r\n\t\treturn (axis.measuredHeight - axis.pixelPaddingTop - axis.pixelPaddingBottom) || 0;\r\n\t}\r\n\t/**\r\n\t * Converts relative position on axis to point coordinates.\r\n\t *\r\n\t * @param position  Position (0-1)\r\n\t * @param position2  Position (0-1) Position on the second axis\r\n\t * @return Point\r\n\t */\r\n\tpublic positionToPoint(position: number, position2?: number): IPoint {\r\n\t\treturn { x: 0, y: this.positionToCoordinate(position) };\r\n\t}\r\n\r\n\t/**\r\n\t * Converts a point at specific coordinates to a relative position (0-1)\r\n\t * on the axis.\r\n\t *\r\n\t * @param point  Point\r\n\t * @return Position (0-1)\r\n\t */\r\n\tpublic pointToPosition(point: IPoint) {\r\n\t\treturn this.coordinateToPosition(point.y, point.x);\r\n\t}\r\n\r\n\t/**\r\n\t * Converts a coordinate in pixels to a relative position. (0-1)\r\n\t *\r\n\t * @param coordinate  Coordinate (px)\r\n\t * @param coordinate2  Coordinate of a second axis, only needed for complex axes systems, like timeline (px)\r\n\t * @return Position (0-1)\r\n\t */\r\n\tpublic coordinateToPosition(coordinate: number, coordinate2?:number): number {\r\n\t\tlet position: number;\r\n\t\tlet axis: Axis = this.axis;\r\n\t\tlet axisFullLength = axis.axisFullLength;\r\n\r\n\t\tif (axis.renderer.inversed) {\r\n\t\t\tposition = (1 - axis.start) - coordinate / axisFullLength;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tposition = coordinate / axisFullLength + (1 - axis.end);\r\n\t\t}\r\n\t\treturn $math.round(position, 5);\r\n\t}\t\r\n\r\n\t/**\r\n\t * [getPositionRangePath description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param startPosition  Starting position\r\n\t * @param endPosition    End position\r\n\t * @return SVG path\r\n\t */\r\n\tpublic getPositionRangePath(startPosition: number, endPosition: number): string {\r\n\t\tlet y1: number = $math.fitToRange(this.positionToCoordinate(startPosition), 0, this.axisLength);\r\n\t\tlet y2: number = $math.fitToRange(this.positionToCoordinate(endPosition), 0, this.axisLength);\r\n\r\n\t\tlet h: number = Math.abs(y2 - y1);\r\n\t\tlet w: number = this.getWidth();\r\n\t\tlet y: number = Math.min(y1, y2);\r\n\t\tlet x: number = 0;\r\n\r\n\t\treturn $path.rectToPath({\r\n\t\t\tx: x,\r\n\t\t\ty: y,\r\n\t\t\twidth: w,\r\n\t\t\theight: h\r\n\t\t}, true);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions a grid element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param grid         Grid element\r\n\t * @param position     Starting position\r\n\t * @param endPosition  End position\r\n\t */\r\n\tpublic updateGridElement(grid: Grid, position: number, endPosition: number) {\r\n\t\tposition = position + (endPosition - position) * grid.location;\r\n\t\tlet point: IPoint = this.positionToPoint(position);\r\n\t\t//\tpoint.y = $utils.spritePointToSprite({ x: 0, y: point.y }, this, this.gridContainer).y;\r\n\r\n\t\tgrid.path = $path.moveTo({ x: 0, y: 0 }) + $path.lineTo({ x: this.getWidth(), y: 0 });\r\n\r\n\t\tthis.positionItem(grid, point);\r\n\r\n\t\tthis.toggleVisibility(grid, position, 0, 1);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions a tick element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param tick         Tick element\r\n\t * @param position     Starting position\r\n\t * @param endPosition  End position\r\n\t */\r\n\tpublic updateTickElement(tick: AxisTick, position: number, endPosition: number) {\r\n\t\tposition = position + (endPosition - position) * tick.location;\r\n\r\n\t\tlet point: IPoint = this.positionToPoint(position);\r\n\r\n\t\tlet tickLength = tick.length;\r\n\r\n\t\ttry {\r\n\t\t\t$utils.used(this.axis.title.measuredWidth);\r\n\t\t} catch {\r\n\t\t\t// void\r\n\t\t}\r\n\r\n\t\tpoint.x = $utils.spritePointToSprite({ x: this.line.pixelX, y: 0 }, this.line.parent, this.gridContainer).x;\r\n\r\n\t\tif (!this.opposite) {\r\n\t\t\ttickLength *= (tick.inside ? 1 : -1);\r\n\t\t}\r\n\t\telse {\r\n\t\t\ttickLength *= (tick.inside ? -1 : 1);\r\n\t\t}\r\n\r\n\t\ttick.path = $path.moveTo({ x: 0, y: 0 }) + $path.lineTo({ x: tickLength, y: 0 });\r\n\r\n\t\tthis.positionItem(tick, point);\r\n\r\n\t\tthis.toggleVisibility(tick, position, 0, 1);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions the axis line element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateAxisLine() {\r\n\t\tthis.line.path = $path.moveTo({ x: 0, y: 0 }) + $path.lineTo({ x: 0, y: this.axisLength });\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions the base grid element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateBaseGridElement(): void {\r\n\t\tsuper.updateBaseGridElement();\r\n\r\n\t\tlet axis: Axis = this.axis;\r\n\r\n\t\tlet w: number = this.getWidth();\r\n\t\tlet h: number = this.axisLength;\r\n\t\tlet y: number = axis.basePoint.y;\r\n\r\n\t\tlet baseGrid: Sprite = this.baseGrid;\r\n\r\n\t\tif (y < - 0.2 || y > h + 0.2) {\r\n\t\t\tbaseGrid.hide(0);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tlet x = $utils.spritePointToSprite({ x: 0, y: 0 }, this.gridContainer, baseGrid.parent).x;\r\n\r\n\t\t\tbaseGrid.path = $path.moveTo({ x: 0, y: 0 }) + $path.lineTo({ x: w, y: 0 });\r\n\t\t\tbaseGrid.moveTo({ x: x, y: y });\r\n\t\t\tbaseGrid.show(0);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions a label element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param label        Label element\r\n\t * @param position     Starting position\r\n\t * @param endPosition  Ending position\r\n\t */\r\n\tpublic updateLabelElement(label: AxisLabel, position: number, endPosition: number, location?: number) {\r\n\r\n\t\tif (!$type.hasValue(location)) {\r\n\t\t\tlocation = label.location;\r\n\t\t}\r\n\r\n\t\tposition = position + (endPosition - position) * location;\r\n\t\tlabel.isMeasured = !label.inside;\r\n\r\n\t\tlet point: IPoint = this.positionToPoint(position);\r\n\r\n\t\tlet horizontalCenter: HorizontalCenter;\r\n\t\tlet deltaX = 0;\r\n\t\tlet maxWidth = this.gridContainer.maxWidth;\r\n\r\n\t\tif (this.opposite) {\r\n\t\t\tif (label.inside) {\r\n\t\t\t\thorizontalCenter = \"right\";\r\n\t\t\t\tif (label.align == \"left\") {\r\n\t\t\t\t\tdeltaX = -maxWidth;\r\n\t\t\t\t\thorizontalCenter = \"left\";\r\n\t\t\t\t}\r\n\t\t\t\tif (label.align == \"center\") {\r\n\t\t\t\t\tdeltaX = -maxWidth / 2;\r\n\t\t\t\t\thorizontalCenter = \"middle\";\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\thorizontalCenter = \"left\";\r\n\t\t\t}\r\n\r\n\t\t\tpoint.x = 0 + deltaX;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tif (label.inside) {\r\n\t\t\t\thorizontalCenter = \"left\";\r\n\t\t\t\tif (label.align == \"right\") {\r\n\t\t\t\t\tdeltaX = maxWidth;\r\n\t\t\t\t\thorizontalCenter = \"right\";\r\n\t\t\t\t}\r\n\t\t\t\tif (label.align == \"center\") {\r\n\t\t\t\t\tdeltaX = maxWidth / 2;\r\n\t\t\t\t\thorizontalCenter = \"middle\";\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\thorizontalCenter = \"right\";\r\n\t\t\t}\r\n\r\n\t\t\tpoint.x = this.measuredWidth + deltaX;\r\n\t\t}\r\n\r\n\t\tif (label.rotation == 0) {\r\n\t\t\t// Apply fuzzy logic to verticalCenter only if labels are not rotated\r\n\t\t\tlabel.horizontalCenter = horizontalCenter;\r\n\t\t}\r\n\r\n\t\tthis.positionItem(label, point);\r\n\t\tthis.toggleVisibility(label, position, this.minLabelPosition, this.maxLabelPosition);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions an axis break element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param axisBreak Break element\r\n\t */\r\n\tpublic updateBreakElement(axisBreak: AxisBreak) {\r\n\t\tsuper.updateBreakElement(axisBreak);\r\n\r\n\t\tlet startLine = axisBreak.startLine;\r\n\t\tlet endLine = axisBreak.endLine;\r\n\t\tlet fillShape = axisBreak.fillShape;\r\n\r\n\t\tlet startPoint: IPoint = axisBreak.startPoint;\r\n\t\tlet endPoint: IPoint = axisBreak.endPoint;\r\n\r\n\t\tlet x1: number = axisBreak.pixelMarginLeft;\r\n\t\tlet x2: number = this.getWidth() - axisBreak.pixelMarginLeft - axisBreak.pixelMarginRight;\r\n\r\n\t\tstartPoint.y = $math.fitToRange(startPoint.y, -1, this.axisLength + 1);\r\n\t\tendPoint.y = $math.fitToRange(endPoint.y, -1, this.axisLength + 1);\r\n\r\n\t\tif (startPoint.y == endPoint.y && (startPoint.y < 0 || startPoint.y > this.axisLength)) {\r\n\t\t\taxisBreak.fillShape.__disabled = true;\r\n\t\t}\r\n\t\telse {\r\n\t\t\taxisBreak.fillShape.__disabled = false;\r\n\t\t}\r\n\r\n\t\tlet w = Math.abs(x2 - x1);\r\n\r\n\t\tstartLine.x = x1;\r\n\t\tstartLine.height = 0;\r\n\t\tstartLine.width = w;\r\n\r\n\t\tendLine.x = x1;\r\n\t\tendLine.height = 0;\r\n\t\tendLine.width = w;\r\n\r\n\t\tfillShape.width = w;\r\n\t\tfillShape.height = Math.abs(endPoint.y - startPoint.y);\r\n\t\tfillShape.x = x1;\r\n\t\tfillShape.y = endPoint.y;\r\n\t}\r\n\r\n\t/**\r\n\t * Creates visual elements for and axis break.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param axisBreak Axis break\r\n\t */\r\n\tpublic createBreakSprites(axisBreak: AxisBreak) {\r\n\t\taxisBreak.startLine = new WavedLine();\r\n\t\taxisBreak.endLine = new WavedLine();\r\n\t\tlet wavedRectangle: WavedRectangle = new WavedRectangle();\r\n\t\twavedRectangle.setWavedSides(true, false, true, false);\r\n\t\taxisBreak.fillShape = wavedRectangle;\r\n\t}\r\n\r\n\t/**\r\n\t * Converts a position on the axis to a coordinate in pixels.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param position  Position (0-1)\r\n\t * @return Coordinate (px)\r\n\t */\r\n\tpublic positionToCoordinate(position: number): number {\r\n\t\tlet coordinate: number;\r\n\t\tlet axis: Axis = this.axis;\r\n\t\tlet axisFullLength = axis.axisFullLength;\r\n\r\n\t\tif (!axis.renderer.inversed) {\r\n\t\t\tcoordinate = (axis.end - position) * axisFullLength;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tcoordinate = (position - axis.start) * axisFullLength;\r\n\t\t}\r\n\r\n\t\treturn coordinate\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Updates and positions axis bullets.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param bullet       AxisBullet element\r\n\t * @param position     Starting position\r\n\t * @param endPosition  End position\r\n\t */\r\n\tpublic updateBullet(bullet: Sprite, position: number, endPosition: number): void {\r\n\r\n\t\tlet location = 0.5;\r\n\t\tif (bullet instanceof AxisBullet) {\r\n\t\t\tlocation = bullet.location;\r\n\t\t}\r\n\r\n\t\tposition = position + (endPosition - position) * location;\r\n\t\tlet point: IPoint = this.positionToPoint(position);\r\n\r\n\t\tpoint.x = $utils.spritePointToSprite({ x: this.line.pixelX, y: 0 }, this.line.parent, this.gridContainer).x;\r\n\r\n\t\tthis.positionItem(bullet, point);\r\n\r\n\t\tthis.toggleVisibility(bullet, position, 0, 1);\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"AxisRendererY\"] = AxisRendererY;\r\n\r\n/**\r\n * Add default responsive rules\r\n */\r\n\r\n/**\r\n * Put labels inside plot area.\r\n * Disable first and last labels.\r\n */\r\ndefaultRules.push({\r\n\trelevant: ResponsiveBreakpoints.widthS,\r\n\tstate: function(target, stateId) {\r\n\t\tif (target instanceof AxisRendererY) {\r\n\t\t\tlet state = target.states.create(stateId);\r\n\t\t\tstate.properties.inside = true;\r\n\t\t\tstate.properties.maxLabelPosition = 0.9;\r\n\t\t\tstate.properties.minLabelPosition = 0.1;\r\n\t\t\treturn state;\r\n\t\t}\r\n\r\n\t\treturn null;\r\n\t}\r\n});\r\n\r\n/**\r\n * Disable labels altogather on very small charts\r\n */\r\ndefaultRules.push({\r\n\trelevant: ResponsiveBreakpoints.widthXS,\r\n\tstate: function(target, stateId) {\r\n\t\tif (target instanceof AxisRendererY) {\r\n\t\t\tlet state = target.states.create(stateId);\r\n\t\t\tstate.properties.disabled = true;\r\n\t\t\treturn state;\r\n\t\t}\r\n\r\n\t\treturn null;\r\n\t}\r\n});"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}