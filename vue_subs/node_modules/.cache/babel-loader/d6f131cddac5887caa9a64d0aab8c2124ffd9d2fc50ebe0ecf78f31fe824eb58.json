{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\nimport * as $array from \"./Array\";\nimport * as $type from \"./Type\";\n/**\r\n * ============================================================================\r\n * UTILITY FUNCTIONS\r\n * ============================================================================\r\n * @hidden\r\n */\n/**\r\n * Returns an iterator for all entries in object.\r\n *\r\n * Can be used to safely iterate through all properties of the object.\r\n *\r\n * @param object  Source object\r\n * @returns Iterator\r\n */\nexport function entries(object) {\n  return function (push) {\n    // TODO make this more efficient ?\n    for (var key in object) {\n      if (hasKey(object, key)) {\n        if (!push([key, object[key]])) {\n          break;\n        }\n      }\n    }\n  };\n}\n/**\r\n * Returns an array of object's property names.\r\n *\r\n * @param object  Source object\r\n * @returns Object property names\r\n */\nexport function keys(object) {\n  var output = [];\n  for (var key in object) {\n    if (hasKey(object, key)) {\n      output.push(key);\n    }\n  }\n  return output;\n}\n/**\r\n * Returns an array of object's property names ordered using specific ordering\r\n * function.\r\n *\r\n * @param object  Source object\r\n * @param order   Ordering function\r\n * @returns Object property names\r\n */\nexport function keysOrdered(object, order) {\n  return keys(object).sort(order);\n}\n/**\r\n * Checks if `object` has a specific `key`.\r\n *\r\n * @param object  Source object\r\n * @param key     Property name\r\n * @returns Has key?\r\n */\nexport function hasKey(object, key) {\n  return {}.hasOwnProperty.call(object, key);\n}\n/**\r\n * Returns value of the specific `key`.\r\n *\r\n * @param object  Source object\r\n * @param key     Property name\r\n * @returns Key value\r\n */\nexport function getKey(object, key) {\n  return object[key];\n}\n/**\r\n * Iterates through all properties of the object calling `fn` for each of them.\r\n *\r\n * If return value of the function evaluates to `false` further iteration is\r\n * cancelled.\r\n *\r\n * @param object  Source object\r\n * @param fn      Callback function\r\n */\nexport function eachContinue(object, fn) {\n  for (var key in object) {\n    if (hasKey(object, key)) {\n      if (!fn(key, object[key])) {\n        break;\n      }\n    }\n  }\n}\n/**\r\n * Iterates through all properties of the object calling `fn` for each of them.\r\n *\r\n * @param object  Source object\r\n * @param fn      Callback function\r\n */\nexport function each(object, fn) {\n  eachContinue(object, function (key, value) {\n    fn(key, value);\n    return true;\n  });\n}\n/**\r\n * Orders object properties using custom `ord` function and iterates through\r\n * them calling `fn` for each of them.\r\n *\r\n * @param object  Source object\r\n * @param fn      Callback function\r\n * @param order   Ordering function\r\n */\nexport function eachOrdered(object, fn, ord) {\n  $array.each(keysOrdered(object, ord), function (key) {\n    fn(key, object[key]);\n  });\n}\n/**\r\n * Returns a copy of the object.\r\n *\r\n * @param object  Source object\r\n * @returns Copy of the object\r\n */\nexport function copy(object) {\n  return Object.assign({}, object);\n}\n/**\r\n * Merges two objects and returns a new object that contains properties from\r\n * both source objects.\r\n *\r\n * @param object1  Source object #1\r\n * @param object2  Source object #2\r\n * @returns Combined object\r\n */\nexport function merge(object1, object2) {\n  return Object.assign({}, object1, object2);\n}\n/**\r\n * Returns object clone.\r\n *\r\n * @param object  Source object\r\n * @returns       Clone\r\n */\nexport function clone(object) {\n  return JSON.parse(JSON.stringify(object));\n}\n/**\r\n * Copies a list of properties from one object to another.\r\n *\r\n * Will not copy empty properties.\r\n *\r\n * @param source  Source object\r\n * @param target    Target object\r\n * @param keys  List of keys to copy\r\n */\nexport function copyProperties(source, target, keys) {\n  $array.each(keys, function (key) {\n    if ($type.hasValue(source[key])) {\n      target[key] = source[key];\n    }\n  });\n}\n/**\r\n * Copies a list of properties from one object to another only if target does't have value of the property set.\r\n *\r\n * Will not copy empty properties.\r\n *\r\n * @param source  Source object\r\n * @param target    Target object\r\n * @param keys  List of keys to copy\r\n */\nexport function softCopyProperties(source, target, keys) {\n  $array.each(keys, function (key) {\n    if ($type.hasValue(source[key]) && !$type.hasValue(target[key])) {\n      target[key] = source[key];\n    }\n  });\n}\n/**\r\n * Copies a list of properties from one object to another.\r\n *\r\n * Will copy empty properties.\r\n *\r\n * @param source  Source object\r\n * @param target    Target object\r\n * @param keys  List of keys to copy\r\n */\nexport function forceCopyProperties(source, target, keys) {\n  $array.each(keys, function (key) {\n    target[key] = source[key];\n  });\n}\n/**\r\n * Copies all properties from one object to another.\r\n *\r\n * @param from  Source object\r\n * @param to    Target object\r\n */\nexport function copyAllProperties(from, to) {\n  copyProperties(from, to, keys(from));\n}","map":{"version":3,"names":["$array","$type","entries","object","push","key","hasKey","keys","output","keysOrdered","order","sort","hasOwnProperty","call","getKey","eachContinue","fn","each","value","eachOrdered","ord","copy","Object","assign","merge","object1","object2","clone","JSON","parse","stringify","copyProperties","source","target","hasValue","softCopyProperties","forceCopyProperties","copyAllProperties","from","to"],"sources":["../../../../../src/.internal/core/utils/Object.ts"],"sourcesContent":["/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport * as $array from \"./Array\";\r\nimport * as $iter from \"./Iterator\";\r\nimport * as $type from \"./Type\";\r\nimport { Ordering } from \"./Order\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * UTILITY FUNCTIONS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Returns an iterator for all entries in object.\r\n *\r\n * Can be used to safely iterate through all properties of the object.\r\n *\r\n * @param object  Source object\r\n * @returns Iterator\r\n */\r\nexport function entries<Object>(object: Object): $iter.Iterator<[$type.Keyof<Object>, Object[$type.Keyof<Object>]]> {\r\n\treturn (push) => {\r\n\t\t// TODO make this more efficient ?\r\n\t\tfor (let key in object) {\r\n\t\t\tif (hasKey(object, key)) {\r\n\t\t\t\tif (!push([key as $type.Keyof<Object>, object[key] as Object[$type.Keyof<Object>]])) {\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n}\r\n\r\n/**\r\n * Returns an array of object's property names.\r\n *\r\n * @param object  Source object\r\n * @returns Object property names\r\n */\r\nexport function keys<Object>(object: Object): Array<$type.Keyof<Object>> {\r\n\tconst output = [];\r\n\r\n\tfor (let key in object) {\r\n\t\tif (hasKey(object, key)) {\r\n\t\t\toutput.push(key as $type.Keyof<Object>);\r\n\t\t}\r\n\t}\r\n\r\n\treturn output;\r\n}\r\n\r\n/**\r\n * Returns an array of object's property names ordered using specific ordering\r\n * function.\r\n *\r\n * @param object  Source object\r\n * @param order   Ordering function\r\n * @returns Object property names\r\n */\r\nexport function keysOrdered<Object>(object: Object, order: (a: $type.Keyof<Object>, b: $type.Keyof<Object>) => Ordering): Array<$type.Keyof<Object>> {\r\n\treturn keys(object).sort(order);\r\n}\r\n\r\n/**\r\n * Checks if `object` has a specific `key`.\r\n *\r\n * @param object  Source object\r\n * @param key     Property name\r\n * @returns Has key?\r\n */\r\nexport function hasKey<Object, Key extends keyof Object>(object: Object, key: Key): boolean {\r\n\treturn {}.hasOwnProperty.call(object, key);\r\n}\r\n\r\n/**\r\n * Returns value of the specific `key`.\r\n *\r\n * @param object  Source object\r\n * @param key     Property name\r\n * @returns Key value\r\n */\r\nexport function getKey<Object, Key extends keyof Object>(object: Object, key: Key): Object[Key] {\r\n\treturn object[key];\r\n}\r\n\r\n/**\r\n * Iterates through all properties of the object calling `fn` for each of them.\r\n *\r\n * If return value of the function evaluates to `false` further iteration is\r\n * cancelled.\r\n *\r\n * @param object  Source object\r\n * @param fn      Callback function\r\n */\r\nexport function eachContinue<Object>(object: Object, fn: <Key extends $type.Keyof<Object>>(key: Key, value: Object[Key]) => boolean): void {\r\n\tfor (let key in object) {\r\n\t\tif (hasKey(object, key)) {\r\n\t\t\tif (!fn(key as $type.Keyof<Object>, object[key] as Object[$type.Keyof<Object>])) {\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * Iterates through all properties of the object calling `fn` for each of them.\r\n *\r\n * @param object  Source object\r\n * @param fn      Callback function\r\n */\r\nexport function each<Object>(object: Object, fn: <Key extends $type.Keyof<Object>>(key: Key, value: Object[Key]) => void): void {\r\n\teachContinue(object, (key, value) => {\r\n\t\tfn(key, value);\r\n\t\treturn true;\r\n\t});\r\n}\r\n\r\n/**\r\n * Orders object properties using custom `ord` function and iterates through\r\n * them calling `fn` for each of them.\r\n *\r\n * @param object  Source object\r\n * @param fn      Callback function\r\n * @param order   Ordering function\r\n */\r\nexport function eachOrdered<Object>(object: Object, fn: <Key extends $type.Keyof<Object>>(key: Key, value: Object[Key]) => void, ord: (a: $type.Keyof<Object>, b: $type.Keyof<Object>) => Ordering): void {\r\n\t$array.each(keysOrdered(object, ord), (key) => {\r\n\t\tfn(key, object[key]);\r\n\t});\r\n}\r\n\r\n/**\r\n * Returns a copy of the object.\r\n *\r\n * @param object  Source object\r\n * @returns Copy of the object\r\n */\r\nexport function copy<Object>(object: Object): Object {\r\n\treturn Object.assign({}, object);\r\n}\r\n\r\n/**\r\n * Merges two objects and returns a new object that contains properties from\r\n * both source objects.\r\n *\r\n * @param object1  Source object #1\r\n * @param object2  Source object #2\r\n * @returns Combined object\r\n */\r\nexport function merge<Object1, Object2>(object1: Object1, object2: Object2): Object1 & Object2 {\r\n\treturn Object.assign({}, object1, object2);\r\n}\r\n\r\n/**\r\n * Returns object clone.\r\n *\r\n * @param object  Source object\r\n * @returns       Clone\r\n */\r\nexport function clone<Object>(object: Object): Object {\r\n\treturn JSON.parse(JSON.stringify(object));\r\n}\r\n/**\r\n * Copies a list of properties from one object to another.\r\n *\r\n * Will not copy empty properties.\r\n *\r\n * @param source  Source object\r\n * @param target    Target object\r\n * @param keys  List of keys to copy\r\n */\r\nexport function copyProperties(source: { [key: string]: any }, target: { [key: string]: any }, keys: Array<string>): void {\r\n\t$array.each(keys, (key) => {\r\n\t\tif ($type.hasValue(source[key])) {\r\n\t\t\ttarget[key] = source[key];\r\n\t\t}\r\n\t});\r\n}\r\n\r\n/**\r\n * Copies a list of properties from one object to another only if target does't have value of the property set.\r\n *\r\n * Will not copy empty properties.\r\n *\r\n * @param source  Source object\r\n * @param target    Target object\r\n * @param keys  List of keys to copy\r\n */\r\nexport function softCopyProperties(source: { [key: string]: any }, target: { [key: string]: any }, keys: Array<string>): void {\r\n\t$array.each(keys, (key) => {\r\n\t\tif ($type.hasValue(source[key]) && !($type.hasValue((<any>target)[key]))) {\r\n\t\t\ttarget[key] = source[key];\r\n\t\t}\r\n\t});\r\n}\r\n\r\n/**\r\n * Copies a list of properties from one object to another.\r\n *\r\n * Will copy empty properties.\r\n *\r\n * @param source  Source object\r\n * @param target    Target object\r\n * @param keys  List of keys to copy\r\n */\r\nexport function forceCopyProperties(source: { [key: string]: any }, target: { [key: string]: any }, keys: Array<string>): void {\r\n\t$array.each(keys, (key) => {\r\n\t\ttarget[key] = source[key];\r\n\t});\r\n}\r\n\r\n/**\r\n * Copies all properties from one object to another.\r\n *\r\n * @param from  Source object\r\n * @param to    Target object\r\n */\r\nexport function copyAllProperties(from: { [key: string]: any }, to: { [key: string]: any }): void {\r\n\tcopyProperties(from, to, keys(from));\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}