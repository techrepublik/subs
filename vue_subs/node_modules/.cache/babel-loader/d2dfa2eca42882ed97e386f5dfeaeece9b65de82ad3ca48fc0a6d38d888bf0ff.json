{"ast":null,"code":"import { geoProjection as projection } from \"d3-geo\";\nimport { abs, asin, atan2, cos, sign, epsilon, epsilon2, halfPi, pi, sin, sqrt } from \"./math.js\";\nimport squareRaw from \"./square.js\";\nexport function gringortenRaw(lambda, phi) {\n  var sLambda = sign(lambda),\n    sPhi = sign(phi),\n    cosPhi = cos(phi),\n    x = cos(lambda) * cosPhi,\n    y = sin(lambda) * cosPhi,\n    z = sin(sPhi * phi);\n  lambda = abs(atan2(y, z));\n  phi = asin(x);\n  if (abs(lambda - halfPi) > epsilon) lambda %= halfPi;\n  var point = gringortenHexadecant(lambda > pi / 4 ? halfPi - lambda : lambda, phi);\n  if (lambda > pi / 4) z = point[0], point[0] = -point[1], point[1] = -z;\n  return point[0] *= sLambda, point[1] *= -sPhi, point;\n}\ngringortenRaw.invert = function (x, y) {\n  if (abs(x) > 1) x = sign(x) * 2 - x;\n  if (abs(y) > 1) y = sign(y) * 2 - y;\n  var sx = sign(x),\n    sy = sign(y),\n    x0 = -sx * x,\n    y0 = -sy * y,\n    t = y0 / x0 < 1,\n    p = gringortenHexadecantInvert(t ? y0 : x0, t ? x0 : y0),\n    lambda = p[0],\n    phi = p[1],\n    cosPhi = cos(phi);\n  if (t) lambda = -halfPi - lambda;\n  return [sx * (atan2(sin(lambda) * cosPhi, -sin(phi)) + pi), sy * asin(cos(lambda) * cosPhi)];\n};\nfunction gringortenHexadecant(lambda, phi) {\n  if (phi === halfPi) return [0, 0];\n  var sinPhi = sin(phi),\n    r = sinPhi * sinPhi,\n    r2 = r * r,\n    j = 1 + r2,\n    k = 1 + 3 * r2,\n    q = 1 - r2,\n    z = asin(1 / sqrt(j)),\n    v = q + r * j * z,\n    p2 = (1 - sinPhi) / v,\n    p = sqrt(p2),\n    a2 = p2 * j,\n    a = sqrt(a2),\n    h = p * q,\n    x,\n    i;\n  if (lambda === 0) return [0, -(h + r * a)];\n  var cosPhi = cos(phi),\n    secPhi = 1 / cosPhi,\n    drdPhi = 2 * sinPhi * cosPhi,\n    dvdPhi = (-3 * r + z * k) * drdPhi,\n    dp2dPhi = (-v * cosPhi - (1 - sinPhi) * dvdPhi) / (v * v),\n    dpdPhi = 0.5 * dp2dPhi / p,\n    dhdPhi = q * dpdPhi - 2 * r * p * drdPhi,\n    dra2dPhi = r * j * dp2dPhi + p2 * k * drdPhi,\n    mu = -secPhi * drdPhi,\n    nu = -secPhi * dra2dPhi,\n    zeta = -2 * secPhi * dhdPhi,\n    lambda1 = 4 * lambda / pi,\n    delta;\n\n  // Slower but accurate bisection method.\n  if (lambda > 0.222 * pi || phi < pi / 4 && lambda > 0.175 * pi) {\n    x = (h + r * sqrt(a2 * (1 + r2) - h * h)) / (1 + r2);\n    if (lambda > pi / 4) return [x, x];\n    var x1 = x,\n      x0 = 0.5 * x;\n    x = 0.5 * (x0 + x1), i = 50;\n    do {\n      var g = sqrt(a2 - x * x),\n        f = x * (zeta + mu * g) + nu * asin(x / a) - lambda1;\n      if (!f) break;\n      if (f < 0) x0 = x;else x1 = x;\n      x = 0.5 * (x0 + x1);\n    } while (abs(x1 - x0) > epsilon && --i > 0);\n  }\n\n  // Newton-Raphson.\n  else {\n    x = epsilon, i = 25;\n    do {\n      var x2 = x * x,\n        g2 = sqrt(a2 - x2),\n        zetaMug = zeta + mu * g2,\n        f2 = x * zetaMug + nu * asin(x / a) - lambda1,\n        df = zetaMug + (nu - mu * x2) / g2;\n      x -= delta = g2 ? f2 / df : 0;\n    } while (abs(delta) > epsilon && --i > 0);\n  }\n  return [x, -h - r * sqrt(a2 - x * x)];\n}\nfunction gringortenHexadecantInvert(x, y) {\n  var x0 = 0,\n    x1 = 1,\n    r = 0.5,\n    i = 50;\n  while (true) {\n    var r2 = r * r,\n      sinPhi = sqrt(r),\n      z = asin(1 / sqrt(1 + r2)),\n      v = 1 - r2 + r * (1 + r2) * z,\n      p2 = (1 - sinPhi) / v,\n      p = sqrt(p2),\n      a2 = p2 * (1 + r2),\n      h = p * (1 - r2),\n      g2 = a2 - x * x,\n      g = sqrt(g2),\n      y0 = y + h + r * g;\n    if (abs(x1 - x0) < epsilon2 || --i === 0 || y0 === 0) break;\n    if (y0 > 0) x0 = r;else x1 = r;\n    r = 0.5 * (x0 + x1);\n  }\n  if (!i) return null;\n  var phi = asin(sinPhi),\n    cosPhi = cos(phi),\n    secPhi = 1 / cosPhi,\n    drdPhi = 2 * sinPhi * cosPhi,\n    dvdPhi = (-3 * r + z * (1 + 3 * r2)) * drdPhi,\n    dp2dPhi = (-v * cosPhi - (1 - sinPhi) * dvdPhi) / (v * v),\n    dpdPhi = 0.5 * dp2dPhi / p,\n    dhdPhi = (1 - r2) * dpdPhi - 2 * r * p * drdPhi,\n    zeta = -2 * secPhi * dhdPhi,\n    mu = -secPhi * drdPhi,\n    nu = -secPhi * (r * (1 + r2) * dp2dPhi + p2 * (1 + 3 * r2) * drdPhi);\n  return [pi / 4 * (x * (zeta + mu * g) + nu * asin(x / sqrt(a2))), phi];\n}\nexport default function () {\n  return projection(squareRaw(gringortenRaw)).scale(239.75);\n}","map":{"version":3,"names":["geoProjection","projection","abs","asin","atan2","cos","sign","epsilon","epsilon2","halfPi","pi","sin","sqrt","squareRaw","gringortenRaw","lambda","phi","sLambda","sPhi","cosPhi","x","y","z","point","gringortenHexadecant","invert","sx","sy","x0","y0","t","p","gringortenHexadecantInvert","sinPhi","r","r2","j","k","q","v","p2","a2","a","h","i","secPhi","drdPhi","dvdPhi","dp2dPhi","dpdPhi","dhdPhi","dra2dPhi","mu","nu","zeta","lambda1","delta","x1","g","f","x2","g2","zetaMug","f2","df","scale"],"sources":["/Users/admin/Desktop/techrepublik/pro/subs/vue_subs/node_modules/d3-geo-projection/src/gringorten.js"],"sourcesContent":["import {geoProjection as projection} from \"d3-geo\";\nimport {abs, asin, atan2, cos, sign, epsilon, epsilon2, halfPi, pi, sin, sqrt} from \"./math.js\";\nimport squareRaw from \"./square.js\";\n\nexport function gringortenRaw(lambda, phi) {\n  var sLambda = sign(lambda),\n      sPhi = sign(phi),\n      cosPhi = cos(phi),\n      x = cos(lambda) * cosPhi,\n      y = sin(lambda) * cosPhi,\n      z = sin(sPhi * phi);\n  lambda = abs(atan2(y, z));\n  phi = asin(x);\n  if (abs(lambda - halfPi) > epsilon) lambda %= halfPi;\n  var point = gringortenHexadecant(lambda > pi / 4 ? halfPi - lambda : lambda, phi);\n  if (lambda > pi / 4) z = point[0], point[0] = -point[1], point[1] = -z;\n  return (point[0] *= sLambda, point[1] *= -sPhi, point);\n}\n\ngringortenRaw.invert = function(x, y) {\n  if (abs(x) > 1) x = sign(x) * 2 - x;\n  if (abs(y) > 1) y = sign(y) * 2 - y;\n  var sx = sign(x),\n      sy = sign(y),\n      x0 = -sx * x,\n      y0 = -sy * y,\n      t = y0 / x0 < 1,\n      p = gringortenHexadecantInvert(t ? y0 : x0, t ? x0 : y0),\n      lambda = p[0],\n      phi = p[1],\n      cosPhi = cos(phi);\n  if (t) lambda = -halfPi - lambda;\n  return [sx * (atan2(sin(lambda) * cosPhi, -sin(phi)) + pi), sy * asin(cos(lambda) * cosPhi)];\n};\n\nfunction gringortenHexadecant(lambda, phi) {\n  if (phi === halfPi) return [0, 0];\n\n  var sinPhi = sin(phi),\n      r = sinPhi * sinPhi,\n      r2 = r * r,\n      j = 1 + r2,\n      k = 1 + 3 * r2,\n      q = 1 - r2,\n      z = asin(1 / sqrt(j)),\n      v = q + r * j * z,\n      p2 = (1 - sinPhi) / v,\n      p = sqrt(p2),\n      a2 = p2 * j,\n      a = sqrt(a2),\n      h = p * q,\n      x,\n      i;\n\n  if (lambda === 0) return [0, -(h + r * a)];\n\n  var cosPhi = cos(phi),\n      secPhi = 1 / cosPhi,\n      drdPhi = 2 * sinPhi * cosPhi,\n      dvdPhi = (-3 * r + z * k) * drdPhi,\n      dp2dPhi = (-v * cosPhi - (1 - sinPhi) * dvdPhi) / (v * v),\n      dpdPhi = (0.5 * dp2dPhi) / p,\n      dhdPhi = q * dpdPhi - 2 * r * p * drdPhi,\n      dra2dPhi = r * j * dp2dPhi + p2 * k * drdPhi,\n      mu = -secPhi * drdPhi,\n      nu = -secPhi * dra2dPhi,\n      zeta = -2 * secPhi * dhdPhi,\n      lambda1 = 4 * lambda / pi,\n      delta;\n\n  // Slower but accurate bisection method.\n  if (lambda > 0.222 * pi || phi < pi / 4 && lambda > 0.175 * pi) {\n    x = (h + r * sqrt(a2 * (1 + r2) - h * h)) / (1 + r2);\n    if (lambda > pi / 4) return [x, x];\n    var x1 = x, x0 = 0.5 * x;\n    x = 0.5 * (x0 + x1), i = 50;\n    do {\n      var g = sqrt(a2 - x * x),\n          f = (x * (zeta + mu * g) + nu * asin(x / a)) - lambda1;\n      if (!f) break;\n      if (f < 0) x0 = x;\n      else x1 = x;\n      x = 0.5 * (x0 + x1);\n    } while (abs(x1 - x0) > epsilon && --i > 0);\n  }\n\n  // Newton-Raphson.\n  else {\n    x = epsilon, i = 25;\n    do {\n      var x2 = x * x,\n          g2 = sqrt(a2 - x2),\n          zetaMug = zeta + mu * g2,\n          f2 = x * zetaMug + nu * asin(x / a) - lambda1,\n          df = zetaMug + (nu - mu * x2) / g2;\n      x -= delta = g2 ? f2 / df : 0;\n    } while (abs(delta) > epsilon && --i > 0);\n  }\n\n  return [x, -h - r * sqrt(a2 - x * x)];\n}\n\nfunction gringortenHexadecantInvert(x, y) {\n  var x0 = 0,\n      x1 = 1,\n      r = 0.5,\n      i = 50;\n\n  while (true) {\n    var r2 = r * r,\n        sinPhi = sqrt(r),\n        z = asin(1 / sqrt(1 + r2)),\n        v = (1 - r2) + r * (1 + r2) * z,\n        p2 = (1 - sinPhi) / v,\n        p = sqrt(p2),\n        a2 = p2 * (1 + r2),\n        h = p * (1 - r2),\n        g2 = a2 - x * x,\n        g = sqrt(g2),\n        y0 = y + h + r * g;\n    if (abs(x1 - x0) < epsilon2 || --i === 0 || y0 === 0) break;\n    if (y0 > 0) x0 = r;\n    else x1 = r;\n    r = 0.5 * (x0 + x1);\n  }\n\n  if (!i) return null;\n\n  var phi = asin(sinPhi),\n      cosPhi = cos(phi),\n      secPhi = 1 / cosPhi,\n      drdPhi = 2 * sinPhi * cosPhi,\n      dvdPhi = (-3 * r + z * (1 + 3 * r2)) * drdPhi,\n      dp2dPhi = (-v * cosPhi - (1 - sinPhi) * dvdPhi) / (v * v),\n      dpdPhi = 0.5 * dp2dPhi / p,\n      dhdPhi = (1 - r2) * dpdPhi - 2 * r * p * drdPhi,\n      zeta = -2 * secPhi * dhdPhi,\n      mu = -secPhi * drdPhi,\n      nu = -secPhi * (r * (1 + r2) * dp2dPhi + p2 * (1 + 3 * r2) * drdPhi);\n\n  return [pi / 4 * (x * (zeta + mu * g) + nu * asin(x / sqrt(a2))), phi];\n}\n\nexport default function() {\n  return projection(squareRaw(gringortenRaw))\n      .scale(239.75);\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}