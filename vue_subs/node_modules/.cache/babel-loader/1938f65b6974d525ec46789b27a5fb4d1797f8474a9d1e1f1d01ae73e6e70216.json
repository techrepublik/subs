{"ast":null,"code":"/**\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\nimport { MapObject } from \"./MapObject\";\nimport { registry } from \"../../core/Registry\";\nimport * as $type from \"../../core/utils/Type\";\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n/**\r\n * Used to place an image on the map.\r\n *\r\n * @see {@link IMapImageEvents} for a list of available events\r\n * @see {@link IMapImageAdapters} for a list of available Adapters\r\n */\nvar MapImage = /** @class */function (_super) {\n  __extends(MapImage, _super);\n  /**\r\n   * Constructor\r\n   */\n  function MapImage() {\n    var _this = _super.call(this) || this;\n    _this.className = \"MapImage\";\n    _this.applyTheme();\n    return _this;\n  }\n  Object.defineProperty(MapImage.prototype, \"latitude\", {\n    /**\r\n     * @return Latitude\r\n     */\n    get: function () {\n      var latitude = this.getPropertyValue(\"latitude\");\n      if (!$type.isNumber(latitude) && this.dataItem && this.dataItem.geoPoint) {\n        latitude = this.dataItem.geoPoint.latitude;\n      }\n      return latitude;\n    },\n    /**\r\n     * Latitude image is placed at.\r\n     *\r\n     * @param value  Latitude\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"latitude\", value, false, true);\n      this.updateExtremes();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MapImage.prototype, \"longitude\", {\n    /**\r\n     * @return Longitude\r\n     */\n    get: function () {\n      var longitude = this.getPropertyValue(\"longitude\");\n      if (!$type.isNumber(longitude) && this.dataItem && this.dataItem.geoPoint) {\n        longitude = this.dataItem.geoPoint.longitude;\n      }\n      return longitude;\n    },\n    /**\r\n     * Longitude image is placed on.\r\n     *\r\n     * @param value  Longitude\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"longitude\", value, false, true);\n      this.updateExtremes();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Repositions the image to it's current position.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  MapImage.prototype.validatePosition = function () {\n    if ($type.isNumber(this.latitude) && $type.isNumber(this.longitude)) {\n      //this.moveTo(this.series.chart.projection.convert({ latitude: this.latitude, longitude: this.longitude }));\n      var p = this.series.chart.projection.d3Projection([this.longitude, this.latitude]);\n      var visible = this.series.chart.projection.d3Path({\n        type: 'Point',\n        coordinates: [this.longitude, this.latitude]\n      });\n      if (!visible) {\n        this.__disabled = true;\n      } else {\n        this.__disabled = false;\n      }\n      this.moveTo({\n        x: p[0],\n        y: p[1]\n      });\n    }\n    _super.prototype.validatePosition.call(this);\n  };\n  /**\r\n   * @ignore\r\n   */\n  MapImage.prototype.getFeature = function () {\n    return {\n      \"type\": \"Feature\",\n      geometry: {\n        type: \"Point\",\n        coordinates: [this.longitude, this.latitude]\n      }\n    };\n  };\n  return MapImage;\n}(MapObject);\nexport { MapImage };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\nregistry.registeredClasses[\"MapImage\"] = MapImage;","map":{"version":3,"names":["MapObject","registry","$type","MapImage","_super","__extends","_this","call","className","applyTheme","Object","defineProperty","prototype","get","latitude","getPropertyValue","isNumber","dataItem","geoPoint","set","value","setPropertyValue","updateExtremes","longitude","validatePosition","p","series","chart","projection","d3Projection","visible","d3Path","type","coordinates","__disabled","moveTo","x","y","getFeature","geometry","registeredClasses"],"sources":["../../../../../src/.internal/charts/map/MapImage.ts"],"sourcesContent":["/**\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { MapObject, IMapObjectProperties, IMapObjectAdapters, IMapObjectEvents } from \"./MapObject\";\r\nimport { MapImageSeriesDataItem, MapImageSeries } from \"./MapImageSeries\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[MapImage]].\r\n */\r\nexport interface IMapImageProperties extends IMapObjectProperties {\r\n\r\n\t/**\r\n\t * Latitude of the image location.\r\n\t */\r\n\tlatitude?: number;\r\n\r\n\t/**\r\n\t * Longitude of the mage location.\r\n\t */\r\n\tlongitude?: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[MapImage]].\r\n */\r\nexport interface IMapImageEvents extends IMapObjectEvents { }\r\n\r\n/**\r\n * Defines adapters for [[MapImage]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IMapImageAdapters extends IMapObjectAdapters, IMapImageProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Used to place an image on the map.\r\n *\r\n * @see {@link IMapImageEvents} for a list of available events\r\n * @see {@link IMapImageAdapters} for a list of available Adapters\r\n */\r\nexport class MapImage extends MapObject {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IMapImageProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IMapImageAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IMapImageEvents;\r\n\r\n\t/**\r\n\t * A related data item.\r\n\t */\r\n\tpublic _dataItem: MapImageSeriesDataItem;\r\n\r\n\t/**\r\n\t * A map series this object belongs to.\r\n\t */\r\n\tpublic series: MapImageSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"MapImage\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Latitude image is placed at.\r\n\t *\r\n\t * @param value  Latitude\r\n\t */\r\n\tpublic set latitude(value: number) {\r\n\t\tthis.setPropertyValue(\"latitude\", value, false, true);\r\n\t\tthis.updateExtremes();\r\n\t}\r\n\r\n\t/**\r\n\t * @return Latitude\r\n\t */\r\n\tpublic get latitude(): number {\r\n\t\tlet latitude = this.getPropertyValue(\"latitude\");\r\n\t\t\r\n\t\tif(!$type.isNumber(latitude) && this.dataItem && this.dataItem.geoPoint){\r\n\t\t\tlatitude = this.dataItem.geoPoint.latitude;\r\n\t\t}\t\t\r\n\t\treturn latitude;\t\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Longitude image is placed on.\r\n\t *\r\n\t * @param value  Longitude\r\n\t */\r\n\tpublic set longitude(value: number) {\r\n\t\tthis.setPropertyValue(\"longitude\", value, false, true);\r\n\t\tthis.updateExtremes();\r\n\t}\r\n\r\n\t/**\r\n\t * @return Longitude\r\n\t */\r\n\tpublic get longitude(): number {\r\n\t\tlet longitude = this.getPropertyValue(\"longitude\");\r\n\t\tif(!$type.isNumber(longitude) && this.dataItem && this.dataItem.geoPoint){\r\n\t\t\tlongitude = this.dataItem.geoPoint.longitude;\r\n\t\t}\t\t\r\n\t\treturn longitude;\r\n\t}\r\n\r\n\t/**\r\n\t * Repositions the image to it's current position.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validatePosition(): void {\r\n\t\tif ($type.isNumber(this.latitude) && $type.isNumber(this.longitude)) {\r\n\t\t\t//this.moveTo(this.series.chart.projection.convert({ latitude: this.latitude, longitude: this.longitude }));\r\n\t\t\tlet p = this.series.chart.projection.d3Projection([this.longitude, this.latitude]);\r\n\r\n\t\t\tlet visible: any = this.series.chart.projection.d3Path({ type: 'Point', coordinates: [this.longitude, this.latitude] });\r\n\r\n\t\t\tif (!visible) {\r\n\t\t\t\tthis.__disabled = true;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.__disabled = false;\r\n\t\t\t}\r\n\r\n\t\t\tthis.moveTo({ x: p[0], y: p[1] });\r\n\t\t}\r\n\t\tsuper.validatePosition();\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic getFeature(): { \"type\": \"Feature\", geometry: { type: \"Point\", coordinates: [number, number] } } {\r\n\t\treturn { \"type\": \"Feature\", geometry: { type: \"Point\", coordinates: [this.longitude, this.latitude] } };\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"MapImage\"] = MapImage;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}