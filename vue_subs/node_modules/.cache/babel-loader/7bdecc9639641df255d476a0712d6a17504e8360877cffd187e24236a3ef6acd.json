{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n/**\r\n * A collection of Map-related utility functions.\r\n */\nimport * as $array from \"../../core/utils/Array\";\nimport * as d3geo from \"d3-geo\";\n/**\r\n * Converts a multi-part polygon in X/Y coordinates to a geo-multipolygon in\r\n * geo-points (lat/long).\r\n *\r\n * @param multiPolygon  Source multi-polygon\r\n * @return Geo-multipolygon\r\n */\nexport function multiPolygonToGeo(multiPolygon) {\n  return $array.map(multiPolygon, function (polygon) {\n    var surface = polygon[0];\n    var hole = polygon[1];\n    //let holePoints: Array<IGeoPoint> = [];\n    var geoArea = [];\n    if (surface) {\n      geoArea.push(multiPointToGeo(surface));\n    }\n    if (hole) {\n      geoArea.push(multiPointToGeo(hole));\n    }\n    return geoArea;\n  });\n}\n/**\r\n * Converts a multiline in X/Y coordinates to a geo-multiline in geo-points\r\n * (lat/long).\r\n *\r\n * @param multiLine  Source multiline\r\n * @return Geo-multiline\r\n */\nexport function multiLineToGeo(multiLine) {\n  return $array.map(multiLine, function (multiLine) {\n    return multiPointToGeo(multiLine);\n  });\n}\n/**\r\n * Converts multiple X/Y points into a lat/long geo-points.\r\n *\r\n * @param points  Source points\r\n * @return Geo-points\r\n */\nexport function multiPointToGeo(points) {\n  return $array.map(points, function (point) {\n    return pointToGeo(point);\n  });\n}\n/**\r\n * Converts multiple X/Y points into a lat/long geo-points.\r\n *\r\n * @param points  Source points\r\n * @return Geo-points\r\n */\nexport function multiGeoToPoint(geoPoints) {\n  return $array.map(geoPoints, geoToPoint);\n}\n/**\r\n * Converts X/Y point into a lat/long geo-point.\r\n *\r\n * @param point  Source point\r\n * @return Geo-point\r\n */\nexport function pointToGeo(point) {\n  return {\n    longitude: point[0],\n    latitude: point[1]\n  };\n}\n/**\r\n * Converts lat/long geo-point into a X/Y point.\r\n *\r\n * @param point  Source geo-point\r\n * @return X/Y point\r\n */\nexport function geoToPoint(geoPoint) {\n  return [geoPoint.longitude, geoPoint.latitude];\n}\n/**\r\n * Converts geo line (collection of lat/long coordinates) to screen line (x/y).\r\n *\r\n * @param   multiGeoLine  Source geo line\r\n * @return                Screen line\r\n */\nexport function multiGeoLineToMultiLine(multiGeoLine) {\n  return $array.map(multiGeoLine, function (segment) {\n    return $array.map(segment, geoToPoint);\n  });\n}\n/**\r\n * Converts a geo polygon (collection of lat/long coordinates) to screen\r\n * polygon (x/y).\r\n *\r\n * @param   multiGeoPolygon  Source polygon\r\n * @return                   Screen polygon\r\n */\nexport function multiGeoPolygonToMultipolygon(multiGeoPolygon) {\n  return $array.map(multiGeoPolygon, function (geoPolygon) {\n    var surface = geoPolygon[0];\n    var hole = geoPolygon[1];\n    var multiPolygon = [];\n    if (surface) {\n      multiPolygon.push(multiGeoToPoint(surface));\n    }\n    if (hole) {\n      multiPolygon.push(multiGeoToPoint(hole));\n    }\n    return multiPolygon;\n  });\n}\n/**\r\n * Returns a set of geographical coordinates for the circle with a center\r\n * at specific lat/long coordinates and radius (in degrees).\r\n *\r\n * @since 4.3.0\r\n * @param   longitude  Center longitude\r\n * @param   latitude   Center latitude\r\n * @param   radius     Radius (degrees)\r\n * @return             Circle coordinates\r\n */\nexport function getCircle(longitude, latitude, radius) {\n  return [d3geo.geoCircle().center([longitude, latitude]).radius(radius)().coordinates];\n}\n/**\r\n * Returns a set of screen coordinates that represents a \"background\" area\r\n * between provided extremities.\r\n *\r\n * @since 4.3.0\r\n * @param   north  North latitude\r\n * @param   east   East longitude\r\n * @param   south  South latitude\r\n * @param   west   West longitude\r\n * @return         Polygon\r\n */\nexport function getBackground(north, east, south, west) {\n  var multiPolygon = [];\n  if (west == -180) {\n    west = -179.9999;\n  }\n  if (south == -90) {\n    south = -89.9999;\n  }\n  if (north == 90) {\n    north = 89.9999;\n  }\n  if (east == 180) {\n    east = 179.9999;\n  }\n  var stepLong = Math.min(90, (east - west) / Math.ceil((east - west) / 90));\n  var stepLat = (north - south) / Math.ceil((north - south) / 90);\n  for (var ln = west; ln < east; ln = ln + stepLong) {\n    var surface = [];\n    multiPolygon.push([surface]);\n    if (ln + stepLong > east) {\n      stepLong = east - ln;\n    }\n    for (var ll = ln; ll <= ln + stepLong; ll = ll + 5) {\n      surface.push([ll, north]);\n    }\n    for (var lt = north; lt >= south; lt = lt - stepLat) {\n      surface.push([ln + stepLong, lt]);\n    }\n    for (var ll = ln + stepLong; ll >= ln; ll = ll - 5) {\n      surface.push([ll, south]);\n    }\n    for (var lt = south; lt <= north; lt = lt + stepLat) {\n      surface.push([ln, lt]);\n    }\n  }\n  return multiPolygon;\n}","map":{"version":3,"names":["$array","d3geo","multiPolygonToGeo","multiPolygon","map","polygon","surface","hole","geoArea","push","multiPointToGeo","multiLineToGeo","multiLine","points","point","pointToGeo","multiGeoToPoint","geoPoints","geoToPoint","longitude","latitude","geoPoint","multiGeoLineToMultiLine","multiGeoLine","segment","multiGeoPolygonToMultipolygon","multiGeoPolygon","geoPolygon","getCircle","radius","geoCircle","center","coordinates","getBackground","north","east","south","west","stepLong","Math","min","ceil","stepLat","ln","ll","lt"],"sources":["../../../../../src/.internal/charts/map/MapUtils.ts"],"sourcesContent":["/**\r\n * A collection of Map-related utility functions.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { IGeoPoint } from \"../../core/defs/IGeoPoint\";\r\nimport * as $array from \"../../core/utils/Array\";\r\nimport * as d3geo from \"d3-geo\";\r\n\r\n/**\r\n * Converts a multi-part polygon in X/Y coordinates to a geo-multipolygon in\r\n * geo-points (lat/long).\r\n *\r\n * @param multiPolygon  Source multi-polygon\r\n * @return Geo-multipolygon\r\n */\r\n\r\nexport function multiPolygonToGeo(multiPolygon: Array<[Array<[number, number]>, Array<[number, number]>]>): Array<Array<Array<IGeoPoint>>> {\r\n\treturn $array.map(multiPolygon, (polygon) => {\r\n\t\tlet surface: Array<[number, number]> = polygon[0];\r\n\t\tlet hole: Array<[number, number]> = polygon[1];\r\n\r\n\t\t//let holePoints: Array<IGeoPoint> = [];\r\n\r\n\t\tconst geoArea = [];\r\n\r\n\t\tif (surface) {\r\n\t\t\tgeoArea.push(multiPointToGeo(surface));\r\n\t\t}\r\n\r\n\t\tif (hole) {\r\n\t\t\tgeoArea.push(multiPointToGeo(hole));\r\n\t\t}\r\n\r\n\t\treturn geoArea;\r\n\t});\r\n}\r\n\r\n/**\r\n * Converts a multiline in X/Y coordinates to a geo-multiline in geo-points\r\n * (lat/long).\r\n *\r\n * @param multiLine  Source multiline\r\n * @return Geo-multiline\r\n */\r\nexport function multiLineToGeo(multiLine: Array<Array<[number, number]>>): Array<Array<IGeoPoint>> {\r\n\treturn $array.map(multiLine, (multiLine) => {\r\n\t\treturn multiPointToGeo(multiLine);\r\n\t});\r\n}\r\n\r\n/**\r\n * Converts multiple X/Y points into a lat/long geo-points.\r\n *\r\n * @param points  Source points\r\n * @return Geo-points\r\n */\r\nexport function multiPointToGeo(points: Array<[number, number]>): Array<IGeoPoint> {\r\n\treturn $array.map(points, (point) => {\r\n\t\treturn pointToGeo(point);\r\n\t});\r\n}\r\n\r\n\r\n/**\r\n * Converts multiple X/Y points into a lat/long geo-points.\r\n *\r\n * @param points  Source points\r\n * @return Geo-points\r\n */\r\nexport function multiGeoToPoint(geoPoints: Array<IGeoPoint>): Array<[number, number]> {\r\n\treturn $array.map(geoPoints, geoToPoint);\r\n}\r\n\r\n\r\n/**\r\n * Converts X/Y point into a lat/long geo-point.\r\n *\r\n * @param point  Source point\r\n * @return Geo-point\r\n */\r\nexport function pointToGeo(point: [number, number]): IGeoPoint {\r\n\treturn { longitude: point[0], latitude: point[1] }\r\n}\r\n\r\n/**\r\n * Converts lat/long geo-point into a X/Y point.\r\n *\r\n * @param point  Source geo-point\r\n * @return X/Y point\r\n */\r\nexport function geoToPoint(geoPoint: IGeoPoint): [number, number] {\r\n\treturn [geoPoint.longitude, geoPoint.latitude];\r\n}\r\n\r\n\r\n/**\r\n * Converts geo line (collection of lat/long coordinates) to screen line (x/y).\r\n *\r\n * @param   multiGeoLine  Source geo line\r\n * @return                Screen line\r\n */\r\nexport function multiGeoLineToMultiLine(multiGeoLine: Array<Array<IGeoPoint>>): Array<Array<[number, number]>> {\r\n\treturn $array.map(multiGeoLine, (segment) => {\r\n\t\treturn $array.map(segment, geoToPoint);\r\n\t});\r\n}\r\n\r\n/**\r\n * Converts a geo polygon (collection of lat/long coordinates) to screen\r\n * polygon (x/y).\r\n *\r\n * @param   multiGeoPolygon  Source polygon\r\n * @return                   Screen polygon\r\n */\r\nexport function multiGeoPolygonToMultipolygon(multiGeoPolygon: Array<[Array<IGeoPoint>, Array<IGeoPoint>]>): Array<Array<Array<[number, number]>>> {\r\n\treturn $array.map(multiGeoPolygon, (geoPolygon) => {\r\n\t\tlet surface = geoPolygon[0];\r\n\t\tlet hole = geoPolygon[1];\r\n\r\n\t\tconst multiPolygon = [];\r\n\r\n\t\tif (surface) {\r\n\t\t\tmultiPolygon.push(multiGeoToPoint(surface));\r\n\t\t}\r\n\r\n\t\tif (hole) {\r\n\t\t\tmultiPolygon.push(multiGeoToPoint(hole));\r\n\t\t}\r\n\r\n\t\treturn multiPolygon;\r\n\t});\r\n}\r\n\r\n/**\r\n * Returns a set of geographical coordinates for the circle with a center\r\n * at specific lat/long coordinates and radius (in degrees).\r\n *\r\n * @since 4.3.0\r\n * @param   longitude  Center longitude\r\n * @param   latitude   Center latitude\r\n * @param   radius     Radius (degrees)\r\n * @return             Circle coordinates\r\n */\r\nexport function getCircle(longitude: number, latitude: number, radius: number): Array<Array<Array<[number, number]>>> {\r\n\treturn [d3geo.geoCircle().center([longitude, latitude]).radius(radius)().coordinates as Array<Array<[number, number]>>];\r\n}\r\n\r\n/**\r\n * Returns a set of screen coordinates that represents a \"background\" area\r\n * between provided extremities.\r\n *\r\n * @since 4.3.0\r\n * @param   north  North latitude\r\n * @param   east   East longitude\r\n * @param   south  South latitude\r\n * @param   west   West longitude\r\n * @return         Polygon\r\n */\r\nexport function getBackground(north: number, east: number, south: number, west: number): Array<Array<Array<[number, number]>>> {\r\n\r\n\tlet multiPolygon: Array<Array<Array<[number, number]>>> = [];\r\n\r\n\tif(west == -180){\r\n\t\twest = -179.9999;\r\n\t}\r\n\tif(south == -90){\r\n\t\tsouth = -89.9999;\r\n\t}\r\n\tif(north == 90){\r\n\t\tnorth = 89.9999;\r\n\t}\r\n\tif(east == 180){\r\n\t\teast = 179.9999;\r\n\t}\r\n\r\n\r\n\tlet stepLong = Math.min(90, (east - west) / Math.ceil((east - west) / 90));\r\n\tlet stepLat = (north - south) / Math.ceil((north - south) / 90);\r\n\r\n\tfor (let ln = west; ln < east; ln = ln + stepLong) {\r\n\t\tlet surface: Array<[number, number]> = [];\r\n\t\tmultiPolygon.push([surface]);\r\n\r\n\t\tif(ln + stepLong > east){\r\n\t\t\tstepLong = east - ln;\r\n\t\t}\r\n\r\n\t\tfor (let ll = ln; ll <= ln + stepLong; ll = ll + 5) {\r\n\t\t\tsurface.push([ll, north]);\r\n\t\t}\r\n\r\n\t\tfor (let lt = north; lt >= south; lt = lt - stepLat) {\r\n\t\t\tsurface.push([ln + stepLong, lt]);\r\n\t\t}\r\n\r\n\t\tfor (let ll = ln + stepLong; ll >= ln; ll = ll - 5) {\r\n\t\t\tsurface.push([ll, south]);\r\n\t\t}\r\n\r\n\t\tfor (let lt = south; lt <= north; lt = lt + stepLat) {\r\n\t\t\tsurface.push([ln, lt]);\r\n\t\t}\r\n\r\n\r\n\t}\r\n\r\n\treturn multiPolygon;\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}