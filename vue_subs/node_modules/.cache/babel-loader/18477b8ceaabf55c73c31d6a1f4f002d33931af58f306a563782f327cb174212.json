{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n/**\r\n * Map module.\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\nimport { SerialChart, SerialChartDataItem } from \"./SerialChart\";\nimport { Disposer } from \"../../core/utils/Disposer\";\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\nimport { MapSeries } from \"../map/MapSeries\";\nimport { MapImage } from \"../map/MapImage\";\nimport { MapPolygon } from \"../map/MapPolygon\";\nimport { MapPolygonSeries } from \"../map/MapPolygonSeries\";\nimport { Projection } from \"../map/projections/Projection\";\nimport { Circle } from \"../../core/elements/Circle\";\nimport { SmallMap } from \"../map/SmallMap\";\nimport * as $mapUtils from \"../map/MapUtils\";\nimport { keyboard } from \"../../core/utils/Keyboard\";\nimport { registry } from \"../../core/Registry\";\nimport { options } from \"../../core/Options\";\nimport * as $math from \"../../core/utils/Math\";\nimport * as $utils from \"../../core/utils/Utils\";\nimport * as $ease from \"../../core/utils/Ease\";\nimport * as $iter from \"../../core/utils/Iterator\";\nimport * as $type from \"../../core/utils/Type\";\nimport * as $geo from \"../map/Geo\";\nimport { GraticuleSeries } from \"../map/GraticuleSeries\";\nimport { getInteraction } from \"../../core/interaction/Interaction\";\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\n/**\r\n * Defines a [[DataItem]] for [[MapChart]].\r\n *\r\n * @see {@link DataItem}\r\n */\nvar MapChartDataItem = /** @class */function (_super) {\n  __extends(MapChartDataItem, _super);\n  /**\r\n   * Constructor\r\n   */\n  function MapChartDataItem() {\n    var _this = _super.call(this) || this;\n    _this.className = \"MapChartDataItem\";\n    _this.applyTheme();\n    return _this;\n  }\n  return MapChartDataItem;\n}(SerialChartDataItem);\nexport { MapChartDataItem };\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n/**\r\n * Creates a map.\r\n *\r\n * @see {@link IMapChartEvents} for a list of available Events\r\n * @see {@link IMapChartAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/map/} for documentation\r\n */\nvar MapChart = /** @class */function (_super) {\n  __extends(MapChart, _super);\n  /**\r\n   * Constructor\r\n   */\n  function MapChart() {\n    var _this =\n    // Init\n    _super.call(this) || this;\n    /**\r\n     * A ratio to be used when scaling the map shapes.\r\n     *\r\n     * @readonly\r\n     */\n    _this.scaleRatio = 1;\n    /**\r\n     * Default duration of zoom animations (ms).\r\n     */\n    _this.zoomDuration = 1000;\n    /**\r\n     * Default zooming animation easing function.\r\n     */\n    _this.zoomEasing = $ease.cubicOut;\n    /**\r\n     * Smallest available zoom level. The map will not allow to zoom out past\r\n     * this setting.\r\n     *\r\n     * NOTE: Should be power of 2.\r\n     *\r\n     * @default 1\r\n     */\n    _this.minZoomLevel = 1;\n    /**\r\n     * Biggest available zoom level. The map will not allow to zoom in past\r\n     * this setting.\r\n     *\r\n     * NOTE: Should be power of 2.\r\n     *\r\n     * @default 32\r\n     */\n    _this.maxZoomLevel = 32;\n    /**\r\n     * [_prevZoomGeoPoint description]\r\n     *\r\n     * @todo Description\r\n     */\n    _this._prevZoomGeoPoint = {\n      latitude: 0,\n      longitude: 0\n    };\n    _this.className = \"MapChart\";\n    // Set default projection\n    _this.projection = new Projection();\n    _this.setPropertyValue(\"deltaLatitude\", 0);\n    _this.setPropertyValue(\"deltaLongitude\", 0);\n    _this.setPropertyValue(\"deltaGamma\", 0);\n    _this.maxPanOut = 0.7;\n    _this.homeZoomLevel = 1;\n    _this.zoomStep = 2;\n    _this.layout = \"absolute\";\n    _this.centerMapOnZoomOut = true;\n    // Set padding\n    _this.padding(0, 0, 0, 0);\n    $utils.used(_this.backgroundSeries);\n    // so that the map would render in a hidden div too\n    _this.minWidth = 10;\n    _this.minHeight = 10;\n    _this.events.once(\"inited\", _this.handleAllInited, _this, false);\n    // Create a container for map series\n    var seriesContainer = _this.seriesContainer;\n    seriesContainer.visible = false;\n    seriesContainer.inert = true;\n    seriesContainer.resizable = true;\n    seriesContainer.events.on(\"transformed\", _this.handleMapTransform, _this, false);\n    seriesContainer.events.on(\"doublehit\", _this.handleDoubleHit, _this, false);\n    seriesContainer.events.on(\"dragged\", _this.handleDrag, _this, false);\n    seriesContainer.zIndex = 0;\n    seriesContainer.dragWhileResize = true;\n    //seriesContainer.background.fillOpacity = 0;\n    seriesContainer.adapter.add(\"scale\", function (scale, target) {\n      return $math.fitToRange(scale, _this.minZoomLevel, _this.maxZoomLevel);\n    });\n    // Set up events\n    //this.events.on(\"validated\", this.updateExtremes, this);\n    //this.events.on(\"datavalidated\", this.handleAllValidated, this, false);\n    //this.events.on(\"datavalidated\", this.updateExtremes, this, false);\n    _this.events.on(\"maxsizechanged\", function (event) {\n      if (event.previousWidth == 0 || event.previousHeight == 0) {\n        _this.updateExtremes();\n        _this.updateCenterGeoPoint();\n      }\n    }, undefined, false);\n    // Set up main chart container, e.g. set backgrounds and events to monitor\n    // size changes, etc.\n    var chartContainer = _this.chartContainer;\n    chartContainer.parent = _this;\n    chartContainer.zIndex = -1;\n    _this._disposers.push(_this.events.on(\"maxsizechanged\", function () {\n      if (_this.inited) {\n        if (_this._mapAnimation) {\n          _this._mapAnimation.stop();\n        }\n        var allInited_1 = true;\n        _this.series.each(function (series) {\n          series.updateTooltipBounds();\n          if (!series.inited || series.dataInvalid) {\n            allInited_1 = false;\n          }\n        });\n        if (allInited_1) {\n          _this.updateScaleRatio();\n        }\n        _this.zoomToGeoPoint(_this._zoomGeoPointReal, _this.zoomLevel, true, 0);\n      }\n    }, undefined, false));\n    var chartContainerBg = chartContainer.background;\n    chartContainerBg.fillOpacity = 0;\n    chartContainerBg.events.on(\"down\", function (e) {\n      _this.seriesContainer.dragStart(e.target.interactions.downPointers.getIndex(0));\n    }, _this);\n    chartContainerBg.events.on(\"up\", function (e) {\n      _this.seriesContainer.dragStop();\n    }, _this);\n    chartContainerBg.events.on(\"doublehit\", _this.handleDoubleHit, _this);\n    chartContainerBg.focusable = true;\n    chartContainer.events.on(\"down\", _this.handleMapDown, _this, false);\n    _this.addDisposer(seriesContainer.events.on(\"down\", function () {\n      // Cancel any move inertia if there is one\n      var inertia = _this.seriesContainer.interactions.inertias.getKey(\"move\");\n      if (inertia) {\n        inertia.done();\n      }\n    }));\n    // Add description to background\n    _this.background.fillOpacity = 0;\n    // Add keyboard events for panning\n    _this._disposers.push(getInteraction().body.events.on(\"keyup\", function (ev) {\n      if (_this.topParent.hasFocused) {\n        var key = keyboard.getEventKey(ev.event);\n        if (!_this._zoomControl || !_this._zoomControl.thumb.isFocused) {\n          switch (key) {\n            case \"up\":\n              _this.pan({\n                x: 0,\n                y: 0.1\n              });\n              break;\n            case \"down\":\n              _this.pan({\n                x: 0,\n                y: -0.1\n              });\n              break;\n            case \"left\":\n              _this.pan({\n                x: 0.1,\n                y: 0\n              });\n              break;\n            case \"right\":\n              _this.pan({\n                x: -0.1,\n                y: 0\n              });\n              break;\n          }\n        }\n      }\n    }, _this));\n    _this.mouseWheelBehavior = \"zoom\";\n    var interaction = getInteraction();\n    _this._disposers.push(interaction.body.events.on(\"down\", _this.handlePanDown, _this));\n    _this._disposers.push(interaction.body.events.on(\"up\", _this.handlePanUp, _this));\n    //this._disposers.push(interaction.body.events.on(\"track\", this.handlePanMove, this));\n    var panSprite = _this.seriesContainer.createChild(Circle);\n    panSprite.radius = 10;\n    panSprite.inert = true;\n    panSprite.isMeasured = false;\n    panSprite.events.on(\"transformed\", _this.handlePanMove, _this, false);\n    panSprite.interactionsEnabled = false;\n    panSprite.opacity = 0;\n    panSprite.x = 0;\n    panSprite.y = 0;\n    _this.panSprite = panSprite;\n    _this.panBehavior = \"move\";\n    /*\r\n            this.panSprite.inertiaOptions.setKey(\"move\", {\r\n                \"time\": 100,\r\n                \"duration\": 1000,\r\n                \"factor\": 3,\r\n                \"easing\": $ease.sinOut\r\n            });*/\n    // Apply theme\n    _this.applyTheme();\n    return _this;\n  }\n  /**\r\n   * @ignore\r\n   */\n  MapChart.prototype.handlePanDown = function (event) {\n    var svgPoint = $utils.documentPointToSvg(event.pointer.point, this.htmlContainer);\n    if (svgPoint.x > 0 && svgPoint.y > 0 && svgPoint.x < this.svgContainer.width && svgPoint.y < this.svgContainer.height) {\n      // Get local point\n      this._downPointOrig = $utils.documentPointToSprite(event.pointer.point, this.seriesContainer);\n      this.panSprite.moveTo(this._downPointOrig);\n      this.panSprite.dragStart(event.pointer);\n      this._downDeltaLongitude = this.deltaLongitude;\n      this._downDeltaLatitude = this.deltaLatitude;\n    }\n  };\n  /**\r\n   * @ignore\r\n   */\n  MapChart.prototype.handlePanUp = function (event) {\n    if (this._downPointOrig) {\n      this.panSprite.dragStop(event.pointer, true);\n    }\n    this._downPointOrig = undefined;\n  };\n  /**\r\n   * @ignore\r\n   */\n  MapChart.prototype.handlePanMove = function () {\n    if (!this.seriesContainer.isResized) {\n      if (getInteraction().areTransformed([this.panSprite.interactions, this.seriesContainer.interactions])) {\n        return;\n      }\n      var d3Projection = this.projection.d3Projection;\n      var panBehavior = this.panBehavior;\n      if (panBehavior != \"move\" && panBehavior != \"none\" && this._downPointOrig && d3Projection.rotate) {\n        var rotation = d3Projection.rotate();\n        var dln = rotation[0];\n        var dlt = rotation[1];\n        var dlg = rotation[2];\n        d3Projection.rotate([0, 0, 0]);\n        var downGeoLocal = this.projection.invert(this._downPointOrig);\n        var local = {\n          x: this.panSprite.pixelX,\n          y: this.panSprite.pixelY\n        };\n        var geoLocal = void 0;\n        if (local) {\n          geoLocal = this.projection.invert(local);\n        }\n        d3Projection.rotate([dln, dlt, dlg]);\n        if (geoLocal) {\n          if (panBehavior == \"rotateLat\" || panBehavior == \"rotateLongLat\") {\n            this.deltaLatitude = this._downDeltaLatitude + geoLocal.latitude - downGeoLocal.latitude;\n          }\n          if (panBehavior == \"rotateLong\" || panBehavior == \"rotateLongLat\") {\n            this.deltaLongitude = this._downDeltaLongitude + geoLocal.longitude - downGeoLocal.longitude;\n          }\n        }\n      }\n    }\n  };\n  /**\r\n   * @ignore\r\n   */\n  MapChart.prototype.handleAllInited = function () {\n    var _this = this;\n    var inited = true;\n    this.seriesContainer.visible = true;\n    this.series.each(function (series) {\n      if (!series.inited || series.dataInvalid) {\n        inited = false;\n      }\n    });\n    if (inited) {\n      this.updateCenterGeoPoint();\n      this.updateScaleRatio();\n      this.goHome(0);\n    } else {\n      // TODO verify that this is correct\n      var disposer_1 = registry.events.once(\"exitframe\", function () {\n        _this.removeDispose(disposer_1);\n        _this.handleAllInited();\n      }, this, false);\n      this.addDisposer(disposer_1);\n    }\n  };\n  /**\r\n   * @ignore\r\n   */\n  MapChart.prototype.updateZoomGeoPoint = function () {\n    var seriesPoint = $utils.svgPointToSprite({\n      x: this.innerWidth / 2 + this.pixelPaddingLeft,\n      y: this.innerHeight / 2 + this.pixelPaddingTop\n    }, this.series.getIndex(0));\n    var geoPoint = this.projection.invert(seriesPoint);\n    this._zoomGeoPointReal = geoPoint;\n  };\n  /**\r\n   * @ignore\r\n   */\n  MapChart.prototype.updateCenterGeoPoint = function () {\n    var maxLeft;\n    var maxRight;\n    var maxTop;\n    var maxBottom;\n    if (this.backgroundSeries) {\n      var features = this.backgroundSeries.getFeatures();\n      if (features.length > 0) {\n        var bounds = this.projection.d3Path.bounds(features[0].geometry);\n        maxLeft = bounds[0][0];\n        maxTop = bounds[0][1];\n        maxRight = bounds[1][0];\n        maxBottom = bounds[1][1];\n      }\n    } else {\n      this.series.each(function (series) {\n        var bbox = series.group.node.getBBox();\n        if (maxLeft > bbox.x || !$type.isNumber(maxLeft)) {\n          maxLeft = bbox.x;\n        }\n        if (maxRight < bbox.x + bbox.width || !$type.isNumber(maxRight)) {\n          maxRight = bbox.x + bbox.width;\n        }\n        if (maxTop > bbox.y || !$type.isNumber(maxTop)) {\n          maxTop = bbox.y;\n        }\n        if (maxBottom < bbox.y + bbox.height || !$type.isNumber(maxBottom)) {\n          maxBottom = bbox.y + bbox.height;\n        }\n      });\n    }\n    this.seriesMaxLeft = maxLeft;\n    this.seriesMaxRight = maxRight;\n    this.seriesMaxTop = maxTop;\n    this.seriesMaxBottom = maxBottom;\n    this.seriesWidth = maxRight - maxLeft;\n    this.seriesHeight = maxBottom - maxTop;\n    if (this.seriesWidth > 0 && this.seriesHeight > 0) {\n      this.chartContainer.visible = true;\n      this._centerGeoPoint = this.projection.invert({\n        x: maxLeft + (maxRight - maxLeft) / 2,\n        y: maxTop + (maxBottom - maxTop) / 2\n      });\n      if (!this._zoomGeoPointReal || !$type.isNumber(this._zoomGeoPointReal.latitude)) {\n        this._zoomGeoPointReal = this._centerGeoPoint;\n      }\n    } else {\n      this.chartContainer.visible = false;\n    }\n  };\n  /**\r\n   * Prevents map to be dragged out of the container area\r\n   * @ignore\r\n   */\n  MapChart.prototype.handleDrag = function () {\n    var d = this.zoomLevel * this.scaleRatio;\n    var ww = this.seriesWidth * d;\n    var hh = this.seriesHeight * d;\n    var seriesContainer = this.seriesContainer;\n    var maxLeft = this.seriesMaxLeft * d;\n    var maxRight = this.seriesMaxRight * d;\n    var maxTop = this.seriesMaxTop * d;\n    var maxBottom = this.seriesMaxBottom * d;\n    var x = seriesContainer.pixelX;\n    var y = seriesContainer.pixelY;\n    var maxPanOut = this.maxPanOut;\n    var minX = Math.min(this.maxWidth * (1 - maxPanOut) - ww - maxLeft, -maxLeft);\n    if (x < minX) {\n      x = minX;\n    }\n    var maxX = Math.max(this.maxWidth * maxPanOut - maxLeft, this.maxWidth - maxRight);\n    if (x > maxX) {\n      x = maxX;\n    }\n    var minY = Math.min(this.maxHeight * (1 - maxPanOut) - hh - maxTop, -maxTop);\n    if (y < minY) {\n      y = minY;\n    }\n    var maxY = Math.max(this.maxHeight * maxPanOut - maxTop, this.maxHeight - maxBottom);\n    if (y > maxY) {\n      y = maxY;\n    }\n    seriesContainer.moveTo({\n      x: x,\n      y: y\n    }, undefined, undefined, true);\n    this._zoomGeoPointReal = this.zoomGeoPoint;\n  };\n  /**\r\n   * Sets defaults that instantiate some objects that rely on parent, so they\r\n   * cannot be set in constructor.\r\n   */\n  MapChart.prototype.applyInternalDefaults = function () {\n    _super.prototype.applyInternalDefaults.call(this);\n    // Add a default screen reader title for accessibility\n    // This will be overridden in screen reader if there are any `titles` set\n    if (!$type.hasValue(this.readerTitle)) {\n      this.readerTitle = this.language.translate(\"Map\");\n    }\n    if (!$type.hasValue(this.background.readerTitle)) {\n      this.background.role = \"application\";\n      this.background.readerTitle = this.language.translate(\"Use plus and minus keys on your keyboard to zoom in and out\");\n    }\n  };\n  /**\r\n   * Handles event when a pointer presses down on the map, e.g. user presses\r\n   * down mouse or touches the map on a screen.\r\n   *\r\n   * Stops all animations currently going on.\r\n   */\n  MapChart.prototype.handleMapDown = function () {\n    if (this._mapAnimation) {\n      this._mapAnimation.stop();\n    }\n  };\n  /**\r\n   * Handles the event when user doubleclicks or dooubletaps the map: zooms\r\n   * in on the reference point.\r\n   *\r\n   * @param event  Original event\r\n   */\n  MapChart.prototype.handleDoubleHit = function (event) {\n    var svgPoint = $utils.documentPointToSvg(event.point, this.htmlContainer, this.svgContainer.cssScale);\n    var geoPoint = this.svgPointToGeo(svgPoint);\n    this.zoomIn(geoPoint);\n  };\n  /**\r\n   * Handles mouse wheel event, e.g. user rotates mouse wheel while over the\r\n   * map: zooms in or out depending on the direction of the wheel turn.\r\n   *\r\n   * @param event  Original event\r\n   */\n  MapChart.prototype.handleWheel = function (event) {\n    // Cancel any move inertia if there is one\n    var inertia = this.seriesContainer.interactions.inertias.getKey(\"move\");\n    if (inertia) {\n      inertia.done();\n    }\n    var svgPoint = $utils.documentPointToSvg(event.point, this.htmlContainer, this.svgContainer.cssScale);\n    var geoPoint = this.svgPointToGeo(svgPoint);\n    if (event.shift.y < 0) {\n      this.zoomIn(geoPoint, undefined, this.interactions.mouseOptions.sensitivity);\n    } else {\n      this.zoomOut(geoPoint, undefined, this.interactions.mouseOptions.sensitivity);\n    }\n  };\n  Object.defineProperty(MapChart.prototype, \"mouseWheelBehavior\", {\n    /**\r\n     * @return mouse wheel behavior\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"mouseWheelBehavior\");\n    },\n    /**\r\n     * Specifies what should chart do if when mouse wheel is rotated.\r\n     *\r\n     * @see {@link https://www.amcharts.com/docs/v4/reference/sprite/#mouseOptions_property} More information about `mouseOptions`\r\n     * @param mouse wheel behavior\r\n     * @default zoomX\r\n     */\n    set: function (value) {\n      if (this.setPropertyValue(\"mouseWheelBehavior\", value)) {\n        if (value != \"none\") {\n          this._mouseWheelDisposer = this.chartContainer.events.on(\"wheel\", this.handleWheel, this, false);\n          this._disposers.push(this._mouseWheelDisposer);\n        } else {\n          if (this._mouseWheelDisposer) {\n            this._mouseWheelDisposer.dispose();\n          }\n          this.chartContainer.wheelable = false;\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MapChart.prototype, \"panBehavior\", {\n    /**\r\n     * @returns Behavior\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"panBehavior\");\n    },\n    /**\r\n     * What \"dragging\" map does.\r\n     *\r\n     * Available values:\r\n     * * `\"move\"` (default): changes position of the map.\r\n     * * `\"rotateLat\"`: changes `deltaLatitude` (rotates the globe vertically).\r\n     * * `\"rotateLong\"`: changes `deltaLongitude` (rotates the globe horizontally).\r\n     * * `\"rotateLongLat\"`: changes both `deltaLongitude` and `deltaLatitude` (rotates the globe in any direction).\r\n     *\r\n     * @default \"move\"\r\n     * @since 4.3.0\r\n     * @param  value  Behavior\r\n     */\n    set: function (value) {\n      if (this.setPropertyValue(\"panBehavior\", value)) {\n        var seriesContainer = this.seriesContainer;\n        this.panSprite.draggable = false;\n        seriesContainer.draggable = false;\n        switch (value) {\n          case \"move\":\n            seriesContainer.draggable = true;\n            break;\n          default:\n            this.panSprite.draggable = true;\n            break;\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MapChart.prototype, \"centerMapOnZoomOut\", {\n    /**\r\n     * @returns If the map should be centered when zooming out.\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"centerMapOnZoomOut\");\n    },\n    /**\r\n     * Specifies if the map should be centered when zooming out\r\n     * @default true\r\n     * @since 4.7.12\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"centerMapOnZoomOut\", value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MapChart.prototype, \"projection\", {\n    /**\r\n     * @return Projection\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"projection\");\n    },\n    /**\r\n     * Projection to use for the map.\r\n     *\r\n     * Available projections:\r\n     * * Albers\r\n     * * AlbersUSA\r\n     * * AzimuthalEqualArea\r\n     * * Eckert6\r\n     * * EqualEarth\r\n     * * Mercator\r\n     * * Miller\r\n     * * NaturalEarth\r\n     * * Orthographic\r\n     * * Stereographic\r\n     *\r\n     * ```TypeScript\r\n     * map.projection = new am4maps.projections.Mercator();\r\n     * ```\r\n     * ```JavaScript\r\n     * map.projection = new am4maps.projections.Mercator();\r\n     * ```\r\n     * ```JSON\r\n     * {\r\n     *   // ...\r\n     *   \"projection\": \"Mercator\"\r\n     *   // ...\r\n     * }\r\n     * ```\r\n     *\r\n     * @see {@link https://www.amcharts.com/docs/v4/chart-types/map/#Setting_projection} More about projections\r\n     * @param projection  Projection\r\n     */\n    set: function (projection) {\n      var _this = this;\n      if (this.setPropertyValue(\"projection\", projection)) {\n        this.invalidateProjection();\n        projection.chart = this;\n        if (this._backgroundSeries) {\n          this._backgroundSeries.invalidate();\n        }\n        if (this.inited) {\n          this.updateExtremes();\n        }\n        this.series.each(function (series) {\n          series.events.once(\"validated\", function () {\n            _this.updateCenterGeoPoint();\n            _this.updateScaleRatio();\n            _this.goHome(0);\n          });\n        });\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Validates (processes) data items.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  MapChart.prototype.validateDataItems = function () {\n    _super.prototype.validateDataItems.call(this);\n    this.updateExtremes();\n  };\n  /**\r\n   * Calculates the longitudes and latitudes of the most distant points from\r\n   * the center in all four directions: West, East, North, and South.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  MapChart.prototype.updateExtremes = function () {\n    var east;\n    var north;\n    var west;\n    var south;\n    this.series.each(function (series) {\n      if (series.ignoreBounds || series instanceof GraticuleSeries && series.fitExtent) {} else {\n        if (series.north > north || !$type.isNumber(north)) {\n          north = series.north;\n        }\n        if (series.south < south || !$type.isNumber(south)) {\n          south = series.south;\n        }\n        if (series.west < west || !$type.isNumber(west)) {\n          west = series.west;\n        }\n        if (series.east > east || !$type.isNumber(east)) {\n          east = series.east;\n        }\n      }\n    });\n    var features = [];\n    var foundGraticule = false;\n    // if we gave graticule, get features of these series only for faster fitSize\n    this.series.each(function (series) {\n      if (series instanceof GraticuleSeries && !series.fitExtent) {\n        features = series.getFeatures();\n        foundGraticule = true;\n      }\n    });\n    if (!foundGraticule) {\n      this.series.each(function (series) {\n        if (series.ignoreBounds || series instanceof GraticuleSeries && series.fitExtent) {} else {\n          features = features.concat(series.getFeatures());\n        }\n      });\n    }\n    var w = $math.max(50, this.innerWidth);\n    var h = $math.max(50, this.innerHeight);\n    var d3Projection = this.projection.d3Projection;\n    if (features.length > 0 && d3Projection && (this.east != east || this.west != west || this.north != north || this.south != south)) {\n      this.east = east;\n      this.west = west;\n      this.north = north;\n      this.south = south;\n      if (d3Projection.rotate) {\n        var rotation = d3Projection.rotate();\n        var deltaLong = rotation[0];\n        var deltaLat = rotation[1];\n        var deltaGamma = rotation[2];\n        this.deltaLongitude = deltaLong;\n        this.deltaLatitude = deltaLat;\n        this.deltaGamma = deltaGamma;\n      }\n      var geoJSON = {\n        \"type\": \"FeatureCollection\",\n        features: features\n      };\n      var initialScale = d3Projection.scale();\n      d3Projection.fitSize([w, h], geoJSON);\n      if (d3Projection.scale() != initialScale) {\n        this.invalidateDataUsers();\n      }\n      this.series.each(function (series) {\n        if (series instanceof GraticuleSeries) {\n          series.invalidateData();\n        }\n      });\n      if (this._backgroundSeries) {\n        var polygon = this._backgroundSeries.mapPolygons.getIndex(0);\n        if (polygon) {\n          polygon.multiPolygon = $mapUtils.getBackground(this.north, this.east, this.south, this.west);\n        }\n      }\n      this._fitWidth = w;\n      this._fitHeight = h;\n    }\n    if (!this._zoomGeoPointReal || !$type.isNumber(this._zoomGeoPointReal.latitude)) {\n      this.goHome(0);\n    }\n  };\n  /**\r\n   * (Re)calculates a ratio which should be used to scale the actual map so\r\n   * that it fits perfectly into available space. Helps to avoid redrawing of all the map if container size changes\r\n   * @ignore\r\n   */\n  MapChart.prototype.updateScaleRatio = function () {\n    var scaleRatio;\n    this.updateCenterGeoPoint();\n    var hScale = this.innerWidth / this.seriesWidth;\n    var vScale = this.innerHeight / this.seriesHeight;\n    scaleRatio = $math.min(hScale, vScale);\n    if ($type.isNaN(scaleRatio) || scaleRatio == Infinity) {\n      scaleRatio = 1;\n    }\n    if (scaleRatio != this.scaleRatio) {\n      this.scaleRatio = scaleRatio;\n      $iter.each(this.series.iterator(), function (series) {\n        series.scale = scaleRatio;\n        series.updateTooltipBounds();\n      });\n      this.backgroundSeries.scale = scaleRatio;\n      this.dispatch(\"scaleratiochanged\");\n    }\n  };\n  /**\r\n   * Converts a point within map container to geographical (lat/long)\r\n   * coordinates.\r\n   *\r\n   * @param point  Source point\r\n   * @return Geo-point\r\n   */\n  MapChart.prototype.svgPointToGeo = function (point) {\n    var series = this.series.getIndex(0);\n    if (series) {\n      var seriesPoint = $utils.svgPointToSprite(point, series);\n      return this.seriesPointToGeo(seriesPoint);\n    }\n  };\n  /**\r\n   * Converts geographical (lat/long) coordinates to an X/Y point within map's\r\n   * container.\r\n   *\r\n   * @param point  Source geo-point\r\n   * @return Point\r\n   */\n  MapChart.prototype.geoPointToSVG = function (point) {\n    var series = this.series.getIndex(0);\n    if (series) {\n      var seriesPoint = this.geoPointToSeries(point);\n      return $utils.spritePointToSvg(seriesPoint, series);\n    }\n  };\n  /**\r\n   * Converts a point (X/Y) within actual objects of the map to geographical\r\n   * (lat/long) coordinates.\r\n   *\r\n   * @param point  Source point\r\n   * @return Geo-point\r\n   */\n  MapChart.prototype.seriesPointToGeo = function (point) {\n    return this.projection.invert(point);\n  };\n  /**\r\n   * Converts geographical (lat/long) coordinates to an X/Y point within\r\n   * actual elements/objects of the maps.\r\n   *\r\n   * @param point  Source geo-point\r\n   * @return Point\r\n   */\n  MapChart.prototype.geoPointToSeries = function (point) {\n    return this.projection.convert(point);\n  };\n  Object.defineProperty(MapChart.prototype, \"geodata\", {\n    /**\r\n     * @return GeoJSON data\r\n     */\n    get: function () {\n      return this._geodata;\n    },\n    /**\r\n     * Map data in GeoJSON format.\r\n     *\r\n     * The Map supports the following GeoJSON objects: `Point`, `LineString`,\r\n     * `Polygon`, `MultiPoint`, `MultiLineString`, and `MultiPolygon`.\r\n     *\r\n     * @see {@link http://geojson.org/} Official GeoJSON format specification\r\n     * @param geoJSON GeoJSON data\r\n     */\n    set: function (geodata) {\n      if (geodata != this._geodata) {\n        this._geodata = geodata;\n        if (this.reverseGeodata) {\n          this.processReverseGeodata(this._geodata);\n        }\n        this.invalidateData();\n        this.dataUsers.each(function (dataUser) {\n          for (var i = dataUser.data.length - 1; i >= 0; i--) {\n            if (dataUser.data[i].madeFromGeoData == true) {\n              dataUser.data.splice(i, 1);\n            }\n          }\n          dataUser.disposeData();\n          dataUser.invalidateData();\n        });\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MapChart.prototype, \"reverseGeodata\", {\n    /**\r\n     * @returns Reverse the order of geodata coordinates?\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"reverseGeodata\");\n    },\n    /**\r\n     * Indicates whether GeoJSON geodata supplied to the chart uses\r\n     * ESRI (clockwise) or non-ESRI (counter-clockwise) order of the polygon\r\n     * coordinates.\r\n     *\r\n     * `MapChart` supports only ESRI standard, so if your custom maps appears\r\n     * garbled, try setting `reverseGeodata = true`.\r\n     *\r\n     * @default false\r\n     * @since 4.10.11\r\n     * @param  value  Reverse the order of geodata coordinates?\r\n     */\n    set: function (value) {\n      if (this.setPropertyValue(\"reverseGeodata\", value) && this._geodata) {\n        this.processReverseGeodata(this._geodata);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Reverses the order of polygons on a GeoJSON data.\r\n   *\r\n   * @since 4.10.11\r\n   * @param  geodata  Source geodata\r\n   */\n  MapChart.prototype.processReverseGeodata = function (geodata) {\n    for (var i = 0; i < geodata.features.length; i++) {\n      var feature = geodata.features[i];\n      for (var x = 0; x < feature.geometry.coordinates.length; x++) {\n        if (feature.geometry.type == \"MultiPolygon\") {\n          for (var y = 0; y < feature.geometry.coordinates[x].length; y++) {\n            feature.geometry.coordinates[x][y].reverse();\n          }\n        } else {\n          feature.geometry.coordinates[x].reverse();\n        }\n      }\n    }\n  };\n  /**\r\n   * Zooms the map to particular zoom level and centers on a latitude/longitude\r\n   * coordinate.\r\n   *\r\n   * @param point      Center coordinate\r\n   * @param zoomLevel  Zoom level\r\n   * @param center     Center on the given coordinate?\r\n   * @param duration   Duration for zoom animation (ms)\r\n   * @return Zoom animation\r\n   */\n  MapChart.prototype.zoomToGeoPoint = function (point, zoomLevel, center, duration, mapObject) {\n    var _this = this;\n    if (!point) {\n      var hasData_1 = false;\n      this.series.each(function (series) {\n        if (series.dataItems.length > 0) {\n          hasData_1 = true;\n        }\n      });\n      if (hasData_1) {\n        point = this.zoomGeoPoint;\n      } else {\n        return;\n      }\n    }\n    if (!point || !$type.isNumber(point.longitude) || !$type.isNumber(point.latitude)) {\n      return;\n    }\n    this._zoomGeoPointReal = point;\n    zoomLevel = $math.fitToRange(zoomLevel, this.minZoomLevel, this.maxZoomLevel);\n    var seriesPoint = this.projection.convert(point);\n    if (seriesPoint) {\n      var svgPoint = this.geoPointToSVG(point);\n      var mapPoint = $utils.svgPointToSprite(svgPoint, this);\n      if (center) {\n        mapPoint = {\n          x: this.innerWidth / 2,\n          y: this.innerHeight / 2\n        };\n      }\n      if (!$type.isNumber(duration)) {\n        duration = this.zoomDuration;\n      }\n      var x = mapPoint.x - seriesPoint.x * zoomLevel * this.scaleRatio;\n      var y = mapPoint.y - seriesPoint.y * zoomLevel * this.scaleRatio;\n      if (!mapObject && zoomLevel < this.zoomLevel && this.centerMapOnZoomOut && zoomLevel < 1.5) {\n        x = this.innerWidth / 2 - (this.seriesMaxLeft + (this.seriesMaxRight - this.seriesMaxLeft) / 2) * zoomLevel * this.scaleRatio;\n        y = this.innerHeight / 2 - (this.seriesMaxTop + (this.seriesMaxBottom - this.seriesMaxTop) / 2) * zoomLevel * this.scaleRatio;\n      }\n      this._mapAnimation = this.seriesContainer.animate([{\n        property: \"scale\",\n        to: zoomLevel\n      }, {\n        property: \"x\",\n        from: this.seriesContainer.pixelX,\n        to: x\n      }, {\n        property: \"y\",\n        from: this.seriesContainer.pixelY,\n        to: y\n      }], duration, this.zoomEasing);\n      this._disposers.push(this._mapAnimation.events.on(\"animationended\", function () {\n        _this._zoomGeoPointReal = _this.zoomGeoPoint;\n      }));\n      this.seriesContainer.validatePosition();\n      return this._mapAnimation;\n    }\n  };\n  /**\r\n   * Zooms the map to a particular map object.\r\n   *\r\n   * @param mapObject  Target map object\r\n   * @param zoomLevel  Zoom level\r\n   * @param center     Center on the given coordinate?\r\n   * @param duration   Duration for zoom animation (ms)\r\n   * @return Zoom animation\r\n   */\n  MapChart.prototype.zoomToMapObject = function (mapObject, zoomLevel, center, duration) {\n    if (center == undefined) {\n      center = true;\n    }\n    var inertia = this.seriesContainer.interactions.inertias.getKey(\"move\");\n    if (inertia) {\n      inertia.done();\n    }\n    if (mapObject instanceof MapImage) {\n      if ($type.isNaN(zoomLevel)) {\n        zoomLevel = 5;\n      }\n      return this.zoomToGeoPoint({\n        latitude: mapObject.latitude,\n        longitude: mapObject.longitude\n      }, zoomLevel, center, duration, true);\n    }\n    var dataItem = mapObject.dataItem;\n    if (dataItem && $type.isNumber(dataItem.zoomLevel)) {\n      zoomLevel = dataItem.zoomLevel;\n    }\n    if (mapObject instanceof MapPolygon) {\n      var dataItem_1 = mapObject.dataItem;\n      var bbox = mapObject.polygon.bbox;\n      if (bbox.width == 0 || bbox.height == 0) {\n        bbox = mapObject.polygon.group.getBBox();\n      }\n      if (!$type.isNumber(zoomLevel)) {\n        zoomLevel = Math.min(this.seriesWidth / bbox.width, this.seriesHeight / bbox.height);\n      }\n      var geoPoint = void 0;\n      if (dataItem_1 && $type.hasValue(dataItem_1.zoomGeoPoint)) {\n        geoPoint = dataItem_1.zoomGeoPoint;\n      } else {\n        // this is more accurate\n        var polygonPoint = {\n          x: bbox.x + bbox.width / 2,\n          y: bbox.y + bbox.height / 2\n        };\n        var seriesPoint = $utils.spritePointToSprite(polygonPoint, mapObject.polygon, mapObject.series);\n        geoPoint = this.seriesPointToGeo(seriesPoint);\n      }\n      return this.zoomToGeoPoint(geoPoint, zoomLevel, true, duration, true);\n    }\n  };\n  /**\r\n   * Zooms the map to a particular viewport.\r\n   *\r\n   * The `north`, `east`, `south`, and `west` define boundaries of the\r\n   * imaginary viewort we want to zoom the map to.\r\n   *\r\n   * `level` is not actual zoom level. The map will determine the zoom level\r\n   * required to accommodated such zoom, and will adjust it by `level` if set.\r\n   *\r\n   * @param north     Latitude of the North-most boundary\r\n   * @param east      Longitude of the East-most boundary\r\n   * @param south     Latitude of the South-most boundary\r\n   * @param west      Longitude of the West-most boundary\r\n   * @param level     Adjust zoom level\r\n   * @param center    Center on the given coordinate?\r\n   * @param duration  Duration for zoom animation (ms)\r\n   * @return Zoom animation\r\n   */\n  MapChart.prototype.zoomToRectangle = function (north, east, south, west, level, center, duration) {\n    if ($type.isNaN(level)) {\n      level = 1;\n    }\n    var w = $math.min(west, east);\n    var e = $math.max(west, east);\n    west = w;\n    east = e;\n    var splitLongitude = $math.normalizeAngle(180 - this.deltaLongitude);\n    if (splitLongitude > 180) {\n      splitLongitude -= 360;\n    }\n    var newLong = west + (east - west) / 2;\n    var d = west - east;\n    if (west < splitLongitude && east > splitLongitude) {\n      newLong += 180;\n      d = $math.normalizeAngle(east - west - 360);\n    }\n    var zoomLevel = level * Math.min((this.south - this.north) / (south - north), Math.abs((this.west - this.east) / d));\n    return this.zoomToGeoPoint({\n      latitude: north + (south - north) / 2,\n      longitude: newLong\n    }, zoomLevel, center, duration, true);\n  };\n  /**\r\n   * Zooms in the map, optionally centering on particular latitude/longitude\r\n   * point.\r\n   *\r\n   * @param geoPoint  Optional center point\r\n   * @param duration  Duration for zoom animation (ms)\r\n   * @return Zoom animation\r\n   */\n  MapChart.prototype.zoomIn = function (geoPoint, duration, sensitivity) {\n    if (sensitivity === void 0) {\n      sensitivity = 1;\n    }\n    var step = 1 + (this.zoomStep - 1) * sensitivity;\n    if (step < 1) {\n      step = 1;\n    }\n    return this.zoomToGeoPoint(geoPoint, this.zoomLevel * step, false, duration);\n  };\n  /**\r\n   * Zooms out the map, optionally centering on particular latitude/longitude\r\n   * point.\r\n   *\r\n   * @param geoPoint  Optional center point\r\n   * @param duration  Duration for zoom animation (ms)\r\n   * @return Zoom animation\r\n   */\n  MapChart.prototype.zoomOut = function (geoPoint, duration, sensitivity) {\n    if (sensitivity === void 0) {\n      sensitivity = 1;\n    }\n    var step = 1 + (this.zoomStep - 1) * sensitivity;\n    if (step < 1) {\n      step = 1;\n    }\n    return this.zoomToGeoPoint(geoPoint, this.zoomLevel / step, false, duration);\n  };\n  /**\r\n   * Pans the maps using relative coordinates. E.g.:\r\n   *\r\n   * ```JSON\r\n   * {\r\n   *   x: 0.1,\r\n   *   y: -0.1\r\n   * }\r\n   * ```\r\n   *\r\n   * The above will move the map by 10% to the right, and by 10% upwards.\r\n   *\r\n   * @param shift     Vertical and horizontal shift\r\n   * @param duration  Pan animation duration (ms)\r\n   */\n  MapChart.prototype.pan = function (shift, duration) {\n    var point = this.geoPointToSVG(this.zoomGeoPoint);\n    point.x += this.pixelWidth * shift.x;\n    point.y += this.pixelHeight * shift.y;\n    this.zoomToGeoPoint(this.svgPointToGeo(point), this.zoomLevel, true, duration, true);\n  };\n  Object.defineProperty(MapChart.prototype, \"zoomGeoPoint\", {\n    /**\r\n     * Current lat/long coordinates for the center of the viewport. (default\r\n     * zoom reference point)\r\n     *\r\n     * @readonly\r\n     * @return Coordinates\r\n     */\n    get: function () {\n      var point = $utils.spritePointToSvg({\n        x: this.pixelWidth / 2,\n        y: this.pixelHeight / 2\n      }, this);\n      return this.svgPointToGeo(point);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MapChart.prototype, \"zoomLevel\", {\n    /**\r\n     * @return Zoom level\r\n     */\n    get: function () {\n      return this.seriesContainer.scale;\n    },\n    /**\r\n     * Current zoom level.\r\n     *\r\n     * @readonly\r\n     * @return Zoom level\r\n     */\n    set: function (value) {\n      this.seriesContainer.scale = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Dispatches events after some map transformation, like pan or zoom.\r\n   *\r\n   * @ignore\r\n   */\n  MapChart.prototype.handleMapTransform = function () {\n    if (this.zoomLevel != this._prevZoomLevel) {\n      this.dispatch(\"zoomlevelchanged\");\n      this._prevZoomLevel = this.zoomLevel;\n      this.svgContainer.readerAlert(this.language.translate(\"Zoom level changed to %1\", this.language.locale, $type.castString(this.zoomLevel)));\n    }\n    if (this.zoomGeoPoint && (this._prevZoomGeoPoint.latitude != this.zoomGeoPoint.latitude || this._prevZoomGeoPoint.longitude != this.zoomGeoPoint.longitude)) {\n      this.dispatch(\"mappositionchanged\");\n    }\n  };\n  Object.defineProperty(MapChart.prototype, \"smallMap\", {\n    /**\r\n     * @return Small map\r\n     */\n    get: function () {\n      if (!this._smallMap) {\n        var smallMap = new SmallMap();\n        this.smallMap = smallMap;\n      }\n      return this._smallMap;\n    },\n    /**\r\n     * A [[SmallMap]] to be used on the map.\r\n     *\r\n     * Please note, that accessing this property will NOT create a small map\r\n     * if it has not yet been created. (except in JSON)\r\n     *\r\n     * ```TypeScript\r\n     * // Create a small map\r\n     * map.smallMap = new am4maps.SmallMap();\r\n     * ```\r\n     * ```JavaScript\r\n     * // Create a small map\r\n     * map.smallMap = new am4maps.SmallMap();\r\n     * ```\r\n     * ```JSON\r\n     * {\r\n     *   // ...\r\n     *   \"smallMap\": {}\r\n     *   // ...\r\n     * }\r\n     * ```\r\n     *\r\n     * @param smallMap  Small map\r\n     */\n    set: function (smallMap) {\n      if (this._smallMap) {\n        this.removeDispose(this._smallMap);\n      }\n      this._smallMap = smallMap;\n      this._smallMap.chart = this;\n      smallMap.parent = this.chartContainer;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MapChart.prototype, \"zoomControl\", {\n    /**\r\n     * @return Zoom control\r\n     */\n    get: function () {\n      return this._zoomControl;\n    },\n    /**\r\n     * A [[ZoomControl]] to be used on the map.\r\n     *\r\n     * Please note, that accessing this property will NOT create a zoom control\r\n     * if it has not yet been created. (except in JSON)\r\n     *\r\n     * ```TypeScript\r\n     * // Create a zoom control\r\n     * map.zoomControl = new am4maps.ZoomControl();\r\n     * ```\r\n     * ```JavaScript\r\n     * // Create a zoom control\r\n     * map.zoomControl = new am4maps.ZoomControl();\r\n     * ```\r\n     * ```JSON\r\n     * {\r\n     *   // ...\r\n     *   \"zoomControl\": {}\r\n     *   // ...\r\n     * }\r\n     * ```\r\n     *\r\n     * @param zoomControl  Zoom control\r\n     */\n    set: function (zoomControl) {\n      if (this._zoomControl) {\n        this.removeDispose(this._zoomControl);\n      }\n      this._zoomControl = zoomControl;\n      zoomControl.chart = this;\n      zoomControl.parent = this.chartContainer;\n      zoomControl.plusButton.exportable = false;\n      zoomControl.minusButton.exportable = false;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Creates and returns a map series of appropriate type.\r\n   *\r\n   * @return Map series\r\n   */\n  MapChart.prototype.createSeries = function () {\n    return new MapSeries();\n  };\n  Object.defineProperty(MapChart.prototype, \"deltaLongitude\", {\n    /**\r\n     * @return Rotation\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"deltaLongitude\");\n    },\n    /**\r\n     * Degrees to rotate the map around vertical axis (Y).\r\n     *\r\n     * E.g. if set to -160, the longitude 20 will become a new center, creating\r\n     * a Pacific-centered map.\r\n     *\r\n     * @see {@link https://www.amcharts.com/docs/v4/chart-types/map/#Map_rotation} For more info on map rotation.\r\n     * @param  value  Rotation\r\n     */\n    set: function (value) {\n      value = $math.round(value, 3);\n      if (this.setPropertyValue(\"deltaLongitude\", $geo.wrapAngleTo180(value))) {\n        this.rotateMap();\n        this.updateZoomGeoPoint();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MapChart.prototype, \"deltaLatitude\", {\n    /**\r\n     * @return Rotation\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"deltaLatitude\");\n    },\n    /**\r\n     * Degrees to rotate the map around horizontal axis (X).\r\n     *\r\n     * E.g. setting this to 90 will put Antarctica directly in the center of\r\n     * the map.\r\n     *\r\n     * @see {@link https://www.amcharts.com/docs/v4/chart-types/map/#Map_rotation} For more info on map rotation.\r\n     * @since 4.3.0\r\n     * @param  value  Rotation\r\n     */\n    set: function (value) {\n      value = $math.round(value, 3);\n      if (this.setPropertyValue(\"deltaLatitude\", value)) {\n        this.rotateMap();\n        this.updateZoomGeoPoint();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MapChart.prototype, \"deltaGamma\", {\n    /**\r\n     * @return Rotation\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"deltaGamma\");\n    },\n    /**\r\n     * Degrees to rotate the map around \"Z\" axis. This is the axis that pierces\r\n     * the globe directly from the viewer's point of view.\r\n     *\r\n     * @see {@link https://www.amcharts.com/docs/v4/chart-types/map/#Map_rotation} For more info on map rotation.\r\n     * @since 4.3.0\r\n     * @param  value  Rotation\r\n     */\n    set: function (value) {\n      value = $math.round(value, 3);\n      if (this.setPropertyValue(\"deltaGamma\", value)) {\n        this.rotateMap();\n        this.updateZoomGeoPoint();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * @ignore\r\n   */\n  MapChart.prototype.rotateMap = function () {\n    if (this.projection.d3Projection) {\n      if (this.projection.d3Projection.rotate) {\n        this.projection.d3Projection.rotate([this.deltaLongitude, this.deltaLatitude, this.deltaGamma]);\n        this.invalidateProjection();\n        //this.updateExtremes(); // removal fixes #3292\n      }\n    }\n  };\n  Object.defineProperty(MapChart.prototype, \"maxPanOut\", {\n    /**\r\n     * @return Max pan out\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"maxPanOut\");\n    },\n    /**\r\n     * Maximum portion of the map's width/height to allow panning \"off screen\".\r\n     *\r\n     * A value of 0 (zero) will prevent any portion of the the map to be panned\r\n     * outside the viewport.\r\n     *\r\n     * 0.5 will allow half of the map to be outside viewable area.\r\n     *\r\n     * @default 0.7\r\n     * @param value  Max pan out\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"maxPanOut\", value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MapChart.prototype, \"homeGeoPoint\", {\n    /**\r\n     * @return Home geo point\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"homeGeoPoint\");\n    },\n    /**\r\n     * The geographical point to center map on when it is first loaded.\r\n     *\r\n     * The map will also be centered to this point when you call `goHome()`\r\n     * method.\r\n     *\r\n     * @param value  Home geo point\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"homeGeoPoint\", value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MapChart.prototype, \"homeZoomLevel\", {\n    /**\r\n     * @return Home zoom level\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"homeZoomLevel\");\n    },\n    /**\r\n     * The zoom level to put the map in when it is first loaded.\r\n     *\r\n     * The map will also be set to this zoom level when you call `goHome()`\r\n     * method.\r\n     *\r\n     * @param value  Home zoom level\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"homeZoomLevel\", value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MapChart.prototype, \"zoomStep\", {\n    /**\r\n     * @return Zoom factor\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"zoomStep\");\n    },\n    /**\r\n     * When user zooms in or out current zoom level is multiplied or divided\r\n     * by value of this setting.\r\n     *\r\n     * @default 2\r\n     * @param value  Zoom factor\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"zoomStep\", value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Invalidates projection, causing all series to be redrawn.\r\n   *\r\n   * Call this after changing projection or its settings.\r\n   */\n  MapChart.prototype.invalidateProjection = function () {\n    this.east = undefined;\n    this.invalidateDataUsers();\n    this.updateCenterGeoPoint();\n  };\n  Object.defineProperty(MapChart.prototype, \"geodataSource\", {\n    /**\r\n     * Returns a [[DataSource]] specifically for loading Component's data.\r\n     *\r\n     * @return Data source\r\n     */\n    get: function () {\n      var _this = this;\n      if (!this._dataSources[\"geodata\"]) {\n        var dataSource = this.getDataSource(\"geodata\");\n        dataSource.events.on(\"parseended\", function () {\n          _this.events.once(\"datavalidated\", function () {\n            _this.goHome(0);\n          });\n        });\n      }\n      return this._dataSources[\"geodata\"];\n    },\n    /**\r\n     * Sets a [[DataSource]] to be used for loading Component's data.\r\n     *\r\n     * @param value Data source\r\n     */\n    set: function (value) {\n      var _this = this;\n      if (this._dataSources[\"geodata\"]) {\n        this.removeDispose(this._dataSources[\"geodata\"]);\n      }\n      this._dataSources[\"geodata\"] = value;\n      this._dataSources[\"geodata\"].component = this;\n      this.events.on(\"inited\", function () {\n        _this.loadData(\"geodata\");\n      }, this, false);\n      this.setDataSourceEvents(value, \"geodata\");\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Processes JSON-based config before it is applied to the object.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param config  Config\r\n   */\n  MapChart.prototype.processConfig = function (config) {\n    if ($type.hasValue(config[\"geodata\"]) && $type.isString(config[\"geodata\"])) {\n      var name_1 = config[\"geodata\"];\n      // Check if there's a map loaded by such name\n      if ($type.hasValue(window[\"am4geodata_\" + config[\"geodata\"]])) {\n        config[\"geodata\"] = window[\"am4geodata_\" + config[\"geodata\"]];\n      }\n      // Nope. Let's try maybe we got JSON as string?\n      else {\n        try {\n          config[\"geodata\"] = JSON.parse(config[\"geodata\"]);\n        } catch (e) {\n          // No go again. Error out.\n          this.raiseCriticalError(Error(\"MapChart error: Geodata `\" + name_1 + \"` is not loaded or is incorrect.\"), true);\n        }\n      }\n    }\n    // Instantiate projection\n    if ($type.hasValue(config[\"projection\"]) && $type.isString(config[\"projection\"])) {\n      config[\"projection\"] = this.createClassInstance(config[\"projection\"]);\n    }\n    // Set up small map\n    if ($type.hasValue(config.smallMap) && !$type.hasValue(config.smallMap.type)) {\n      config.smallMap.type = \"SmallMap\";\n    }\n    // Set up zoom control\n    if ($type.hasValue(config.zoomControl) && !$type.hasValue(config.zoomControl.type)) {\n      config.zoomControl.type = \"ZoomControl\";\n    }\n    _super.prototype.processConfig.call(this, config);\n  };\n  /**\r\n   * Decorates a new [[Series]] object with required parameters when it is\r\n   * added to the chart.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param event  Event\r\n   */\n  MapChart.prototype.handleSeriesAdded = function (event) {\n    _super.prototype.handleSeriesAdded.call(this, event);\n    var series = event.newValue;\n    series.scale = this.scaleRatio;\n    series.events.on(\"validated\", this.updateCenterGeoPoint, this, false);\n  };\n  /**\r\n     * This function is used to sort element's JSON config properties, so that\r\n     * some properties that absolutely need to be processed last, can be put at\r\n     * the end.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param a  Element 1\r\n     * @param b  Element 2\r\n     * @return Sorting number\r\n     */\n  MapChart.prototype.configOrder = function (a, b) {\n    if (a == b) {\n      return 0;\n    }\n    // Must come last\n    else if (a == \"smallMap\") {\n      return 1;\n    } else if (b == \"smallMap\") {\n      return -1;\n    } else if (a == \"series\") {\n      return 1;\n    } else if (b == \"series\") {\n      return -1;\n    } else {\n      return _super.prototype.configOrder.call(this, a, b);\n    }\n  };\n  /**\r\n   * Adds `projection` to \"as is\" fields.\r\n   *\r\n   * @param field  Field name\r\n   * @return Assign as is?\r\n   */\n  MapChart.prototype.asIs = function (field) {\n    return field == \"projection\" || field == \"geodata\" || _super.prototype.asIs.call(this, field);\n  };\n  Object.defineProperty(MapChart.prototype, \"centerGeoPoint\", {\n    /**\r\n     * Geo point of map center\r\n     *\r\n     * @readonly\r\n     */\n    get: function () {\n      return this._centerGeoPoint;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Resets the map to its original position and zoom level.\r\n   *\r\n   * Use the only parameter to set number of milliseconds for the zoom\r\n   * animation to play.\r\n   *\r\n   * @param  duration  Duration (ms)\r\n   */\n  MapChart.prototype.goHome = function (duration) {\n    var homeGeoPoint = this.homeGeoPoint;\n    if (!homeGeoPoint) {\n      homeGeoPoint = this.centerGeoPoint;\n    }\n    if (homeGeoPoint) {\n      this.zoomToGeoPoint(homeGeoPoint, this.homeZoomLevel, true, duration, true);\n    }\n  };\n  /**\r\n   * Sets [[Paper]] instance to use to draw elements.\r\n   *\r\n   * @ignore\r\n   * @param   paper  Paper\r\n   * @return         true if paper was changed, false, if it's the same\r\n   */\n  MapChart.prototype.setPaper = function (paper) {\n    if (this.svgContainer) {\n      this.svgContainer.hideOverflow = true;\n    }\n    return _super.prototype.setPaper.call(this, paper);\n  };\n  Object.defineProperty(MapChart.prototype, \"backgroundSeries\", {\n    /**\r\n     * Background series will create polygons that will fill all the map area\r\n     * with some color (or other fill).\r\n     *\r\n     * This might be useful with non-rectangular projections, like Orthographic,\r\n     * Albers, etc.\r\n     *\r\n     * To change background color/opacity access polygon template.\r\n     *\r\n     * ```TypeScript\r\n     * chart.backgroundSeries.mapPolygons.template.polygon.fill = am4core.color(\"#fff\");\r\n     * chart.backgroundSeries.mapPolygons.template.polygon.fillOpacity = 0.1;\r\n     * ```\r\n     * ```JavaScript\r\n     * chart.backgroundSeries.mapPolygons.template.polygon.fill = am4core.color(\"#fff\");\r\n     * chart.backgroundSeries.mapPolygons.template.polygon.fillOpacity = 0.1;\r\n     * ```\r\n     * ```JSON\r\n     * {\r\n     *   \"backgroundSeries\": {\r\n     *     \"mapPolygons\": {\r\n     *       \"polygon\": {\r\n     *         \"fill\": \"#fff\",\r\n     *         \"fillOpacity\": 0.1\r\n     *       }\r\n     *     }\r\n     *   }\r\n     * }\r\n     * ```\r\n     *\r\n     * @since 4.3.0\r\n     */\n    get: function () {\n      var _this = this;\n      if (!this._backgroundSeries) {\n        var backgroundSeries = new MapPolygonSeries();\n        backgroundSeries.parent = this.seriesContainer;\n        backgroundSeries.chart = this;\n        backgroundSeries.hiddenInLegend = true;\n        backgroundSeries.mapPolygons.template.focusable = false;\n        backgroundSeries.addDisposer(new Disposer(function () {\n          _this._backgroundSeries = undefined;\n        }));\n        this._disposers.push(backgroundSeries);\n        var interfaceColors = new InterfaceColorSet();\n        var color = interfaceColors.getFor(\"background\");\n        var polygonTemplate = backgroundSeries.mapPolygons.template.polygon;\n        polygonTemplate.stroke = color;\n        polygonTemplate.fill = color;\n        polygonTemplate.fillOpacity = 0;\n        polygonTemplate.strokeOpacity = 0;\n        //polygonTemplate.focusable = false;\n        backgroundSeries.mapPolygons.create();\n        this._backgroundSeries = backgroundSeries;\n      }\n      return this._backgroundSeries;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Prepares the legend instance for use in this chart.\r\n   *\r\n   * @param legend  Legend\r\n   */\n  MapChart.prototype.setLegend = function (legend) {\n    _super.prototype.setLegend.call(this, legend);\n    if (legend) {\n      legend.parent = this;\n    }\n  };\n  /**\r\n   * @param  value  Tap to activate?\r\n   */\n  MapChart.prototype.setTapToActivate = function (value) {\n    _super.prototype.setTapToActivate.call(this, value);\n    // setup other containers\n    this.seriesContainer.interactions.isTouchProtected = true;\n    this.panSprite.interactions.isTouchProtected = true;\n  };\n  MapChart.prototype.handleTapToActivate = function () {\n    _super.prototype.handleTapToActivate.call(this);\n    this.seriesContainer.interactions.isTouchProtected = false;\n    this.panSprite.interactions.isTouchProtected = false;\n  };\n  MapChart.prototype.handleTapToActivateDeactivation = function () {\n    _super.prototype.handleTapToActivateDeactivation.call(this);\n    this.seriesContainer.interactions.isTouchProtected = true;\n    this.panSprite.interactions.isTouchProtected = true;\n  };\n  /**\r\n   * Adds easing functions to \"function\" fields.\r\n   *\r\n   * @param field  Field name\r\n   * @return Assign as function?\r\n   */\n  MapChart.prototype.asFunction = function (field) {\n    return field == \"zoomEasing\" || _super.prototype.asIs.call(this, field);\n  };\n  /**\r\n   * @ignore\r\n   * @return Has license?\r\n   */\n  MapChart.prototype.hasLicense = function () {\n    if (options.commercialLicense) {\n      return true;\n    }\n    if (!_super.prototype.hasLicense.call(this)) {\n      return false;\n    }\n    for (var i = 0; i < options.licenses.length; i++) {\n      if (options.licenses[i].match(/^MP.{5,}/i)) {\n        return true;\n      }\n    }\n    return false;\n  };\n  return MapChart;\n}(SerialChart);\nexport { MapChart };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\nregistry.registeredClasses[\"MapChart\"] = MapChart;","map":{"version":3,"names":["SerialChart","SerialChartDataItem","Disposer","InterfaceColorSet","MapSeries","MapImage","MapPolygon","MapPolygonSeries","Projection","Circle","SmallMap","$mapUtils","keyboard","registry","options","$math","$utils","$ease","$iter","$type","$geo","GraticuleSeries","getInteraction","MapChartDataItem","_super","__extends","_this","call","className","applyTheme","MapChart","scaleRatio","zoomDuration","zoomEasing","cubicOut","minZoomLevel","maxZoomLevel","_prevZoomGeoPoint","latitude","longitude","projection","setPropertyValue","maxPanOut","homeZoomLevel","zoomStep","layout","centerMapOnZoomOut","padding","used","backgroundSeries","minWidth","minHeight","events","once","handleAllInited","seriesContainer","visible","inert","resizable","on","handleMapTransform","handleDoubleHit","handleDrag","zIndex","dragWhileResize","adapter","add","scale","target","fitToRange","event","previousWidth","previousHeight","updateExtremes","updateCenterGeoPoint","undefined","chartContainer","parent","_disposers","push","inited","_mapAnimation","stop","allInited_1","series","each","updateTooltipBounds","dataInvalid","updateScaleRatio","zoomToGeoPoint","_zoomGeoPointReal","zoomLevel","chartContainerBg","background","fillOpacity","e","dragStart","interactions","downPointers","getIndex","dragStop","focusable","handleMapDown","addDisposer","inertia","inertias","getKey","done","body","ev","topParent","hasFocused","key","getEventKey","_zoomControl","thumb","isFocused","pan","x","y","mouseWheelBehavior","interaction","handlePanDown","handlePanUp","panSprite","createChild","radius","isMeasured","handlePanMove","interactionsEnabled","opacity","panBehavior","prototype","svgPoint","documentPointToSvg","pointer","point","htmlContainer","svgContainer","width","height","_downPointOrig","documentPointToSprite","moveTo","_downDeltaLongitude","deltaLongitude","_downDeltaLatitude","deltaLatitude","isResized","areTransformed","d3Projection","rotate","rotation","dln","dlt","dlg","downGeoLocal","invert","local","pixelX","pixelY","geoLocal","goHome","disposer_1","removeDispose","updateZoomGeoPoint","seriesPoint","svgPointToSprite","innerWidth","pixelPaddingLeft","innerHeight","pixelPaddingTop","geoPoint","maxLeft","maxRight","maxTop","maxBottom","features","getFeatures","length","bounds","d3Path","geometry","bbox","group","node","getBBox","isNumber","seriesMaxLeft","seriesMaxRight","seriesMaxTop","seriesMaxBottom","seriesWidth","seriesHeight","_centerGeoPoint","d","ww","hh","minX","Math","min","maxWidth","maxX","max","minY","maxHeight","maxY","zoomGeoPoint","applyInternalDefaults","hasValue","readerTitle","language","translate","role","cssScale","svgPointToGeo","zoomIn","handleWheel","shift","mouseOptions","sensitivity","zoomOut","Object","defineProperty","get","getPropertyValue","set","value","_mouseWheelDisposer","dispose","wheelable","draggable","invalidateProjection","chart","_backgroundSeries","invalidate","validateDataItems","east","north","west","south","ignoreBounds","fitExtent","foundGraticule","concat","w","h","deltaLong","deltaLat","deltaGamma","geoJSON","initialScale","fitSize","invalidateDataUsers","invalidateData","polygon","mapPolygons","multiPolygon","getBackground","_fitWidth","_fitHeight","hScale","vScale","isNaN","Infinity","iterator","dispatch","seriesPointToGeo","geoPointToSVG","geoPointToSeries","spritePointToSvg","convert","_geodata","geodata","reverseGeodata","processReverseGeodata","dataUsers","dataUser","i","data","madeFromGeoData","splice","disposeData","feature","coordinates","type","reverse","center","duration","mapObject","hasData_1","dataItems","mapPoint","animate","property","to","from","validatePosition","zoomToMapObject","dataItem","dataItem_1","polygonPoint","spritePointToSprite","zoomToRectangle","level","splitLongitude","normalizeAngle","newLong","abs","step","pixelWidth","pixelHeight","_prevZoomLevel","readerAlert","locale","castString","_smallMap","smallMap","zoomControl","plusButton","exportable","minusButton","createSeries","round","wrapAngleTo180","rotateMap","_dataSources","dataSource","getDataSource","component","loadData","setDataSourceEvents","processConfig","config","isString","name_1","window","JSON","parse","raiseCriticalError","Error","createClassInstance","handleSeriesAdded","newValue","configOrder","a","b","asIs","field","homeGeoPoint","centerGeoPoint","setPaper","paper","hideOverflow","hiddenInLegend","template","interfaceColors","color","getFor","polygonTemplate","stroke","fill","strokeOpacity","create","setLegend","legend","setTapToActivate","isTouchProtected","handleTapToActivate","handleTapToActivateDeactivation","asFunction","hasLicense","commercialLicense","licenses","match","registeredClasses"],"sources":["../../../../../src/.internal/charts/types/MapChart.ts"],"sourcesContent":["/**\r\n * Map module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { SerialChart, ISerialChartProperties, ISerialChartDataFields, ISerialChartAdapters, ISerialChartEvents, SerialChartDataItem } from \"./SerialChart\";\r\nimport { Sprite, ISpriteEvents, AMEvent } from \"../../core/Sprite\";\r\nimport { IDisposer, Disposer } from \"../../core/utils/Disposer\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport { MapSeries } from \"../map/MapSeries\";\r\nimport { MapObject } from \"../map/MapObject\";\r\nimport { MapImage } from \"../map/MapImage\";\r\nimport { MapPolygon } from \"../map/MapPolygon\";\r\nimport { MapPolygonSeries } from \"../map/MapPolygonSeries\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { IGeoPoint } from \"../../core/defs/IGeoPoint\";\r\nimport { DataSource } from \"../../core/data/DataSource\";\r\nimport { Projection } from \"../map/projections/Projection\";\r\nimport { ZoomControl } from \"../map/ZoomControl\";\r\nimport { Ordering } from \"../../core/utils/Order\";\r\nimport { Circle } from \"../../core/elements/Circle\";\r\nimport { SmallMap } from \"../map/SmallMap\";\r\nimport * as $mapUtils from \"../map/MapUtils\";\r\nimport { Animation } from \"../../core/utils/Animation\";\r\nimport { keyboard } from \"../../core/utils/Keyboard\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { options } from \"../../core/Options\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $ease from \"../../core/utils/Ease\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $geo from \"../map/Geo\";\r\nimport { Paper } from \"../../core/rendering/Paper\";\r\nimport { IListEvents } from \"../../core/utils/List\";\r\nimport { GraticuleSeries } from \"../map/GraticuleSeries\";\r\nimport { getInteraction, IInteractionEvents } from \"../../core/interaction/Interaction\";\r\nimport { Legend } from \"../Legend\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[MapChart]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class MapChartDataItem extends SerialChartDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: MapChart;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"MapChartDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines interface for a map polygon object.\r\n */\r\nexport interface IMapPolygonDataObject {\r\n\r\n\t/**\r\n\t * A unique id of the object.\r\n\t */\r\n\tid?: string;\r\n\r\n\t/**\r\n\t * Numeric value for heat-map scenarios.\r\n\t */\r\n\tvalue?: number;\r\n\r\n\t/**\r\n\t * Single polygon information in X/Y coordinates.\r\n\t */\r\n\tpolygon?: Array<Array<[number, number]>>;\r\n\r\n\t/**\r\n\t * Multi-part polygon information in X/Y coordinates.\r\n\t */\r\n\tmultiPolygon?: Array<Array<Array<[number, number]>>>;\r\n\r\n\t/**\r\n\t * Single polygon information in lat/long geo-coordinates.\r\n\t */\r\n\tgeoPolygon?: Array<Array<IGeoPoint>>;\r\n\r\n\t/**\r\n\t * Multi-part polygon information in lat/long geo-coordinates.\r\n\t */\r\n\tmultiGeoPolygon?: Array<Array<Array<IGeoPoint>>>;\r\n\r\n\t/**\r\n\t * flag indicating whether this data item was created from geo data\r\n\t */\r\n\tmadeFromGeoData?: boolean;\r\n}\r\n\r\n/**\r\n * Defines types of map line.\r\n */\r\nexport type MapLineType = \"line\" | \"arc\" | \"spline\" | \"realTrajectory\";\r\n\r\n/**\r\n * Defines interface for the map line object.\r\n */\r\nexport interface IMapLineDataObject {\r\n\r\n\t/**\r\n\t * A unique id of the object.\r\n\t */\r\n\tid?: string;\r\n\r\n\t/**\r\n\t * Numeric value for heat-map scenarios.\r\n\t */\r\n\tvalue?: number;\r\n\r\n\t/**\r\n\t * Single line information in X/Y coordinates.\r\n\t */\r\n\tline?: Array<[number, number]>;\r\n\r\n\t/**\r\n\t * Multi-part line information in X/Y coordinates.\r\n\t */\r\n\tmultiLine?: Array<Array<[number, number]>>;\r\n\r\n\t/**\r\n\t * Single line information in lat/long geo-coordinates.\r\n\t */\r\n\tgeoLine?: Array<IGeoPoint>;\r\n\r\n\t/**\r\n\t * Multi-part line information in lat/long geo-coordinates.\r\n\t */\r\n\tmultiGeoLine?: Array<Array<IGeoPoint>>;\r\n\r\n\t/**\r\n\t * flag indicating whether this data item was created from geo data\r\n\t */\r\n\tmadeFromGeoData?: boolean;\r\n\r\n}\r\n\r\n/**\r\n * Defines interface for a map image (market) object.\r\n */\r\nexport interface IMapImageDataObject {\r\n\r\n\t/**\r\n\t * A unique id of the object.\r\n\t */\r\n\tid?: string;\r\n\r\n\t/**\r\n\t * Numeric value for heat-map scenarios.\r\n\t */\r\n\tvalue?: number;\r\n\r\n\t/**\r\n\t * Image position information in X/Y coordinates.\r\n\t */\r\n\tpoint?: [number, number];\r\n\r\n\t/**\r\n\t * Multi-image position information in X/Y coordinates.\r\n\t */\r\n\tmultiPoint?: Array<[number, number]>;\r\n\r\n\t/**\r\n\t * Image position information in lat/long geo-coordinates.\r\n\t */\r\n\tgeoPoint?: IGeoPoint;\r\n\r\n\t/**\r\n\t * Multi-image position information in lat/long geo-coordinates.\r\n\t */\r\n\tmultiGeoPoint?: Array<IGeoPoint>;\r\n\r\n\r\n\t/**\r\n\t * flag indicating whether this data item was created from geo data\r\n\t */\r\n\tmadeFromGeoData?: boolean;\r\n}\r\n\r\n/**\r\n * Defines type suitable for all map objects.\r\n */\r\nexport type IMapDataObject = IMapPolygonDataObject | IMapLineDataObject;\r\n\r\n/**\r\n * Defines data fields for [[MapChart]].\r\n */\r\nexport interface IMapChartDataFields extends ISerialChartDataFields { }\r\n\r\n/**\r\n * Defines properties for [[MapChart]].\r\n */\r\nexport interface IMapChartProperties extends ISerialChartProperties {\r\n\r\n\t/**\r\n\t * Projection to be used when drawing the map.\r\n\t */\r\n\tprojection?: Projection;\r\n\r\n\t/**\r\n\t * Degrees to rotate the map around vertical axis (Y).\r\n\t *\r\n\t * E.g. if set to -160, the longitude 20 will become a new center, creating\r\n\t * a Pacific-centered map.\r\n\t */\r\n\tdeltaLongitude?: number;\r\n\r\n\t/**\r\n\t * Degrees to rotate the map around horizontal axis (X).\r\n\t *\r\n\t * E.g. setting this to -90 will put Antarctica directly in the center of\r\n\t * the map.\r\n\t *\r\n\t * @since 4.3.0\r\n\t */\r\n\tdeltaLatitude?: number;\r\n\r\n\t/**\r\n\t * Degrees to rotate the map around horizontal \"Z\" - an axis that goes from\r\n\t * the center of the globe directly to the viewer.\r\n\t *\r\n\t * @since 4.3.0\r\n\t */\r\n\tdeltaGamma?: number;\r\n\r\n\t/**\r\n\t * Maximum portion of the map's width/height to allow panning \"off screen\".\r\n\t *\r\n\t * A value of 0 (zero) will prevent any portion of the the map to be panned\r\n\t * outside the viewport.\r\n\t *\r\n\t * 0.5 will allow half of the map to be outside viewable area.\r\n\t *\r\n\t * @default 0.7\r\n\t */\r\n\tmaxPanOut?: number;\r\n\r\n\t/**\r\n\t * A map will start centered on this geographical point.\r\n\t */\r\n\thomeGeoPoint?: IGeoPoint;\r\n\r\n\t/**\r\n\t * A map will start zoomed to this level.\r\n\t */\r\n\thomeZoomLevel?: number;\r\n\r\n\t/**\r\n\t * When user zooms in or out current zoom level is multiplied or divided\r\n\t * by value of this setting.\r\n\t *\r\n\t * @default 2\r\n\t */\r\n\tzoomStep?: number;\r\n\r\n\t/**\r\n\t * Specifies what should chart do if when mouse wheel is rotated.\r\n\t */\r\n\tmouseWheelBehavior?: \"zoom\" | \"none\";\r\n\r\n\t/**\r\n\t * What \"dragging\" map does.\r\n\t *\r\n\t * Available values:\r\n\t * * `\"move\"` (default): changes position of the map.\r\n\t * * `\"rotateLat\"`: changes `deltaLatitude` (rotates the globe vertically).\r\n\t * * `\"rotateLong\"`: changes `deltaLongitude` (rotates the globe horizontally).\r\n\t * * `\"rotateLongLat\"`: changes both `deltaLongitude` and `deltaLatitude` (rotates the globe in any direction).\r\n\t *\r\n\t * @default \"move\"\r\n\t * @since 4.3.0\r\n\t */\r\n\tpanBehavior?: \"move\" | \"rotateLat\" | \"rotateLong\" | \"rotateLongLat\";\r\n\r\n\t/**\r\n\t * Specifies if the map should be centered when zooming out\r\n\t * @default true\r\n\t * @since 4.7.12\r\n\t */\r\n\tcenterMapOnZoomOut?: boolean;\r\n\r\n\t/**\r\n\t * Indicates whether GeoJSON geodata supplied to the chart uses\r\n\t * ESRI (clockwise) or non-ESRI (counter-clockwise) order of the polygon\r\n\t * coordinates.\r\n\t *\r\n\t * `MapChart` supports only ESRI standard, so if your custom maps appears\r\n\t * garbled, try setting `reverseGeodata = true`.\r\n\t * \r\n\t * @default false\r\n\t * @since 4.10.11\r\n\t */\r\n\treverseGeodata?: boolean;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[MapChart]].\r\n */\r\nexport interface IMapChartEvents extends ISerialChartEvents {\r\n\r\n\t/**\r\n\t * Invoked when map is zoomed in or out.\r\n\t */\r\n\tzoomlevelchanged: {};\r\n\r\n\t/**\r\n\t * Invoked when map is panned. (moved)\r\n\t */\r\n\tmappositionchanged: {};\r\n\r\n\t/**\r\n\t * Invoked when scale ratio is changed, e.g when the whole map area is\r\n\t * resized and the map needs to be resized to fit it, without changing\r\n\t * zoom level.\r\n\t */\r\n\tscaleratiochanged: {};\r\n\r\n}\r\n\r\n/**\r\n * Defines adapters for [[MapChart]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IMapChartAdapters extends ISerialChartAdapters, IMapChartProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a map.\r\n *\r\n * @see {@link IMapChartEvents} for a list of available Events\r\n * @see {@link IMapChartAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/map/} for documentation\r\n */\r\nexport class MapChart extends SerialChart {\r\n\r\n\t/**\r\n\t * Available data fields.\r\n\t */\r\n\tpublic _dataFields: IMapChartDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IMapChartProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IMapChartAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IMapChartEvents;\r\n\r\n\t/**\r\n\t * The East-most longitude point of the map.\r\n\t */\r\n\tpublic east: number;\r\n\r\n\t/**\r\n\t * The West-most longitude point of the map.\r\n\t */\r\n\tpublic west: number;\r\n\r\n\t/**\r\n\t * The South-most latitude point of the map.\r\n\t */\r\n\tpublic south: number;\r\n\r\n\t/**\r\n\t * The North-most latitude point of the map.\r\n\t */\r\n\tpublic north: number;\r\n\r\n\t/**\r\n\t * A ratio to be used when scaling the map shapes.\r\n\t *\r\n\t * @readonly\r\n\t */\r\n\tpublic scaleRatio: number = 1;\r\n\r\n\t/**\r\n\t * A screen point of the map's center.\r\n\t *\r\n\t * @readonly\r\n\t */\r\n\tpublic centerPoint: IPoint;\r\n\r\n\t/**\r\n\t * A screen point of the map's left.\r\n\t *\r\n\t * @readonly\r\n\t */\r\n\tpublic westPoint: IPoint;\r\n\r\n\t/**\r\n\t * A screen point of the map's right.\r\n\t *\r\n\t * @readonly\r\n\t */\r\n\tpublic eastPoint: IPoint;\r\n\r\n\t/**\r\n\t * A screen point of the map's top.\r\n\t *\r\n\t * @readonly\r\n\t */\r\n\tpublic northPoint: IPoint;\r\n\r\n\t/**\r\n\t * A screen point of the map's bottom.\r\n\t *\r\n\t * @readonly\r\n\t */\r\n\tpublic southPoint: IPoint;\r\n\r\n\t/**\r\n\t * Width of the actual map objects (px).\r\n\t */\r\n\tpublic seriesWidth: number;\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic seriesMaxLeft: number;\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic seriesMaxRight: number;\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic seriesMaxTop: number;\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic seriesMaxBottom: number;\r\n\r\n\t/**\r\n\t * Height of the actual map objects (px).\r\n\t */\r\n\tpublic seriesHeight: number;\r\n\r\n\t/**\r\n\t * Map data in GeoJSON format.\r\n\t *\r\n\t * @see {@link http://geojson.org/} GeoJSON official specification\r\n\t */\r\n\tprotected _geodata: Object;\r\n\r\n\t/**\r\n\t * Names of geodata items, such as countries, to replace by from loaded\r\n\t * geodata.\r\n\t *\r\n\t * Can be used to override built-in English names for countries.\r\n\t *\r\n\t * ```TypeScript\r\n\t * import am4geodata_lang_ES from '@amcharts4-geodata/lang/es';\r\n\t * // ...\r\n\t * map.geodataNames = am4geodata_lang_ES;\r\n\t * ```\r\n\t * ```JavaScript\r\n\t * map.geodataNames = am4geodata_lang_ES;\r\n\t * ```\r\n\t * ```JSON\r\n\t * {\r\n\t *   // ...\r\n\t *   \"geodataNames\": am4geodata_lang_ES\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * @since 4.7.4\r\n\t */\r\n\tpublic geodataNames: { [index: string]: string };\r\n\r\n\t/**\r\n\t * A reference to a [[ZoomControl]] instance.\r\n\t */\r\n\tprotected _zoomControl: ZoomControl;\r\n\r\n\t/**\r\n\t * A reference to a [[SmallMap]] control instance.\r\n\t */\r\n\tprotected _smallMap: SmallMap;\r\n\r\n\t/**\r\n\t * [_zoomGeoPoint description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _zoomGeoPoint: IGeoPoint;\r\n\r\n\t/**\r\n\t * Default duration of zoom animations (ms).\r\n\t */\r\n\tpublic zoomDuration: number = 1000;\r\n\r\n\t/**\r\n\t * Default zooming animation easing function.\r\n\t */\r\n\tpublic zoomEasing: (value: number) => number = $ease.cubicOut;\r\n\r\n\t/**\r\n\t * Smallest available zoom level. The map will not allow to zoom out past\r\n\t * this setting.\r\n\t *\r\n\t * NOTE: Should be power of 2.\r\n\t *\r\n\t * @default 1\r\n\t */\r\n\tpublic minZoomLevel: number = 1;\r\n\r\n\t/**\r\n\t * Biggest available zoom level. The map will not allow to zoom in past\r\n\t * this setting.\r\n\t *\r\n\t * NOTE: Should be power of 2.\r\n\t *\r\n\t * @default 32\r\n\t */\r\n\tpublic maxZoomLevel: number = 32;\r\n\r\n\t/**\r\n\t * [_prevZoomLevel description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _prevZoomLevel: number;\r\n\r\n\t/**\r\n\t * [_prevZoomGeoPoint description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _prevZoomGeoPoint: IGeoPoint = { latitude: 0, longitude: 0 };\r\n\r\n\t/**\r\n\t * Defines a type of series that this chart uses.\r\n\t */\r\n\tpublic _seriesType: MapSeries;\r\n\r\n\t/**\r\n\t * A reference to currently playing animation, e.g. zooming.\r\n\t */\r\n\tprotected _mapAnimation: Animation;\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected _mouseWheelDisposer: IDisposer;\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic _zoomGeoPointReal: IGeoPoint;\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected _centerGeoPoint: IGeoPoint;\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected _fitWidth: number;\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected _fitHeight: number;\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\r\n\tpublic panSprite: Circle;\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected _downPointOrig: IPoint;\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected _downDeltaLongitude: number;\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected _downDeltaLatitude: number;\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected _backgroundSeries: MapPolygonSeries;\r\n\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"MapChart\";\r\n\r\n\t\t// Set default projection\r\n\t\tthis.projection = new Projection();\r\n\r\n\t\tthis.setPropertyValue(\"deltaLatitude\", 0);\r\n\t\tthis.setPropertyValue(\"deltaLongitude\", 0);\r\n\t\tthis.setPropertyValue(\"deltaGamma\", 0);\r\n\t\tthis.maxPanOut = 0.7;\r\n\t\tthis.homeZoomLevel = 1;\r\n\t\tthis.zoomStep = 2;\r\n\t\tthis.layout = \"absolute\";\r\n\r\n\t\tthis.centerMapOnZoomOut = true;\r\n\r\n\t\t// Set padding\r\n\t\tthis.padding(0, 0, 0, 0);\r\n\r\n\t\t$utils.used(this.backgroundSeries);\r\n\r\n\t\t// so that the map would render in a hidden div too\r\n\t\tthis.minWidth = 10;\r\n\t\tthis.minHeight = 10;\r\n\r\n\t\tthis.events.once(\"inited\", this.handleAllInited, this, false);\r\n\r\n\t\t// Create a container for map series\r\n\t\tlet seriesContainer = this.seriesContainer;\r\n\t\tseriesContainer.visible = false;\r\n\t\tseriesContainer.inert = true;\r\n\t\tseriesContainer.resizable = true;\r\n\t\tseriesContainer.events.on(\"transformed\", this.handleMapTransform, this, false);\r\n\t\tseriesContainer.events.on(\"doublehit\", this.handleDoubleHit, this, false);\r\n\t\tseriesContainer.events.on(\"dragged\", this.handleDrag, this, false);\r\n\t\tseriesContainer.zIndex = 0;\r\n\t\tseriesContainer.dragWhileResize = true;\r\n\t\t//seriesContainer.background.fillOpacity = 0;\r\n\r\n\t\tseriesContainer.adapter.add(\"scale\", (scale, target) => {\r\n\t\t\treturn $math.fitToRange(scale, this.minZoomLevel, this.maxZoomLevel);\r\n\t\t});\r\n\r\n\t\t// Set up events\r\n\t\t//this.events.on(\"validated\", this.updateExtremes, this);\r\n\t\t//this.events.on(\"datavalidated\", this.handleAllValidated, this, false);\r\n\t\t//this.events.on(\"datavalidated\", this.updateExtremes, this, false);\r\n\r\n\t\tthis.events.on(\"maxsizechanged\", (event) => {\r\n\t\t\tif (event.previousWidth == 0 || event.previousHeight == 0) {\r\n\t\t\t\tthis.updateExtremes();\r\n\t\t\t\tthis.updateCenterGeoPoint();\r\n\t\t\t}\r\n\t\t}, undefined, false)\r\n\r\n\t\t// Set up main chart container, e.g. set backgrounds and events to monitor\r\n\t\t// size changes, etc.\r\n\t\tlet chartContainer = this.chartContainer;\r\n\t\tchartContainer.parent = this;\r\n\t\tchartContainer.zIndex = -1;\r\n\r\n\t\tthis._disposers.push(this.events.on(\"maxsizechanged\", () => {\r\n\t\t\tif (this.inited) {\r\n\t\t\t\tif (this._mapAnimation) {\r\n\t\t\t\t\tthis._mapAnimation.stop();\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet allInited = true;\r\n\t\t\t\tthis.series.each((series) => {\r\n\t\t\t\t\tseries.updateTooltipBounds();\r\n\t\t\t\t\tif (!series.inited || series.dataInvalid) {\r\n\t\t\t\t\t\tallInited = false;\r\n\t\t\t\t\t}\r\n\t\t\t\t})\r\n\t\t\t\tif (allInited) {\r\n\t\t\t\t\tthis.updateScaleRatio();\r\n\t\t\t\t}\r\n\t\t\t\tthis.zoomToGeoPoint(this._zoomGeoPointReal, this.zoomLevel, true, 0);\r\n\t\t\t}\r\n\r\n\t\t}, undefined, false));\r\n\r\n\t\tlet chartContainerBg = chartContainer.background;\r\n\t\tchartContainerBg.fillOpacity = 0;\r\n\t\tchartContainerBg.events.on(\"down\", (e) => { this.seriesContainer.dragStart(e.target.interactions.downPointers.getIndex(0)); }, this);\r\n\t\tchartContainerBg.events.on(\"up\", (e) => { this.seriesContainer.dragStop() }, this);\r\n\t\tchartContainerBg.events.on(\"doublehit\", this.handleDoubleHit, this);\r\n\t\tchartContainerBg.focusable = true;\r\n\r\n\t\tchartContainer.events.on(\"down\", this.handleMapDown, this, false);\r\n\r\n\t\tthis.addDisposer(seriesContainer.events.on(\"down\", () => {\r\n\t\t\t// Cancel any move inertia if there is one\r\n\t\t\tconst inertia = this.seriesContainer.interactions.inertias.getKey(\"move\");\r\n\t\t\tif (inertia) {\r\n\t\t\t\tinertia.done();\r\n\t\t\t}\r\n\t\t}))\r\n\r\n\t\t// Add description to background\r\n\t\tthis.background.fillOpacity = 0;\r\n\r\n\t\t// Add keyboard events for panning\r\n\t\tthis._disposers.push(getInteraction().body.events.on(\"keyup\", (ev) => {\r\n\t\t\tif (this.topParent.hasFocused) {\r\n\t\t\t\tconst key = keyboard.getEventKey(ev.event);\r\n\t\t\t\tif (!this._zoomControl || !this._zoomControl.thumb.isFocused) {\r\n\t\t\t\t\tswitch (key) {\r\n\t\t\t\t\t\tcase \"up\":\r\n\t\t\t\t\t\t\tthis.pan({ x: 0, y: 0.1 });\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase \"down\":\r\n\t\t\t\t\t\t\tthis.pan({ x: 0, y: -0.1 });\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase \"left\":\r\n\t\t\t\t\t\t\tthis.pan({ x: 0.1, y: 0 });\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase \"right\":\r\n\t\t\t\t\t\t\tthis.pan({ x: -0.1, y: 0 });\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}, this));\r\n\r\n\t\tthis.mouseWheelBehavior = \"zoom\";\r\n\r\n\t\tconst interaction = getInteraction();\r\n\t\tthis._disposers.push(interaction.body.events.on(\"down\", this.handlePanDown, this));\r\n\t\tthis._disposers.push(interaction.body.events.on(\"up\", this.handlePanUp, this));\r\n\t\t//this._disposers.push(interaction.body.events.on(\"track\", this.handlePanMove, this));\r\n\r\n\t\tlet panSprite = this.seriesContainer.createChild(Circle);\r\n\t\tpanSprite.radius = 10;\r\n\t\tpanSprite.inert = true;\r\n\t\tpanSprite.isMeasured = false;\r\n\t\tpanSprite.events.on(\"transformed\", this.handlePanMove, this, false);\r\n\t\tpanSprite.interactionsEnabled = false;\r\n\t\tpanSprite.opacity = 0;\r\n\t\tpanSprite.x = 0;\r\n\t\tpanSprite.y = 0;\r\n\t\tthis.panSprite = panSprite;\r\n\t\tthis.panBehavior = \"move\";\r\n\t\t/*\r\n\t\t\t\tthis.panSprite.inertiaOptions.setKey(\"move\", {\r\n\t\t\t\t\t\"time\": 100,\r\n\t\t\t\t\t\"duration\": 1000,\r\n\t\t\t\t\t\"factor\": 3,\r\n\t\t\t\t\t\"easing\": $ease.sinOut\r\n\t\t\t\t});*/\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected handlePanDown(event: IInteractionEvents[\"down\"]): void {\r\n\t\tlet svgPoint = $utils.documentPointToSvg(event.pointer.point, this.htmlContainer);\r\n\t\tif (svgPoint.x > 0 && svgPoint.y > 0 && svgPoint.x < this.svgContainer.width && svgPoint.y < this.svgContainer.height) {\r\n\t\t\t// Get local point\r\n\t\t\tthis._downPointOrig = $utils.documentPointToSprite(event.pointer.point, this.seriesContainer);\r\n\r\n\t\t\tthis.panSprite.moveTo(this._downPointOrig);\r\n\t\t\tthis.panSprite.dragStart(event.pointer);\r\n\t\t\tthis._downDeltaLongitude = this.deltaLongitude;\r\n\t\t\tthis._downDeltaLatitude = this.deltaLatitude;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected handlePanUp(event: IInteractionEvents[\"down\"]): void {\r\n\t\tif (this._downPointOrig) {\r\n\t\t\tthis.panSprite.dragStop(event.pointer, true);\r\n\t\t}\r\n\t\tthis._downPointOrig = undefined;\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected handlePanMove(): void {\r\n\r\n\t\tif (!this.seriesContainer.isResized) {\r\n\r\n\t\t\tif (getInteraction().areTransformed([this.panSprite.interactions, this.seriesContainer.interactions])) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tlet d3Projection = this.projection.d3Projection;\r\n\r\n\t\t\tlet panBehavior = this.panBehavior;\r\n\r\n\t\t\tif (panBehavior != \"move\" && panBehavior != \"none\" && this._downPointOrig && d3Projection.rotate) {\r\n\r\n\t\t\t\tlet rotation = d3Projection.rotate();\r\n\r\n\t\t\t\tlet dln = rotation[0];\r\n\t\t\t\tlet dlt = rotation[1];\r\n\t\t\t\tlet dlg = rotation[2];\r\n\r\n\t\t\t\td3Projection.rotate([0, 0, 0]);\r\n\r\n\t\t\t\tlet downGeoLocal = this.projection.invert(this._downPointOrig);\r\n\r\n\t\t\t\tlet local: IPoint = { x: this.panSprite.pixelX, y: this.panSprite.pixelY };\r\n\t\t\t\tlet geoLocal: IGeoPoint;\r\n\t\t\t\tif (local) {\r\n\t\t\t\t\tgeoLocal = this.projection.invert(local);\r\n\t\t\t\t}\r\n\r\n\t\t\t\td3Projection.rotate([dln, dlt, dlg]);\r\n\r\n\t\t\t\tif (geoLocal) {\r\n\t\t\t\t\tif (panBehavior == \"rotateLat\" || panBehavior == \"rotateLongLat\") {\r\n\t\t\t\t\t\tthis.deltaLatitude = this._downDeltaLatitude + geoLocal.latitude - downGeoLocal.latitude;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (panBehavior == \"rotateLong\" || panBehavior == \"rotateLongLat\") {\r\n\t\t\t\t\t\tthis.deltaLongitude = this._downDeltaLongitude + geoLocal.longitude - downGeoLocal.longitude;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected handleAllInited() {\r\n\t\tlet inited = true;\r\n\t\tthis.seriesContainer.visible = true;\r\n\t\tthis.series.each((series) => {\r\n\t\t\tif (!series.inited || series.dataInvalid) {\r\n\t\t\t\tinited = false;\r\n\t\t\t}\r\n\t\t})\r\n\t\tif (inited) {\r\n\t\t\tthis.updateCenterGeoPoint();\r\n\t\t\tthis.updateScaleRatio();\r\n\t\t\tthis.goHome(0);\r\n\t\t}\r\n\t\telse {\r\n\t\t\t// TODO verify that this is correct\r\n\t\t\tconst disposer = registry.events.once(\"exitframe\", () => {\r\n\t\t\t\tthis.removeDispose(disposer);\r\n\t\t\t\tthis.handleAllInited();\r\n\t\t\t}, this, false);\r\n\r\n\t\t\tthis.addDisposer(disposer);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic updateZoomGeoPoint() {\r\n\t\tlet seriesPoint = $utils.svgPointToSprite({ x: this.innerWidth / 2 + this.pixelPaddingLeft, y: this.innerHeight / 2 + this.pixelPaddingTop }, this.series.getIndex(0));\r\n\t\tlet geoPoint = this.projection.invert(seriesPoint);\r\n\t\tthis._zoomGeoPointReal = geoPoint;\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic updateCenterGeoPoint() {\r\n\t\tlet maxLeft: number;\r\n\t\tlet maxRight: number;\r\n\t\tlet maxTop: number;\r\n\t\tlet maxBottom: number;\r\n\r\n\r\n\t\tif (this.backgroundSeries) {\r\n\t\t\tlet features = this.backgroundSeries.getFeatures();\r\n\t\t\tif (features.length > 0) {\r\n\t\t\t\tlet bounds = this.projection.d3Path.bounds(<any>features[0].geometry);\r\n\t\t\t\tmaxLeft = bounds[0][0];\r\n\t\t\t\tmaxTop = bounds[0][1];\r\n\t\t\t\tmaxRight = bounds[1][0];\r\n\t\t\t\tmaxBottom = bounds[1][1];\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.series.each((series) => {\r\n\t\t\t\tlet bbox = series.group.node.getBBox();\r\n\r\n\t\t\t\tif (maxLeft > bbox.x || !$type.isNumber(maxLeft)) {\r\n\t\t\t\t\tmaxLeft = bbox.x;\r\n\t\t\t\t}\r\n\t\t\t\tif (maxRight < bbox.x + bbox.width || !$type.isNumber(maxRight)) {\r\n\t\t\t\t\tmaxRight = bbox.x + bbox.width;\r\n\t\t\t\t}\r\n\t\t\t\tif (maxTop > bbox.y || !$type.isNumber(maxTop)) {\r\n\t\t\t\t\tmaxTop = bbox.y;\r\n\t\t\t\t}\r\n\t\t\t\tif (maxBottom < bbox.y + bbox.height || !$type.isNumber(maxBottom)) {\r\n\t\t\t\t\tmaxBottom = bbox.y + bbox.height;\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t}\r\n\r\n\t\tthis.seriesMaxLeft = maxLeft;\r\n\t\tthis.seriesMaxRight = maxRight;\r\n\t\tthis.seriesMaxTop = maxTop;\r\n\t\tthis.seriesMaxBottom = maxBottom;\r\n\r\n\t\tthis.seriesWidth = maxRight - maxLeft;\r\n\t\tthis.seriesHeight = maxBottom - maxTop;\r\n\r\n\t\tif (this.seriesWidth > 0 && this.seriesHeight > 0) {\r\n\t\t\tthis.chartContainer.visible = true;\r\n\t\t\tthis._centerGeoPoint = this.projection.invert({ x: maxLeft + (maxRight - maxLeft) / 2, y: maxTop + (maxBottom - maxTop) / 2 });\r\n\r\n\t\t\tif (!this._zoomGeoPointReal || !$type.isNumber(this._zoomGeoPointReal.latitude)) {\r\n\t\t\t\tthis._zoomGeoPointReal = this._centerGeoPoint;\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.chartContainer.visible = false;\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Prevents map to be dragged out of the container area\r\n\t * @ignore\r\n\t */\r\n\tprotected handleDrag() {\r\n\r\n\t\tlet d = this.zoomLevel * this.scaleRatio;\r\n\r\n\t\tlet ww = this.seriesWidth * d;\r\n\t\tlet hh = this.seriesHeight * d;\r\n\r\n\t\tlet seriesContainer = this.seriesContainer;\r\n\t\tlet maxLeft = this.seriesMaxLeft * d;\r\n\t\tlet maxRight = this.seriesMaxRight * d;\r\n\t\tlet maxTop = this.seriesMaxTop * d;\r\n\t\tlet maxBottom = this.seriesMaxBottom * d;\r\n\r\n\t\tlet x = seriesContainer.pixelX;\r\n\t\tlet y = seriesContainer.pixelY;\r\n\r\n\t\tlet maxPanOut = this.maxPanOut;\r\n\r\n\t\tlet minX = Math.min(this.maxWidth * (1 - maxPanOut) - ww - maxLeft, -maxLeft);\r\n\t\tif (x < minX) {\r\n\t\t\tx = minX;\r\n\t\t}\r\n\r\n\t\tlet maxX = Math.max(this.maxWidth * maxPanOut - maxLeft, this.maxWidth - maxRight);\r\n\t\tif (x > maxX) {\r\n\t\t\tx = maxX;\r\n\t\t}\r\n\r\n\t\tlet minY = Math.min(this.maxHeight * (1 - maxPanOut) - hh - maxTop, -maxTop)\r\n\t\tif (y < minY) {\r\n\t\t\ty = minY;\r\n\t\t}\r\n\r\n\t\tlet maxY = Math.max(this.maxHeight * maxPanOut - maxTop, this.maxHeight - maxBottom);\r\n\t\tif (y > maxY) {\r\n\t\t\ty = maxY;\r\n\t\t}\r\n\r\n\t\tseriesContainer.moveTo({ x: x, y: y }, undefined, undefined, true);\r\n\r\n\t\tthis._zoomGeoPointReal = this.zoomGeoPoint;\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\r\n\t\tsuper.applyInternalDefaults();\r\n\r\n\t\t// Add a default screen reader title for accessibility\r\n\t\t// This will be overridden in screen reader if there are any `titles` set\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Map\");\r\n\t\t}\r\n\r\n\t\tif (!$type.hasValue(this.background.readerTitle)) {\r\n\t\t\tthis.background.role = \"application\";\r\n\t\t\tthis.background.readerTitle = this.language.translate(\"Use plus and minus keys on your keyboard to zoom in and out\");\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Handles event when a pointer presses down on the map, e.g. user presses\r\n\t * down mouse or touches the map on a screen.\r\n\t *\r\n\t * Stops all animations currently going on.\r\n\t */\r\n\tprotected handleMapDown(): void {\r\n\t\tif (this._mapAnimation) {\r\n\t\t\tthis._mapAnimation.stop();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Handles the event when user doubleclicks or dooubletaps the map: zooms\r\n\t * in on the reference point.\r\n\t *\r\n\t * @param event  Original event\r\n\t */\r\n\tprotected handleDoubleHit(event: AMEvent<Sprite, ISpriteEvents>[\"doublehit\"]) {\r\n\t\tlet svgPoint: IPoint = $utils.documentPointToSvg(event.point, this.htmlContainer, this.svgContainer.cssScale);\r\n\t\tlet geoPoint: IGeoPoint = this.svgPointToGeo(svgPoint);\r\n\t\tthis.zoomIn(geoPoint);\r\n\t}\r\n\r\n\t/**\r\n\t * Handles mouse wheel event, e.g. user rotates mouse wheel while over the\r\n\t * map: zooms in or out depending on the direction of the wheel turn.\r\n\t *\r\n\t * @param event  Original event\r\n\t */\r\n\tprotected handleWheel(event: AMEvent<Sprite, ISpriteEvents>[\"wheel\"]) {\r\n\r\n\t\t// Cancel any move inertia if there is one\r\n\t\tconst inertia = this.seriesContainer.interactions.inertias.getKey(\"move\");\r\n\t\tif (inertia) {\r\n\t\t\tinertia.done();\r\n\t\t}\r\n\r\n\t\tlet svgPoint: IPoint = $utils.documentPointToSvg(event.point, this.htmlContainer, this.svgContainer.cssScale);\r\n\t\tlet geoPoint: IGeoPoint = this.svgPointToGeo(svgPoint);\r\n\r\n\t\tif (event.shift.y < 0) {\r\n\t\t\tthis.zoomIn(geoPoint, undefined, this.interactions.mouseOptions.sensitivity);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.zoomOut(geoPoint, undefined, this.interactions.mouseOptions.sensitivity);\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Specifies what should chart do if when mouse wheel is rotated.\r\n\t *\r\n\t * @see {@link https://www.amcharts.com/docs/v4/reference/sprite/#mouseOptions_property} More information about `mouseOptions`\r\n\t * @param mouse wheel behavior\r\n\t * @default zoomX\r\n\t */\r\n\tpublic set mouseWheelBehavior(value: \"zoom\" | \"none\") {\r\n\r\n\t\tif (this.setPropertyValue(\"mouseWheelBehavior\", value)) {\r\n\t\t\tif (value != \"none\") {\r\n\t\t\t\tthis._mouseWheelDisposer = this.chartContainer.events.on(\"wheel\", this.handleWheel, this, false);\r\n\t\t\t\tthis._disposers.push(this._mouseWheelDisposer);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tif (this._mouseWheelDisposer) {\r\n\t\t\t\t\tthis._mouseWheelDisposer.dispose();\r\n\t\t\t\t}\r\n\t\t\t\tthis.chartContainer.wheelable = false;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return mouse wheel behavior\r\n\t */\r\n\tpublic get mouseWheelBehavior(): \"zoom\" | \"none\" {\r\n\t\treturn this.getPropertyValue(\"mouseWheelBehavior\");\r\n\t}\r\n\r\n\t/**\r\n\t * What \"dragging\" map does.\r\n\t *\r\n\t * Available values:\r\n\t * * `\"move\"` (default): changes position of the map.\r\n\t * * `\"rotateLat\"`: changes `deltaLatitude` (rotates the globe vertically).\r\n\t * * `\"rotateLong\"`: changes `deltaLongitude` (rotates the globe horizontally).\r\n\t * * `\"rotateLongLat\"`: changes both `deltaLongitude` and `deltaLatitude` (rotates the globe in any direction).\r\n\t *\r\n\t * @default \"move\"\r\n\t * @since 4.3.0\r\n\t * @param  value  Behavior\r\n\t */\r\n\tpublic set panBehavior(value: \"none\" | \"move\" | \"rotateLat\" | \"rotateLong\" | \"rotateLongLat\") {\r\n\t\tif (this.setPropertyValue(\"panBehavior\", value)) {\r\n\t\t\tlet seriesContainer = this.seriesContainer;\r\n\t\t\tthis.panSprite.draggable = false;\r\n\t\t\tseriesContainer.draggable = false;\r\n\r\n\t\t\tswitch (value) {\r\n\t\t\t\tcase \"move\":\r\n\t\t\t\t\tseriesContainer.draggable = true;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tthis.panSprite.draggable = true;\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @returns If the map should be centered when zooming out.\r\n\t */\r\n\tpublic get centerMapOnZoomOut(): boolean {\r\n\t\treturn this.getPropertyValue(\"centerMapOnZoomOut\");\r\n\t}\r\n\r\n\t/**\r\n\t * Specifies if the map should be centered when zooming out\r\n\t * @default true\r\n\t * @since 4.7.12\r\n\t */\r\n\tpublic set centerMapOnZoomOut(value: boolean) {\r\n\t\tthis.setPropertyValue(\"centerMapOnZoomOut\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @returns Behavior\r\n\t */\r\n\tpublic get panBehavior(): \"none\" | \"move\" | \"rotateLat\" | \"rotateLong\" | \"rotateLongLat\" {\r\n\t\treturn this.getPropertyValue(\"panBehavior\");\r\n\t}\r\n\r\n\t/**\r\n\t * Projection to use for the map.\r\n\t *\r\n\t * Available projections:\r\n\t * * Albers\r\n\t * * AlbersUSA\r\n\t * * AzimuthalEqualArea\r\n\t * * Eckert6\r\n\t * * EqualEarth\r\n\t * * Mercator\r\n\t * * Miller\r\n\t * * NaturalEarth\r\n\t * * Orthographic\r\n\t * * Stereographic\r\n\t *\r\n\t * ```TypeScript\r\n\t * map.projection = new am4maps.projections.Mercator();\r\n\t * ```\r\n\t * ```JavaScript\r\n\t * map.projection = new am4maps.projections.Mercator();\r\n\t * ```\r\n\t * ```JSON\r\n\t * {\r\n\t *   // ...\r\n\t *   \"projection\": \"Mercator\"\r\n\t *   // ...\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * @see {@link https://www.amcharts.com/docs/v4/chart-types/map/#Setting_projection} More about projections\r\n\t * @param projection  Projection\r\n\t */\r\n\tpublic set projection(projection: Projection) {\r\n\t\tif (this.setPropertyValue(\"projection\", projection)) {\r\n\t\t\tthis.invalidateProjection();\r\n\r\n\t\t\tprojection.chart = this;\r\n\r\n\t\t\tif (this._backgroundSeries) {\r\n\t\t\t\tthis._backgroundSeries.invalidate();\r\n\t\t\t}\r\n\r\n\t\t\tif (this.inited) {\r\n\t\t\t\tthis.updateExtremes();\r\n\t\t\t}\r\n\r\n\t\t\tthis.series.each((series) => {\r\n\t\t\t\tseries.events.once(\"validated\", () => {\r\n\t\t\t\t\tthis.updateCenterGeoPoint();\r\n\t\t\t\t\tthis.updateScaleRatio();\r\n\t\t\t\t\tthis.goHome(0);\r\n\t\t\t\t});\r\n\t\t\t})\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Projection\r\n\t */\r\n\tpublic get projection(): Projection {\r\n\t\treturn this.getPropertyValue(\"projection\");\r\n\t}\r\n\r\n\t/**\r\n\t * Validates (processes) data items.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateDataItems() {\r\n\t\tsuper.validateDataItems();\r\n\t\tthis.updateExtremes();\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Calculates the longitudes and latitudes of the most distant points from\r\n\t * the center in all four directions: West, East, North, and South.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateExtremes(): void {\r\n\r\n\t\tlet east: number;\r\n\t\tlet north: number;\r\n\t\tlet west: number;\r\n\t\tlet south: number;\r\n\r\n\t\tthis.series.each((series) => {\r\n\t\t\tif (series.ignoreBounds || (series instanceof GraticuleSeries && series.fitExtent)) {\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tif (series.north > north || !$type.isNumber(north)) {\r\n\t\t\t\t\tnorth = series.north;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (series.south < south || !$type.isNumber(south)) {\r\n\t\t\t\t\tsouth = series.south;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (series.west < west || !$type.isNumber(west)) {\r\n\t\t\t\t\twest = series.west;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (series.east > east || !$type.isNumber(east)) {\r\n\t\t\t\t\teast = series.east;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t})\r\n\r\n\t\tlet features: any[] = [];\r\n\t\tlet foundGraticule = false;\r\n\t\t// if we gave graticule, get features of these series only for faster fitSize\r\n\t\tthis.series.each((series) => {\r\n\t\t\tif (series instanceof GraticuleSeries && !series.fitExtent) {\r\n\t\t\t\tfeatures = series.getFeatures();\r\n\t\t\t\tfoundGraticule = true;\r\n\t\t\t}\r\n\t\t})\r\n\r\n\t\tif (!foundGraticule) {\r\n\t\t\tthis.series.each((series) => {\r\n\t\t\t\tif (series.ignoreBounds || (series instanceof GraticuleSeries && series.fitExtent)) {\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tfeatures = features.concat(series.getFeatures());\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t}\r\n\r\n\t\tlet w = $math.max(50, this.innerWidth);\r\n\t\tlet h = $math.max(50, this.innerHeight);\r\n\r\n\t\tlet d3Projection = this.projection.d3Projection;\r\n\r\n\t\tif (features.length > 0 && d3Projection && (this.east != east || this.west != west || this.north != north || this.south != south)) {\r\n\t\t\tthis.east = east;\r\n\t\t\tthis.west = west;\r\n\t\t\tthis.north = north;\r\n\t\t\tthis.south = south;\r\n\t\t\tif (d3Projection.rotate) {\r\n\t\t\t\tlet rotation = d3Projection.rotate();\r\n\t\t\t\tlet deltaLong = rotation[0];\r\n\t\t\t\tlet deltaLat = rotation[1];\r\n\t\t\t\tlet deltaGamma = rotation[2];\r\n\r\n\t\t\t\tthis.deltaLongitude = deltaLong;\r\n\t\t\t\tthis.deltaLatitude = deltaLat;\r\n\t\t\t\tthis.deltaGamma = deltaGamma;\r\n\t\t\t}\r\n\r\n\t\t\tlet geoJSON = { \"type\": \"FeatureCollection\", features: features };\r\n\r\n\t\t\tlet initialScale = d3Projection.scale();\r\n\r\n\t\t\td3Projection.fitSize([w, h], <any>geoJSON);\r\n\r\n\t\t\tif (d3Projection.scale() != initialScale) {\r\n\t\t\t\tthis.invalidateDataUsers();\r\n\t\t\t}\r\n\r\n\t\t\tthis.series.each((series) => {\r\n\t\t\t\tif (series instanceof GraticuleSeries) {\r\n\t\t\t\t\tseries.invalidateData();\r\n\t\t\t\t}\r\n\t\t\t})\r\n\r\n\t\t\tif (this._backgroundSeries) {\r\n\t\t\t\tlet polygon = this._backgroundSeries.mapPolygons.getIndex(0);\r\n\t\t\t\tif (polygon) {\r\n\t\t\t\t\tpolygon.multiPolygon = $mapUtils.getBackground(this.north, this.east, this.south, this.west);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tthis._fitWidth = w;\r\n\t\t\tthis._fitHeight = h;\r\n\t\t}\r\n\r\n\t\tif (!this._zoomGeoPointReal || !$type.isNumber(this._zoomGeoPointReal.latitude)) {\r\n\t\t\tthis.goHome(0);\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * (Re)calculates a ratio which should be used to scale the actual map so\r\n\t * that it fits perfectly into available space. Helps to avoid redrawing of all the map if container size changes\r\n\t * @ignore\r\n\t */\r\n\tprotected updateScaleRatio(): void {\r\n\t\tlet scaleRatio: number;\r\n\r\n\t\tthis.updateCenterGeoPoint();\r\n\r\n\t\tlet hScale: number = this.innerWidth / this.seriesWidth;\r\n\t\tlet vScale: number = this.innerHeight / this.seriesHeight;\r\n\r\n\t\tscaleRatio = $math.min(hScale, vScale);\r\n\r\n\t\tif ($type.isNaN(scaleRatio) || scaleRatio == Infinity) {\r\n\t\t\tscaleRatio = 1;\r\n\t\t}\r\n\r\n\t\tif (scaleRatio != this.scaleRatio) {\r\n\t\t\tthis.scaleRatio = scaleRatio;\r\n\r\n\t\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\t\tseries.scale = scaleRatio;\r\n\t\t\t\tseries.updateTooltipBounds();\r\n\t\t\t});\r\n\r\n\t\t\tthis.backgroundSeries.scale = scaleRatio;\r\n\r\n\t\t\tthis.dispatch(\"scaleratiochanged\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Converts a point within map container to geographical (lat/long)\r\n\t * coordinates.\r\n\t *\r\n\t * @param point  Source point\r\n\t * @return Geo-point\r\n\t */\r\n\tpublic svgPointToGeo(point: IPoint): IGeoPoint {\r\n\t\tlet series: MapSeries = <MapSeries>this.series.getIndex(0);\r\n\t\tif (series) {\r\n\t\t\tlet seriesPoint: IPoint = $utils.svgPointToSprite(point, series);\r\n\t\t\treturn this.seriesPointToGeo(seriesPoint);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Converts geographical (lat/long) coordinates to an X/Y point within map's\r\n\t * container.\r\n\t *\r\n\t * @param point  Source geo-point\r\n\t * @return Point\r\n\t */\r\n\tpublic geoPointToSVG(point: IGeoPoint): IPoint {\r\n\t\tlet series: MapSeries = <MapSeries>this.series.getIndex(0);\r\n\t\tif (series) {\r\n\t\t\tlet seriesPoint: IPoint = this.geoPointToSeries(point);\r\n\t\t\treturn $utils.spritePointToSvg(seriesPoint, series);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Converts a point (X/Y) within actual objects of the map to geographical\r\n\t * (lat/long) coordinates.\r\n\t *\r\n\t * @param point  Source point\r\n\t * @return Geo-point\r\n\t */\r\n\tpublic seriesPointToGeo(point: IPoint): IGeoPoint {\r\n\t\treturn this.projection.invert(point);\r\n\t}\r\n\r\n\t/**\r\n\t * Converts geographical (lat/long) coordinates to an X/Y point within\r\n\t * actual elements/objects of the maps.\r\n\t *\r\n\t * @param point  Source geo-point\r\n\t * @return Point\r\n\t */\r\n\tpublic geoPointToSeries(point: IGeoPoint): IPoint {\r\n\t\treturn this.projection.convert(point);\r\n\t}\r\n\r\n\t/**\r\n\t * Map data in GeoJSON format.\r\n\t *\r\n\t * The Map supports the following GeoJSON objects: `Point`, `LineString`,\r\n\t * `Polygon`, `MultiPoint`, `MultiLineString`, and `MultiPolygon`.\r\n\t *\r\n\t * @see {@link http://geojson.org/} Official GeoJSON format specification\r\n\t * @param geoJSON GeoJSON data\r\n\t */\r\n\tpublic set geodata(geodata: Object) {\r\n\t\tif (geodata != this._geodata) {\r\n\t\t\tthis._geodata = geodata;\r\n\r\n\t\t\tif (this.reverseGeodata) {\r\n\t\t\t\tthis.processReverseGeodata(this._geodata);\r\n\t\t\t}\r\n\t\t\tthis.invalidateData();\r\n\r\n\t\t\tthis.dataUsers.each((dataUser) => {\r\n\t\t\t\tfor (let i = dataUser.data.length - 1; i >= 0; i--) {\r\n\t\t\t\t\tif (dataUser.data[i].madeFromGeoData == true) {\r\n\t\t\t\t\t\tdataUser.data.splice(i, 1);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tdataUser.disposeData();\r\n\t\t\t\tdataUser.invalidateData();\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return GeoJSON data\r\n\t */\r\n\tpublic get geodata(): Object {\r\n\t\treturn this._geodata;\r\n\t}\r\n\r\n\t/**\r\n\t * Indicates whether GeoJSON geodata supplied to the chart uses\r\n\t * ESRI (clockwise) or non-ESRI (counter-clockwise) order of the polygon\r\n\t * coordinates.\r\n\t *\r\n\t * `MapChart` supports only ESRI standard, so if your custom maps appears\r\n\t * garbled, try setting `reverseGeodata = true`.\r\n\t * \r\n\t * @default false\r\n\t * @since 4.10.11\r\n\t * @param  value  Reverse the order of geodata coordinates?\r\n\t */\r\n\tpublic set reverseGeodata(value: boolean) {\r\n\t\tif (this.setPropertyValue(\"reverseGeodata\", value) && this._geodata) {\r\n\t\t\tthis.processReverseGeodata(this._geodata);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @returns Reverse the order of geodata coordinates?\r\n\t */\r\n\tpublic get reverseGeodata(): boolean {\r\n\t\treturn this.getPropertyValue(\"reverseGeodata\");\r\n\t}\r\n\r\n\t/**\r\n\t * Reverses the order of polygons on a GeoJSON data.\r\n\t *\r\n\t * @since 4.10.11\r\n\t * @param  geodata  Source geodata\r\n\t */\r\n\tpublic processReverseGeodata(geodata: any): void {\r\n\t\tfor (let i = 0; i < geodata.features.length; i++) {\r\n\t\t\tlet feature = geodata.features[i];\r\n\t\t\tfor (let x = 0; x < feature.geometry.coordinates.length; x++) {\r\n\t\t\t\tif (feature.geometry.type == \"MultiPolygon\") {\r\n\t\t\t\t\tfor (let y = 0; y < feature.geometry.coordinates[x].length; y++) {\r\n\t\t\t\t\t\tfeature.geometry.coordinates[x][y].reverse()\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tfeature.geometry.coordinates[x].reverse()\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Zooms the map to particular zoom level and centers on a latitude/longitude\r\n\t * coordinate.\r\n\t *\r\n\t * @param point      Center coordinate\r\n\t * @param zoomLevel  Zoom level\r\n\t * @param center     Center on the given coordinate?\r\n\t * @param duration   Duration for zoom animation (ms)\r\n\t * @return Zoom animation\r\n\t */\r\n\tpublic zoomToGeoPoint(point: IGeoPoint, zoomLevel: number, center?: boolean, duration?: number, mapObject?: boolean): Animation {\r\n\r\n\t\tif (!point) {\r\n\t\t\tlet hasData = false;\r\n\t\t\tthis.series.each((series) => {\r\n\t\t\t\tif (series.dataItems.length > 0) {\r\n\t\t\t\t\thasData = true;\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t\tif (hasData) {\r\n\t\t\t\tpoint = this.zoomGeoPoint;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (!point || !$type.isNumber(point.longitude) || !$type.isNumber(point.latitude)) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tthis._zoomGeoPointReal = point;\r\n\r\n\t\tzoomLevel = $math.fitToRange(zoomLevel, this.minZoomLevel, this.maxZoomLevel);\r\n\r\n\t\tlet seriesPoint: IPoint = this.projection.convert(point);\r\n\t\tif (seriesPoint) {\r\n\r\n\t\t\tlet svgPoint: IPoint = this.geoPointToSVG(point);\r\n\r\n\t\t\tlet mapPoint = $utils.svgPointToSprite(svgPoint, this);\r\n\r\n\t\t\tif (center) {\r\n\t\t\t\tmapPoint = {\r\n\t\t\t\t\tx: this.innerWidth / 2,\r\n\t\t\t\t\ty: this.innerHeight / 2\r\n\t\t\t\t};\r\n\t\t\t}\r\n\r\n\t\t\tif (!$type.isNumber(duration)) {\r\n\t\t\t\tduration = this.zoomDuration;\r\n\t\t\t}\r\n\r\n\t\t\tlet x = mapPoint.x - seriesPoint.x * zoomLevel * this.scaleRatio;\r\n\t\t\tlet y = mapPoint.y - seriesPoint.y * zoomLevel * this.scaleRatio;\r\n\r\n\r\n\t\t\tif (!mapObject && zoomLevel < this.zoomLevel && this.centerMapOnZoomOut && zoomLevel < 1.5) {\r\n\t\t\t\tx = this.innerWidth / 2 - (this.seriesMaxLeft + (this.seriesMaxRight - this.seriesMaxLeft) / 2) * zoomLevel * this.scaleRatio;\r\n\t\t\t\ty = this.innerHeight / 2 - (this.seriesMaxTop + (this.seriesMaxBottom - this.seriesMaxTop) / 2) * zoomLevel * this.scaleRatio;\r\n\t\t\t}\r\n\r\n\t\t\tthis._mapAnimation = this.seriesContainer.animate(\r\n\t\t\t\t[{\r\n\t\t\t\t\tproperty: \"scale\",\r\n\t\t\t\t\tto: zoomLevel\r\n\t\t\t\t}, {\r\n\t\t\t\t\tproperty: \"x\", from: this.seriesContainer.pixelX,\r\n\t\t\t\t\tto: x\r\n\t\t\t\t}, {\r\n\t\t\t\t\tproperty: \"y\", from: this.seriesContainer.pixelY,\r\n\t\t\t\t\tto: y\r\n\t\t\t\t}], duration, this.zoomEasing);\r\n\r\n\t\t\tthis._disposers.push(this._mapAnimation.events.on(\"animationended\", () => {\r\n\t\t\t\tthis._zoomGeoPointReal = this.zoomGeoPoint;\r\n\t\t\t}))\r\n\r\n\r\n\t\t\tthis.seriesContainer.validatePosition();\r\n\r\n\t\t\treturn this._mapAnimation;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Zooms the map to a particular map object.\r\n\t *\r\n\t * @param mapObject  Target map object\r\n\t * @param zoomLevel  Zoom level\r\n\t * @param center     Center on the given coordinate?\r\n\t * @param duration   Duration for zoom animation (ms)\r\n\t * @return Zoom animation\r\n\t */\r\n\tpublic zoomToMapObject(mapObject: MapObject, zoomLevel?: number, center?: boolean, duration?: number): Animation {\r\n\t\tif (center == undefined) {\r\n\t\t\tcenter = true;\r\n\t\t}\r\n\r\n\t\tconst inertia = this.seriesContainer.interactions.inertias.getKey(\"move\");\r\n\t\tif (inertia) {\r\n\t\t\tinertia.done();\r\n\t\t}\r\n\r\n\t\tif (mapObject instanceof MapImage) {\r\n\t\t\tif ($type.isNaN(zoomLevel)) {\r\n\t\t\t\tzoomLevel = 5;\r\n\t\t\t}\r\n\t\t\treturn this.zoomToGeoPoint({ latitude: mapObject.latitude, longitude: mapObject.longitude }, zoomLevel, center, duration, true);\r\n\t\t}\r\n\r\n\t\tlet dataItem = mapObject.dataItem;\r\n\r\n\t\tif (dataItem && $type.isNumber(dataItem.zoomLevel)) {\r\n\t\t\tzoomLevel = dataItem.zoomLevel;\r\n\t\t}\r\n\r\n\r\n\t\tif (mapObject instanceof MapPolygon) {\r\n\t\t\tlet dataItem = mapObject.dataItem;\r\n\t\t\tlet bbox = mapObject.polygon.bbox;\r\n\t\t\tif (bbox.width == 0 || bbox.height == 0) {\r\n\t\t\t\tbbox = mapObject.polygon.group.getBBox();\r\n\t\t\t}\r\n\r\n\t\t\tif (!$type.isNumber(zoomLevel)) {\r\n\t\t\t\tzoomLevel = Math.min(this.seriesWidth / bbox.width, this.seriesHeight / bbox.height);\r\n\t\t\t}\r\n\r\n\t\t\tlet geoPoint: IGeoPoint;\r\n\r\n\t\t\tif (dataItem && $type.hasValue(dataItem.zoomGeoPoint)) {\r\n\t\t\t\tgeoPoint = dataItem.zoomGeoPoint;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\t// this is more accurate\r\n\t\t\t\tlet polygonPoint = { x: bbox.x + bbox.width / 2, y: bbox.y + bbox.height / 2 };\r\n\t\t\t\tlet seriesPoint = $utils.spritePointToSprite(polygonPoint, mapObject.polygon, mapObject.series);\r\n\r\n\t\t\t\tgeoPoint = this.seriesPointToGeo(seriesPoint);\r\n\t\t\t}\r\n\r\n\t\t\treturn this.zoomToGeoPoint(geoPoint, zoomLevel, true, duration, true);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Zooms the map to a particular viewport.\r\n\t *\r\n\t * The `north`, `east`, `south`, and `west` define boundaries of the\r\n\t * imaginary viewort we want to zoom the map to.\r\n\t *\r\n\t * `level` is not actual zoom level. The map will determine the zoom level\r\n\t * required to accommodated such zoom, and will adjust it by `level` if set.\r\n\t *\r\n\t * @param north     Latitude of the North-most boundary\r\n\t * @param east      Longitude of the East-most boundary\r\n\t * @param south     Latitude of the South-most boundary\r\n\t * @param west      Longitude of the West-most boundary\r\n\t * @param level     Adjust zoom level\r\n\t * @param center    Center on the given coordinate?\r\n\t * @param duration  Duration for zoom animation (ms)\r\n\t * @return Zoom animation\r\n\t */\r\n\tpublic zoomToRectangle(north: number, east: number, south: number, west: number, level?: number, center?: boolean, duration?: number): Animation {\r\n\t\tif ($type.isNaN(level)) {\r\n\t\t\tlevel = 1;\r\n\t\t}\r\n\r\n\t\tlet w = $math.min(west, east);\r\n\t\tlet e = $math.max(west, east);\r\n\r\n\t\twest = w;\r\n\t\teast = e;\r\n\r\n\t\tlet splitLongitude = $math.normalizeAngle(180 - this.deltaLongitude);\r\n\t\tif (splitLongitude > 180) {\r\n\t\t\tsplitLongitude -= 360;\r\n\t\t}\r\n\r\n\t\tlet newLong = west + (east - west) / 2;\r\n\t\tlet d = (west - east);\r\n\r\n\t\tif (west < splitLongitude && east > splitLongitude) {\r\n\t\t\tnewLong += 180;\r\n\t\t\td = $math.normalizeAngle(east - west - 360);\r\n\t\t}\r\n\r\n\t\tlet zoomLevel = level * Math.min((this.south - this.north) / (south - north), Math.abs((this.west - this.east) / d));\r\n\r\n\t\treturn this.zoomToGeoPoint({ latitude: north + (south - north) / 2, longitude: newLong }, zoomLevel, center, duration, true);\r\n\t}\r\n\r\n\t/**\r\n\t * Zooms in the map, optionally centering on particular latitude/longitude\r\n\t * point.\r\n\t *\r\n\t * @param geoPoint  Optional center point\r\n\t * @param duration  Duration for zoom animation (ms)\r\n\t * @return Zoom animation\r\n\t */\r\n\tpublic zoomIn(geoPoint?: IGeoPoint, duration?: number, sensitivity: number = 1): Animation {\r\n\t\tlet step = 1 + (this.zoomStep - 1) * sensitivity;\r\n\t\tif (step < 1) {\r\n\t\t\tstep = 1;\r\n\t\t}\r\n\t\treturn this.zoomToGeoPoint(geoPoint, this.zoomLevel * step, false, duration);\r\n\t}\r\n\r\n\t/**\r\n\t * Zooms out the map, optionally centering on particular latitude/longitude\r\n\t * point.\r\n\t *\r\n\t * @param geoPoint  Optional center point\r\n\t * @param duration  Duration for zoom animation (ms)\r\n\t * @return Zoom animation\r\n\t */\r\n\tpublic zoomOut(geoPoint?: IGeoPoint, duration?: number, sensitivity: number = 1): Animation {\r\n\t\tlet step = 1 + (this.zoomStep - 1) * sensitivity;\r\n\t\tif (step < 1) {\r\n\t\t\tstep = 1;\r\n\t\t}\r\n\t\treturn this.zoomToGeoPoint(geoPoint, this.zoomLevel / step, false, duration);\r\n\t}\r\n\r\n\t/**\r\n\t * Pans the maps using relative coordinates. E.g.:\r\n\t *\r\n\t * ```JSON\r\n\t * {\r\n\t *   x: 0.1,\r\n\t *   y: -0.1\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * The above will move the map by 10% to the right, and by 10% upwards.\r\n\t *\r\n\t * @param shift     Vertical and horizontal shift\r\n\t * @param duration  Pan animation duration (ms)\r\n\t */\r\n\tpublic pan(shift: IPoint, duration?: number): void {\r\n\t\tlet point = this.geoPointToSVG(this.zoomGeoPoint);\r\n\t\tpoint.x += this.pixelWidth * shift.x;\r\n\t\tpoint.y += this.pixelHeight * shift.y;\r\n\t\tthis.zoomToGeoPoint(this.svgPointToGeo(point), this.zoomLevel, true, duration, true);\r\n\t}\r\n\r\n\t/**\r\n\t * Current lat/long coordinates for the center of the viewport. (default\r\n\t * zoom reference point)\r\n\t *\r\n\t * @readonly\r\n\t * @return Coordinates\r\n\t */\r\n\tpublic get zoomGeoPoint(): IGeoPoint {\r\n\t\tconst point = $utils.spritePointToSvg({ x: this.pixelWidth / 2, y: this.pixelHeight / 2 }, this);\r\n\t\treturn this.svgPointToGeo(point);\r\n\t}\r\n\r\n\t/**\r\n\t * Current zoom level.\r\n\t *\r\n\t * @readonly\r\n\t * @return Zoom level\r\n\t */\r\n\tpublic set zoomLevel(value: number) {\r\n\t\tthis.seriesContainer.scale = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @return Zoom level\r\n\t */\r\n\tpublic get zoomLevel(): number {\r\n\t\treturn this.seriesContainer.scale;\r\n\t}\r\n\r\n\t/**\r\n\t * Dispatches events after some map transformation, like pan or zoom.\r\n\t *\r\n\t * @ignore\r\n\t */\r\n\tprotected handleMapTransform(): void {\r\n\t\tif (this.zoomLevel != this._prevZoomLevel) {\r\n\t\t\tthis.dispatch(\"zoomlevelchanged\");\r\n\t\t\tthis._prevZoomLevel = this.zoomLevel;\r\n\t\t\tthis.svgContainer.readerAlert(this.language.translate(\"Zoom level changed to %1\", this.language.locale, $type.castString(this.zoomLevel)));\r\n\t\t}\r\n\r\n\t\tif (this.zoomGeoPoint && (this._prevZoomGeoPoint.latitude != this.zoomGeoPoint.latitude || this._prevZoomGeoPoint.longitude != this.zoomGeoPoint.longitude)) {\r\n\t\t\tthis.dispatch(\"mappositionchanged\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A [[SmallMap]] to be used on the map.\r\n\t *\r\n\t * Please note, that accessing this property will NOT create a small map\r\n\t * if it has not yet been created. (except in JSON)\r\n\t *\r\n\t * ```TypeScript\r\n\t * // Create a small map\r\n\t * map.smallMap = new am4maps.SmallMap();\r\n\t * ```\r\n\t * ```JavaScript\r\n\t * // Create a small map\r\n\t * map.smallMap = new am4maps.SmallMap();\r\n\t * ```\r\n\t * ```JSON\r\n\t * {\r\n\t *   // ...\r\n\t *   \"smallMap\": {}\r\n\t *   // ...\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * @param smallMap  Small map\r\n\t */\r\n\tpublic set smallMap(smallMap: SmallMap) {\r\n\t\tif (this._smallMap) {\r\n\t\t\tthis.removeDispose(this._smallMap);\r\n\t\t}\r\n\t\tthis._smallMap = smallMap;\r\n\t\tthis._smallMap.chart = this;\r\n\t\tsmallMap.parent = this.chartContainer;\r\n\t}\r\n\r\n\t/**\r\n\t * @return Small map\r\n\t */\r\n\tpublic get smallMap(): SmallMap {\r\n\t\tif (!this._smallMap) {\r\n\t\t\tlet smallMap: SmallMap = new SmallMap();\r\n\t\t\tthis.smallMap = smallMap;\r\n\t\t}\r\n\t\treturn this._smallMap;\r\n\t}\r\n\r\n\t/**\r\n\t * A [[ZoomControl]] to be used on the map.\r\n\t *\r\n\t * Please note, that accessing this property will NOT create a zoom control\r\n\t * if it has not yet been created. (except in JSON)\r\n\t *\r\n\t * ```TypeScript\r\n\t * // Create a zoom control\r\n\t * map.zoomControl = new am4maps.ZoomControl();\r\n\t * ```\r\n\t * ```JavaScript\r\n\t * // Create a zoom control\r\n\t * map.zoomControl = new am4maps.ZoomControl();\r\n\t * ```\r\n\t * ```JSON\r\n\t * {\r\n\t *   // ...\r\n\t *   \"zoomControl\": {}\r\n\t *   // ...\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * @param zoomControl  Zoom control\r\n\t */\r\n\tpublic set zoomControl(zoomControl: ZoomControl) {\r\n\t\tif (this._zoomControl) {\r\n\t\t\tthis.removeDispose(this._zoomControl);\r\n\t\t}\r\n\t\tthis._zoomControl = zoomControl;\r\n\t\tzoomControl.chart = this;\r\n\t\tzoomControl.parent = this.chartContainer;\r\n\t\tzoomControl.plusButton.exportable = false;\r\n\t\tzoomControl.minusButton.exportable = false;\r\n\t}\r\n\r\n\t/**\r\n\t * @return Zoom control\r\n\t */\r\n\tpublic get zoomControl(): ZoomControl {\r\n\t\treturn this._zoomControl;\r\n\t}\r\n\r\n\t/**\r\n\t * Creates and returns a map series of appropriate type.\r\n\t *\r\n\t * @return Map series\r\n\t */\r\n\tprotected createSeries(): this[\"_seriesType\"] {\r\n\t\treturn new MapSeries();\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Degrees to rotate the map around vertical axis (Y).\r\n\t *\r\n\t * E.g. if set to -160, the longitude 20 will become a new center, creating\r\n\t * a Pacific-centered map.\r\n\t *\r\n\t * @see {@link https://www.amcharts.com/docs/v4/chart-types/map/#Map_rotation} For more info on map rotation.\r\n\t * @param  value  Rotation\r\n\t */\r\n\tpublic set deltaLongitude(value: number) {\r\n\t\tvalue = $math.round(value, 3);\r\n\t\tif (this.setPropertyValue(\"deltaLongitude\", $geo.wrapAngleTo180(value))) {\r\n\t\t\tthis.rotateMap();\r\n\t\t\tthis.updateZoomGeoPoint();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Rotation\r\n\t */\r\n\tpublic get deltaLongitude(): number {\r\n\t\treturn this.getPropertyValue(\"deltaLongitude\");\r\n\t}\r\n\r\n\t/**\r\n\t * Degrees to rotate the map around horizontal axis (X).\r\n\t *\r\n\t * E.g. setting this to 90 will put Antarctica directly in the center of\r\n\t * the map.\r\n\t *\r\n\t * @see {@link https://www.amcharts.com/docs/v4/chart-types/map/#Map_rotation} For more info on map rotation.\r\n\t * @since 4.3.0\r\n\t * @param  value  Rotation\r\n\t */\r\n\tpublic set deltaLatitude(value: number) {\r\n\t\tvalue = $math.round(value, 3);\r\n\t\tif (this.setPropertyValue(\"deltaLatitude\", value)) {\r\n\t\t\tthis.rotateMap();\r\n\t\t\tthis.updateZoomGeoPoint();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Rotation\r\n\t */\r\n\tpublic get deltaLatitude(): number {\r\n\t\treturn this.getPropertyValue(\"deltaLatitude\");\r\n\t}\r\n\r\n\t/**\r\n\t * Degrees to rotate the map around \"Z\" axis. This is the axis that pierces\r\n\t * the globe directly from the viewer's point of view.\r\n\t *\r\n\t * @see {@link https://www.amcharts.com/docs/v4/chart-types/map/#Map_rotation} For more info on map rotation.\r\n\t * @since 4.3.0\r\n\t * @param  value  Rotation\r\n\t */\r\n\tpublic set deltaGamma(value: number) {\r\n\t\tvalue = $math.round(value, 3);\r\n\t\tif (this.setPropertyValue(\"deltaGamma\", value)) {\r\n\t\t\tthis.rotateMap();\r\n\t\t\tthis.updateZoomGeoPoint();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Rotation\r\n\t */\r\n\tpublic get deltaGamma(): number {\r\n\t\treturn this.getPropertyValue(\"deltaGamma\");\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected rotateMap() {\r\n\t\tif (this.projection.d3Projection) {\r\n\t\t\tif (this.projection.d3Projection.rotate) {\r\n\t\t\t\tthis.projection.d3Projection.rotate([this.deltaLongitude, this.deltaLatitude, this.deltaGamma]);\r\n\t\t\t\tthis.invalidateProjection();\r\n\t\t\t\t//this.updateExtremes(); // removal fixes #3292\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Maximum portion of the map's width/height to allow panning \"off screen\".\r\n\t *\r\n\t * A value of 0 (zero) will prevent any portion of the the map to be panned\r\n\t * outside the viewport.\r\n\t *\r\n\t * 0.5 will allow half of the map to be outside viewable area.\r\n\t *\r\n\t * @default 0.7\r\n\t * @param value  Max pan out\r\n\t */\r\n\tpublic set maxPanOut(value: number) {\r\n\t\tthis.setPropertyValue(\"maxPanOut\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Max pan out\r\n\t */\r\n\tpublic get maxPanOut(): number {\r\n\t\treturn this.getPropertyValue(\"maxPanOut\");\r\n\t}\r\n\r\n\t/**\r\n\t * The geographical point to center map on when it is first loaded.\r\n\t *\r\n\t * The map will also be centered to this point when you call `goHome()`\r\n\t * method.\r\n\t *\r\n\t * @param value  Home geo point\r\n\t */\r\n\tpublic set homeGeoPoint(value: IGeoPoint) {\r\n\t\tthis.setPropertyValue(\"homeGeoPoint\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Home geo point\r\n\t */\r\n\tpublic get homeGeoPoint(): IGeoPoint {\r\n\t\treturn this.getPropertyValue(\"homeGeoPoint\");\r\n\t}\r\n\r\n\t/**\r\n\t * The zoom level to put the map in when it is first loaded.\r\n\t *\r\n\t * The map will also be set to this zoom level when you call `goHome()`\r\n\t * method.\r\n\t *\r\n\t * @param value  Home zoom level\r\n\t */\r\n\tpublic set homeZoomLevel(value: number) {\r\n\t\tthis.setPropertyValue(\"homeZoomLevel\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Home zoom level\r\n\t */\r\n\tpublic get homeZoomLevel(): number {\r\n\t\treturn this.getPropertyValue(\"homeZoomLevel\");\r\n\t}\r\n\r\n\t/**\r\n\t * When user zooms in or out current zoom level is multiplied or divided\r\n\t * by value of this setting.\r\n\t *\r\n\t * @default 2\r\n\t * @param value  Zoom factor\r\n\t */\r\n\tpublic set zoomStep(value: number) {\r\n\t\tthis.setPropertyValue(\"zoomStep\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Zoom factor\r\n\t */\r\n\tpublic get zoomStep(): number {\r\n\t\treturn this.getPropertyValue(\"zoomStep\");\r\n\t}\r\n\r\n\t/**\r\n\t * Invalidates projection, causing all series to be redrawn.\r\n\t *\r\n\t * Call this after changing projection or its settings.\r\n\t */\r\n\tpublic invalidateProjection() {\r\n\t\tthis.east = undefined;\r\n\t\tthis.invalidateDataUsers();\r\n\t\tthis.updateCenterGeoPoint();\r\n\t}\r\n\r\n\t/**\r\n\t * Sets a [[DataSource]] to be used for loading Component's data.\r\n\t *\r\n\t * @param value Data source\r\n\t */\r\n\tpublic set geodataSource(value: DataSource) {\r\n\t\tif (this._dataSources[\"geodata\"]) {\r\n\t\t\tthis.removeDispose(this._dataSources[\"geodata\"]);\r\n\t\t}\r\n\t\tthis._dataSources[\"geodata\"] = value;\r\n\t\tthis._dataSources[\"geodata\"].component = this;\r\n\t\tthis.events.on(\"inited\", () => {\r\n\t\t\tthis.loadData(\"geodata\");\r\n\t\t}, this, false);\r\n\t\tthis.setDataSourceEvents(value, \"geodata\");\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a [[DataSource]] specifically for loading Component's data.\r\n\t *\r\n\t * @return Data source\r\n\t */\r\n\tpublic get geodataSource(): DataSource {\r\n\t\tif (!this._dataSources[\"geodata\"]) {\r\n\t\t\tlet dataSource = this.getDataSource(\"geodata\");\r\n\t\t\tdataSource.events.on(\"parseended\", () => {\r\n\t\t\t\tthis.events.once(\"datavalidated\", () => {\r\n\t\t\t\t\tthis.goHome(0);\r\n\t\t\t\t})\r\n\t\t\t})\r\n\t\t}\r\n\t\treturn this._dataSources[\"geodata\"];\r\n\t}\r\n\r\n\t/**\r\n\t * Processes JSON-based config before it is applied to the object.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param config  Config\r\n\t */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\tif ($type.hasValue(config[\"geodata\"]) && $type.isString(config[\"geodata\"])) {\r\n\t\t\tconst name = config[\"geodata\"];\r\n\t\t\t// Check if there's a map loaded by such name\r\n\t\t\tif ($type.hasValue((<any>window)[\"am4geodata_\" + config[\"geodata\"]])) {\r\n\t\t\t\tconfig[\"geodata\"] = (<any>window)[\"am4geodata_\" + config[\"geodata\"]];\r\n\t\t\t}\r\n\t\t\t// Nope. Let's try maybe we got JSON as string?\r\n\t\t\telse {\r\n\t\t\t\ttry {\r\n\t\t\t\t\tconfig[\"geodata\"] = JSON.parse(config[\"geodata\"]);\r\n\t\t\t\t}\r\n\t\t\t\tcatch (e) {\r\n\t\t\t\t\t// No go again. Error out.\r\n\t\t\t\t\tthis.raiseCriticalError(Error(\"MapChart error: Geodata `\" + name + \"` is not loaded or is incorrect.\"), true);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Instantiate projection\r\n\t\tif ($type.hasValue(config[\"projection\"]) && $type.isString(config[\"projection\"])) {\r\n\t\t\tconfig[\"projection\"] = this.createClassInstance(config[\"projection\"]);\r\n\t\t}\r\n\r\n\t\t// Set up small map\r\n\t\tif ($type.hasValue(config.smallMap) && !$type.hasValue(config.smallMap.type)) {\r\n\t\t\tconfig.smallMap.type = \"SmallMap\";\r\n\t\t}\r\n\r\n\t\t// Set up zoom control\r\n\t\tif ($type.hasValue(config.zoomControl) && !$type.hasValue(config.zoomControl.type)) {\r\n\t\t\tconfig.zoomControl.type = \"ZoomControl\";\r\n\t\t}\r\n\r\n\t\tsuper.processConfig(config);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Decorates a new [[Series]] object with required parameters when it is\r\n\t * added to the chart.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param event  Event\r\n\t */\r\n\tpublic handleSeriesAdded(event: IListEvents<MapSeries>[\"inserted\"]): void {\r\n\t\tsuper.handleSeriesAdded(event);\r\n\t\tlet series = event.newValue;\r\n\t\tseries.scale = this.scaleRatio;\r\n\t\tseries.events.on(\"validated\", this.updateCenterGeoPoint, this, false);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t   * This function is used to sort element's JSON config properties, so that\r\n\t   * some properties that absolutely need to be processed last, can be put at\r\n\t   * the end.\r\n\t   *\r\n\t   * @ignore Exclude from docs\r\n\t   * @param a  Element 1\r\n\t   * @param b  Element 2\r\n\t   * @return Sorting number\r\n\t   */\r\n\tprotected configOrder(a: string, b: string): Ordering {\r\n\t\tif (a == b) {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\t\t// Must come last\r\n\t\telse if (a == \"smallMap\") {\r\n\t\t\treturn 1;\r\n\t\t}\r\n\t\telse if (b == \"smallMap\") {\r\n\t\t\treturn -1;\r\n\t\t}\r\n\t\telse if (a == \"series\") {\r\n\t\t\treturn 1;\r\n\t\t}\r\n\t\telse if (b == \"series\") {\r\n\t\t\treturn -1;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn super.configOrder(a, b);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Adds `projection` to \"as is\" fields.\r\n\t *\r\n\t * @param field  Field name\r\n\t * @return Assign as is?\r\n\t */\r\n\tprotected asIs(field: string): boolean {\r\n\t\treturn field == \"projection\" || field == \"geodata\" || super.asIs(field);\r\n\t}\r\n\r\n\t/**\r\n\t * Geo point of map center\r\n\t *\r\n\t * @readonly\r\n\t */\r\n\tpublic get centerGeoPoint(): IGeoPoint {\r\n\t\treturn this._centerGeoPoint;\r\n\t}\r\n\r\n\t/**\r\n\t * Resets the map to its original position and zoom level.\r\n\t *\r\n\t * Use the only parameter to set number of milliseconds for the zoom\r\n\t * animation to play.\r\n\t *\r\n\t * @param  duration  Duration (ms)\r\n\t */\r\n\tpublic goHome(duration?: number) {\r\n\t\tlet homeGeoPoint = this.homeGeoPoint;\r\n\t\tif (!homeGeoPoint) {\r\n\t\t\thomeGeoPoint = this.centerGeoPoint;\r\n\t\t}\r\n\t\tif (homeGeoPoint) {\r\n\t\t\tthis.zoomToGeoPoint(homeGeoPoint, this.homeZoomLevel, true, duration, true);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Sets [[Paper]] instance to use to draw elements.\r\n\t *\r\n\t * @ignore\r\n\t * @param   paper  Paper\r\n\t * @return         true if paper was changed, false, if it's the same\r\n\t */\r\n\tpublic setPaper(paper: Paper): boolean {\r\n\t\tif (this.svgContainer) {\r\n\t\t\tthis.svgContainer.hideOverflow = true;\r\n\t\t}\r\n\r\n\t\treturn super.setPaper(paper);\r\n\t}\r\n\r\n\t/**\r\n\t * Background series will create polygons that will fill all the map area\r\n\t * with some color (or other fill).\r\n\t *\r\n\t * This might be useful with non-rectangular projections, like Orthographic,\r\n\t * Albers, etc.\r\n\t *\r\n\t * To change background color/opacity access polygon template.\r\n\t *\r\n\t * ```TypeScript\r\n\t * chart.backgroundSeries.mapPolygons.template.polygon.fill = am4core.color(\"#fff\");\r\n\t * chart.backgroundSeries.mapPolygons.template.polygon.fillOpacity = 0.1;\r\n\t * ```\r\n\t * ```JavaScript\r\n\t * chart.backgroundSeries.mapPolygons.template.polygon.fill = am4core.color(\"#fff\");\r\n\t * chart.backgroundSeries.mapPolygons.template.polygon.fillOpacity = 0.1;\r\n\t * ```\r\n\t * ```JSON\r\n\t * {\r\n\t *   \"backgroundSeries\": {\r\n\t *     \"mapPolygons\": {\r\n\t *       \"polygon\": {\r\n\t *         \"fill\": \"#fff\",\r\n\t *         \"fillOpacity\": 0.1\r\n\t *       }\r\n\t *     }\r\n\t *   }\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * @since 4.3.0\r\n\t */\r\n\tpublic get backgroundSeries(): MapPolygonSeries {\r\n\t\tif (!this._backgroundSeries) {\r\n\t\t\tlet backgroundSeries = new MapPolygonSeries();\r\n\t\t\tbackgroundSeries.parent = this.seriesContainer;\r\n\t\t\tbackgroundSeries.chart = this;\r\n\r\n\t\t\tbackgroundSeries.hiddenInLegend = true;\r\n\t\t\tbackgroundSeries.mapPolygons.template.focusable = false;\r\n\t\t\tbackgroundSeries.addDisposer(new Disposer(() => {\r\n\t\t\t\tthis._backgroundSeries = undefined;\r\n\t\t\t}))\r\n\t\t\tthis._disposers.push(backgroundSeries);\r\n\r\n\t\t\tlet interfaceColors = new InterfaceColorSet();\r\n\t\t\tlet color = interfaceColors.getFor(\"background\");\r\n\r\n\t\t\tlet polygonTemplate = backgroundSeries.mapPolygons.template.polygon;\r\n\t\t\tpolygonTemplate.stroke = color;\r\n\t\t\tpolygonTemplate.fill = color;\r\n\t\t\tpolygonTemplate.fillOpacity = 0;\r\n\t\t\tpolygonTemplate.strokeOpacity = 0;\r\n\t\t\t//polygonTemplate.focusable = false;\r\n\r\n\t\t\tbackgroundSeries.mapPolygons.create();\r\n\r\n\t\t\tthis._backgroundSeries = backgroundSeries;\r\n\t\t}\r\n\r\n\t\treturn this._backgroundSeries;\r\n\t}\r\n\r\n\t/**\r\n\t * Prepares the legend instance for use in this chart.\r\n\t *\r\n\t * @param legend  Legend\r\n\t */\r\n\tprotected setLegend(legend: Legend) {\r\n\t\tsuper.setLegend(legend);\r\n\t\tif (legend) {\r\n\t\t\tlegend.parent = this;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @param  value  Tap to activate?\r\n\t */\r\n\tprotected setTapToActivate(value: boolean): void {\r\n\t\tsuper.setTapToActivate(value);\r\n\t\t// setup other containers\r\n\t\tthis.seriesContainer.interactions.isTouchProtected = true;\r\n\t\tthis.panSprite.interactions.isTouchProtected = true;\r\n\t}\r\n\r\n\tprotected handleTapToActivate(): void {\r\n\t\tsuper.handleTapToActivate();\r\n\t\tthis.seriesContainer.interactions.isTouchProtected = false;\r\n\t\tthis.panSprite.interactions.isTouchProtected = false;\r\n\t}\r\n\r\n\tprotected handleTapToActivateDeactivation(): void {\r\n\t\tsuper.handleTapToActivateDeactivation();\r\n\t\tthis.seriesContainer.interactions.isTouchProtected = true;\r\n\t\tthis.panSprite.interactions.isTouchProtected = true;\r\n\t}\r\n\r\n\t/**\r\n\t * Adds easing functions to \"function\" fields.\r\n\t *\r\n\t * @param field  Field name\r\n\t * @return Assign as function?\r\n\t */\r\n\tprotected asFunction(field: string): boolean {\r\n\t\treturn field == \"zoomEasing\" || super.asIs(field);\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t * @return Has license?\r\n\t */\r\n\tpublic hasLicense(): boolean {\r\n\t\tif (options.commercialLicense) {\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\tif (!super.hasLicense()) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tfor (let i = 0; i < options.licenses.length; i++) {\r\n\t\t\tif (options.licenses[i].match(/^MP.{5,}/i)) {\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"MapChart\"] = MapChart;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}