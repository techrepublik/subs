{"ast":null,"code":"import { geoProjection as projection, geoRotation as rotation } from \"d3-geo\";\nimport { abs, asin, atan, atan2, cos, epsilon, sin, sqrt } from \"./math.js\";\nexport function modifiedStereographicRaw(C) {\n  var m = C.length - 1;\n  function forward(lambda, phi) {\n    var cosPhi = cos(phi),\n      k = 2 / (1 + cosPhi * cos(lambda)),\n      zr = k * cosPhi * sin(lambda),\n      zi = k * sin(phi),\n      i = m,\n      w = C[i],\n      ar = w[0],\n      ai = w[1],\n      t;\n    while (--i >= 0) {\n      w = C[i];\n      ar = w[0] + zr * (t = ar) - zi * ai;\n      ai = w[1] + zr * ai + zi * t;\n    }\n    ar = zr * (t = ar) - zi * ai;\n    ai = zr * ai + zi * t;\n    return [ar, ai];\n  }\n  forward.invert = function (x, y) {\n    var i = 20,\n      zr = x,\n      zi = y;\n    do {\n      var j = m,\n        w = C[j],\n        ar = w[0],\n        ai = w[1],\n        br = 0,\n        bi = 0,\n        t;\n      while (--j >= 0) {\n        w = C[j];\n        br = ar + zr * (t = br) - zi * bi;\n        bi = ai + zr * bi + zi * t;\n        ar = w[0] + zr * (t = ar) - zi * ai;\n        ai = w[1] + zr * ai + zi * t;\n      }\n      br = ar + zr * (t = br) - zi * bi;\n      bi = ai + zr * bi + zi * t;\n      ar = zr * (t = ar) - zi * ai - x;\n      ai = zr * ai + zi * t - y;\n      var denominator = br * br + bi * bi,\n        deltar,\n        deltai;\n      zr -= deltar = (ar * br + ai * bi) / denominator;\n      zi -= deltai = (ai * br - ar * bi) / denominator;\n    } while (abs(deltar) + abs(deltai) > epsilon * epsilon && --i > 0);\n    if (i) {\n      var rho = sqrt(zr * zr + zi * zi),\n        c = 2 * atan(rho * 0.5),\n        sinc = sin(c);\n      return [atan2(zr * sinc, rho * cos(c)), rho ? asin(zi * sinc / rho) : 0];\n    }\n  };\n  return forward;\n}\nvar alaska = [[0.9972523, 0], [0.0052513, -0.0041175], [0.0074606, 0.0048125], [-0.0153783, -0.1968253], [0.0636871, -0.1408027], [0.3660976, -0.2937382]],\n  gs48 = [[0.98879, 0], [0, 0], [-0.050909, 0], [0, 0], [0.075528, 0]],\n  gs50 = [[0.9842990, 0], [0.0211642, 0.0037608], [-0.1036018, -0.0575102], [-0.0329095, -0.0320119], [0.0499471, 0.1223335], [0.0260460, 0.0899805], [0.0007388, -0.1435792], [0.0075848, -0.1334108], [-0.0216473, 0.0776645], [-0.0225161, 0.0853673]],\n  miller = [[0.9245, 0], [0, 0], [0.01943, 0]],\n  lee = [[0.721316, 0], [0, 0], [-0.00881625, -0.00617325]];\nexport function modifiedStereographicAlaska() {\n  return modifiedStereographic(alaska, [152, -64]).scale(1400).center([-160.908, 62.4864]).clipAngle(30).angle(7.8);\n}\nexport function modifiedStereographicGs48() {\n  return modifiedStereographic(gs48, [95, -38]).scale(1000).clipAngle(55).center([-96.5563, 38.8675]);\n}\nexport function modifiedStereographicGs50() {\n  return modifiedStereographic(gs50, [120, -45]).scale(359.513).clipAngle(55).center([-117.474, 53.0628]);\n}\nexport function modifiedStereographicMiller() {\n  return modifiedStereographic(miller, [-20, -18]).scale(209.091).center([20, 16.7214]).clipAngle(82);\n}\nexport function modifiedStereographicLee() {\n  return modifiedStereographic(lee, [165, 10]).scale(250).clipAngle(130).center([-165, -10]);\n}\nexport default function modifiedStereographic(coefficients, rotate) {\n  var p = projection(modifiedStereographicRaw(coefficients)).rotate(rotate).clipAngle(90),\n    r = rotation(rotate),\n    center = p.center;\n  delete p.rotate;\n  p.center = function (_) {\n    return arguments.length ? center(r(_)) : r.invert(center());\n  };\n  return p;\n}","map":{"version":3,"names":["geoProjection","projection","geoRotation","rotation","abs","asin","atan","atan2","cos","epsilon","sin","sqrt","modifiedStereographicRaw","C","m","length","forward","lambda","phi","cosPhi","k","zr","zi","i","w","ar","ai","t","invert","x","y","j","br","bi","denominator","deltar","deltai","rho","c","sinc","alaska","gs48","gs50","miller","lee","modifiedStereographicAlaska","modifiedStereographic","scale","center","clipAngle","angle","modifiedStereographicGs48","modifiedStereographicGs50","modifiedStereographicMiller","modifiedStereographicLee","coefficients","rotate","p","r","_","arguments"],"sources":["/home/josh/Documents/projects/subs/vue_subs/node_modules/d3-geo-projection/src/modifiedStereographic.js"],"sourcesContent":["import {geoProjection as projection, geoRotation as rotation} from \"d3-geo\";\nimport {abs, asin, atan, atan2, cos, epsilon, sin, sqrt} from \"./math.js\";\n\nexport function modifiedStereographicRaw(C) {\n  var m = C.length - 1;\n\n  function forward(lambda, phi) {\n    var cosPhi = cos(phi),\n        k = 2 / (1 + cosPhi * cos(lambda)),\n        zr = k * cosPhi * sin(lambda),\n        zi = k * sin(phi),\n        i = m,\n        w = C[i],\n        ar = w[0],\n        ai = w[1],\n        t;\n    while (--i >= 0) {\n      w = C[i];\n      ar = w[0] + zr * (t = ar) - zi * ai;\n      ai = w[1] + zr * ai + zi * t;\n    }\n    ar = zr * (t = ar) - zi * ai;\n    ai = zr * ai + zi * t;\n    return [ar, ai];\n  }\n\n  forward.invert = function(x, y) {\n    var i = 20,\n        zr = x,\n        zi = y;\n    do {\n      var j = m,\n          w = C[j],\n          ar = w[0],\n          ai = w[1],\n          br = 0,\n          bi = 0,\n          t;\n\n      while (--j >= 0) {\n        w = C[j];\n        br = ar + zr * (t = br) - zi * bi;\n        bi = ai + zr * bi + zi * t;\n        ar = w[0] + zr * (t = ar) - zi * ai;\n        ai = w[1] + zr * ai + zi * t;\n      }\n      br = ar + zr * (t = br) - zi * bi;\n      bi = ai + zr * bi + zi * t;\n      ar = zr * (t = ar) - zi * ai - x;\n      ai = zr * ai + zi * t - y;\n\n      var denominator = br * br + bi * bi, deltar, deltai;\n      zr -= deltar = (ar * br + ai * bi) / denominator;\n      zi -= deltai = (ai * br - ar * bi) / denominator;\n    } while (abs(deltar) + abs(deltai) > epsilon * epsilon && --i > 0);\n\n    if (i) {\n      var rho = sqrt(zr * zr + zi * zi),\n          c = 2 * atan(rho * 0.5),\n          sinc = sin(c);\n      return [atan2(zr * sinc, rho * cos(c)), rho ? asin(zi * sinc / rho) : 0];\n    }\n  };\n\n  return forward;\n}\n\nvar alaska = [[0.9972523, 0], [0.0052513, -0.0041175], [0.0074606, 0.0048125], [-0.0153783, -0.1968253], [0.0636871, -0.1408027], [0.3660976, -0.2937382]],\n    gs48 = [[0.98879, 0], [0, 0], [-0.050909, 0], [0, 0], [0.075528, 0]],\n    gs50 = [[0.9842990, 0], [0.0211642, 0.0037608], [-0.1036018, -0.0575102], [-0.0329095, -0.0320119], [0.0499471, 0.1223335], [0.0260460, 0.0899805], [0.0007388, -0.1435792], [0.0075848, -0.1334108], [-0.0216473, 0.0776645], [-0.0225161, 0.0853673]],\n    miller = [[0.9245, 0], [0, 0], [0.01943, 0]],\n    lee = [[0.721316, 0], [0, 0], [-0.00881625, -0.00617325]];\n\nexport function modifiedStereographicAlaska() {\n  return modifiedStereographic(alaska, [152, -64])\n      .scale(1400)\n      .center([-160.908, 62.4864])\n      .clipAngle(30)\n      .angle(7.8);\n}\n\nexport function modifiedStereographicGs48() {\n  return modifiedStereographic(gs48, [95, -38])\n      .scale(1000)\n      .clipAngle(55)\n      .center([-96.5563, 38.8675]);\n}\n\nexport function modifiedStereographicGs50() {\n  return modifiedStereographic(gs50, [120, -45])\n      .scale(359.513)\n      .clipAngle(55)\n      .center([-117.474, 53.0628]);\n}\n\nexport function modifiedStereographicMiller() {\n  return modifiedStereographic(miller, [-20, -18])\n      .scale(209.091)\n      .center([20, 16.7214])\n      .clipAngle(82);\n}\n\nexport function modifiedStereographicLee() {\n  return modifiedStereographic(lee, [165, 10])\n      .scale(250)\n      .clipAngle(130)\n      .center([-165, -10]);\n}\n\nexport default function modifiedStereographic(coefficients, rotate) {\n  var p = projection(modifiedStereographicRaw(coefficients)).rotate(rotate).clipAngle(90),\n      r = rotation(rotate),\n      center = p.center;\n\n  delete p.rotate;\n\n  p.center = function(_) {\n    return arguments.length ? center(r(_)) : r.invert(center());\n  };\n\n  return p;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}