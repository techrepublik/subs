{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n/**\r\n * 3D slice module\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\nimport { Slice } from \"../Slice\";\nimport { Sprite } from \"../../Sprite\";\nimport * as $math from \"../../utils/Math\";\nimport * as $path from \"../../rendering/Path\";\nimport * as $type from \"../../utils/Type\";\nimport { Color, color } from \"../../utils/Color\";\nimport { RadialGradient } from \"../../rendering/fills/RadialGradient\";\nimport { LinearGradient } from \"../../rendering/fills/LinearGradient\";\nimport { LightenFilter } from \"../../rendering/filters/LightenFilter\";\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n/**\r\n * Used to draw a 3D slice of a Pie chart.\r\n *\r\n * @see {@link ISlice3DEvents} for a list of available events\r\n * @see {@link ISlice3DAdapters} for a list of available Adapters\r\n */\nvar Slice3D = /** @class */function (_super) {\n  __extends(Slice3D, _super);\n  /**\r\n   * Constructor\r\n   */\n  function Slice3D() {\n    var _this =\n    // Init\n    _super.call(this) || this;\n    _this.className = \"Slice3D\";\n    _this.layout = \"none\";\n    // Create edge container\n    var edge = _this.createChild(Sprite);\n    _this.edge = edge;\n    edge.shouldClone = false;\n    edge.isMeasured = false;\n    edge.toBack();\n    // Set defaults\n    _this.angle = 30;\n    _this.depth = 20;\n    // Create side A element\n    var sideA = _this.createChild(Sprite);\n    _this.sideA = sideA;\n    sideA.shouldClone = false;\n    sideA.isMeasured = false;\n    //sideA.setElement(this.paper.add(\"path\"));\n    //sideA.strokeOpacity = 0;\n    // Crate side B element\n    var sideB = _this.createChild(Sprite);\n    _this.sideB = sideB;\n    sideB.shouldClone = false;\n    sideB.isMeasured = false;\n    //sideB.setElement(this.paper.add(\"path\"));\n    //sideB.strokeOpacity = 0;\n    // Apply theme\n    _this.applyTheme();\n    return _this;\n  }\n  /**\r\n   * Sets actual `fill` property on the SVG element, including applicable color\r\n   * modifiers.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param value  Fill\r\n   */\n  Slice3D.prototype.setFill = function (value) {\n    _super.prototype.setFill.call(this, value);\n    var colorStr;\n    if (value instanceof Color) {\n      colorStr = value.hex;\n    } else if (value instanceof LinearGradient || value instanceof RadialGradient) {\n      colorStr = value.stops.getIndex(0).color.hex;\n    } else {\n      var filter = new LightenFilter();\n      filter.lightness = -0.25;\n      this.edge.filters.push(filter);\n      this.sideA.filters.push(filter.clone());\n      this.sideB.filters.push(filter.clone());\n    }\n    if (colorStr) {\n      var edgeFill = color(colorStr).lighten(-0.25);\n      this.edge.fill = edgeFill;\n      this.sideA.fill = edgeFill;\n      this.sideB.fill = edgeFill;\n      this.edge.stroke = edgeFill;\n      this.sideA.stroke = edgeFill;\n      this.sideB.stroke = edgeFill;\n    }\n  };\n  /**\r\n   * Draws the element.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  Slice3D.prototype.draw = function () {\n    this.cornerRadius = 0;\n    this.innerCornerRadius = 0;\n    _super.prototype.draw.call(this);\n    if (this.arc !== 0 && this.radius > 0 && this.depth > 0) {\n      this.sideB.show(0);\n      this.sideA.show(0);\n      this.edge.show(0);\n      var startAngle = this.startAngle;\n      var arc = this.arc;\n      var innerRadius = this.pixelInnerRadius || 0;\n      var radiusY = this.radiusY || 0;\n      //let cornerRadius = this.cornerRadius || 0;\n      //let innerCornerRadius = this.innerCornerRadius;\n      var radius = this.radius;\n      // this is code duplicate with $path.arc. @todo to think how to avoid it\n      var endAngle = startAngle + arc;\n      //let crSin = $math.sin($math.min(arc, 45) / 2);\n      //innerCornerRadius = innerCornerRadius || cornerRadius;\n      var innerRadiusY = radiusY / radius * innerRadius;\n      //let cornerRadiusY = (radiusY / radius) * cornerRadius;\n      //let innerCornerRadiusY = (radiusY / radius) * innerCornerRadius;\n      //cornerRadius = $math.fitToRange(cornerRadius, 0, (radius - innerRadius) / 2);\n      //cornerRadiusY = $math.fitToRange(cornerRadiusY, 0, (radiusY - innerRadiusY) / 2);\n      //innerCornerRadius = $math.fitToRange(innerCornerRadius, 0, (radius - innerRadius) / 2);\n      //innerCornerRadiusY = $math.fitToRange(innerCornerRadiusY, 0, (radiusY - innerRadiusY) / 2);\n      //cornerRadius = $math.fitToRange(cornerRadius, 0, radius * crSin);\n      //cornerRadiusY = $math.fitToRange(cornerRadiusY, 0, radiusY * crSin);\n      //innerCornerRadius = $math.fitToRange(innerCornerRadius, 0, innerRadius * crSin);\n      //innerCornerRadiusY = $math.fitToRange(innerCornerRadiusY, 0, innerRadiusY * crSin);\n      //let crAngle: number = Math.asin(cornerRadius / radius / 2) * $math.DEGREES * 2;\n      //let crAngleY: number = Math.asin(cornerRadiusY / radiusY / 2) * $math.DEGREES * 2;\n      //if (innerRadius < innerCornerRadius) {\n      //\tinnerRadius = innerCornerRadius;\n      //}\n      //if (innerRadiusY < innerCornerRadiusY) {\n      //\tinnerRadiusY = innerCornerRadiusY;\n      //}\n      //let crInnerAngle: number = Math.asin(innerCornerRadius / innerRadius / 2) * $math.DEGREES * 2;\n      //let crInnerAngleY: number = Math.asin(innerCornerRadiusY / innerRadiusY / 2) * $math.DEGREES * 2;\n      //if (!$type.isNumber(crInnerAngle)) {\n      //\tcrInnerAngle = 0;\n      //}\n      //if (!$type.isNumber(crInnerAngleY)) {\n      //\tcrInnerAngleY = 0;\n      //}\n      //let middleAngle = startAngle + arc / 2;\n      //let mPoint = { x: $math.round($math.cos(middleAngle) * innerRadius, 4), y: $math.round($math.sin(middleAngle) * innerRadiusY, 4) };\n      var a0 = {\n        x: $math.cos(startAngle) * innerRadius,\n        y: $math.sin(startAngle) * innerRadiusY\n      };\n      var b0 = {\n        x: $math.cos(startAngle) * radius,\n        y: $math.sin(startAngle) * radiusY\n      };\n      var c0 = {\n        x: $math.cos(endAngle) * radius,\n        y: $math.sin(endAngle) * radiusY\n      };\n      var d0 = {\n        x: $math.cos(endAngle) * innerRadius,\n        y: $math.sin(endAngle) * innerRadiusY\n      };\n      // end of duplicate\n      var h = this.depth;\n      var ah = {\n        x: a0.x,\n        y: a0.y - h\n      };\n      var bh = {\n        x: b0.x,\n        y: b0.y - h\n      };\n      var ch = {\n        x: c0.x,\n        y: c0.y - h\n      };\n      var dh = {\n        x: d0.x,\n        y: d0.y - h\n      };\n      var edgePath = \"\";\n      var count = Math.ceil(arc / 5);\n      var step = arc / count;\n      var mangle = startAngle;\n      var prevPoint = bh;\n      for (var i = 0; i < count; i++) {\n        mangle += step;\n        if (mangle > 0 && mangle < 180) {\n          edgePath += $path.moveTo(prevPoint);\n          var pp = {\n            x: $math.cos(mangle) * radius,\n            y: $math.sin(mangle) * radiusY - h\n          };\n          edgePath += $path.lineTo({\n            x: prevPoint.x,\n            y: prevPoint.y + h\n          });\n          edgePath += $path.arcToPoint({\n            x: pp.x,\n            y: pp.y + h\n          }, radius, radiusY, true);\n          edgePath += $path.lineTo(pp);\n          edgePath += $path.arcToPoint(prevPoint, radius, radiusY);\n          edgePath += \"z\";\n          prevPoint = pp;\n        } else {\n          edgePath += $path.moveTo(prevPoint);\n          var pp = {\n            x: $math.cos(mangle) * radius,\n            y: $math.sin(mangle) * radiusY - h\n          };\n          edgePath += $path.arcToPoint(pp, radius, radiusY, true);\n          edgePath += $path.lineTo({\n            x: pp.x,\n            y: pp.y + h\n          });\n          edgePath += $path.arcToPoint({\n            x: prevPoint.x,\n            y: prevPoint.y + h\n          }, radius, radiusY);\n          edgePath += $path.lineTo(prevPoint);\n          edgePath += \"z\";\n          prevPoint = pp;\n        }\n      }\n      prevPoint = ah;\n      mangle = startAngle;\n      for (var i = 0; i < count; i++) {\n        mangle += step;\n        if (mangle > 0 && mangle < 180) {\n          edgePath += $path.moveTo(prevPoint);\n          var pp = {\n            x: $math.cos(mangle) * innerRadius,\n            y: $math.sin(mangle) * innerRadiusY - h\n          };\n          edgePath += $path.lineTo({\n            x: prevPoint.x,\n            y: prevPoint.y + h\n          });\n          edgePath += $path.arcToPoint({\n            x: pp.x,\n            y: pp.y + h\n          }, innerRadius, innerRadiusY, true);\n          edgePath += $path.lineTo(pp);\n          edgePath += $path.arcToPoint(prevPoint, innerRadius, innerRadiusY);\n          edgePath += \"z\";\n          prevPoint = pp;\n        } else {\n          edgePath += $path.moveTo(prevPoint);\n          var pp = {\n            x: $math.cos(mangle) * innerRadius,\n            y: $math.sin(mangle) * innerRadiusY - h\n          };\n          edgePath += $path.arcToPoint(pp, innerRadius, innerRadiusY, true);\n          edgePath += $path.lineTo({\n            x: pp.x,\n            y: pp.y + h\n          });\n          edgePath += $path.arcToPoint({\n            x: prevPoint.x,\n            y: prevPoint.y + h\n          }, innerRadius, innerRadiusY);\n          edgePath += $path.lineTo(prevPoint);\n          edgePath += \"z\";\n          prevPoint = pp;\n        }\n      }\n      this.edge.path = edgePath;\n      /*\r\n                  a0 = { x: $math.cos(startAngle) * (innerRadius + innerCornerRadius), y: $math.sin(startAngle) * (innerRadiusY + innerCornerRadiusY) };\r\n                  b0 = { x: $math.cos(startAngle) * (radius - cornerRadius), y: $math.sin(startAngle) * (radiusY - cornerRadiusY) };\r\n                  c0 = { x: $math.cos(endAngle) * (radius - cornerRadius), y: $math.sin(endAngle) * (radiusY - cornerRadiusY) };\r\n                  d0 = { x: $math.cos(endAngle) * (innerRadius + innerCornerRadius), y: $math.sin(endAngle) * (innerRadiusY + innerCornerRadiusY) };\r\n                  // end of duplicate\r\n      \r\n                  ah = { x: a0.x, y: a0.y - h };\r\n                  bh = { x: b0.x, y: b0.y - h };\r\n                  ch = { x: c0.x, y: c0.y - h };\r\n                  dh = { x: d0.x, y: d0.y - h };\r\n      */\n      this.sideA.path = $path.moveTo(a0) + $path.lineTo(b0) + $path.lineTo(bh) + $path.lineTo(ah) + $path.closePath();\n      this.sideB.path = $path.moveTo(c0) + $path.lineTo(d0) + $path.lineTo(dh) + $path.lineTo(ch) + $path.closePath();\n      if (this.startAngle < 90) {\n        this.sideA.toBack();\n      } else {\n        this.sideA.toFront();\n      }\n      if (this.startAngle + this.arc > 90) {\n        this.sideB.toBack();\n      } else {\n        this.sideB.toFront();\n      }\n      this.slice.dy = -h;\n    } else {\n      this.sideA.hide(0);\n      this.sideB.hide(0);\n      this.edge.hide(0);\n    }\n  };\n  Object.defineProperty(Slice3D.prototype, \"depth\", {\n    /**\r\n     * @return Depth (px)\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"depth\");\n    },\n    /**\r\n     * Depth (height) of the 3D slice in pixels.\r\n     *\r\n     * @default 20\r\n     * @param depth  Depth (px)\r\n     */\n    set: function (depth) {\n      this.setPropertyValue(\"depth\", depth, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Slice3D.prototype, \"angle\", {\n    /**\r\n     * @return Angle\r\n     */\n    get: function () {\n      var angle = this.getPropertyValue(\"angle\");\n      if (!$type.isNumber(angle)) {\n        angle = 0;\n      }\n      return angle;\n    },\n    /**\r\n     * Angle of the point of view to the 3D element. (0-360)\r\n     *\r\n     * @default 30\r\n     * @param value  Angle\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"angle\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Slice3D.prototype, \"radiusY\", {\n    /**\r\n     * @return Vertical radius (0-1)\r\n     */\n    get: function () {\n      var radiusY = this.getPropertyValue(\"radiusY\");\n      if (!$type.isNumber(radiusY)) {\n        radiusY = this.radius - this.radius * this.angle / 90;\n      }\n      return radiusY;\n    },\n    /**\r\n     * Vertical radius for creating skewed slices.\r\n     *\r\n     * This is relevant to `radius`, e.g. 0.5 will set vertical radius to half\r\n     * the `radius`.\r\n     *\r\n     * @param value Vertical radius (0-1)\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"radiusY\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Copies all properties and related data from a different instance of Axis.\r\n   *\r\n   * @param source Source Axis\r\n   */\n  Slice3D.prototype.copyFrom = function (source) {\n    _super.prototype.copyFrom.call(this, source);\n    this.edge.copyFrom(source.edge);\n    this.sideA.copyFrom(source.sideA);\n    this.sideB.copyFrom(source.sideB);\n  };\n  return Slice3D;\n}(Slice);\nexport { Slice3D };","map":{"version":3,"names":["Slice","Sprite","$math","$path","$type","Color","color","RadialGradient","LinearGradient","LightenFilter","Slice3D","_super","__extends","_this","call","className","layout","edge","createChild","shouldClone","isMeasured","toBack","angle","depth","sideA","sideB","applyTheme","prototype","setFill","value","colorStr","hex","stops","getIndex","filter","lightness","filters","push","clone","edgeFill","lighten","fill","stroke","draw","cornerRadius","innerCornerRadius","arc","radius","show","startAngle","innerRadius","pixelInnerRadius","radiusY","endAngle","innerRadiusY","a0","x","cos","y","sin","b0","c0","d0","h","ah","bh","ch","dh","edgePath","count","Math","ceil","step","mangle","prevPoint","i","moveTo","pp","lineTo","arcToPoint","path","closePath","toFront","slice","dy","hide","Object","defineProperty","get","getPropertyValue","set","setPropertyValue","isNumber","copyFrom","source"],"sources":["../../../../../../src/.internal/core/elements/3d/Slice3D.ts"],"sourcesContent":["/**\r\n * 3D slice module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Slice, ISliceProperties, ISliceAdapters, ISliceEvents } from \"../Slice\";\r\nimport { Sprite } from \"../../Sprite\";\r\nimport { IPoint } from \"../../defs/IPoint\";\r\nimport * as $math from \"../../utils/Math\";\r\nimport * as $path from \"../../rendering/Path\";\r\nimport * as $type from \"../../utils/Type\";\r\nimport { Color, color } from \"../../utils/Color\";\r\nimport { RadialGradient } from \"../../rendering/fills/RadialGradient\";\r\nimport { LinearGradient } from \"../../rendering/fills/LinearGradient\";\r\nimport { Pattern } from \"../../rendering/fills/Pattern\";\r\nimport { LightenFilter } from \"../../rendering/filters/LightenFilter\";\r\n\r\n/**\r\n * Defines properties for [[Slice3D]].\r\n */\r\nexport interface ISlice3DProperties extends ISliceProperties {\r\n\r\n\t/**\r\n\t * Depth (height) of the 3D slice in pixels.\r\n\t *\r\n\t * @default 20\r\n\t */\r\n\tdepth?: number;\r\n\r\n\t/**\r\n\t * Angle of the point of view to the 3D element. (0-360)\r\n\t *\r\n\t * @default 30\r\n\t */\r\n\tangle?: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[Slice3D]].\r\n */\r\nexport interface ISlice3DEvents extends ISliceEvents { }\r\n\r\n/**\r\n * Defines adapters for [[Slice3D]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ISlice3DAdapters extends ISliceAdapters, ISlice3DProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Used to draw a 3D slice of a Pie chart.\r\n *\r\n * @see {@link ISlice3DEvents} for a list of available events\r\n * @see {@link ISlice3DAdapters} for a list of available Adapters\r\n */\r\nexport class Slice3D extends Slice {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: ISlice3DProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: ISlice3DAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: ISlice3DEvents;\r\n\r\n\t/**\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic edge: Sprite;\r\n\r\n\t/**\r\n\t * Side element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic sideA: Sprite;\r\n\r\n\t/**\r\n\t * Side element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic sideB: Sprite;\r\n\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"Slice3D\";\r\n\t\tthis.layout = \"none\";\r\n\r\n\t\t// Create edge container\r\n\t\tlet edge = this.createChild(Sprite);\r\n\t\tthis.edge = edge;\r\n\t\tedge.shouldClone = false;\r\n\t\tedge.isMeasured = false;\r\n\t\tedge.toBack();\r\n\r\n\t\t// Set defaults\r\n\t\tthis.angle = 30;\r\n\t\tthis.depth = 20;\r\n\r\n\t\t// Create side A element\r\n\t\tlet sideA = this.createChild(Sprite);\r\n\t\tthis.sideA = sideA;\r\n\t\tsideA.shouldClone = false;\r\n\t\tsideA.isMeasured = false;\r\n\t\t//sideA.setElement(this.paper.add(\"path\"));\r\n\t\t//sideA.strokeOpacity = 0;\r\n\r\n\t\t// Crate side B element\r\n\t\tlet sideB = this.createChild(Sprite);\r\n\t\tthis.sideB = sideB;\r\n\t\tsideB.shouldClone = false;\r\n\t\tsideB.isMeasured = false;\r\n\t\t//sideB.setElement(this.paper.add(\"path\"));\r\n\t\t//sideB.strokeOpacity = 0;\r\n\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Sets actual `fill` property on the SVG element, including applicable color\r\n\t * modifiers.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param value  Fill\r\n\t */\r\n\tprotected setFill(value: $type.Optional<Color | Pattern | LinearGradient | RadialGradient>): void {\r\n\t\tsuper.setFill(value);\r\n\r\n\t\tlet colorStr: string;\r\n\t\tif (value instanceof Color) {\r\n\t\t\tcolorStr = value.hex;\r\n\t\t}\r\n\t\telse if (value instanceof LinearGradient || value instanceof RadialGradient) {\r\n\t\t\tcolorStr = value.stops.getIndex(0).color.hex;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tlet filter = new LightenFilter();\r\n\t\t\tfilter.lightness = -0.25;\r\n\t\t\tthis.edge.filters.push(filter);\r\n\t\t\tthis.sideA.filters.push(filter.clone());\r\n\t\t\tthis.sideB.filters.push(filter.clone());\r\n\t\t}\r\n\r\n\t\tif (colorStr) {\r\n\t\t\tlet edgeFill = color(colorStr).lighten(-0.25);\r\n\r\n\t\t\tthis.edge.fill = edgeFill;\r\n\t\t\tthis.sideA.fill = edgeFill;\r\n\t\t\tthis.sideB.fill = edgeFill;\r\n\r\n\t\t\tthis.edge.stroke = edgeFill;\r\n\t\t\tthis.sideA.stroke = edgeFill;\r\n\t\t\tthis.sideB.stroke = edgeFill;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Draws the element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic draw(): void {\r\n\t\tthis.cornerRadius = 0;\r\n\t\tthis.innerCornerRadius = 0;\r\n\r\n\t\tsuper.draw();\r\n\r\n\t\tif (this.arc !== 0 && this.radius > 0 && this.depth > 0) {\r\n\t\t\tthis.sideB.show(0);\r\n\t\t\tthis.sideA.show(0);\r\n\t\t\tthis.edge.show(0);\r\n\r\n\t\t\tlet startAngle = this.startAngle;\r\n\t\t\tlet arc = this.arc;\r\n\t\t\tlet innerRadius = this.pixelInnerRadius || 0;\r\n\t\t\tlet radiusY = this.radiusY || 0;\r\n\r\n\t\t\t//let cornerRadius = this.cornerRadius || 0;\r\n\t\t\t//let innerCornerRadius = this.innerCornerRadius;\r\n\t\t\tlet radius = this.radius;\r\n\r\n\t\t\t// this is code duplicate with $path.arc. @todo to think how to avoid it\r\n\r\n\t\t\tlet endAngle = startAngle + arc;\r\n\t\t\t//let crSin = $math.sin($math.min(arc, 45) / 2);\r\n\r\n\t\t\t//innerCornerRadius = innerCornerRadius || cornerRadius;\r\n\r\n\t\t\tlet innerRadiusY = (radiusY / radius) * innerRadius;\r\n\t\t\t//let cornerRadiusY = (radiusY / radius) * cornerRadius;\r\n\t\t\t//let innerCornerRadiusY = (radiusY / radius) * innerCornerRadius;\r\n\r\n\t\t\t//cornerRadius = $math.fitToRange(cornerRadius, 0, (radius - innerRadius) / 2);\r\n\t\t\t//cornerRadiusY = $math.fitToRange(cornerRadiusY, 0, (radiusY - innerRadiusY) / 2);\r\n\r\n\t\t\t//innerCornerRadius = $math.fitToRange(innerCornerRadius, 0, (radius - innerRadius) / 2);\r\n\t\t\t//innerCornerRadiusY = $math.fitToRange(innerCornerRadiusY, 0, (radiusY - innerRadiusY) / 2);\r\n\r\n\t\t\t//cornerRadius = $math.fitToRange(cornerRadius, 0, radius * crSin);\r\n\t\t\t//cornerRadiusY = $math.fitToRange(cornerRadiusY, 0, radiusY * crSin);\r\n\r\n\t\t\t//innerCornerRadius = $math.fitToRange(innerCornerRadius, 0, innerRadius * crSin);\r\n\t\t\t//innerCornerRadiusY = $math.fitToRange(innerCornerRadiusY, 0, innerRadiusY * crSin);\r\n\r\n\t\t\t//let crAngle: number = Math.asin(cornerRadius / radius / 2) * $math.DEGREES * 2;\r\n\t\t\t//let crAngleY: number = Math.asin(cornerRadiusY / radiusY / 2) * $math.DEGREES * 2;\r\n\r\n\t\t\t//if (innerRadius < innerCornerRadius) {\r\n\t\t\t//\tinnerRadius = innerCornerRadius;\r\n\t\t\t//}\r\n\r\n\t\t\t//if (innerRadiusY < innerCornerRadiusY) {\r\n\t\t\t//\tinnerRadiusY = innerCornerRadiusY;\r\n\t\t\t//}\r\n\r\n\t\t\t//let crInnerAngle: number = Math.asin(innerCornerRadius / innerRadius / 2) * $math.DEGREES * 2;\r\n\t\t\t//let crInnerAngleY: number = Math.asin(innerCornerRadiusY / innerRadiusY / 2) * $math.DEGREES * 2;\r\n\r\n\t\t\t//if (!$type.isNumber(crInnerAngle)) {\r\n\t\t\t//\tcrInnerAngle = 0;\r\n\t\t\t//}\r\n\t\t\t//if (!$type.isNumber(crInnerAngleY)) {\r\n\t\t\t//\tcrInnerAngleY = 0;\r\n\t\t\t//}\r\n\r\n\t\t\t//let middleAngle = startAngle + arc / 2;\r\n\t\t\t//let mPoint = { x: $math.round($math.cos(middleAngle) * innerRadius, 4), y: $math.round($math.sin(middleAngle) * innerRadiusY, 4) };\r\n\r\n\t\t\tlet a0 = { x: $math.cos(startAngle) * (innerRadius), y: $math.sin(startAngle) * (innerRadiusY) };\r\n\t\t\tlet b0 = { x: $math.cos(startAngle) * (radius), y: $math.sin(startAngle) * (radiusY) };\r\n\t\t\tlet c0 = { x: $math.cos(endAngle) * (radius), y: $math.sin(endAngle) * (radiusY) };\r\n\t\t\tlet d0 = { x: $math.cos(endAngle) * (innerRadius), y: $math.sin(endAngle) * (innerRadiusY) };\r\n\t\t\t// end of duplicate\r\n\r\n\t\t\tlet h: number = this.depth;\r\n\t\t\tlet ah: IPoint = { x: a0.x, y: a0.y - h };\r\n\t\t\tlet bh: IPoint = { x: b0.x, y: b0.y - h };\r\n\t\t\tlet ch: IPoint = { x: c0.x, y: c0.y - h };\r\n\t\t\tlet dh: IPoint = { x: d0.x, y: d0.y - h };\r\n\r\n\t\t\tlet edgePath = \"\";\r\n\t\t\tlet count = Math.ceil(arc / 5);\r\n\t\t\tlet step = arc / count;\r\n\t\t\tlet mangle = startAngle;\r\n\r\n\t\t\tlet prevPoint = bh;\r\n\r\n\r\n\t\t\tfor (let i = 0; i < count; i++) {\r\n\t\t\t\tmangle += step;\r\n\t\t\t\tif (mangle > 0 && mangle < 180) {\r\n\t\t\t\t\tedgePath += $path.moveTo(prevPoint);\r\n\t\t\t\t\tlet pp = { x: $math.cos(mangle) * (radius), y: $math.sin(mangle) * (radiusY) - h };\r\n\t\t\t\t\tedgePath += $path.lineTo({ x: prevPoint.x, y: prevPoint.y + h });\r\n\t\t\t\t\tedgePath += $path.arcToPoint({ x: pp.x, y: pp.y + h }, radius, radiusY, true);\r\n\t\t\t\t\tedgePath += $path.lineTo(pp);\r\n\t\t\t\t\tedgePath += $path.arcToPoint(prevPoint, radius, radiusY);\r\n\t\t\t\t\tedgePath += \"z\";\r\n\t\t\t\t\tprevPoint = pp;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tedgePath += $path.moveTo(prevPoint);\r\n\t\t\t\t\tlet pp = { x: $math.cos(mangle) * (radius), y: $math.sin(mangle) * (radiusY) - h };\r\n\t\t\t\t\tedgePath += $path.arcToPoint(pp, radius, radiusY, true);\r\n\t\t\t\t\tedgePath += $path.lineTo({ x: pp.x, y: pp.y + h });\r\n\t\t\t\t\tedgePath += $path.arcToPoint({ x: prevPoint.x, y: prevPoint.y + h }, radius, radiusY);\r\n\t\t\t\t\tedgePath += $path.lineTo(prevPoint);\r\n\t\t\t\t\tedgePath += \"z\";\r\n\t\t\t\t\tprevPoint = pp;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tprevPoint = ah;\r\n\t\t\tmangle = startAngle;\r\n\r\n\r\n\t\t\tfor (let i = 0; i < count; i++) {\r\n\t\t\t\tmangle += step;\r\n\t\t\t\tif (mangle > 0 && mangle < 180) {\r\n\t\t\t\t\tedgePath += $path.moveTo(prevPoint);\r\n\t\t\t\t\tlet pp = { x: $math.cos(mangle) * (innerRadius), y: $math.sin(mangle) * (innerRadiusY) - h };\r\n\t\t\t\t\tedgePath += $path.lineTo({ x: prevPoint.x, y: prevPoint.y + h });\r\n\t\t\t\t\tedgePath += $path.arcToPoint({ x: pp.x, y: pp.y + h }, innerRadius, innerRadiusY, true);\r\n\t\t\t\t\tedgePath += $path.lineTo(pp);\r\n\t\t\t\t\tedgePath += $path.arcToPoint(prevPoint, innerRadius, innerRadiusY);\r\n\t\t\t\t\tedgePath += \"z\";\r\n\t\t\t\t\tprevPoint = pp;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tedgePath += $path.moveTo(prevPoint);\r\n\t\t\t\t\tlet pp = { x: $math.cos(mangle) * (innerRadius), y: $math.sin(mangle) * (innerRadiusY) - h };\r\n\t\t\t\t\tedgePath += $path.arcToPoint(pp, innerRadius, innerRadiusY, true);\r\n\t\t\t\t\tedgePath += $path.lineTo({ x: pp.x, y: pp.y + h });\r\n\t\t\t\t\tedgePath += $path.arcToPoint({ x: prevPoint.x, y: prevPoint.y + h }, innerRadius, innerRadiusY);\r\n\t\t\t\t\tedgePath += $path.lineTo(prevPoint);\r\n\t\t\t\t\tedgePath += \"z\";\r\n\t\t\t\t\tprevPoint = pp;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tthis.edge.path = edgePath;\r\n/*\r\n\t\t\ta0 = { x: $math.cos(startAngle) * (innerRadius + innerCornerRadius), y: $math.sin(startAngle) * (innerRadiusY + innerCornerRadiusY) };\r\n\t\t\tb0 = { x: $math.cos(startAngle) * (radius - cornerRadius), y: $math.sin(startAngle) * (radiusY - cornerRadiusY) };\r\n\t\t\tc0 = { x: $math.cos(endAngle) * (radius - cornerRadius), y: $math.sin(endAngle) * (radiusY - cornerRadiusY) };\r\n\t\t\td0 = { x: $math.cos(endAngle) * (innerRadius + innerCornerRadius), y: $math.sin(endAngle) * (innerRadiusY + innerCornerRadiusY) };\r\n\t\t\t// end of duplicate\r\n\r\n\t\t\tah = { x: a0.x, y: a0.y - h };\r\n\t\t\tbh = { x: b0.x, y: b0.y - h };\r\n\t\t\tch = { x: c0.x, y: c0.y - h };\r\n\t\t\tdh = { x: d0.x, y: d0.y - h };\r\n*/\r\n\t\t\tthis.sideA.path = $path.moveTo(a0) + $path.lineTo(b0) + $path.lineTo(bh) + $path.lineTo(ah) + $path.closePath();\r\n\t\t\tthis.sideB.path = $path.moveTo(c0) + $path.lineTo(d0) + $path.lineTo(dh) + $path.lineTo(ch) + $path.closePath();\r\n\r\n\t\t\tif (this.startAngle < 90) {\r\n\t\t\t\tthis.sideA.toBack();\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.sideA.toFront();\r\n\t\t\t}\r\n\r\n\t\t\tif (this.startAngle + this.arc > 90) {\r\n\t\t\t\tthis.sideB.toBack();\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.sideB.toFront();\r\n\t\t\t}\r\n\r\n\t\t\tthis.slice.dy = -h;\t\t\t\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.sideA.hide(0);\r\n\t\t\tthis.sideB.hide(0);\r\n\t\t\tthis.edge.hide(0);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Depth (height) of the 3D slice in pixels.\r\n\t *\r\n\t * @default 20\r\n\t * @param depth  Depth (px)\r\n\t */\r\n\tpublic set depth(depth: number) {\r\n\t\tthis.setPropertyValue(\"depth\", depth, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Depth (px)\r\n\t */\r\n\tpublic get depth(): number {\r\n\t\treturn this.getPropertyValue(\"depth\");\r\n\t}\r\n\r\n\t/**\r\n\t * Angle of the point of view to the 3D element. (0-360)\r\n\t *\r\n\t * @default 30\r\n\t * @param value  Angle\r\n\t */\r\n\tpublic set angle(value: number) {\r\n\t\tthis.setPropertyValue(\"angle\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Angle\r\n\t */\r\n\tpublic get angle(): number {\r\n\t\tlet angle: number = this.getPropertyValue(\"angle\");\r\n\t\tif (!$type.isNumber(angle)) {\r\n\t\t\tangle = 0;\r\n\t\t}\r\n\t\treturn angle;\r\n\t}\r\n\r\n\t/**\r\n\t * @return Vertical radius (0-1)\r\n\t */\r\n\tpublic get radiusY(): number {\r\n\t\tlet radiusY: number = this.getPropertyValue(\"radiusY\");\r\n\t\tif (!$type.isNumber(radiusY)) {\r\n\t\t\tradiusY = this.radius - this.radius * this.angle / 90;\r\n\t\t}\r\n\t\treturn radiusY;\r\n\t}\r\n\r\n\t/**\r\n\t * Vertical radius for creating skewed slices.\r\n\t *\r\n\t * This is relevant to `radius`, e.g. 0.5 will set vertical radius to half\r\n\t * the `radius`.\r\n\t *\r\n\t * @param value Vertical radius (0-1)\r\n\t */\r\n\tpublic set radiusY(value: number) {\r\n\t\tthis.setPropertyValue(\"radiusY\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all properties and related data from a different instance of Axis.\r\n\t *\r\n\t * @param source Source Axis\r\n\t */\r\n\tpublic copyFrom(source: this): void {\r\n\t\tsuper.copyFrom(source);\r\n\t\tthis.edge.copyFrom(source.edge);\r\n\t\tthis.sideA.copyFrom(source.sideA);\r\n\t\tthis.sideB.copyFrom(source.sideB);\r\n\t}\r\n\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}