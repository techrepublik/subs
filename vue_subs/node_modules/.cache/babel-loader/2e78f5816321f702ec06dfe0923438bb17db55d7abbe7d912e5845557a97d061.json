{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.filter.js\";\nimport \"core-js/modules/esnext.iterator.for-each.js\";\nimport \"core-js/modules/esnext.iterator.map.js\";\nimport \"core-js/modules/esnext.iterator.some.js\";\nimport { geoBounds as bounds, geoCentroid as centroid, geoInterpolate as interpolate, geoProjection as projection } from \"d3-geo\";\nimport { abs, degrees, epsilon, radians } from \"../math.js\";\nimport { default as matrix, multiply, inverse } from \"./matrix.js\";\n\n// Creates a polyhedral projection.\n//  * root: a spanning tree of polygon faces.  Nodes are automatically\n//    augmented with a transform matrix.\n//  * face: a function that returns the appropriate node for a given {lambda, phi}\n//    point (radians).\nexport default function (root, face) {\n  recurse(root, {\n    transform: null\n  });\n  function recurse(node, parent) {\n    node.edges = faceEdges(node.face);\n    // Find shared edge.\n    if (parent.face) {\n      var shared = node.shared = sharedEdge(node.face, parent.face),\n        m = matrix(shared.map(parent.project), shared.map(node.project));\n      node.transform = parent.transform ? multiply(parent.transform, m) : m;\n      // Replace shared edge in parent edges array.\n      var edges = parent.edges;\n      for (var i = 0, n = edges.length; i < n; ++i) {\n        if (pointEqual(shared[0], edges[i][1]) && pointEqual(shared[1], edges[i][0])) edges[i] = node;\n        if (pointEqual(shared[0], edges[i][0]) && pointEqual(shared[1], edges[i][1])) edges[i] = node;\n      }\n      edges = node.edges;\n      for (i = 0, n = edges.length; i < n; ++i) {\n        if (pointEqual(shared[0], edges[i][0]) && pointEqual(shared[1], edges[i][1])) edges[i] = parent;\n        if (pointEqual(shared[0], edges[i][1]) && pointEqual(shared[1], edges[i][0])) edges[i] = parent;\n      }\n    } else {\n      node.transform = parent.transform;\n    }\n    if (node.children) {\n      node.children.forEach(function (child) {\n        recurse(child, node);\n      });\n    }\n    return node;\n  }\n  function forward(lambda, phi) {\n    var node = face(lambda, phi),\n      point = node.project([lambda * degrees, phi * degrees]),\n      t;\n    if (t = node.transform) {\n      return [t[0] * point[0] + t[1] * point[1] + t[2], -(t[3] * point[0] + t[4] * point[1] + t[5])];\n    }\n    point[1] = -point[1];\n    return point;\n  }\n\n  // Naive inverse!  A faster solution would use bounding boxes, or even a\n  // polygonal quadtree.\n  if (hasInverse(root)) forward.invert = function (x, y) {\n    var coordinates = faceInvert(root, [x, -y]);\n    return coordinates && (coordinates[0] *= radians, coordinates[1] *= radians, coordinates);\n  };\n  function faceInvert(node, coordinates) {\n    var invert = node.project.invert,\n      t = node.transform,\n      point = coordinates;\n    if (t) {\n      t = inverse(t);\n      point = [t[0] * point[0] + t[1] * point[1] + t[2], t[3] * point[0] + t[4] * point[1] + t[5]];\n    }\n    if (invert && node === faceDegrees(p = invert(point))) return p;\n    var p,\n      children = node.children;\n    for (var i = 0, n = children && children.length; i < n; ++i) {\n      if (p = faceInvert(children[i], coordinates)) return p;\n    }\n  }\n  function faceDegrees(coordinates) {\n    return face(coordinates[0] * radians, coordinates[1] * radians);\n  }\n  var proj = projection(forward),\n    stream_ = proj.stream;\n  proj.stream = function (stream) {\n    var rotate = proj.rotate(),\n      rotateStream = stream_(stream),\n      sphereStream = (proj.rotate([0, 0]), stream_(stream));\n    proj.rotate(rotate);\n    rotateStream.sphere = function () {\n      sphereStream.polygonStart();\n      sphereStream.lineStart();\n      outline(sphereStream, root);\n      sphereStream.lineEnd();\n      sphereStream.polygonEnd();\n    };\n    return rotateStream;\n  };\n  return proj.angle(-30);\n}\nfunction outline(stream, node, parent) {\n  var point,\n    edges = node.edges,\n    n = edges.length,\n    edge,\n    multiPoint = {\n      type: \"MultiPoint\",\n      coordinates: node.face\n    },\n    notPoles = node.face.filter(function (d) {\n      return abs(d[1]) !== 90;\n    }),\n    b = bounds({\n      type: \"MultiPoint\",\n      coordinates: notPoles\n    }),\n    inside = false,\n    j = -1,\n    dx = b[1][0] - b[0][0];\n  // TODO\n  var c = dx === 180 || dx === 360 ? [(b[0][0] + b[1][0]) / 2, (b[0][1] + b[1][1]) / 2] : centroid(multiPoint);\n  // First find the shared edgeâ€¦\n  if (parent) while (++j < n) {\n    if (edges[j] === parent) break;\n  }\n  ++j;\n  for (var i = 0; i < n; ++i) {\n    edge = edges[(i + j) % n];\n    if (Array.isArray(edge)) {\n      if (!inside) {\n        stream.point((point = interpolate(edge[0], c)(epsilon))[0], point[1]);\n        inside = true;\n      }\n      stream.point((point = interpolate(edge[1], c)(epsilon))[0], point[1]);\n    } else {\n      inside = false;\n      if (edge !== parent) outline(stream, edge, node);\n    }\n  }\n}\n\n// Tests equality of two spherical points.\nfunction pointEqual(a, b) {\n  return a && b && a[0] === b[0] && a[1] === b[1];\n}\n\n// Finds a shared edge given two clockwise polygons.\nfunction sharedEdge(a, b) {\n  var x,\n    y,\n    n = a.length,\n    found = null;\n  for (var i = 0; i < n; ++i) {\n    x = a[i];\n    for (var j = b.length; --j >= 0;) {\n      y = b[j];\n      if (x[0] === y[0] && x[1] === y[1]) {\n        if (found) return [found, x];\n        found = x;\n      }\n    }\n  }\n}\n\n// Converts an array of n face vertices to an array of n + 1 edges.\nfunction faceEdges(face) {\n  var n = face.length,\n    edges = [];\n  for (var a = face[n - 1], i = 0; i < n; ++i) edges.push([a, a = face[i]]);\n  return edges;\n}\nfunction hasInverse(node) {\n  return node.project.invert || node.children && node.children.some(hasInverse);\n}","map":{"version":3,"names":["geoBounds","bounds","geoCentroid","centroid","geoInterpolate","interpolate","geoProjection","projection","abs","degrees","epsilon","radians","default","matrix","multiply","inverse","root","face","recurse","transform","node","parent","edges","faceEdges","shared","sharedEdge","m","map","project","i","n","length","pointEqual","children","forEach","child","forward","lambda","phi","point","t","hasInverse","invert","x","y","coordinates","faceInvert","faceDegrees","p","proj","stream_","stream","rotate","rotateStream","sphereStream","sphere","polygonStart","lineStart","outline","lineEnd","polygonEnd","angle","edge","multiPoint","type","notPoles","filter","d","b","inside","j","dx","c","Array","isArray","a","found","push","some"],"sources":["/home/josh/Documents/projects/subs/vue_subs/node_modules/d3-geo-projection/src/polyhedral/index.js"],"sourcesContent":["import {geoBounds as bounds, geoCentroid as centroid, geoInterpolate as interpolate, geoProjection as projection} from \"d3-geo\";\nimport {abs, degrees, epsilon, radians} from \"../math.js\";\nimport {default as matrix, multiply, inverse} from \"./matrix.js\";\n\n// Creates a polyhedral projection.\n//  * root: a spanning tree of polygon faces.  Nodes are automatically\n//    augmented with a transform matrix.\n//  * face: a function that returns the appropriate node for a given {lambda, phi}\n//    point (radians).\nexport default function(root, face) {\n\n  recurse(root, {transform: null});\n\n  function recurse(node, parent) {\n    node.edges = faceEdges(node.face);\n    // Find shared edge.\n    if (parent.face) {\n      var shared = node.shared = sharedEdge(node.face, parent.face),\n          m = matrix(shared.map(parent.project), shared.map(node.project));\n      node.transform = parent.transform ? multiply(parent.transform, m) : m;\n      // Replace shared edge in parent edges array.\n      var edges = parent.edges;\n      for (var i = 0, n = edges.length; i < n; ++i) {\n        if (pointEqual(shared[0], edges[i][1]) && pointEqual(shared[1], edges[i][0])) edges[i] = node;\n        if (pointEqual(shared[0], edges[i][0]) && pointEqual(shared[1], edges[i][1])) edges[i] = node;\n      }\n      edges = node.edges;\n      for (i = 0, n = edges.length; i < n; ++i) {\n        if (pointEqual(shared[0], edges[i][0]) && pointEqual(shared[1], edges[i][1])) edges[i] = parent;\n        if (pointEqual(shared[0], edges[i][1]) && pointEqual(shared[1], edges[i][0])) edges[i] = parent;\n      }\n    } else {\n      node.transform = parent.transform;\n    }\n    if (node.children) {\n      node.children.forEach(function(child) {\n        recurse(child, node);\n      });\n    }\n    return node;\n  }\n\n  function forward(lambda, phi) {\n    var node = face(lambda, phi),\n        point = node.project([lambda * degrees, phi * degrees]),\n        t;\n    if (t = node.transform) {\n      return [\n        t[0] * point[0] + t[1] * point[1] + t[2],\n        -(t[3] * point[0] + t[4] * point[1] + t[5])\n      ];\n    }\n    point[1] = -point[1];\n    return point;\n  }\n\n  // Naive inverse!  A faster solution would use bounding boxes, or even a\n  // polygonal quadtree.\n  if (hasInverse(root)) forward.invert = function(x, y) {\n    var coordinates = faceInvert(root, [x, -y]);\n    return coordinates && (coordinates[0] *= radians, coordinates[1] *= radians, coordinates);\n  };\n\n  function faceInvert(node, coordinates) {\n    var invert = node.project.invert,\n        t = node.transform,\n        point = coordinates;\n    if (t) {\n      t = inverse(t);\n      point = [\n        t[0] * point[0] + t[1] * point[1] + t[2],\n        (t[3] * point[0] + t[4] * point[1] + t[5])\n      ];\n    }\n    if (invert && node === faceDegrees(p = invert(point))) return p;\n    var p,\n        children = node.children;\n    for (var i = 0, n = children && children.length; i < n; ++i) {\n      if (p = faceInvert(children[i], coordinates)) return p;\n    }\n  }\n\n  function faceDegrees(coordinates) {\n    return face(coordinates[0] * radians, coordinates[1] * radians);\n  }\n\n  var proj = projection(forward),\n      stream_ = proj.stream;\n\n  proj.stream = function(stream) {\n    var rotate = proj.rotate(),\n        rotateStream = stream_(stream),\n        sphereStream = (proj.rotate([0, 0]), stream_(stream));\n    proj.rotate(rotate);\n    rotateStream.sphere = function() {\n      sphereStream.polygonStart();\n      sphereStream.lineStart();\n      outline(sphereStream, root);\n      sphereStream.lineEnd();\n      sphereStream.polygonEnd();\n    };\n    return rotateStream;\n  };\n\n  return proj.angle(-30);\n}\n\nfunction outline(stream, node, parent) {\n  var point,\n      edges = node.edges,\n      n = edges.length,\n      edge,\n      multiPoint = {type: \"MultiPoint\", coordinates: node.face},\n      notPoles = node.face.filter(function(d) { return abs(d[1]) !== 90; }),\n      b = bounds({type: \"MultiPoint\", coordinates: notPoles}),\n      inside = false,\n      j = -1,\n      dx = b[1][0] - b[0][0];\n  // TODO\n  var c = dx === 180 || dx === 360\n      ? [(b[0][0] + b[1][0]) / 2, (b[0][1] + b[1][1]) / 2]\n      : centroid(multiPoint);\n  // First find the shared edgeâ€¦\n  if (parent) while (++j < n) {\n    if (edges[j] === parent) break;\n  }\n  ++j;\n  for (var i = 0; i < n; ++i) {\n    edge = edges[(i + j) % n];\n    if (Array.isArray(edge)) {\n      if (!inside) {\n        stream.point((point = interpolate(edge[0], c)(epsilon))[0], point[1]);\n        inside = true;\n      }\n      stream.point((point = interpolate(edge[1], c)(epsilon))[0], point[1]);\n    } else {\n      inside = false;\n      if (edge !== parent) outline(stream, edge, node);\n    }\n  }\n}\n\n// Tests equality of two spherical points.\nfunction pointEqual(a, b) {\n  return a && b && a[0] === b[0] && a[1] === b[1];\n}\n\n// Finds a shared edge given two clockwise polygons.\nfunction sharedEdge(a, b) {\n  var x, y, n = a.length, found = null;\n  for (var i = 0; i < n; ++i) {\n    x = a[i];\n    for (var j = b.length; --j >= 0;) {\n      y = b[j];\n      if (x[0] === y[0] && x[1] === y[1]) {\n        if (found) return [found, x];\n        found = x;\n      }\n    }\n  }\n}\n\n// Converts an array of n face vertices to an array of n + 1 edges.\nfunction faceEdges(face) {\n  var n = face.length,\n      edges = [];\n  for (var a = face[n - 1], i = 0; i < n; ++i) edges.push([a, a = face[i]]);\n  return edges;\n}\n\nfunction hasInverse(node) {\n  return node.project.invert || node.children && node.children.some(hasInverse);\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}