{"ast":null,"code":"import { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\nimport { Pattern } from \"./Pattern\";\nimport { registry } from \"../../Registry\";\nimport * as $path from \"../../rendering/Path\";\n;\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n/**\r\n * Line pattern.\r\n */\nvar LinePattern = /** @class */function (_super) {\n  __extends(LinePattern, _super);\n  /**\r\n   * Constructor\r\n   */\n  function LinePattern() {\n    var _this = _super.call(this) || this;\n    _this.properties[\"gap\"] = 0;\n    _this._line = _this.paper.add(\"path\");\n    _this.addElement(_this._line);\n    return _this;\n  }\n  /**\r\n   * Draws the pattern.\r\n   */\n  LinePattern.prototype.draw = function () {\n    _super.prototype.draw.call(this);\n    if (Math.round(this.rotation / 90) != this.rotation / 90) {\n      this.properties[\"shapeRendering\"] = \"auto\";\n    }\n    if (this._line) {\n      var w = this.width;\n      var h = this.height;\n      var path = \"\";\n      if (!this.gap) {\n        if (Math.round(this.rotation / 90) != this.rotation / 90) {\n          path = $path.moveTo({\n            x: -w,\n            y: h / 2\n          }) + $path.lineTo({\n            x: w * 2,\n            y: h / 2\n          });\n          this.properties[\"rotationX\"] = this.width / 2;\n          this.properties[\"rotationY\"] = this.height / 2;\n        } else {\n          path = $path.moveTo({\n            x: 0,\n            y: 0\n          }) + $path.lineTo({\n            x: w,\n            y: 0\n          });\n        }\n      } else {\n        var step = this.gap + this.strokeWidth;\n        var count = this.height / step;\n        for (var i = -count / 2; i < count * 1.5; i++) {\n          if (Math.round(this.rotation / 90) != this.rotation / 90) {\n            path += $path.moveTo({\n              x: -w,\n              y: (i + 0.5) * step\n            }) + $path.lineTo({\n              x: w * 2,\n              y: (i + 0.5) * step\n            });\n            this.properties[\"rotationX\"] = this.width / 2;\n            this.properties[\"rotationY\"] = this.height / 2;\n          } else {\n            path += $path.moveTo({\n              x: -w,\n              y: i * step\n            }) + $path.lineTo({\n              x: w * 2,\n              y: i * step\n            });\n          }\n        }\n      }\n      this._line.attr({\n        \"d\": path\n      });\n    }\n  };\n  Object.defineProperty(LinePattern.prototype, \"gap\", {\n    /**\r\n     * @return gap\r\n     */\n    get: function () {\n      return this.properties[\"gap\"];\n    },\n    /**\r\n     * Number of pixels between pattern lines.\r\n     *\r\n     * The pattern will automatically draw required number of lines to fill\r\n     * pattern area maintaining `gap` distance between them.\r\n     *\r\n     * 0 (zero) means only single line will be drawn.\r\n     *\r\n     * @default 0\r\n     * @since 4.7.7\r\n     */\n    set: function (value) {\n      this.properties[\"gap\"] = value;\n      this.draw();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return LinePattern;\n}(Pattern);\nexport { LinePattern };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\nregistry.registeredClasses[\"LinePattern\"] = LinePattern;","map":{"version":3,"names":["Pattern","registry","$path","LinePattern","_super","__extends","_this","call","properties","_line","paper","add","addElement","prototype","draw","Math","round","rotation","w","width","h","height","path","gap","moveTo","x","y","lineTo","step","strokeWidth","count","i","attr","Object","defineProperty","get","set","value","registeredClasses"],"sources":["../../../../../../src/.internal/core/rendering/fills/LinePattern.ts"],"sourcesContent":["/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Pattern, PatternProperties } from \"./Pattern\";\r\nimport { AMElement } from \"../AMElement\";\r\nimport { registry } from \"../../Registry\";\r\nimport * as $path from \"../../rendering/Path\";\r\n\r\nexport interface LinePatternProperties extends PatternProperties {\r\n\tgap: number;\r\n};\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Line pattern.\r\n */\r\nexport class LinePattern extends Pattern {\r\n\r\n\t/**\r\n\t * SVG `<line>` element used for pattern.\r\n\t */\r\n\tprotected _line: AMElement;\r\n\r\n\t/**\r\n\t * Defines property types.\r\n\t */\r\n\tpublic _properties!: LinePatternProperties;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.properties[\"gap\"] = 0;\r\n\t\tthis._line = this.paper.add(\"path\");\r\n\t\tthis.addElement(this._line);\r\n\t}\r\n\r\n\t/**\r\n\t * Draws the pattern.\r\n\t */\r\n\tprotected draw(): void {\r\n\t\tsuper.draw();\r\n\t\tif (Math.round(this.rotation / 90) != this.rotation / 90) {\r\n\t\t\tthis.properties[\"shapeRendering\"] = \"auto\";\r\n\t\t}\r\n\t\tif (this._line) {\r\n\t\t\tlet w = this.width;\r\n\t\t\tlet h = this.height;\r\n\r\n\t\t\tlet path = \"\";\r\n\r\n\t\t\tif (!this.gap) {\r\n\t\t\t\tif (Math.round(this.rotation / 90) != this.rotation / 90) {\r\n\t\t\t\t\tpath = $path.moveTo({ x: -w, y: h / 2 }) + $path.lineTo({ x: w * 2, y: h / 2 });\r\n\r\n\t\t\t\t\tthis.properties[\"rotationX\"] = this.width / 2;\r\n\t\t\t\t\tthis.properties[\"rotationY\"] = this.height / 2;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tpath = $path.moveTo({ x: 0, y: 0 }) + $path.lineTo({ x: w, y: 0 });\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tlet step = this.gap + this.strokeWidth;\r\n\t\t\t\tlet count = this.height / step;\r\n\r\n\t\t\t\tfor (let i = -count / 2; i < count * 1.5; i++) {\r\n\t\t\t\t\tif (Math.round(this.rotation / 90) != this.rotation / 90) {\r\n\t\t\t\t\t\tpath += $path.moveTo({ x: -w, y: (i + 0.5) * step }) + $path.lineTo({ x: w * 2, y: (i + 0.5) * step });\r\n\r\n\t\t\t\t\t\tthis.properties[\"rotationX\"] = this.width / 2;\r\n\t\t\t\t\t\tthis.properties[\"rotationY\"] = this.height / 2;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tpath += $path.moveTo({ x: -w, y: i * step }) + $path.lineTo({ x: w * 2, y: i * step });\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tthis._line.attr({ \"d\": path });\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Number of pixels between pattern lines.\r\n\t *\r\n\t * The pattern will automatically draw required number of lines to fill\r\n\t * pattern area maintaining `gap` distance between them.\r\n\t *\r\n\t * 0 (zero) means only single line will be drawn.\r\n\t *\r\n\t * @default 0\r\n\t * @since 4.7.7\r\n\t */\r\n\tpublic set gap(value: number) {\r\n\t\tthis.properties[\"gap\"] = value;\r\n\t\tthis.draw();\r\n\t}\r\n\r\n\t/**\r\n\t * @return gap\r\n\t */\r\n\tpublic get gap(): number {\r\n\t\treturn this.properties[\"gap\"];\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"LinePattern\"] = LinePattern;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}