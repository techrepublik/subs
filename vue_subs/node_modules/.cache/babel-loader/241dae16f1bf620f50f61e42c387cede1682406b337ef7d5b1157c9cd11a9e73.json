{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/esnext.iterator.map.js\";\nexport default function (input, digits) {\n  if (!(0 <= (digits = +digits) && digits <= 20)) throw new Error(\"invalid digits\");\n  function quantizePoint(input) {\n    var n = input.length,\n      i = 2,\n      output = new Array(n);\n    output[0] = +input[0].toFixed(digits);\n    output[1] = +input[1].toFixed(digits);\n    while (i < n) output[i] = input[i], ++i;\n    return output;\n  }\n  function quantizePoints(input) {\n    return input.map(quantizePoint);\n  }\n  function quantizePointsNoDuplicates(input) {\n    var point0 = quantizePoint(input[0]);\n    var output = [point0];\n    for (var i = 1; i < input.length; i++) {\n      var point = quantizePoint(input[i]);\n      if (point.length > 2 || point[0] != point0[0] || point[1] != point0[1]) {\n        output.push(point);\n        point0 = point;\n      }\n    }\n    if (output.length === 1 && input.length > 1) {\n      output.push(quantizePoint(input[input.length - 1]));\n    }\n    return output;\n  }\n  function quantizePolygon(input) {\n    return input.map(quantizePointsNoDuplicates);\n  }\n  function quantizeGeometry(input) {\n    if (input == null) return input;\n    var output;\n    switch (input.type) {\n      case \"GeometryCollection\":\n        output = {\n          type: \"GeometryCollection\",\n          geometries: input.geometries.map(quantizeGeometry)\n        };\n        break;\n      case \"Point\":\n        output = {\n          type: \"Point\",\n          coordinates: quantizePoint(input.coordinates)\n        };\n        break;\n      case \"MultiPoint\":\n        output = {\n          type: input.type,\n          coordinates: quantizePoints(input.coordinates)\n        };\n        break;\n      case \"LineString\":\n        output = {\n          type: input.type,\n          coordinates: quantizePointsNoDuplicates(input.coordinates)\n        };\n        break;\n      case \"MultiLineString\":\n      case \"Polygon\":\n        output = {\n          type: input.type,\n          coordinates: quantizePolygon(input.coordinates)\n        };\n        break;\n      case \"MultiPolygon\":\n        output = {\n          type: \"MultiPolygon\",\n          coordinates: input.coordinates.map(quantizePolygon)\n        };\n        break;\n      default:\n        return input;\n    }\n    if (input.bbox != null) output.bbox = input.bbox;\n    return output;\n  }\n  function quantizeFeature(input) {\n    var output = {\n      type: \"Feature\",\n      properties: input.properties,\n      geometry: quantizeGeometry(input.geometry)\n    };\n    if (input.id != null) output.id = input.id;\n    if (input.bbox != null) output.bbox = input.bbox;\n    return output;\n  }\n  if (input != null) switch (input.type) {\n    case \"Feature\":\n      return quantizeFeature(input);\n    case \"FeatureCollection\":\n      {\n        var output = {\n          type: \"FeatureCollection\",\n          features: input.features.map(quantizeFeature)\n        };\n        if (input.bbox != null) output.bbox = input.bbox;\n        return output;\n      }\n    default:\n      return quantizeGeometry(input);\n  }\n  return input;\n}","map":{"version":3,"names":["input","digits","Error","quantizePoint","n","length","i","output","Array","toFixed","quantizePoints","map","quantizePointsNoDuplicates","point0","point","push","quantizePolygon","quantizeGeometry","type","geometries","coordinates","bbox","quantizeFeature","properties","geometry","id","features"],"sources":["/Users/admin/Desktop/techrepublik/pro/subs/vue_subs/node_modules/d3-geo-projection/src/quantize.js"],"sourcesContent":["export default function(input, digits) {\n  if (!(0 <= (digits = +digits) && digits <= 20)) throw new Error(\"invalid digits\");\n\n  function quantizePoint(input) {\n    var n = input.length, i = 2, output = new Array(n);\n    output[0] = +input[0].toFixed(digits);\n    output[1] = +input[1].toFixed(digits);\n    while (i < n) output[i] = input[i], ++i;\n    return output;\n  }\n\n  function quantizePoints(input) {\n    return input.map(quantizePoint);\n  }\n\n  function quantizePointsNoDuplicates(input) {\n    var point0 = quantizePoint(input[0]);\n    var output = [point0];\n    for (var i = 1; i < input.length; i++) {\n      var point = quantizePoint(input[i]);\n      if (point.length > 2 || point[0] != point0[0] || point[1] != point0[1]) {\n        output.push(point);\n        point0 = point;\n      }\n    }\n    if (output.length === 1 && input.length > 1) {\n      output.push(quantizePoint(input[input.length - 1]));\n    }\n    return output;\n  }\n\n  function quantizePolygon(input) {\n    return input.map(quantizePointsNoDuplicates);\n  }\n\n  function quantizeGeometry(input) {\n    if (input == null) return input;\n    var output;\n    switch (input.type) {\n      case \"GeometryCollection\": output = {type: \"GeometryCollection\", geometries: input.geometries.map(quantizeGeometry)}; break;\n      case \"Point\": output = {type: \"Point\", coordinates: quantizePoint(input.coordinates)}; break;\n      case \"MultiPoint\": output = {type: input.type, coordinates: quantizePoints(input.coordinates)}; break;\n      case \"LineString\": output = {type: input.type, coordinates: quantizePointsNoDuplicates(input.coordinates)}; break;\n      case \"MultiLineString\": case \"Polygon\": output = {type: input.type, coordinates: quantizePolygon(input.coordinates)}; break;\n      case \"MultiPolygon\": output = {type: \"MultiPolygon\", coordinates: input.coordinates.map(quantizePolygon)}; break;\n      default: return input;\n    }\n    if (input.bbox != null) output.bbox = input.bbox;\n    return output;\n  }\n\n  function quantizeFeature(input) {\n    var output = {type: \"Feature\", properties: input.properties, geometry: quantizeGeometry(input.geometry)};\n    if (input.id != null) output.id = input.id;\n    if (input.bbox != null) output.bbox = input.bbox;\n    return output;\n  }\n\n  if (input != null) switch (input.type) {\n    case \"Feature\": return quantizeFeature(input);\n    case \"FeatureCollection\": {\n      var output = {type: \"FeatureCollection\", features: input.features.map(quantizeFeature)};\n      if (input.bbox != null) output.bbox = input.bbox;\n      return output;\n    }\n    default: return quantizeGeometry(input);\n  }\n\n  return input;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}