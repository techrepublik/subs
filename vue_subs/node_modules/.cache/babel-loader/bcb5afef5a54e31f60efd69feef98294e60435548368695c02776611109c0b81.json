{"ast":null,"code":"import \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.for-each.js\";\nexport default {\n  getSignedURL(file, config) {\n    let payload = {\n      filePath: file.name,\n      contentType: file.type\n    };\n    return new Promise((resolve, reject) => {\n      var fd = new FormData();\n      let request = new XMLHttpRequest(),\n        signingURL = typeof config.signingURL === 'function' ? config.signingURL(file) : config.signingURL;\n      request.open('POST', signingURL);\n      request.onload = function () {\n        if (request.status == 200) {\n          resolve(JSON.parse(request.response));\n        } else {\n          reject(request.statusText);\n        }\n      };\n      request.onerror = function (err) {\n        console.error('Network Error : Could not send request to AWS (Maybe CORS errors)');\n        reject(err);\n      };\n      if (config.withCredentials === true) {\n        request.withCredentials = true;\n      }\n      Object.entries(config.headers || {}).forEach(([name, value]) => {\n        request.setRequestHeader(name, value);\n      });\n      payload = Object.assign(payload, config.params || {});\n      Object.entries(payload).forEach(([name, value]) => {\n        fd.append(name, value);\n      });\n      request.send(fd);\n    });\n  },\n  sendFile(file, config, is_sending_s3) {\n    var handler = is_sending_s3 ? this.setResponseHandler : this.sendS3Handler;\n    return this.getSignedURL(file, config).then(response => {\n      return handler(response, file);\n    }).catch(error => {\n      return error;\n    });\n  },\n  setResponseHandler(response, file) {\n    file.s3Signature = response.signature;\n    file.s3Url = response.postEndpoint;\n  },\n  sendS3Handler(response, file) {\n    let fd = new FormData(),\n      signature = response.signature;\n    Object.keys(signature).forEach(function (key) {\n      fd.append(key, signature[key]);\n    });\n    fd.append('file', file);\n    return new Promise((resolve, reject) => {\n      let request = new XMLHttpRequest();\n      request.open('POST', response.postEndpoint);\n      request.onload = function () {\n        if (request.status == 201) {\n          var s3Error = new window.DOMParser().parseFromString(request.response, 'text/xml');\n          var successMsg = s3Error.firstChild.children[0].innerHTML;\n          resolve({\n            'success': true,\n            'message': successMsg\n          });\n        } else {\n          var s3Error = new window.DOMParser().parseFromString(request.response, 'text/xml');\n          var errMsg = s3Error.firstChild.children[0].innerHTML;\n          reject({\n            'success': false,\n            'message': errMsg + '. Request is marked as resolved when returns as status 201'\n          });\n        }\n      };\n      request.onerror = function () {\n        var s3Error = new window.DOMParser().parseFromString(request.response, 'text/xml');\n        var errMsg = s3Error.firstChild.children[1].innerHTML;\n        reject({\n          'success': false,\n          'message': errMsg\n        });\n      };\n      request.send(fd);\n    });\n  }\n};","map":{"version":3,"names":["getSignedURL","file","config","payload","filePath","name","contentType","type","Promise","resolve","reject","fd","FormData","request","XMLHttpRequest","signingURL","open","onload","status","JSON","parse","response","statusText","onerror","err","console","error","withCredentials","Object","entries","headers","forEach","value","setRequestHeader","assign","params","append","send","sendFile","is_sending_s3","handler","setResponseHandler","sendS3Handler","then","catch","s3Signature","signature","s3Url","postEndpoint","keys","key","s3Error","window","DOMParser","parseFromString","successMsg","firstChild","children","innerHTML","errMsg"],"sources":["/home/josh/Documents/projects/subs/vue_subs/node_modules/dropzone-vue3/src/services/urlsigner.js"],"sourcesContent":["export default {\n  getSignedURL (file, config) {\n    let payload = {\n      filePath: file.name,\n      contentType: file.type\n    }\n\n    return new Promise((resolve, reject) => {\n      var fd = new FormData()\n      let request = new XMLHttpRequest(),\n          signingURL = (typeof config.signingURL === 'function') ?  config.signingURL(file) : config.signingURL\n      request.open('POST', signingURL)\n      request.onload = function () {\n        if (request.status == 200) {\n          resolve(JSON.parse(request.response))\n        } else {\n          reject((request.statusText))\n        }\n      }\n      request.onerror = function (err) {\n        console.error('Network Error : Could not send request to AWS (Maybe CORS errors)')\n        reject(err)\n      }\n      if (config.withCredentials === true) {\n        request.withCredentials = true\n      }\n      Object.entries(config.headers || {}).forEach(([name, value]) => {\n        request.setRequestHeader(name, value)\n      })\n      payload = Object.assign(payload, config.params || {})\n      Object.entries(payload).forEach(([name, value]) => {\n        fd.append(name, value)\n      })\n\n      request.send(fd)\n    })\n  },\n  sendFile (file, config, is_sending_s3) {\n    var handler = (is_sending_s3) ? this.setResponseHandler : this.sendS3Handler\n\n    return this.getSignedURL(file, config)\n      .then((response) => {return handler(response, file)})\n      .catch((error) => { return error })\n  },\n  setResponseHandler (response, file) {\n    file.s3Signature = response.signature\n    file.s3Url = response.postEndpoint\n  },\n  sendS3Handler (response, file) {\n    let fd = new FormData(),\n      signature = response.signature\n\n    Object.keys(signature).forEach(function (key) {\n      fd.append(key, signature[key])\n    })\n    fd.append('file', file)\n    return new Promise((resolve, reject) => {\n      let request = new XMLHttpRequest()\n      request.open('POST', response.postEndpoint)\n      request.onload = function () {\n        if (request.status == 201) {\n          var s3Error = (new window.DOMParser()).parseFromString(request.response, 'text/xml')\n          var successMsg = s3Error.firstChild.children[0].innerHTML\n          resolve({\n            'success': true,\n            'message': successMsg\n          })\n        } else {\n          var s3Error = (new window.DOMParser()).parseFromString(request.response, 'text/xml')\n          var errMsg = s3Error.firstChild.children[0].innerHTML\n          reject({\n            'success': false,\n            'message': errMsg + '. Request is marked as resolved when returns as status 201'\n          })\n        }\n      }\n      request.onerror = function () {\n        var s3Error = (new window.DOMParser()).parseFromString(request.response, 'text/xml')\n        var errMsg = s3Error.firstChild.children[1].innerHTML\n        reject({\n          'success': false,\n          'message': errMsg\n        })\n      }\n      request.send(fd)\n    })\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}