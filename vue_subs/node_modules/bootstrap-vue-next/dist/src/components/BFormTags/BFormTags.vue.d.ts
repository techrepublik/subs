import type { Booleanish, InputType } from '../../types';
declare const _default: __VLS_WithTemplateSlots<import("vue").DefineComponent<__VLS_WithDefaults<__VLS_TypePropsToRuntimeProps<{
    addButtonText?: string | undefined;
    addButtonVariant?: keyof import("../../types").BaseButtonVariant | null | undefined;
    addOnChange?: Booleanish | undefined;
    autofocus?: Booleanish | undefined;
    disabled?: Booleanish | undefined;
    duplicateTagText?: string | undefined;
    form?: string | undefined;
    inputAttrs?: Record<string, unknown> | undefined;
    inputClass?: any;
    inputId?: string | undefined;
    inputType?: InputType | undefined;
    invalidTagText?: string | undefined;
    limit?: string | number | undefined;
    limitTagsText?: string | undefined;
    modelValue?: string[] | undefined;
    name?: string | undefined;
    noAddOnEnter?: Booleanish | undefined;
    noOuterFocus?: Booleanish | undefined;
    noTagRemove?: Booleanish | undefined;
    placeholder?: string | undefined;
    removeOnDelete?: Booleanish | undefined;
    required?: Booleanish | undefined;
    separator?: string | string[] | undefined;
    size?: keyof import("../../types").BaseSize | undefined;
    state?: Booleanish | null | undefined;
    tagClass?: any;
    tagPills?: Booleanish | undefined;
    tagRemoveLabel?: string | undefined;
    tagRemovedLabel?: string | undefined;
    tagValidator?: ((t: string) => boolean) | undefined;
    tagVariant?: keyof import("../../types").BaseColorVariant | null | undefined;
}>, {
    addButtonText: string;
    addButtonVariant: string;
    addOnChange: boolean;
    autofocus: boolean;
    disabled: boolean;
    duplicateTagText: string;
    form: undefined;
    inputAttrs: undefined;
    inputClass: undefined;
    inputId: undefined;
    inputType: string;
    invalidTagText: string;
    limit: undefined;
    limitTagsText: string;
    modelValue: () => never[];
    name: undefined;
    noAddOnEnter: boolean;
    noOuterFocus: boolean;
    noTagRemove: boolean;
    placeholder: string;
    removeOnDelete: boolean;
    required: boolean;
    separator: undefined;
    size: string;
    state: null;
    tagClass: undefined;
    tagPills: boolean;
    tagRemoveLabel: undefined;
    tagRemovedLabel: string;
    tagValidator: () => true;
    tagVariant: string;
}>, {
    blur: () => void;
    element: import("vue").Ref<HTMLInputElement | null>;
    focus: () => void;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
    input: (value: string[]) => void;
    blur: (value: FocusEvent) => void;
    focus: (value: FocusEvent) => void;
    "update:modelValue": (value: string[]) => void;
    focusin: (value: FocusEvent) => void;
    focusout: (value: FocusEvent) => void;
    "tag-state": (...args: string[][]) => void;
}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<__VLS_WithDefaults<__VLS_TypePropsToRuntimeProps<{
    addButtonText?: string | undefined;
    addButtonVariant?: keyof import("../../types").BaseButtonVariant | null | undefined;
    addOnChange?: Booleanish | undefined;
    autofocus?: Booleanish | undefined;
    disabled?: Booleanish | undefined;
    duplicateTagText?: string | undefined;
    form?: string | undefined;
    inputAttrs?: Record<string, unknown> | undefined;
    inputClass?: any;
    inputId?: string | undefined;
    inputType?: InputType | undefined;
    invalidTagText?: string | undefined;
    limit?: string | number | undefined;
    limitTagsText?: string | undefined;
    modelValue?: string[] | undefined;
    name?: string | undefined;
    noAddOnEnter?: Booleanish | undefined;
    noOuterFocus?: Booleanish | undefined;
    noTagRemove?: Booleanish | undefined;
    placeholder?: string | undefined;
    removeOnDelete?: Booleanish | undefined;
    required?: Booleanish | undefined;
    separator?: string | string[] | undefined;
    size?: keyof import("../../types").BaseSize | undefined;
    state?: Booleanish | null | undefined;
    tagClass?: any;
    tagPills?: Booleanish | undefined;
    tagRemoveLabel?: string | undefined;
    tagRemovedLabel?: string | undefined;
    tagValidator?: ((t: string) => boolean) | undefined;
    tagVariant?: keyof import("../../types").BaseColorVariant | null | undefined;
}>, {
    addButtonText: string;
    addButtonVariant: string;
    addOnChange: boolean;
    autofocus: boolean;
    disabled: boolean;
    duplicateTagText: string;
    form: undefined;
    inputAttrs: undefined;
    inputClass: undefined;
    inputId: undefined;
    inputType: string;
    invalidTagText: string;
    limit: undefined;
    limitTagsText: string;
    modelValue: () => never[];
    name: undefined;
    noAddOnEnter: boolean;
    noOuterFocus: boolean;
    noTagRemove: boolean;
    placeholder: string;
    removeOnDelete: boolean;
    required: boolean;
    separator: undefined;
    size: string;
    state: null;
    tagClass: undefined;
    tagPills: boolean;
    tagRemoveLabel: undefined;
    tagRemovedLabel: string;
    tagValidator: () => true;
    tagVariant: string;
}>>> & {
    "onUpdate:modelValue"?: ((value: string[]) => any) | undefined;
    onFocus?: ((value: FocusEvent) => any) | undefined;
    onFocusin?: ((value: FocusEvent) => any) | undefined;
    onFocusout?: ((value: FocusEvent) => any) | undefined;
    onBlur?: ((value: FocusEvent) => any) | undefined;
    onInput?: ((value: string[]) => any) | undefined;
    "onTag-state"?: ((...args: string[][]) => any) | undefined;
}, {
    name: string;
    form: string;
    disabled: Booleanish;
    placeholder: string;
    required: Booleanish;
    size: keyof import("../../types").BaseSize;
    state: Booleanish | null;
    autofocus: Booleanish;
    modelValue: string[];
    separator: string | string[];
    addButtonText: string;
    addButtonVariant: keyof import("../../types").BaseButtonVariant | null;
    addOnChange: Booleanish;
    duplicateTagText: string;
    inputAttrs: Record<string, unknown>;
    inputClass: any;
    inputId: string;
    inputType: InputType;
    invalidTagText: string;
    limit: string | number;
    limitTagsText: string;
    noAddOnEnter: Booleanish;
    noOuterFocus: Booleanish;
    noTagRemove: Booleanish;
    removeOnDelete: Booleanish;
    tagClass: any;
    tagPills: Booleanish;
    tagRemoveLabel: string;
    tagRemovedLabel: string;
    tagValidator: (t: string) => boolean;
    tagVariant: keyof import("../../types").BaseColorVariant | null;
}, {}>, Readonly<{
    'add-button-text'?: ((props: Record<string, never>) => any) | undefined;
    default?: ((props: {
        addButtonText: string;
        addButtonVariant: keyof import("../../types").BaseButtonVariant | null;
        addTag: (tag?: string | undefined) => void;
        disableAddButton: boolean;
        disabled: boolean;
        duplicateTagText: string;
        duplicateTags: string[];
        form: string | undefined;
        inputAttrs: {
            disabled: boolean;
            form: string | undefined;
            id: Readonly<import("vue").Ref<string>>;
            value: import("vue").Ref<string>;
        };
        inputHandlers: {
            input: (e: string | Event) => void;
            keydown: (e: KeyboardEvent) => void;
            change: (e: Event) => void;
        };
        inputId: Readonly<import("vue").Ref<string>>;
        inputType: InputType;
        invalidTagText: string;
        invalidTags: string[];
        isDuplicate: boolean;
        isInvalid: boolean;
        isLimitReached: boolean;
        limitTagsText: string;
        limit: number;
        noTagRemove: boolean;
        placeholder: string;
        removeTag: (tag?: string | undefined) => void;
        required: boolean;
        separator: string | string[] | undefined;
        size: keyof import("../../types").BaseSize;
        state: boolean | null;
        tagClass: any;
        tagPills: boolean;
        tagRemoveLabel: string | undefined;
        tagVariant: keyof import("../../types").BaseColorVariant | null;
        tags: string[];
    }) => any) | undefined;
    tag?: ((props: {
        tag: string;
        tagClass: any;
        tagVariant: keyof import("../../types").BaseColorVariant | null;
        tagPills: boolean;
        removeTag: (tag?: string | undefined) => void;
    }) => any) | undefined;
}>>;
export default _default;
type __VLS_NonUndefinedable<T> = T extends undefined ? never : T;
type __VLS_TypePropsToRuntimeProps<T> = {
    [K in keyof T]-?: {} extends Pick<T, K> ? {
        type: import('vue').PropType<__VLS_NonUndefinedable<T[K]>>;
    } : {
        type: import('vue').PropType<T[K]>;
        required: true;
    };
};
type __VLS_WithDefaults<P, D> = {
    [K in keyof Pick<P, keyof P>]: K extends keyof D ? __VLS_Prettify<P[K] & {
        default: D[K];
    }> : P[K];
};
type __VLS_Prettify<T> = {
    [K in keyof T]: T[K];
} & {};
type __VLS_WithTemplateSlots<T, S> = T & {
    new (): {
        $slots: S;
    };
};
